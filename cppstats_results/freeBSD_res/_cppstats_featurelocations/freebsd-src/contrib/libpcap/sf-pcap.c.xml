<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/sf-pcap.c">





























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pcap-types.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap-int.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap-common.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OS_PROTO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os-proto.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sf-pcap.h"</cpp:file></cpp:include>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_BINMODE</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_setmode(_fileno(f), _O_BINARY)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HIGHC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_BINMODE</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>setmode(f, O_BINARY)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_BINMODE</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>setmode(fileno(f), O_BINARY)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCPDUMP_MAGIC</name></cpp:macro> <cpp:value>0xa1b2c3d4</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KUZNETZOV_TCPDUMP_MAGIC</name></cpp:macro> <cpp:value>0xa1b2cd34</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMESQUITA_TCPDUMP_MAGIC</name></cpp:macro> <cpp:value>0xa1b234cd</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAVTEL_TCPDUMP_MAGIC</name></cpp:macro> <cpp:value>0xa12b3c4d</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSEC_TCPDUMP_MAGIC</name></cpp:macro> <cpp:value>0xa1b23c4d</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LT_LINKTYPE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &amp; 0x03FFFFFF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LT_LINKTYPE_EXT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &amp; 0xFC000000)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pcap_next_packet</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_pkthdr</name></name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier><modifier>*</modifier></type><name>datap</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>










<function_decl><type><specifier>static</specifier> <name>pcap_dumper_t</name> <modifier>*</modifier></type><name>pcap_dump_fopen</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<typedef>typedef <type><enum>enum <block>{
<decl><name>NOT_SWAPPED</name></decl>,
<decl><name>SWAPPED</name></decl>,
<decl><name>MAYBE_SWAPPED</name></decl>
}</block></enum></type> <name>swapped_type_t</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>PASS_THROUGH</name></decl>,
<decl><name>SCALE_UP</name></decl>,
<decl><name>SCALE_DOWN</name></decl>
}</block></enum></type> <name>tstamp_scale_type_t</name>;</typedef>

<struct>struct <name>pcap_sf</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>hdrsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>swapped_type_t</name></type> <name>lengths_swapped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tstamp_scale_type_t</name></type> <name>scale_type</name></decl>;</decl_stmt>
}</block>;</struct>





<function><type><name>pcap_t</name> <modifier>*</modifier></type>
<name>pcap_check_header</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>magic</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>u_int</name></type> <name>precision</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bpf_u_int32</name></type> <name>magic_int</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_file_header</name></name></type> <name>hdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>amt_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>swapped</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_sf</name></name> <modifier>*</modifier></type><name>ps</name></decl>;</decl_stmt>




<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>






<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>magic_int</name></expr></argument>, <argument><expr><name>magic</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>magic_int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>magic_int</name> <operator>!=</operator> <name>TCPDUMP_MAGIC</name> <operator>&amp;&amp;</operator>
<name>magic_int</name> <operator>!=</operator> <name>KUZNETZOV_TCPDUMP_MAGIC</name> <operator>&amp;&amp;</operator>
<name>magic_int</name> <operator>!=</operator> <name>NSEC_TCPDUMP_MAGIC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>magic_int</name> <operator>=</operator> <call><name>SWAPLONG</name><argument_list>(<argument><expr><name>magic_int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>magic_int</name> <operator>!=</operator> <name>TCPDUMP_MAGIC</name> <operator>&amp;&amp;</operator>
<name>magic_int</name> <operator>!=</operator> <name>KUZNETZOV_TCPDUMP_MAGIC</name> <operator>&amp;&amp;</operator>
<name>magic_int</name> <operator>!=</operator> <name>NSEC_TCPDUMP_MAGIC</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>swapped</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>magic</name></name> <operator>=</operator> <name>magic_int</name></expr>;</expr_stmt>
<expr_stmt><expr><name>amt_read</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>hdr</name><operator>)</operator> <operator>+</operator> <sizeof>sizeof <name><name>hdr</name><operator>.</operator><name>magic</name></name></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>hdr</name><operator>.</operator><name>magic</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>amt_read</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>hdr</name><operator>.</operator><name>magic</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"error reading dump file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"truncated dump file; tried to read %"</literal> <name>PRIsize</name> <literal type="string">" file header bytes, only got %"</literal> <name>PRIsize</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>amt_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>swapped</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>version_major</name></name> <operator>=</operator> <call><name>SWAPSHORT</name><argument_list>(<argument><expr><name><name>hdr</name><operator>.</operator><name>version_major</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>version_minor</name></name> <operator>=</operator> <call><name>SWAPSHORT</name><argument_list>(<argument><expr><name><name>hdr</name><operator>.</operator><name>version_minor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>thiszone</name></name> <operator>=</operator> <call><name>SWAPLONG</name><argument_list>(<argument><expr><name><name>hdr</name><operator>.</operator><name>thiszone</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>sigfigs</name></name> <operator>=</operator> <call><name>SWAPLONG</name><argument_list>(<argument><expr><name><name>hdr</name><operator>.</operator><name>sigfigs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>snaplen</name></name> <operator>=</operator> <call><name>SWAPLONG</name><argument_list>(<argument><expr><name><name>hdr</name><operator>.</operator><name>snaplen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>linktype</name></name> <operator>=</operator> <call><name>SWAPLONG</name><argument_list>(<argument><expr><name><name>hdr</name><operator>.</operator><name>linktype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>.</operator><name>version_major</name></name> <operator>&lt;</operator> <name>PCAP_VERSION_MAJOR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"archaic pcap savefile format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><operator>(</operator><name><name>hdr</name><operator>.</operator><name>version_major</name></name> <operator>==</operator> <name>PCAP_VERSION_MAJOR</name> <operator>&amp;&amp;</operator>
<name><name>hdr</name><operator>.</operator><name>version_minor</name></name> <operator>&lt;=</operator> <name>PCAP_VERSION_MINOR</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>hdr</name><operator>.</operator><name>version_major</name></name> <operator>==</operator> <literal type="number">543</literal> <operator>&amp;&amp;</operator>
<name><name>hdr</name><operator>.</operator><name>version_minor</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"unsupported pcap savefile version %u.%u"</literal></expr></argument>,
<argument><expr><name><name>hdr</name><operator>.</operator><name>version_major</name></name></expr></argument>, <argument><expr><name><name>hdr</name><operator>.</operator><name>version_minor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>pcap_open_offline_common</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>pcap_sf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>swapped</name></name> <operator>=</operator> <name>swapped</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>version_major</name></name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>version_major</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>version_minor</name></name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>version_minor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>tzoff</name></name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>thiszone</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <call><name>linktype_to_dlt</name><argument_list>(<argument><expr><call><name>LT_LINKTYPE</name><argument_list>(<argument><expr><name><name>hdr</name><operator>.</operator><name>linktype</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>linktype_ext</name></name> <operator>=</operator> <call><name>LT_LINKTYPE_EXT</name><argument_list>(<argument><expr><name><name>hdr</name><operator>.</operator><name>linktype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>=</operator> <call><name>pcap_adjust_snapshot</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name></expr></argument>, <argument><expr><name><name>hdr</name><operator>.</operator><name>snaplen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next_packet_op</name></name> <operator>=</operator> <name>pcap_next_packet</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ps</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>tstamp_precision</name></name> <operator>=</operator> <name>precision</name></expr>;</expr_stmt>





<switch>switch <condition>(<expr><name>precision</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>PCAP_TSTAMP_PRECISION_MICRO</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>magic_int</name> <operator>==</operator> <name>NSEC_TCPDUMP_MAGIC</name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>scale_type</name></name> <operator>=</operator> <name>SCALE_DOWN</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>scale_type</name></name> <operator>=</operator> <name>PASS_THROUGH</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>PCAP_TSTAMP_PRECISION_NANO</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>magic_int</name> <operator>==</operator> <name>NSEC_TCPDUMP_MAGIC</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>scale_type</name></name> <operator>=</operator> <name>PASS_THROUGH</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>





<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>scale_type</name></name> <operator>=</operator> <name>SCALE_UP</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"unknown time stamp resolution %u"</literal></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>











<switch>switch <condition>(<expr><name><name>hdr</name><operator>.</operator><name>version_major</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">2</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>.</operator><name>version_minor</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>lengths_swapped</name></name> <operator>=</operator> <name>SWAPPED</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>hdr</name><operator>.</operator><name>version_minor</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>lengths_swapped</name></name> <operator>=</operator> <name>MAYBE_SWAPPED</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>lengths_swapped</name></name> <operator>=</operator> <name>NOT_SWAPPED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">543</literal></expr>:</case>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>lengths_swapped</name></name> <operator>=</operator> <name>SWAPPED</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>lengths_swapped</name></name> <operator>=</operator> <name>NOT_SWAPPED</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>magic_int</name> <operator>==</operator> <name>KUZNETZOV_TCPDUMP_MAGIC</name></expr>)</condition> <block>{<block_content>

















<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>hdrsize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>pcap_sf_patched_pkthdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>==</operator> <name>DLT_EN10MB</name></expr>)</condition> <block>{<block_content>























<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>&lt;=</operator> <name>INT_MAX</name> <operator>-</operator> <literal type="number">14</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>+=</operator> <literal type="number">14</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>hdrsize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>pcap_sf_pkthdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></else></if_stmt>










<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>&gt;</operator> <literal type="number">2048</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>=</operator> <literal type="number">2048</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>bufsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cleanup_op</name></name> <operator>=</operator> <name>sf_cleanup</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>grow_buffer</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>u_int</name></type> <name>bufsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>bigger_buffer</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bigger_buffer</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bigger_buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>bigger_buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>=</operator> <name>bufsize</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_next_packet</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_pkthdr</name></name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_sf</name></name> <modifier>*</modifier></type><name>ps</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_sf_patched_pkthdr</name></name></type> <name>sf_hdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>rfile</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>amt_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bpf_u_int32</name></type> <name>t</name></decl>;</decl_stmt>








<expr_stmt><expr><name>amt_read</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sf_hdr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>hdrsize</name></name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>amt_read</name> <operator>!=</operator> <name><name>ps</name><operator>-&gt;</operator><name>hdrsize</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"error reading dump file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>amt_read</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"truncated dump file; tried to read %"</literal> <name>PRIsize</name> <literal type="string">" header bytes, only got %"</literal> <name>PRIsize</name></expr></argument>,
<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>hdrsize</name></name></expr></argument>, <argument><expr><name>amt_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>swapped</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>caplen</name></name> <operator>=</operator> <call><name>SWAPLONG</name><argument_list>(<argument><expr><name><name>sf_hdr</name><operator>.</operator><name>caplen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <call><name>SWAPLONG</name><argument_list>(<argument><expr><name><name>sf_hdr</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <call><name>SWAPLONG</name><argument_list>(<argument><expr><name><name>sf_hdr</name><operator>.</operator><name>ts</name><operator>.</operator><name>tv_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <call><name>SWAPLONG</name><argument_list>(<argument><expr><name><name>sf_hdr</name><operator>.</operator><name>ts</name><operator>.</operator><name>tv_usec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>caplen</name></name> <operator>=</operator> <name><name>sf_hdr</name><operator>.</operator><name>caplen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>sf_hdr</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>sf_hdr</name><operator>.</operator><name>ts</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <name><name>sf_hdr</name><operator>.</operator><name>ts</name><operator>.</operator><name>tv_usec</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>scale_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>PASS_THROUGH</name></expr>:</case>



<break>break;</break>

<case>case <expr><name>SCALE_UP</name></expr>:</case>




<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>tv_usec</name></name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SCALE_DOWN</name></expr>:</case>




<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>tv_usec</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>


<switch>switch <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>lengths_swapped</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>NOT_SWAPPED</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>MAYBE_SWAPPED</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>caplen</name></name> <operator>&lt;=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>




<break>break;</break>
</block_content>}</block></if></if_stmt>


<case>case <expr><name>SWAPPED</name></expr>:</case>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>caplen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>caplen</name></name> <operator>=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>




<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>caplen</name></name> <operator>&gt;</operator> <call><name>max_snaplen_for_dlt</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>








<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>caplen</name></name> <operator>&gt;</operator> <operator>(</operator><name>bpf_u_int32</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"invalid packet capture length %u, bigger than "</literal>
<literal type="string">"snaplen of %d"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>caplen</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"invalid packet capture length %u, bigger than "</literal>
<literal type="string">"maximum of %u"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>caplen</name></name></expr></argument>,
<argument><expr><call><name>max_snaplen_for_dlt</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>caplen</name></name> <operator>&gt;</operator> <operator>(</operator><name>bpf_u_int32</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name></expr>)</condition> <block>{<block_content>


































<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_to_discard</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_to_read</name></decl>, <decl><type ref="prev"/><name>bytes_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>discard_buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>caplen</name></name> <operator>&gt;</operator> <name><name>p</name><operator>-&gt;</operator><name>bufsize</name></name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>grow_buffer</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>amt_read</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>amt_read</name> <operator>!=</operator> <operator>(</operator><name>bpf_u_int32</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"error reading dump file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>







<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"truncated dump file; tried to read %u captured bytes, only got %"</literal> <name>PRIsize</name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name></expr></argument>, <argument><expr><name>amt_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>bytes_to_discard</name> <operator>=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>caplen</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <name>amt_read</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>bytes_to_discard</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bytes_to_read</name> <operator>=</operator> <name>bytes_to_discard</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_to_read</name> <operator>&gt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>discard_buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bytes_to_read</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>discard_buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>amt_read</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name>discard_buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>bytes_to_read</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes_read</name> <operator>+=</operator> <name>amt_read</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>amt_read</name> <operator>!=</operator> <name>bytes_to_read</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"error reading dump file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"truncated dump file; tried to read %u captured bytes, only got %"</literal> <name>PRIsize</name></expr></argument>,
<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>caplen</name></name></expr></argument>, <argument><expr><name>bytes_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bytes_to_discard</name> <operator>-=</operator> <name>amt_read</name></expr>;</expr_stmt>
</block_content>}</block></while>





<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>caplen</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>caplen</name></name> <operator>&gt;</operator> <name><name>p</name><operator>-&gt;</operator><name>bufsize</name></name></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><name>u_int</name></type> <name>new_bufsize</name></decl>;</decl_stmt>

<expr_stmt><expr><name>new_bufsize</name> <operator>=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>caplen</name></name></expr>;</expr_stmt>



<expr_stmt><expr><name>new_bufsize</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>new_bufsize</name> <operator>|=</operator> <name>new_bufsize</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>new_bufsize</name> <operator>|=</operator> <name>new_bufsize</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>new_bufsize</name> <operator>|=</operator> <name>new_bufsize</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>new_bufsize</name> <operator>|=</operator> <name>new_bufsize</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>new_bufsize</name> <operator>|=</operator> <name>new_bufsize</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>new_bufsize</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_bufsize</name> <operator>&gt;</operator> <operator>(</operator><name>u_int</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_bufsize</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>grow_buffer</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>new_bufsize</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>amt_read</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>caplen</name></name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>amt_read</name> <operator>!=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>caplen</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"error reading dump file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"truncated dump file; tried to read %u captured bytes, only got %"</literal> <name>PRIsize</name></expr></argument>,
<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>caplen</name></name></expr></argument>, <argument><expr><name>amt_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>swapped</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>swap_pseudo_headers</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>sf_write_header</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linktype</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thiszone</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>snaplen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_file_header</name></name></type> <name>hdr</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>magic</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>tstamp_precision</name></name> <operator>==</operator> <name>PCAP_TSTAMP_PRECISION_NANO</name></expr> ?</condition><then> <expr><name>NSEC_TCPDUMP_MAGIC</name></expr> </then><else>: <expr><name>TCPDUMP_MAGIC</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>version_major</name></name> <operator>=</operator> <name>PCAP_VERSION_MAJOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>version_minor</name></name> <operator>=</operator> <name>PCAP_VERSION_MINOR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>thiszone</name></name> <operator>=</operator> <name>thiszone</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>snaplen</name></name> <operator>=</operator> <name>snaplen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>sigfigs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>linktype</name></name> <operator>=</operator> <name>linktype</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>hdr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>pcap_dump</name><parameter_list>(<parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pcap_pkthdr</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_sf_pkthdr</name></name></type> <name>sf_hdr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator><name>user</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sf_hdr</name><operator>.</operator><name>ts</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sf_hdr</name><operator>.</operator><name>ts</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>tv_usec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sf_hdr</name><operator>.</operator><name>caplen</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>caplen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sf_hdr</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fwrite</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sf_hdr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sf_hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fwrite</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>caplen</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>pcap_dumper_t</name> <modifier>*</modifier></type>
<name>pcap_setup_dump</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linktype</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call></expr></cpp:if>







<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>stdout</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SET_BINMODE</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setvbuf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>_IONBF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>sf_write_header</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>linktype</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>tzoff</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Can't write to %s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>!=</operator> <name>stdout</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>pcap_dumper_t</name> <operator>*</operator><operator>)</operator><name>f</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>pcap_dumper_t</name> <modifier>*</modifier></type>
<name>pcap_dump_open</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linktype</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>activated</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"%s: not-yet-activated pcap_t passed to pcap_dump_open"</literal></expr></argument>,
<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>linktype</name> <operator>=</operator> <call><name>dlt_to_linktype</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>linktype</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"%s: link-layer type %d isn't supported in savefiles"</literal></expr></argument>,
<argument><expr><name>fname</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>linktype</name> <operator>|=</operator> <name><name>p</name><operator>-&gt;</operator><name>linktype_ext</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"A null pointer was supplied as the file name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>fname</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fname</name> <operator>=</operator> <literal type="string">"standard output"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>






<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><call><name>pcap_setup_dump</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>linktype</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>pcap_dumper_t</name> <modifier>*</modifier></type>
<name>pcap_dump_hopen</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>osfd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>_open_osfhandle</name><argument_list>(<argument><expr><name>osfd</name></expr></argument>, <argument><expr><name>_O_APPEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"_open_osfhandle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>_fdopen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"_fdopen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>pcap_dump_fopen</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>pcap_dumper_t</name> <modifier>*</modifier></type>
<name>pcap_dump_fopen</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>linktype</name></decl>;</decl_stmt>

<expr_stmt><expr><name>linktype</name> <operator>=</operator> <call><name>dlt_to_linktype</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>linktype</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"stream: link-layer type %d isn't supported in savefiles"</literal></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>linktype</name> <operator>|=</operator> <name><name>p</name><operator>-&gt;</operator><name>linktype_ext</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>pcap_setup_dump</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>linktype</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"stream"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>pcap_dumper_t</name> <modifier>*</modifier></type>
<name>pcap_dump_open_append</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linktype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>amt_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_file_header</name></name></type> <name>ph</name></decl>;</decl_stmt>

<expr_stmt><expr><name>linktype</name> <operator>=</operator> <call><name>dlt_to_linktype</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>linktype</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"%s: link-layer type %d isn't supported in savefiles"</literal></expr></argument>,
<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>linktype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"A null pointer was supplied as the file name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>fname</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>pcap_setup_dump</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>linktype</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"standard output"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>














<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"ab+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>













<if_stmt><if>if <condition>(<expr><call><name>fseek</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Can't seek to the beginning of %s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>amt_read</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ph</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ph</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>amt_read</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ph</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>feof</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>amt_read</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"%s: truncated pcap file header"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call></expr></cpp:if>




<expr_stmt><expr><call><name>setvbuf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>_IONBF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>













<if_stmt><if>if <condition>(<expr><name>amt_read</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<switch>switch <condition>(<expr><name><name>ph</name><operator>.</operator><name>magic</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TCPDUMP_MAGIC</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>tstamp_precision</name></name> <operator>!=</operator> <name>PCAP_TSTAMP_PRECISION_MICRO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"%s: different time stamp precision, cannot append to file"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>NSEC_TCPDUMP_MAGIC</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>tstamp_precision</name></name> <operator>!=</operator> <name>PCAP_TSTAMP_PRECISION_NANO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"%s: different time stamp precision, cannot append to file"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><call><name>SWAPLONG</name><argument_list>(<argument><expr><name>TCPDUMP_MAGIC</name></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>SWAPLONG</name><argument_list>(<argument><expr><name>NSEC_TCPDUMP_MAGIC</name></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"%s: different byte order, cannot append to file"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>

<case>case <expr><name>KUZNETZOV_TCPDUMP_MAGIC</name></expr>:</case>
<case>case <expr><call><name>SWAPLONG</name><argument_list>(<argument><expr><name>KUZNETZOV_TCPDUMP_MAGIC</name></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><name>NAVTEL_TCPDUMP_MAGIC</name></expr>:</case>
<case>case <expr><call><name>SWAPLONG</name><argument_list>(<argument><expr><name>NAVTEL_TCPDUMP_MAGIC</name></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"%s: not a pcap file to which we can append"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>

<default>default:</default>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"%s: not a pcap file"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>




<if_stmt><if>if <condition>(<expr><name><name>ph</name><operator>.</operator><name>version_major</name></name> <operator>!=</operator> <name>PCAP_VERSION_MAJOR</name> <operator>||</operator>
<name><name>ph</name><operator>.</operator><name>version_minor</name></name> <operator>!=</operator> <name>PCAP_VERSION_MINOR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"%s: version is %u.%u, cannot append to file"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>,
<argument><expr><name><name>ph</name><operator>.</operator><name>version_major</name></name></expr></argument>, <argument><expr><name><name>ph</name><operator>.</operator><name>version_minor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bpf_u_int32</name><operator>)</operator><name>linktype</name> <operator>!=</operator> <name><name>ph</name><operator>.</operator><name>linktype</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"%s: different linktype, cannot append to file"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bpf_u_int32</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>!=</operator> <name><name>ph</name><operator>.</operator><name>snaplen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"%s: different snaplen, cannot append to file"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>sf_write_header</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>linktype</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>tzoff</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Can't write to %s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>








<if_stmt><if>if <condition>(<expr><call><name>fseek</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Can't seek to the end of %s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>pcap_dumper_t</name> <operator>*</operator><operator>)</operator><name>f</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>FILE</name> <modifier>*</modifier></type>
<name>pcap_dump_file</name><parameter_list>(<parameter><decl><type><name>pcap_dumper_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator><name>p</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>long</name></type>
<name>pcap_dump_ftell</name><parameter_list>(<parameter><decl><type><name>pcap_dumper_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>ftell</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FSEEKO</name></expr></argument>)</argument_list></call></expr></cpp:if>






<function><type><name>int64_t</name></type>
<name>pcap_dump_ftell64</name><parameter_list>(<parameter><decl><type><name>pcap_dumper_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>ftello</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:elif>




<function><type><name>int64_t</name></type>
<name>pcap_dump_ftell64</name><parameter_list>(<parameter><decl><type><name>pcap_dumper_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>_ftelli64</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>









<function><type><name>int64_t</name></type>
<name>pcap_dump_ftell64</name><parameter_list>(<parameter><decl><type><name>pcap_dumper_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>ftell</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>
<name>pcap_dump_flush</name><parameter_list>(<parameter><decl><type><name>pcap_dumper_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>fflush</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pcap_dump_close</name><parameter_list>(<parameter><decl><type><name>pcap_dumper_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>notyet</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>-</operator><name>an</name><operator>-</operator><name>error</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fclose</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
