<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/bpf_filter.c">







































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pcap/pcap-inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap-types.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pcap-int.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int32</name></cpp:macro> <cpp:value>bpf_int32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>u_int32</name></cpp:macro> <cpp:value>bpf_u_int32</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LBL_ALIGN</name></expr></argument>)</argument_list></call></expr></cpp:if>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>sparc</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__sparc__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>mips</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ibm032</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__alpha</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__hpux</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LBL_ALIGN</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LBL_ALIGN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_SHORT</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((u_short)ntohs(*(u_short *)p))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_LONG</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ntohl(*(u_int32 *)p))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_SHORT</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>((u_short)((u_short)*((u_char *)p+0)&lt;&lt;8|(u_short)*((u_char *)p+1)&lt;&lt;0))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_LONG</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>((u_int32)*((u_char *)p+0)&lt;&lt;24|(u_int32)*((u_char *)p+1)&lt;&lt;16|(u_int32)*((u_char *)p+2)&lt;&lt;8|(u_int32)*((u_char *)p+3)&lt;&lt;0)</cpp:value></cpp:define>




<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/if_packet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/filter.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<enum>enum <block>{
<decl><name>BPF_S_ANC_NONE</name></decl>,
<decl><name>BPF_S_ANC_VLAN_TAG</name></decl>,
<decl><name>BPF_S_ANC_VLAN_TAG_PRESENT</name></decl>,
}</block>;</enum>













<function><type><name>u_int</name></type>
<name>bpf_filter_with_aux_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bpf_insn</name></name> <modifier>*</modifier></type><name>pc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name>u_int</name></type> <name>wirelen</name></decl></parameter>, <parameter><decl><type><name>u_int</name></type> <name>buflen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bpf_aux_data</name></name> <modifier>*</modifier></type><name>aux_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>u_int32</name></type> <name>A</name></decl>, <decl><type ref="prev"/><name>X</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>bpf_u_int32</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int32</name></type> <name><name>mem</name><index>[<expr><name>BPF_MEMWORDS</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>



<return>return <expr><operator>(</operator><name>u_int</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>A</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>X</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>pc</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>pc</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition> <block>{<block_content>

<default>default:</default>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>BPF_RET</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<return>return <expr><operator>(</operator><name>u_int</name><operator>)</operator><name><name>pc</name><operator>-&gt;</operator><name>k</name></name></expr>;</return>

<case>case <expr><name>BPF_RET</name><operator>|</operator><name>BPF_A</name></expr>:</case>
<return>return <expr><operator>(</operator><name>u_int</name><operator>)</operator><name>A</name></expr>;</return>

<case>case <expr><name>BPF_LD</name><operator>|</operator><name>BPF_W</name><operator>|</operator><name>BPF_ABS</name></expr>:</case>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>k</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <name>buflen</name> <operator>||</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name>buflen</name> <operator>-</operator> <name>k</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>EXTRACT_LONG</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_LD</name><operator>|</operator><name>BPF_H</name><operator>|</operator><name>BPF_ABS</name></expr>:</case>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>k</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <name>buflen</name> <operator>||</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name>buflen</name> <operator>-</operator> <name>k</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>EXTRACT_SHORT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_LD</name><operator>|</operator><name>BPF_B</name><operator>|</operator><name>BPF_ABS</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>k</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SKF_AD_VLAN_TAG_PRESENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>SKF_AD_OFF</name> <operator>+</operator> <name>SKF_AD_VLAN_TAG</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>aux_data</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>A</name> <operator>=</operator> <name><name>aux_data</name><operator>-&gt;</operator><name>vlan_tag</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SKF_AD_OFF</name> <operator>+</operator> <name>SKF_AD_VLAN_TAG_PRESENT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>aux_data</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>A</name> <operator>=</operator> <name><name>aux_data</name><operator>-&gt;</operator><name>vlan_tag_present</name></name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>k</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <name>buflen</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>A</name> <operator>=</operator> <name><name>p</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<continue>continue;</continue>

<case>case <expr><name>BPF_LD</name><operator>|</operator><name>BPF_W</name><operator>|</operator><name>BPF_LEN</name></expr>:</case>
<expr_stmt><expr><name>A</name> <operator>=</operator> <name>wirelen</name></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_LDX</name><operator>|</operator><name>BPF_W</name><operator>|</operator><name>BPF_LEN</name></expr>:</case>
<expr_stmt><expr><name>X</name> <operator>=</operator> <name>wirelen</name></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_LD</name><operator>|</operator><name>BPF_W</name><operator>|</operator><name>BPF_IND</name></expr>:</case>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name>X</name> <operator>+</operator> <name><name>pc</name><operator>-&gt;</operator><name>k</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>k</name></name> <operator>&gt;</operator> <name>buflen</name> <operator>||</operator> <name>X</name> <operator>&gt;</operator> <name>buflen</name> <operator>-</operator> <name><name>pc</name><operator>-&gt;</operator><name>k</name></name> <operator>||</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name>buflen</name> <operator>-</operator> <name>k</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>EXTRACT_LONG</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_LD</name><operator>|</operator><name>BPF_H</name><operator>|</operator><name>BPF_IND</name></expr>:</case>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name>X</name> <operator>+</operator> <name><name>pc</name><operator>-&gt;</operator><name>k</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>X</name> <operator>&gt;</operator> <name>buflen</name> <operator>||</operator> <name><name>pc</name><operator>-&gt;</operator><name>k</name></name> <operator>&gt;</operator> <name>buflen</name> <operator>-</operator> <name>X</name> <operator>||</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name>buflen</name> <operator>-</operator> <name>k</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>EXTRACT_SHORT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_LD</name><operator>|</operator><name>BPF_B</name><operator>|</operator><name>BPF_IND</name></expr>:</case>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name>X</name> <operator>+</operator> <name><name>pc</name><operator>-&gt;</operator><name>k</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>k</name></name> <operator>&gt;=</operator> <name>buflen</name> <operator>||</operator> <name>X</name> <operator>&gt;=</operator> <name>buflen</name> <operator>-</operator> <name><name>pc</name><operator>-&gt;</operator><name>k</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>A</name> <operator>=</operator> <name><name>p</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_LDX</name><operator>|</operator><name>BPF_MSH</name><operator>|</operator><name>BPF_B</name></expr>:</case>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>k</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <name>buflen</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>X</name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><name><name>pc</name><operator>-&gt;</operator><name>k</name></name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_LD</name><operator>|</operator><name>BPF_IMM</name></expr>:</case>
<expr_stmt><expr><name>A</name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>k</name></name></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_LDX</name><operator>|</operator><name>BPF_IMM</name></expr>:</case>
<expr_stmt><expr><name>X</name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>k</name></name></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_LD</name><operator>|</operator><name>BPF_MEM</name></expr>:</case>
<expr_stmt><expr><name>A</name> <operator>=</operator> <name><name>mem</name><index>[<expr><name><name>pc</name><operator>-&gt;</operator><name>k</name></name></expr>]</index></name></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_LDX</name><operator>|</operator><name>BPF_MEM</name></expr>:</case>
<expr_stmt><expr><name>X</name> <operator>=</operator> <name><name>mem</name><index>[<expr><name><name>pc</name><operator>-&gt;</operator><name>k</name></name></expr>]</index></name></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_ST</name></expr>:</case>
<expr_stmt><expr><name><name>mem</name><index>[<expr><name><name>pc</name><operator>-&gt;</operator><name>k</name></name></expr>]</index></name> <operator>=</operator> <name>A</name></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_STX</name></expr>:</case>
<expr_stmt><expr><name><name>mem</name><index>[<expr><name><name>pc</name><operator>-&gt;</operator><name>k</name></name></expr>]</index></name> <operator>=</operator> <name>X</name></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_JMP</name><operator>|</operator><name>BPF_JA</name></expr>:</case>




<expr_stmt><expr><name>pc</name> <operator>+=</operator> <operator>(</operator><name>bpf_int32</name><operator>)</operator><name><name>pc</name><operator>-&gt;</operator><name>k</name></name></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_JMP</name><operator>|</operator><name>BPF_JGT</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<expr_stmt><expr><name>pc</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>A</name> <operator>&gt;</operator> <name><name>pc</name><operator>-&gt;</operator><name>k</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>pc</name><operator>-&gt;</operator><name>jt</name></name></expr> </then><else>: <expr><name><name>pc</name><operator>-&gt;</operator><name>jf</name></name></expr></else></ternary></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_JMP</name><operator>|</operator><name>BPF_JGE</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<expr_stmt><expr><name>pc</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>A</name> <operator>&gt;=</operator> <name><name>pc</name><operator>-&gt;</operator><name>k</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>pc</name><operator>-&gt;</operator><name>jt</name></name></expr> </then><else>: <expr><name><name>pc</name><operator>-&gt;</operator><name>jf</name></name></expr></else></ternary></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_JMP</name><operator>|</operator><name>BPF_JEQ</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<expr_stmt><expr><name>pc</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>A</name> <operator>==</operator> <name><name>pc</name><operator>-&gt;</operator><name>k</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>pc</name><operator>-&gt;</operator><name>jt</name></name></expr> </then><else>: <expr><name><name>pc</name><operator>-&gt;</operator><name>jf</name></name></expr></else></ternary></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_JMP</name><operator>|</operator><name>BPF_JSET</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<expr_stmt><expr><name>pc</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>A</name> <operator>&amp;</operator> <name><name>pc</name><operator>-&gt;</operator><name>k</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>pc</name><operator>-&gt;</operator><name>jt</name></name></expr> </then><else>: <expr><name><name>pc</name><operator>-&gt;</operator><name>jf</name></name></expr></else></ternary></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_JMP</name><operator>|</operator><name>BPF_JGT</name><operator>|</operator><name>BPF_X</name></expr>:</case>
<expr_stmt><expr><name>pc</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>A</name> <operator>&gt;</operator> <name>X</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>pc</name><operator>-&gt;</operator><name>jt</name></name></expr> </then><else>: <expr><name><name>pc</name><operator>-&gt;</operator><name>jf</name></name></expr></else></ternary></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_JMP</name><operator>|</operator><name>BPF_JGE</name><operator>|</operator><name>BPF_X</name></expr>:</case>
<expr_stmt><expr><name>pc</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>A</name> <operator>&gt;=</operator> <name>X</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>pc</name><operator>-&gt;</operator><name>jt</name></name></expr> </then><else>: <expr><name><name>pc</name><operator>-&gt;</operator><name>jf</name></name></expr></else></ternary></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_JMP</name><operator>|</operator><name>BPF_JEQ</name><operator>|</operator><name>BPF_X</name></expr>:</case>
<expr_stmt><expr><name>pc</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>A</name> <operator>==</operator> <name>X</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>pc</name><operator>-&gt;</operator><name>jt</name></name></expr> </then><else>: <expr><name><name>pc</name><operator>-&gt;</operator><name>jf</name></name></expr></else></ternary></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_JMP</name><operator>|</operator><name>BPF_JSET</name><operator>|</operator><name>BPF_X</name></expr>:</case>
<expr_stmt><expr><name>pc</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>A</name> <operator>&amp;</operator> <name>X</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>pc</name><operator>-&gt;</operator><name>jt</name></name></expr> </then><else>: <expr><name><name>pc</name><operator>-&gt;</operator><name>jf</name></name></expr></else></ternary></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_ADD</name><operator>|</operator><name>BPF_X</name></expr>:</case>
<expr_stmt><expr><name>A</name> <operator>+=</operator> <name>X</name></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_SUB</name><operator>|</operator><name>BPF_X</name></expr>:</case>
<expr_stmt><expr><name>A</name> <operator>-=</operator> <name>X</name></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_MUL</name><operator>|</operator><name>BPF_X</name></expr>:</case>
<expr_stmt><expr><name>A</name> <operator>*=</operator> <name>X</name></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_DIV</name><operator>|</operator><name>BPF_X</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>X</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>A</name> <operator>/=</operator> <name>X</name></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_MOD</name><operator>|</operator><name>BPF_X</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>X</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>A</name> <operator>%=</operator> <name>X</name></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_AND</name><operator>|</operator><name>BPF_X</name></expr>:</case>
<expr_stmt><expr><name>A</name> <operator>&amp;=</operator> <name>X</name></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_OR</name><operator>|</operator><name>BPF_X</name></expr>:</case>
<expr_stmt><expr><name>A</name> <operator>|=</operator> <name>X</name></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_XOR</name><operator>|</operator><name>BPF_X</name></expr>:</case>
<expr_stmt><expr><name>A</name> <operator>^=</operator> <name>X</name></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_LSH</name><operator>|</operator><name>BPF_X</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>X</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>A</name> <operator>&lt;&lt;=</operator> <name>X</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>A</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_RSH</name><operator>|</operator><name>BPF_X</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>X</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>A</name> <operator>&gt;&gt;=</operator> <name>X</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>A</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_ADD</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<expr_stmt><expr><name>A</name> <operator>+=</operator> <name><name>pc</name><operator>-&gt;</operator><name>k</name></name></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_SUB</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<expr_stmt><expr><name>A</name> <operator>-=</operator> <name><name>pc</name><operator>-&gt;</operator><name>k</name></name></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_MUL</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<expr_stmt><expr><name>A</name> <operator>*=</operator> <name><name>pc</name><operator>-&gt;</operator><name>k</name></name></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_DIV</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<expr_stmt><expr><name>A</name> <operator>/=</operator> <name><name>pc</name><operator>-&gt;</operator><name>k</name></name></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_MOD</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<expr_stmt><expr><name>A</name> <operator>%=</operator> <name><name>pc</name><operator>-&gt;</operator><name>k</name></name></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_AND</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<expr_stmt><expr><name>A</name> <operator>&amp;=</operator> <name><name>pc</name><operator>-&gt;</operator><name>k</name></name></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_OR</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<expr_stmt><expr><name>A</name> <operator>|=</operator> <name><name>pc</name><operator>-&gt;</operator><name>k</name></name></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_XOR</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<expr_stmt><expr><name>A</name> <operator>^=</operator> <name><name>pc</name><operator>-&gt;</operator><name>k</name></name></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_LSH</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<expr_stmt><expr><name>A</name> <operator>&lt;&lt;=</operator> <name><name>pc</name><operator>-&gt;</operator><name>k</name></name></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_RSH</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<expr_stmt><expr><name>A</name> <operator>&gt;&gt;=</operator> <name><name>pc</name><operator>-&gt;</operator><name>k</name></name></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_NEG</name></expr>:</case>








<expr_stmt><expr><name>A</name> <operator>=</operator> <operator>(</operator><literal type="number">0U</literal> <operator>-</operator> <name>A</name><operator>)</operator></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_MISC</name><operator>|</operator><name>BPF_TAX</name></expr>:</case>
<expr_stmt><expr><name>X</name> <operator>=</operator> <name>A</name></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>BPF_MISC</name><operator>|</operator><name>BPF_TXA</name></expr>:</case>
<expr_stmt><expr><name>A</name> <operator>=</operator> <name>X</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>u_int</name></type>
<name>bpf_filter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bpf_insn</name></name> <modifier>*</modifier></type><name>pc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>u_int</name></type> <name>wirelen</name></decl></parameter>,
<parameter><decl><type><name>u_int</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>bpf_filter_with_aux_data</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>wirelen</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><name>int</name></type>
<name>bpf_validate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bpf_insn</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>from</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bpf_insn</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>u_int</name><operator>)</operator><name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>BPF_CLASS</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<case>case <expr><name>BPF_LD</name></expr>:</case>
<case>case <expr><name>BPF_LDX</name></expr>:</case>
<switch>switch <condition>(<expr><call><name>BPF_MODE</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BPF_IMM</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>BPF_ABS</name></expr>:</case>
<case>case <expr><name>BPF_IND</name></expr>:</case>
<case>case <expr><name>BPF_MSH</name></expr>:</case>





<break>break;</break>
<case>case <expr><name>BPF_MEM</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name> <operator>&gt;=</operator> <name>BPF_MEMWORDS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>BPF_LEN</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>BPF_ST</name></expr>:</case>
<case>case <expr><name>BPF_STX</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name> <operator>&gt;=</operator> <name>BPF_MEMWORDS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>BPF_ALU</name></expr>:</case>
<switch>switch <condition>(<expr><call><name>BPF_OP</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BPF_ADD</name></expr>:</case>
<case>case <expr><name>BPF_SUB</name></expr>:</case>
<case>case <expr><name>BPF_MUL</name></expr>:</case>
<case>case <expr><name>BPF_OR</name></expr>:</case>
<case>case <expr><name>BPF_AND</name></expr>:</case>
<case>case <expr><name>BPF_XOR</name></expr>:</case>
<case>case <expr><name>BPF_LSH</name></expr>:</case>
<case>case <expr><name>BPF_RSH</name></expr>:</case>
<case>case <expr><name>BPF_NEG</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>BPF_DIV</name></expr>:</case>
<case>case <expr><name>BPF_MOD</name></expr>:</case>




<if_stmt><if>if <condition>(<expr><call><name>BPF_SRC</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BPF_K</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>k</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>BPF_JMP</name></expr>:</case>


























<expr_stmt><expr><name>from</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>BPF_OP</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BPF_JA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>from</name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>k</name></name> <operator>&gt;=</operator> <operator>(</operator><name>u_int</name><operator>)</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>BPF_JEQ</name></expr>:</case>
<case>case <expr><name>BPF_JGT</name></expr>:</case>
<case>case <expr><name>BPF_JGE</name></expr>:</case>
<case>case <expr><name>BPF_JSET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>from</name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>jt</name></name> <operator>&gt;=</operator> <operator>(</operator><name>u_int</name><operator>)</operator><name>len</name> <operator>||</operator> <name>from</name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>jf</name></name> <operator>&gt;=</operator> <operator>(</operator><name>u_int</name><operator>)</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>BPF_RET</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>BPF_MISC</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></for>
<return>return <expr><call><name>BPF_CLASS</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>code</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BPF_RET</name></expr>;</return>
</block_content>}</block></function>
</unit>
