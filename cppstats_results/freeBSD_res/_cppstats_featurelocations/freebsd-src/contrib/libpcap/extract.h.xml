<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/extract.h">




















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pcap/pcap-inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pcap/compiler-tests.h&gt;</cpp:file></cpp:include>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LBL_ALIGN</name></expr></argument>)</argument_list></call></expr></cpp:if>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>PCAP_IS_AT_LEAST_GNUC_VERSION</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__alpha</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__alpha__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__mips</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__mips__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>






















































<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>val</name></decl>;</decl_stmt>
}</block></struct></type> <name>__attribute__</name>((<name>packed</name>)) <name>unaligned_uint16_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>val</name></decl>;</decl_stmt>
}</block></struct></type> <name>__attribute__</name>((<name>packed</name>)) <name>unaligned_uint32_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint16_t</name></type>
<name>EXTRACT_16BITS</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><call><name>ntohs</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unaligned_uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>p</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>val</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>EXTRACT_32BITS</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>ntohl</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unaligned_uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>p</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>val</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type>
<name>EXTRACT_64BITS</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>ntohl</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unaligned_uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>p</name><operator>)</operator> <operator>+</operator> <literal type="number">0</literal><operator>)</operator><operator>-&gt;</operator><name>val</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>|</operator> \
<operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>ntohl</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unaligned_uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>p</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>-&gt;</operator><name>val</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_16BITS</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint16_t)(((uint16_t)(*((const uint8_t *)(p) + 0)) &lt;&lt; 8) | ((uint16_t)(*((const uint8_t *)(p) + 1)) &lt;&lt; 0)))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_32BITS</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint32_t)(((uint32_t)(*((const uint8_t *)(p) + 0)) &lt;&lt; 24) | ((uint32_t)(*((const uint8_t *)(p) + 1)) &lt;&lt; 16) | ((uint32_t)(*((const uint8_t *)(p) + 2)) &lt;&lt; 8) | ((uint32_t)(*((const uint8_t *)(p) + 3)) &lt;&lt; 0)))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_64BITS</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint64_t)(((uint64_t)(*((const uint8_t *)(p) + 0)) &lt;&lt; 56) | ((uint64_t)(*((const uint8_t *)(p) + 1)) &lt;&lt; 48) | ((uint64_t)(*((const uint8_t *)(p) + 2)) &lt;&lt; 40) | ((uint64_t)(*((const uint8_t *)(p) + 3)) &lt;&lt; 32) | ((uint64_t)(*((const uint8_t *)(p) + 4)) &lt;&lt; 24) | ((uint64_t)(*((const uint8_t *)(p) + 5)) &lt;&lt; 16) | ((uint64_t)(*((const uint8_t *)(p) + 6)) &lt;&lt; 8) | ((uint64_t)(*((const uint8_t *)(p) + 7)) &lt;&lt; 0)))</cpp:value></cpp:define>








<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint16_t</name></type>
<name>EXTRACT_16BITS</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><call><name>ntohs</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>p</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>EXTRACT_32BITS</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>ntohl</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>p</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type>
<name>EXTRACT_64BITS</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>ntohl</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>p</name><operator>)</operator> <operator>+</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>|</operator> \
<operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>ntohl</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>p</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_24BITS</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint32_t)(((uint32_t)(*((const uint8_t *)(p) + 0)) &lt;&lt; 16) | ((uint32_t)(*((const uint8_t *)(p) + 1)) &lt;&lt; 8) | ((uint32_t)(*((const uint8_t *)(p) + 2)) &lt;&lt; 0)))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_40BITS</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint64_t)(((uint64_t)(*((const uint8_t *)(p) + 0)) &lt;&lt; 32) | ((uint64_t)(*((const uint8_t *)(p) + 1)) &lt;&lt; 24) | ((uint64_t)(*((const uint8_t *)(p) + 2)) &lt;&lt; 16) | ((uint64_t)(*((const uint8_t *)(p) + 3)) &lt;&lt; 8) | ((uint64_t)(*((const uint8_t *)(p) + 4)) &lt;&lt; 0)))</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_48BITS</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint64_t)(((uint64_t)(*((const uint8_t *)(p) + 0)) &lt;&lt; 40) | ((uint64_t)(*((const uint8_t *)(p) + 1)) &lt;&lt; 32) | ((uint64_t)(*((const uint8_t *)(p) + 2)) &lt;&lt; 24) | ((uint64_t)(*((const uint8_t *)(p) + 3)) &lt;&lt; 16) | ((uint64_t)(*((const uint8_t *)(p) + 4)) &lt;&lt; 8) | ((uint64_t)(*((const uint8_t *)(p) + 5)) &lt;&lt; 0)))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_56BITS</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint64_t)(((uint64_t)(*((const uint8_t *)(p) + 0)) &lt;&lt; 48) | ((uint64_t)(*((const uint8_t *)(p) + 1)) &lt;&lt; 40) | ((uint64_t)(*((const uint8_t *)(p) + 2)) &lt;&lt; 32) | ((uint64_t)(*((const uint8_t *)(p) + 3)) &lt;&lt; 24) | ((uint64_t)(*((const uint8_t *)(p) + 4)) &lt;&lt; 16) | ((uint64_t)(*((const uint8_t *)(p) + 5)) &lt;&lt; 8) | ((uint64_t)(*((const uint8_t *)(p) + 6)) &lt;&lt; 0)))</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_LE_8BITS</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(p))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_LE_16BITS</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint16_t)(((uint16_t)(*((const uint8_t *)(p) + 1)) &lt;&lt; 8) | ((uint16_t)(*((const uint8_t *)(p) + 0)) &lt;&lt; 0)))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_LE_32BITS</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint32_t)(((uint32_t)(*((const uint8_t *)(p) + 3)) &lt;&lt; 24) | ((uint32_t)(*((const uint8_t *)(p) + 2)) &lt;&lt; 16) | ((uint32_t)(*((const uint8_t *)(p) + 1)) &lt;&lt; 8) | ((uint32_t)(*((const uint8_t *)(p) + 0)) &lt;&lt; 0)))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_LE_24BITS</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint32_t)(((uint32_t)(*((const uint8_t *)(p) + 2)) &lt;&lt; 16) | ((uint32_t)(*((const uint8_t *)(p) + 1)) &lt;&lt; 8) | ((uint32_t)(*((const uint8_t *)(p) + 0)) &lt;&lt; 0)))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_LE_64BITS</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint64_t)(((uint64_t)(*((const uint8_t *)(p) + 7)) &lt;&lt; 56) | ((uint64_t)(*((const uint8_t *)(p) + 6)) &lt;&lt; 48) | ((uint64_t)(*((const uint8_t *)(p) + 5)) &lt;&lt; 40) | ((uint64_t)(*((const uint8_t *)(p) + 4)) &lt;&lt; 32) | ((uint64_t)(*((const uint8_t *)(p) + 3)) &lt;&lt; 24) | ((uint64_t)(*((const uint8_t *)(p) + 2)) &lt;&lt; 16) | ((uint64_t)(*((const uint8_t *)(p) + 1)) &lt;&lt; 8) | ((uint64_t)(*((const uint8_t *)(p) + 0)) &lt;&lt; 0)))</cpp:value></cpp:define>








</unit>
