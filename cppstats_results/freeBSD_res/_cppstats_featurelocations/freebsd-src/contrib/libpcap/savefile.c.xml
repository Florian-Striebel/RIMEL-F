<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/savefile.c">





























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pcap-types.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap-int.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OS_PROTO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os-proto.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sf-pcap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sf-pcapng.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap-common.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>












<function_decl><type><specifier>static</specifier> <name>pcap_t</name> <modifier>*</modifier></type><name>pcap_fopen_offline_with_tstamp_precision</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>u_int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>pcap_t</name> <modifier>*</modifier></type><name>pcap_fopen_offline</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_BINMODE</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_setmode(_fileno(f), _O_BINARY)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HIGHC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_BINMODE</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>setmode(f, O_BINARY)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_BINMODE</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>setmode(fileno(f), O_BINARY)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>sf_getnonblock</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier><name>p</name></type> <name>_U_</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>sf_setnonblock</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>nonblock</name></type> <name>_U_</name></decl></parameter>)</parameter_list>
<block>{<block_content>








<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Savefiles cannot be put into non-blocking mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>sf_stats</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_stat</name></name> <modifier>*</modifier><name>ps</name></type> <name>_U_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Statistics aren't available from savefiles"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name><name>struct</name> <name>pcap_stat</name></name> <modifier>*</modifier></type>
<name>sf_stats_ex</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Statistics aren't available from savefiles"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>sf_setbuff</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"The kernel buffer size cannot be set while reading from a file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>sf_setmode</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"impossible to set mode while reading from a file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>sf_setmintocopy</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"The mintocopy parameter cannot be set while reading from a file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HANDLE</name></type>
<name>sf_getevent</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>pcap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>pcap</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pcap</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"The read event cannot be retrieved while reading from a file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>INVALID_HANDLE_VALUE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>sf_oid_get_request</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>bpf_u_int32</name> <name>oid</name></type> <name>_U_</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>data</name></type> <name>_U_</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier><name>lenp</name></type> <name>_U_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"An OID get request cannot be performed on a file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>PCAP_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>sf_oid_set_request</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>bpf_u_int32</name> <name>oid</name></type> <name>_U_</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><name>data</name></type> <name>_U_</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier><name>lenp</name></type> <name>_U_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"An OID set request cannot be performed on a file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>PCAP_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>u_int</name></type>
<name>sf_sendqueue_transmit</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>pcap_send_queue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sync</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><literal type="string">"Sending packets isn't supported on savefiles"</literal></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>sf_setuserbuffer</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"The user buffer cannot be set when reading from a file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>sf_live_dump</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxsize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxpacks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Live packet dumping cannot be performed when reading from a file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>sf_live_dump_ended</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sync</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Live packet dumping cannot be performed on a pcap_open_dead pcap_t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PAirpcapHandle</name></type>
<name>sf_get_airpcap_handle</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>pcap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>sf_inject</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><name>buf</name></type> <name>_U_</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <name>size</name></type> <name>_U_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><literal type="string">"Sending packets isn't supported on savefiles"</literal></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>sf_setdirection</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>pcap_direction_t</name> <name>d</name></type> <name>_U_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"Setting direction is not supported on savefiles"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sf_cleanup</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>rfile</name></name> <operator>!=</operator> <name>stdin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fclose</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>rfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>pcap_freecode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>fcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>pcap_t</name> <modifier>*</modifier></type>
<name>pcap_open_offline_with_tstamp_precision</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>u_int</name></type> <name>precision</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"A null pointer was supplied as the file name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>fname</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>fp</name> <operator>=</operator> <name>stdin</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call></expr></cpp:if>




<expr_stmt><expr><call><name>SET_BINMODE</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else <block>{<block_content>






<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>pcap_fopen_offline_with_tstamp_precision</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>stdin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>pcap_t</name> <modifier>*</modifier></type>
<name>pcap_open_offline</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>pcap_open_offline_with_tstamp_precision</name><argument_list>(<argument><expr><name>fname</name></expr></argument>,
<argument><expr><name>PCAP_TSTAMP_PRECISION_MICRO</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>pcap_t</name><modifier>*</modifier></type> <name>pcap_hopen_offline_with_tstamp_precision</name><parameter_list>(<parameter><decl><type><name>intptr_t</name></type> <name>osfd</name></decl></parameter>, <parameter><decl><type><name>u_int</name></type> <name>precision</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>_open_osfhandle</name><argument_list>(<argument><expr><name>osfd</name></expr></argument>, <argument><expr><name>_O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"_open_osfhandle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>_fdopen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>file</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"_fdopen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>pcap_fopen_offline_with_tstamp_precision</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>,
<argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>pcap_t</name><modifier>*</modifier></type> <name>pcap_hopen_offline</name><parameter_list>(<parameter><decl><type><name>intptr_t</name></type> <name>osfd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>pcap_hopen_offline_with_tstamp_precision</name><argument_list>(<argument><expr><name>osfd</name></expr></argument>,
<argument><expr><name>PCAP_TSTAMP_PRECISION_MICRO</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>










<function><type><name>bpf_u_int32</name></type>
<name>pcap_adjust_snapshot</name><parameter_list>(<parameter><decl><type><name>bpf_u_int32</name></type> <name>linktype</name></decl></parameter>, <parameter><decl><type><name>bpf_u_int32</name></type> <name>snaplen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>snaplen</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>snaplen</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>









<expr_stmt><expr><name>snaplen</name> <operator>=</operator> <call><name>max_snaplen_for_dlt</name><argument_list>(<argument><expr><name>linktype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>snaplen</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>pcap_t</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>check_headers</name><index>[]</index>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>u_int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><block>{
<expr><name>pcap_check_header</name></expr></block></expr></init><operator>,</operator>
pcap_ng_check_header</function_decl>
};

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_FILE_TYPES</name></cpp:macro> <cpp:value>(sizeof check_headers / sizeof check_headers[0])</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>pcap_t</name> <modifier>*</modifier></type>
<name>pcap_fopen_offline_with_tstamp_precision</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>u_int</name></type> <name>precision</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>magic</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>amt_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>








<expr_stmt><expr><name>amt_read</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>magic</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>magic</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>amt_read</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>magic</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"error reading dump file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"truncated dump file; tried to read %"</literal> <name>PRIsize</name> <literal type="string">" file header bytes, only got %"</literal> <name>PRIsize</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>magic</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>amt_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N_FILE_TYPES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call>(<modifier>*</modifier><name>check_headers</name><index>[<expr><name>i</name></expr>]</index>)<argument_list>(<argument><expr><name>magic</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>found</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>



<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>




<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"unknown file format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>

<label><name>found</name>:</label>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rfile</name></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>fddipad</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call></expr></cpp:if>







<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>selectable_fd</name></name> <operator>=</operator> <call><name>fileno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>read_op</name></name> <operator>=</operator> <name>pcap_offline_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>inject_op</name></name> <operator>=</operator> <name>sf_inject</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>setfilter_op</name></name> <operator>=</operator> <name>install_bpf_program</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>setdirection_op</name></name> <operator>=</operator> <name>sf_setdirection</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>set_datalink_op</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>getnonblock_op</name></name> <operator>=</operator> <name>sf_getnonblock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>setnonblock_op</name></name> <operator>=</operator> <name>sf_setnonblock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>stats_op</name></name> <operator>=</operator> <name>sf_stats</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>stats_ex_op</name></name> <operator>=</operator> <name>sf_stats_ex</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>setbuff_op</name></name> <operator>=</operator> <name>sf_setbuff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>setmode_op</name></name> <operator>=</operator> <name>sf_setmode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>setmintocopy_op</name></name> <operator>=</operator> <name>sf_setmintocopy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>getevent_op</name></name> <operator>=</operator> <name>sf_getevent</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>oid_get_request_op</name></name> <operator>=</operator> <name>sf_oid_get_request</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>oid_set_request_op</name></name> <operator>=</operator> <name>sf_oid_set_request</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>sendqueue_transmit_op</name></name> <operator>=</operator> <name>sf_sendqueue_transmit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>setuserbuffer_op</name></name> <operator>=</operator> <name>sf_setuserbuffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>live_dump_op</name></name> <operator>=</operator> <name>sf_live_dump</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>live_dump_ended_op</name></name> <operator>=</operator> <name>sf_live_dump_ended</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>get_airpcap_handle_op</name></name> <operator>=</operator> <name>sf_get_airpcap_handle</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>oneshot_callback</name></name> <operator>=</operator> <name>pcap_oneshot</name></expr>;</expr_stmt>




<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bpf_codegen_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>activated</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>pcap_t</name> <modifier>*</modifier></type>
<name>pcap_fopen_offline</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>pcap_fopen_offline_with_tstamp_precision</name><argument_list>(<argument><expr><name>fp</name></expr></argument>,
<argument><expr><name>PCAP_TSTAMP_PRECISION_MICRO</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>pcap_offline_read</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>, <parameter><decl><type><name>pcap_handler</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bpf_insn</name></name> <modifier>*</modifier></type><name>fcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_pkthdr</name></name></type> <name>h</name></decl>;</decl_stmt>










<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>break_loop</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>break_loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">2</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>next_packet_op</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>status</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fcode</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>bpf_filter</name><argument_list>(<argument><expr><name>fcode</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>h</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>.</operator><name>caplen</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name>callback</name>)<argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>n</name> <operator>&gt;=</operator> <name>cnt</name> <operator>&amp;&amp;</operator> <name>cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
