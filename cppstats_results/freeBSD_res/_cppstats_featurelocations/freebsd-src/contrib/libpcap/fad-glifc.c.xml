<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/fad-glifc.c">

































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/file.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_SOCKIO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sockio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>

<struct_decl>struct <name>mbuf</name>;</struct_decl>
<struct_decl>struct <name>rtentry</name>;</struct_decl>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/if.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap-int.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OS_PROTO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os-proto.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>











<function><type><name>int</name></type>
<name>pcap_findalldevs_interfaces</name><parameter_list>(<parameter><decl><type><name>pcap_if_list_t</name> <modifier>*</modifier></type><name>devlistp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>check_usable</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>get_if_flags_func</name></type> <name>get_flags_func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>fd4</name></decl>, <decl><type ref="prev"/><name>fd6</name></decl>, <decl><type ref="prev"/><name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name><name>struct</name> <name>lifreq</name></name> <modifier>*</modifier></type><name>ifrp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ifend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lifnum</name></name></type> <name>ifn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lifconf</name></name></type> <name>ifc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>buf_size</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SOLARIS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name><name>struct</name> <name>lifreq</name></name></type> <name>ifrflags</name></decl>, <decl><type ref="prev"/><name>ifrnetmask</name></decl>, <decl><type ref="prev"/><name>ifrbroadaddr</name></decl>, <decl><type ref="prev"/><name>ifrdstaddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>netmask</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>broadaddr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstaddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>





<expr_stmt><expr><name>fd4</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd4</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"socket: AF_INET"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>fd6</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd6</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"socket: AF_INET6"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name>fd4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>ifn</name><operator>.</operator><name>lifn_family</name></name> <operator>=</operator> <name>AF_UNSPEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifn</name><operator>.</operator><name>lifn_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifn</name><operator>.</operator><name>lifn_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd4</name></expr></argument>, <argument><expr><name>SIOCGLIFNUM</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ifn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"SIOCGLIFNUM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name>fd6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name>fd4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <name><name>ifn</name><operator>.</operator><name>lifn_count</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>lifreq</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"malloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name>fd6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name>fd4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>ifc</name><operator>.</operator><name>lifc_len</name></name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifc</name><operator>.</operator><name>lifc_buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifc</name><operator>.</operator><name>lifc_family</name></name> <operator>=</operator> <name>AF_UNSPEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifc</name><operator>.</operator><name>lifc_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd4</name></expr></argument>, <argument><expr><name>SIOCGLIFCONF</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ifc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"SIOCGLIFCONF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name>fd6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name>fd4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>ifrp</name> <operator>=</operator> <operator>(</operator>struct <name>lifreq</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ifend</name> <operator>=</operator> <operator>(</operator>struct <name>lifreq</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator> <name><name>ifc</name><operator>.</operator><name>lifc_len</name></name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>ifrp</name> <operator>&lt;</operator> <name>ifend</name></expr>;</condition> <incr><expr><name>ifrp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>ifrp</name><operator>-&gt;</operator><name>lifr_name</name></name></expr></argument>, <argument><expr><literal type="string">"dummy"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><call>(<modifier>*</modifier><name>check_usable</name>)<argument_list>(<argument><expr><name><name>ifrp</name><operator>-&gt;</operator><name>lifr_name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<continue>continue;</continue>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ifrp</name><operator>-&gt;</operator><name>lifr_addr</name></name><operator>)</operator><operator>-&gt;</operator><name>sa_family</name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <name>fd6</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <name>fd4</name></expr>;</expr_stmt></block_content></block></else></if_stmt>




<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>ifrflags</name><operator>.</operator><name>lifr_name</name></name></expr></argument>, <argument><expr><name><name>ifrp</name><operator>-&gt;</operator><name>lifr_name</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ifrflags</name><operator>.</operator><name>lifr_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SIOCGLIFFLAGS</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ifrflags</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENXIO</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"SIOCGLIFFLAGS: %.*s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>ifrflags</name><operator>.</operator><name>lifr_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>ifrflags</name><operator>.</operator><name>lifr_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>ifrnetmask</name><operator>.</operator><name>lifr_name</name></name></expr></argument>, <argument><expr><name><name>ifrp</name><operator>-&gt;</operator><name>lifr_name</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ifrnetmask</name><operator>.</operator><name>lifr_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ifrnetmask</name><operator>.</operator><name>lifr_addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ifrp</name><operator>-&gt;</operator><name>lifr_addr</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ifrnetmask</name><operator>.</operator><name>lifr_addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SIOCGLIFNETMASK</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ifrnetmask</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EADDRNOTAVAIL</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>netmask</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"SIOCGLIFNETMASK: %.*s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>ifrnetmask</name><operator>.</operator><name>lifr_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>ifrnetmask</name><operator>.</operator><name>lifr_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>netmask</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ifrnetmask</name><operator>.</operator><name>lifr_addr</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>ifrflags</name><operator>.</operator><name>lifr_flags</name></name> <operator>&amp;</operator> <name>IFF_BROADCAST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>ifrbroadaddr</name><operator>.</operator><name>lifr_name</name></name></expr></argument>, <argument><expr><name><name>ifrp</name><operator>-&gt;</operator><name>lifr_name</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ifrbroadaddr</name><operator>.</operator><name>lifr_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ifrbroadaddr</name><operator>.</operator><name>lifr_addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ifrp</name><operator>-&gt;</operator><name>lifr_addr</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ifrbroadaddr</name><operator>.</operator><name>lifr_addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SIOCGLIFBRDADDR</name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ifrbroadaddr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EADDRNOTAVAIL</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>broadaddr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"SIOCGLIFBRDADDR: %.*s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>ifrbroadaddr</name><operator>.</operator><name>lifr_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>ifrbroadaddr</name><operator>.</operator><name>lifr_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>broadaddr</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ifrbroadaddr</name><operator>.</operator><name>lifr_broadaddr</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<expr_stmt><expr><name>broadaddr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>ifrflags</name><operator>.</operator><name>lifr_flags</name></name> <operator>&amp;</operator> <name>IFF_POINTOPOINT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>ifrdstaddr</name><operator>.</operator><name>lifr_name</name></name></expr></argument>, <argument><expr><name><name>ifrp</name><operator>-&gt;</operator><name>lifr_name</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ifrdstaddr</name><operator>.</operator><name>lifr_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ifrdstaddr</name><operator>.</operator><name>lifr_addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ifrp</name><operator>-&gt;</operator><name>lifr_addr</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ifrdstaddr</name><operator>.</operator><name>lifr_addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SIOCGLIFDSTADDR</name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ifrdstaddr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EADDRNOTAVAIL</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>dstaddr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"SIOCGLIFDSTADDR: %.*s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>ifrdstaddr</name><operator>.</operator><name>lifr_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>ifrdstaddr</name><operator>.</operator><name>lifr_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dstaddr</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ifrdstaddr</name><operator>.</operator><name>lifr_dstaddr</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dstaddr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SOLARIS</name></expr></argument>)</argument_list></call></expr></cpp:if>








<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>ifrp</name><operator>-&gt;</operator><name>lifr_name</name></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>q</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>q</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<if_stmt><if>if <condition>(<expr><call><name>add_addr_to_if</name><argument_list>(<argument><expr><name>devlistp</name></expr></argument>, <argument><expr><name><name>ifrp</name><operator>-&gt;</operator><name>lifr_name</name></name></expr></argument>,
<argument><expr><name><name>ifrflags</name><operator>.</operator><name>lifr_flags</name></name></expr></argument>, <argument><expr><name>get_flags_func</name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ifrp</name><operator>-&gt;</operator><name>lifr_addr</name></name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>netmask</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>broadaddr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>dstaddr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name>fd6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name>fd4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
