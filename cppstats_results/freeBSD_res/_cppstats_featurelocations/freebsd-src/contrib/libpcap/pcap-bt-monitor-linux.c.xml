<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/pcap-bt-monitor-linux.c">






























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bluetooth/bluetooth.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bluetooth/hci.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap/bluetooth.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap-int.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap-bt-monitor-linux.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BT_CONTROL_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERFACE_NAME</name></cpp:macro> <cpp:value>"bluetooth-monitor"</cpp:value></cpp:define>





<struct>struct <name>hci_mon_hdr</name> <block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>opcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>len</name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>

<function><type><name>int</name></type>
<name>bt_monitor_findalldevs</name><parameter_list>(<parameter><decl><type><name>pcap_if_list_t</name> <modifier>*</modifier></type><name>devlistp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err_str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>









<if_stmt><if>if <condition>(<expr><call><name>add_dev</name><argument_list>(<argument><expr><name>devlistp</name></expr></argument>, <argument><expr><name>INTERFACE_NAME</name></expr></argument>,
<argument><expr><name>PCAP_IF_WIRELESS</name><operator>|</operator><name>PCAP_IF_CONNECTION_STATUS_NOT_APPLICABLE</name></expr></argument>,
<argument><expr><literal type="string">"Bluetooth Linux Monitor"</literal></expr></argument>, <argument><expr><name>err_str</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>bt_monitor_read</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>max_packets</name></type> <name>_U_</name></decl></parameter>, <parameter><decl><type><name>pcap_handler</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cmsghdr</name></name> <modifier>*</modifier></type><name>cmsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>msghdr</name></name></type> <name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name><name>iv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_pkthdr</name></name></type> <name>pkth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcap_bluetooth_linux_monitor_header</name> <modifier>*</modifier></type><name>bthdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>pktd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hci_mon_hdr</name></name></type> <name>hdr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pktd</name> <operator>=</operator> <operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name><name>handle</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name>BT_CONTROL_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bthdr</name> <operator>=</operator> <operator>(</operator><name>pcap_bluetooth_linux_monitor_header</name><operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>pktd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <operator>&amp;</operator><name>hdr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <name>pktd</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pcap_bluetooth_linux_monitor_header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkth</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pkth</name><operator>.</operator><name>ts</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_iov</name></name> <operator>=</operator> <name>iv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_iovlen</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_control</name></name> <operator>=</operator> <name><name>handle</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_controllen</name></name> <operator>=</operator> <name>BT_CONTROL_SIZE</name></expr>;</expr_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>recvmsg</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>break_loop</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>break_loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><operator>(</operator><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>errno</name> <operator>==</operator> <name>EINTR</name><operator>)</operator></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Can't receive packet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pkth</name><operator>.</operator><name>caplen</name></name> <operator>=</operator> <name>ret</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pcap_bluetooth_linux_monitor_header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkth</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name><name>pkth</name><operator>.</operator><name>caplen</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cmsg</name> <operator>=</operator> <call><name>CMSG_FIRSTHDR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>cmsg</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>cmsg</name> <operator>=</operator> <call><name>CMSG_NXTHDR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>cmsg</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cmsg</name><operator>-&gt;</operator><name>cmsg_level</name></name> <operator>!=</operator> <name>SOL_SOCKET</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmsg</name><operator>-&gt;</operator><name>cmsg_type</name></name> <operator>==</operator> <name>SCM_TIMESTAMP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkth</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><call><name>CMSG_DATA</name><argument_list>(<argument><expr><name>cmsg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pkth</name><operator>.</operator><name>ts</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>bthdr</name><operator>-&gt;</operator><name>adapter_id</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>hdr</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bthdr</name><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>hdr</name><operator>.</operator><name>opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>bpf_filter</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name></expr></argument>, <argument><expr><name>pktd</name></expr></argument>, <argument><expr><name><name>pkth</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>pkth</name><operator>.</operator><name>caplen</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkth</name></expr></argument>, <argument><expr><name>pktd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>bt_monitor_inject</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><name>buf</name></type> <name>_U_</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <name>size</name></type> <name>_U_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Packet injection is not supported yet on Bluetooth monitor devices"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>bt_monitor_setdirection</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>pcap_direction_t</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>direction</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>bt_monitor_stats</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier><name>handle</name></type> <name>_U_</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_stat</name></name> <modifier>*</modifier></type><name>stats</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>ps_recv</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>ps_drop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>ps_ifdrop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>bt_monitor_activate</name><parameter_list>(<parameter><decl><type><name>pcap_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_hci</name></name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name>PCAP_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>rfmon</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>PCAP_ERROR_RFMON_NOTSUP</name></expr>;</return>
</block_content>}</block></if></if_stmt>









<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>&gt;</operator> <name>MAXIMUM_SNAPLEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>=</operator> <name>MAXIMUM_SNAPLEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>=</operator> <name>BT_CONTROL_SIZE</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pcap_bluetooth_linux_monitor_header</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_BLUETOOTH_LINUX_MONITOR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>read_op</name></name> <operator>=</operator> <name>bt_monitor_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>inject_op</name></name> <operator>=</operator> <name>bt_monitor_inject</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>setfilter_op</name></name> <operator>=</operator> <name>install_bpf_program</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>setdirection_op</name></name> <operator>=</operator> <name>bt_monitor_setdirection</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>set_datalink_op</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>getnonblock_op</name></name> <operator>=</operator> <name>pcap_getnonblock_fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>setnonblock_op</name></name> <operator>=</operator> <name>pcap_setnonblock_fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>stats_op</name></name> <operator>=</operator> <name>bt_monitor_stats</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_BLUETOOTH</name></expr></argument>, <argument><expr><name>SOCK_RAW</name></expr></argument>, <argument><expr><name>BTPROTO_HCI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Can't create raw socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>bufsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>handle</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Can't allocate dump buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>close_fail</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>addr</name><operator>.</operator><name>hci_family</name></name> <operator>=</operator> <name>AF_BLUETOOTH</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>addr</name><operator>.</operator><name>hci_dev</name></name> <operator>=</operator> <name>HCI_DEV_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>addr</name><operator>.</operator><name>hci_channel</name></name> <operator>=</operator> <name>HCI_CHANNEL_MONITOR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Can't attach to interface"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>close_fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>opt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_TIMESTAMP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Can't enable time stamp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>close_fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>selectable_fd</name></name> <operator>=</operator> <name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>close_fail</name>:</label>
<expr_stmt><expr><call><name>pcap_cleanup_live_common</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>pcap_t</name> <modifier>*</modifier></type>
<name>bt_monitor_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ebuf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>is_ours</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>device</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>INTERFACE_NAME</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>is_ours</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>is_ours</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>pcap_create_common</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>activate_op</name></name> <operator>=</operator> <name>bt_monitor_activate</name></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>
</unit>
