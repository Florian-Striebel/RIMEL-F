<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/pcap-septel.c">






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap-int.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;msg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ss7_inc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sysgct.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pack.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;system.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap-septel.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>septel_setfilter</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bpf_program</name></name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>septel_stats</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_stat</name></name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>septel_getnonblock</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>septel_setnonblock</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nonblock</name></decl></parameter>)</parameter_list>;</function_decl>




<struct>struct <name>pcap_septel</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_stat</name></name></type> <name>stat</name></decl>;</decl_stmt>
}</block>






<decl>static <name>int</name> <name>septel_read</name><argument_list>(<argument><expr><name>pcap_t</name> <operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>int</name> <name>cnt</name></expr></argument>, <argument><expr><name>pcap_handler</name> <name>callback</name></expr></argument>, <argument><expr><name>u_char</name> <operator>*</operator><name>user</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>pcap_septel</name></name> <modifier>*</modifier></type><name>ps</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HDR</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MSG</name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>processed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>





<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0xdd</literal></expr></init></decl>;</decl_stmt>


<do>do <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>packet_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>caplen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_pkthdr</name></name></type> <name>pcap_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>dp</name></decl> ;</decl_stmt>




<label><name>loop</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>break_loop</name></name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>break_loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




<do>do <block>{<block_content>


<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>GCT_grab</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>MSG</name><operator>*</operator><operator>)</operator><name>h</name></expr>;</expr_stmt>



<expr_stmt><expr><name>counter</name><operator>++</operator></expr> ;</expr_stmt>

</block_content>}</block>
while <condition>(<expr><operator>(</operator><name>m</name> <operator>==</operator> <name>NULL</name><operator>)</operator><operator>&amp;&amp;</operator> <operator>(</operator><name>counter</name><operator>&lt;</operator> <literal type="number">100</literal><operator>)</operator></expr>)</condition> ;</do>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>type</name></name></expr> ;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>!=</operator> <literal type="number">0xcf00</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>t</name> <operator>!=</operator> <literal type="number">0x8f01</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>relm</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>loop</name> ;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>dp</name> <operator>=</operator> <call><name>get_param</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>packet_len</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>caplen</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name></expr> ;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>caplen</name> <operator>&gt;</operator> <name>packet_len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>caplen</name> <operator>=</operator> <name>packet_len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <call><name>bpf_filter</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><name>packet_len</name></expr></argument>, <argument><expr><name>caplen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>















<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pcap_header</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>pcap_header</name><operator>.</operator><name>caplen</name></name> <operator>=</operator> <name>caplen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcap_header</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>packet_len</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>ps_recv</name></name><operator>++</operator></expr>;</expr_stmt>


<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pcap_header</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>processed</name><operator>++</operator></expr> ;</expr_stmt>

</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>relm</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>processed</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block>
while <condition>(<expr><name>processed</name> <operator>&lt;</operator> <name>cnt</name></expr>)</condition> ;</do>

<return>return <expr><name>processed</name></expr> ;</return>
</block_content>}</block></decl>


<decl>static <name>int</name>
<name>septel_inject</name><argument_list>(<argument><expr><name>pcap_t</name> <operator>*</operator><name>handle</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>buf</name> <name>_U_</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name> <name>_U_</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><literal type="string">"Sending packets isn't supported on Septel cards"</literal></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></decl>








<decl>static <name>pcap_t</name> <modifier>*</modifier><name>septel_activate</name><argument_list>(<argument><expr><name>pcap_t</name><operator>*</operator> <name>handle</name></expr></argument>)</argument_list> <block>{<block_content>

<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_MTP2</name></expr>;</expr_stmt>









<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>&gt;</operator> <name>MAXIMUM_SNAPLEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>=</operator> <name>MAXIMUM_SNAPLEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>selectable_fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>read_op</name></name> <operator>=</operator> <name>septel_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>inject_op</name></name> <operator>=</operator> <name>septel_inject</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>setfilter_op</name></name> <operator>=</operator> <name>septel_setfilter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>set_datalink_op</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>getnonblock_op</name></name> <operator>=</operator> <name>septel_getnonblock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>setnonblock_op</name></name> <operator>=</operator> <name>septel_setnonblock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>stats_op</name></name> <operator>=</operator> <name>septel_stats</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl>

<decl><name>pcap_t</name> <modifier>*</modifier><name>septel_create</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>device</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><name>ebuf</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator><name>is_ours</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>


<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>device</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="string">"septel"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>is_ours</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><operator>*</operator><name>is_ours</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>pcap_create_common</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>pcap_septel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>activate_op</name></name> <operator>=</operator> <name>septel_activate</name></expr>;</expr_stmt>







<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>getnonblock_op</name></name> <operator>=</operator> <name>septel_getnonblock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>setnonblock_op</name></name> <operator>=</operator> <name>septel_setnonblock</name></expr>;</expr_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></decl>

<decl>static <name>int</name> <name>septel_stats</name><argument_list>(<argument><expr><name>pcap_t</name> <operator>*</operator><name>p</name></expr></argument>, <argument><expr>struct <name>pcap_stat</name> <operator>*</operator><name>ps</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_septel</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><operator>*</operator><name>ps</name> <operator>=</operator> <name><name>handlep</name><operator>-&gt;</operator><name>stat</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl>


<decl><name>int</name>
<name>septel_findalldevs</name><argument_list>(<argument><expr><name>pcap_if_list_t</name> <operator>*</operator><name>devlistp</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><name>errbuf</name></expr></argument>)</argument_list>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>add_dev</name><argument_list>(<argument><expr><name>devlistp</name></expr></argument>,<argument><expr><literal type="string">"septel"</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="string">"Intel/Septel device"</literal></expr></argument>,<argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl>







<decl>static <name>int</name> <name>septel_setfilter</name><argument_list>(<argument><expr><name>pcap_t</name> <operator>*</operator><name>p</name></expr></argument>, <argument><expr>struct <name>bpf_program</name> <operator>*</operator><name>fp</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><literal type="string">"setfilter: No filter specified"</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>install_bpf_program</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></decl>







<decl>static <name>int</name>
<name>septel_getnonblock</name><argument_list>(<argument><expr><name>pcap_t</name> <operator>*</operator><name>p</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Non-blocking mode not supported on Septel devices"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></decl>

<decl>static <name>int</name>
<name>septel_setnonblock</name><argument_list>(<argument><expr><name>pcap_t</name> <operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>int</name> <name>nonblock</name> <name>_U_</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Non-blocking mode not supported on Septel devices"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SEPTEL_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>








<decl><name>int</name>
<name>pcap_platform_finddevs</name><argument_list>(<argument><expr><name>pcap_if_list_t</name> <operator>*</operator><name>devlistp</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><name>errbuf</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></decl>




<decl><name>pcap_t</name> <modifier>*</modifier>
<name>pcap_create_interface</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>device</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><name>errbuf</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"This version of libpcap only supports Septel cards"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl>




<decl>const <name>char</name> <modifier>*</modifier>
<name>pcap_lib_version</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>PCAP_VERSION_STRING</name> <literal type="string">" (Septel-only)"</literal><operator>)</operator></expr>;</return>
</block_content>}</block></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl/></struct></unit>
