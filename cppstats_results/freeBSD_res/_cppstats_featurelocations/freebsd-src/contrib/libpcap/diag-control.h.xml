<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/diag-control.h">

































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_diag_control_h</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_diag_control_h</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap/compiler-tests.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_DO_PRAGMA</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Pragma (#x)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAG_OFF_FLEX</name></cpp:macro> <cpp:value>__pragma(warning(push)) __pragma(warning(disable:4127)) __pragma(warning(disable:4242)) __pragma(warning(disable:4244)) __pragma(warning(disable:4702))</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAG_ON_FLEX</name></cpp:macro> <cpp:value>__pragma(warning(pop))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>PCAP_IS_AT_LEAST_CLANG_VERSION</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></cpp:elif>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAG_OFF_FLEX</name></cpp:macro> <cpp:value>PCAP_DO_PRAGMA(clang diagnostic push) PCAP_DO_PRAGMA(clang diagnostic ignored "-Wsign-compare") PCAP_DO_PRAGMA(clang diagnostic ignored "-Wdocumentation") PCAP_DO_PRAGMA(clang diagnostic ignored "-Wmissing-noreturn") PCAP_DO_PRAGMA(clang diagnostic ignored "-Wunused-parameter") PCAP_DO_PRAGMA(clang diagnostic ignored "-Wunreachable-code")</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAG_ON_FLEX</name></cpp:macro> <cpp:value>PCAP_DO_PRAGMA(clang diagnostic pop)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>PCAP_IS_AT_LEAST_GNUC_VERSION</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></cpp:elif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAG_OFF_FLEX</name></cpp:macro> <cpp:value>PCAP_DO_PRAGMA(GCC diagnostic push) PCAP_DO_PRAGMA(GCC diagnostic ignored "-Wsign-compare") PCAP_DO_PRAGMA(GCC diagnostic ignored "-Wunused-parameter") PCAP_DO_PRAGMA(GCC diagnostic ignored "-Wunreachable-code")</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAG_ON_FLEX</name></cpp:macro> <cpp:value>PCAP_DO_PRAGMA(GCC diagnostic pop)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAG_OFF_FLEX</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAG_ON_FLEX</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAG_OFF_BISON_BYACC</name></cpp:macro> <cpp:value>__pragma(warning(push)) __pragma(warning(disable:4702))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAG_ON_BISON_BYACC</name></cpp:macro> <cpp:value>__pragma(warning(pop))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>PCAP_IS_AT_LEAST_CLANG_VERSION</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></cpp:elif>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAG_OFF_BISON_BYACC</name></cpp:macro> <cpp:value>PCAP_DO_PRAGMA(clang diagnostic push) PCAP_DO_PRAGMA(clang diagnostic ignored "-Wshadow") PCAP_DO_PRAGMA(clang diagnostic ignored "-Wunreachable-code")</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAG_ON_BISON_BYACC</name></cpp:macro> <cpp:value>PCAP_DO_PRAGMA(clang diagnostic pop)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>PCAP_IS_AT_LEAST_GNUC_VERSION</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></cpp:elif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAG_OFF_BISON_BYACC</name></cpp:macro> <cpp:value>PCAP_DO_PRAGMA(GCC diagnostic push) PCAP_DO_PRAGMA(GCC diagnostic ignored "-Wshadow") PCAP_DO_PRAGMA(GCC diagnostic ignored "-Wunreachable-code")</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAG_ON_BISON_BYACC</name></cpp:macro> <cpp:value>PCAP_DO_PRAGMA(GCC diagnostic pop)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAG_OFF_BISON_BYACC</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAG_ON_BISON_BYACC</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAG_OFF_BISON_BYACC</name></cpp:macro> <cpp:value>__pragma(warning(push)) __pragma(warning(disable:4127)) __pragma(warning(disable:4242)) __pragma(warning(disable:4244)) __pragma(warning(disable:4702))</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAG_ON_BISON_BYACC</name></cpp:macro> <cpp:value>__pragma(warning(pop))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>PCAP_IS_AT_LEAST_CLANG_VERSION</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></cpp:elif>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAG_OFF_BISON_BYACC</name></cpp:macro> <cpp:value>PCAP_DO_PRAGMA(clang diagnostic push) PCAP_DO_PRAGMA(clang diagnostic ignored "-Wunreachable-code")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAG_ON_BISON_BYACC</name></cpp:macro> <cpp:value>PCAP_DO_PRAGMA(clang diagnostic pop)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>PCAP_IS_AT_LEAST_GNUC_VERSION</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></cpp:elif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAG_OFF_BISON_BYACC</name></cpp:macro> <cpp:value>PCAP_DO_PRAGMA(GCC diagnostic push) PCAP_DO_PRAGMA(GCC diagnostic ignored "-Wunreachable-code")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAG_ON_BISON_BYACC</name></cpp:macro> <cpp:value>PCAP_DO_PRAGMA(GCC diagnostic pop)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAG_OFF_BISON_BYACC</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAG_ON_BISON_BYACC</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
