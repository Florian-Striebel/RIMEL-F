<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/pcap-pf.c">























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/timeb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/file.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/pfilt.h&gt;</cpp:file></cpp:include>

<struct_decl>struct <name>mbuf</name>;</struct_decl>
<struct_decl>struct <name>rtentry</name>;</struct_decl>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/if.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in_systm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/ip.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/if_ether.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/ip_var.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/udp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/udp_var.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/tcp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/tcpip.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_DONT_INCLUDE_PCAP_BPF_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/bpf.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap-int.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OS_PROTO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os-proto.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_FDDIPAD</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>





<struct>struct <name>pcap_pf</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>filtering_in_kernel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>TotPkts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>TotAccepted</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>TotDrops</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>TotMissed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>OrigMissed</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pcap_setfilter_pf</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bpf_program</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFSPACE</name></cpp:macro> <cpp:value>(200 * 256)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_read_pf</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>, <parameter><decl><type><name>pcap_handler</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_pf</name></name> <modifier>*</modifier></type><name>pf</name> <init>= <expr><name><name>pc</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>u_char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>cc</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>buflen</name></decl>, <decl><type ref="prev"/><name>inc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name><name>struct</name> <name>enstamp</name></name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LBL_ALIGN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>enstamp</name></name></type> <name>stamp</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>register</specifier> <name>u_int</name></type> <name>pad</name></decl>;</decl_stmt>

<label><name>again</name>:</label>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>cc</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>pc</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>pc</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>pc</name><operator>-&gt;</operator><name>bufsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINVAL</name> <operator>&amp;&amp;</operator>
<call><name>lseek</name><argument_list>(<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>pc</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>lseek</name><argument_list>(<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"pf read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name><name>pc</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>pc</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>bp</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>



<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pad</name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>fddipad</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>









<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>break_loop</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>break_loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">2</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>cc</name></name> <operator>=</operator> <name>cc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>bp</name></name> <operator>=</operator> <name>bp</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cc</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sp</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"pf short read (%d)"</literal></expr></argument>, <argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LBL_ALIGN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator><name>bp</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <operator>&amp;</operator><name>stamp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>sp</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>bp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <operator>(</operator>struct <name>enstamp</name> <operator>*</operator><operator>)</operator><name>bp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>ens_stamplen</name></name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sp</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"pf short stamplen (%d)"</literal></expr></argument>,
<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>ens_stamplen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>bp</name> <operator>+</operator> <name><name>sp</name><operator>-&gt;</operator><name>ens_stamplen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>buflen</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>ens_count</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buflen</name> <operator>&gt;</operator> <name><name>pc</name><operator>-&gt;</operator><name>snapshot</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>buflen</name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>snapshot</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>inc</name> <operator>=</operator> <call><name>ENALIGN</name><argument_list>(<argument><expr><name>buflen</name> <operator>+</operator> <name><name>sp</name><operator>-&gt;</operator><name>ens_stamplen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>-=</operator> <name>inc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bp</name> <operator>+=</operator> <name>inc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pf</name><operator>-&gt;</operator><name>TotPkts</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pf</name><operator>-&gt;</operator><name>TotDrops</name></name> <operator>+=</operator> <name><name>sp</name><operator>-&gt;</operator><name>ens_dropped</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pf</name><operator>-&gt;</operator><name>TotMissed</name></name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>ens_ifoverflows</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pf</name><operator>-&gt;</operator><name>OrigMissed</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pf</name><operator>-&gt;</operator><name>OrigMissed</name></name> <operator>=</operator> <name><name>pf</name><operator>-&gt;</operator><name>TotMissed</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>












<if_stmt><if>if <condition>(<expr><name><name>pf</name><operator>-&gt;</operator><name>filtering_in_kernel</name></name> <operator>||</operator>
<call><name>bpf_filter</name><argument_list>(<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>sp</name><operator>-&gt;</operator><name>ens_count</name></name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_pkthdr</name></name></type> <name>h</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pf</name><operator>-&gt;</operator><name>TotAccepted</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>.</operator><name>ts</name></name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>ens_tstamp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>ens_count</name></name> <operator>-</operator> <name>pad</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>pad</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buflen</name> <operator>-=</operator> <name>pad</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>.</operator><name>caplen</name></name> <operator>=</operator> <name>buflen</name></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>callback</name>)<argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>n</name> <operator>&gt;=</operator> <name>cnt</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>PACKET_COUNT_IS_UNLIMITED</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>cc</name></name> <operator>=</operator> <name>cc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>bp</name></name> <operator>=</operator> <name>bp</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>cc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_inject_pf</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"send"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_stats_pf</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_stat</name></name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_pf</name></name> <modifier>*</modifier></type><name>pf</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>





































<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_recv</name></name> <operator>=</operator> <name><name>pf</name><operator>-&gt;</operator><name>TotAccepted</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_drop</name></name> <operator>=</operator> <name><name>pf</name><operator>-&gt;</operator><name>TotDrops</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_ifdrop</name></name> <operator>=</operator> <name><name>pf</name><operator>-&gt;</operator><name>TotMissed</name></name> <operator>-</operator> <name><name>pf</name><operator>-&gt;</operator><name>OrigMissed</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DLT_DOCSIS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_DOCSIS</name></cpp:macro> <cpp:value>143</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_activate_pf</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_pf</name></name> <modifier>*</modifier></type><name>pf</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>enmode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>backlog</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>enfilter</name></name></type> <name>Filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>endevp</name></name></type> <name>devparams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>























<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>pfopen</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EACCES</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>pfopen</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EACCES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"pf open: %s: Permission denied\n"</literal>
<literal type="string">"your system may not be properly configured; see the packetfilter(4) man page"</literal></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>PCAP_ERROR_PERM_DENIED</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"pf open: %s"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<goto>goto <name>bad</name>;</goto>
</block_content>}</block></if></if_stmt>









<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>&gt;</operator> <name>MAXIMUM_SNAPLEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>=</operator> <name>MAXIMUM_SNAPLEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pf</name><operator>-&gt;</operator><name>OrigMissed</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>enmode</name> <operator>=</operator> <name>ENTSTAMP</name><operator>|</operator><name>ENNONEXCL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>immediate</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>enmode</name> <operator>|=</operator> <name>ENBATCH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>promisc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>enmode</name> <operator>|=</operator> <name>ENPROMISC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>EIOCMBIS</name></expr></argument>, <argument><expr><operator>(</operator><name>caddr_t</name><operator>)</operator><operator>&amp;</operator><name>enmode</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"EIOCMBIS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>bad</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENCOPYALL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>enmode</name> <operator>=</operator> <name>ENCOPYALL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ioctl</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>EIOCMBIS</name></expr></argument>, <argument><expr><operator>(</operator><name>caddr_t</name><operator>)</operator><operator>&amp;</operator><name>enmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>EIOCSETW</name></expr></argument>, <argument><expr><operator>(</operator><name>caddr_t</name><operator>)</operator><operator>&amp;</operator><name>backlog</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"EIOCSETW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>bad</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>EIOCDEVP</name></expr></argument>, <argument><expr><operator>(</operator><name>caddr_t</name><operator>)</operator><operator>&amp;</operator><name>devparams</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"EIOCDEVP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>bad</name>;</goto>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ENDT_FDDI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENDT_FDDI</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<switch>switch <condition>(<expr><name><name>devparams</name><operator>.</operator><name>end_dev_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ENDT_10MB</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_EN10MB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>










<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name></name> <operator>=</operator> <operator>(</operator><name>u_int</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u_int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>DLT_EN10MB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>DLT_DOCSIS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dlt_count</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>ENDT_FDDI</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_FDDI</name></expr>;</expr_stmt>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENDT_SLIP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>ENDT_SLIP</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_SLIP</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENDT_PPP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>ENDT_PPP</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_PPP</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENDT_LOOPBACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>ENDT_LOOPBACK</name></expr>:</case>




<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_EN10MB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENDT_TRN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>ENDT_TRN</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_IEEE802</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>














<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"unknown data-link type %u"</literal></expr></argument>, <argument><expr><name><name>devparams</name><operator>.</operator><name>end_dev_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>bad</name>;</goto>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>==</operator> <name>DLT_FDDI</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>fddipad</name></name> <operator>=</operator> <name>PCAP_FDDIPAD</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>+=</operator> <name>PCAP_FDDIPAD</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>fddipad</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>EIOCTRUNCATE</name></expr></argument>, <argument><expr><operator>(</operator><name>caddr_t</name><operator>)</operator><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"EIOCTRUNCATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>bad</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Filter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Filter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Filter</name><operator>.</operator><name>enf_Priority</name></name> <operator>=</operator> <literal type="number">37</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Filter</name><operator>.</operator><name>enf_FilterLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>EIOCSETF</name></expr></argument>, <argument><expr><operator>(</operator><name>caddr_t</name><operator>)</operator><operator>&amp;</operator><name>Filter</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"EIOCSETF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>bad</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>timeout</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>timeout</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>timeout</name></name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator> <operator>%</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>EIOCSRTIMEOUT</name></expr></argument>, <argument><expr><operator>(</operator><name>caddr_t</name><operator>)</operator><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"EIOCSRTIMEOUT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>bad</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>=</operator> <name>BUFSPACE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"malloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>bad</name>;</goto>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>selectable_fd</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>read_op</name></name> <operator>=</operator> <name>pcap_read_pf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>inject_op</name></name> <operator>=</operator> <name>pcap_inject_pf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>setfilter_op</name></name> <operator>=</operator> <name>pcap_setfilter_pf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>setdirection_op</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>set_datalink_op</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>getnonblock_op</name></name> <operator>=</operator> <name>pcap_getnonblock_fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>setnonblock_op</name></name> <operator>=</operator> <name>pcap_setnonblock_fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>stats_op</name></name> <operator>=</operator> <name>pcap_stats_pf</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
<label><name>bad</name>:</label>
<expr_stmt><expr><call><name>pcap_cleanup_live_common</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>pcap_t</name> <modifier>*</modifier></type>
<name>pcap_create_interface</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>device</name></type> <name>_U_</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ebuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>pcap_create_common</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>pcap_pf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>activate_op</name></name> <operator>=</operator> <name>pcap_activate_pf</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>can_be_bound</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>name</name></type> <name>_U_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_if_flags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>name</name></type> <name>_U_</name></decl></parameter>, <parameter><decl><type><name>bpf_u_int32</name> <modifier>*</modifier><name>flags</name></type> <name>_U_</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><name>errbuf</name></type> <name>_U_</name></decl></parameter>)</parameter_list>
<block>{<block_content>







<if_stmt><if>if <condition>(<expr><operator>*</operator><name>flags</name> <operator>&amp;</operator> <name>PCAP_IF_LOOPBACK</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>PCAP_IF_CONNECTION_STATUS_NOT_APPLICABLE</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pcap_platform_finddevs</name><parameter_list>(<parameter><decl><type><name>pcap_if_list_t</name> <modifier>*</modifier></type><name>devlistp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>pcap_findalldevs_interfaces</name><argument_list>(<argument><expr><name>devlistp</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>can_be_bound</name></expr></argument>,
<argument><expr><name>get_if_flags</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_setfilter_pf</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bpf_program</name></name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_pf</name></name> <modifier>*</modifier></type><name>pf</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bpf_version</name></name></type> <name>bv</name></decl>;</decl_stmt>









<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>BIOCVERSION</name></expr></argument>, <argument><expr><operator>(</operator><name>caddr_t</name><operator>)</operator><operator>&amp;</operator><name>bv</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><name><name>bv</name><operator>.</operator><name>bv_major</name></name> <operator>==</operator> <name>BPF_MAJOR_VERSION</name> <operator>&amp;&amp;</operator>
<name><name>bv</name><operator>.</operator><name>bv_minor</name></name> <operator>&gt;=</operator> <name>BPF_MINOR_VERSION</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>BIOCSETF</name></expr></argument>, <argument><expr><operator>(</operator><name>caddr_t</name><operator>)</operator><name>fp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"BIOCSETF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>














<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"tcpdump: Using kernel BPF filter\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pf</name><operator>-&gt;</operator><name>filtering_in_kernel</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>









<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>








<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"tcpdump: Requires BPF language %d.%d or higher; kernel is %d.%d\n"</literal></expr></argument>,
<argument><expr><name>BPF_MAJOR_VERSION</name></expr></argument>, <argument><expr><name>BPF_MINOR_VERSION</name></expr></argument>,
<argument><expr><name><name>bv</name><operator>.</operator><name>bv_major</name></name></expr></argument>, <argument><expr><name><name>bv</name><operator>.</operator><name>bv_minor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>install_bpf_program</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"tcpdump: Filtering in user process\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pf</name><operator>-&gt;</operator><name>filtering_in_kernel</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>pcap_lib_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>PCAP_VERSION_STRING</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
