<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/pcap-dag.c">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap-int.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<struct_decl>struct <name>mbuf</name>;</struct_decl>
<struct_decl>struct <name>rtentry</name>;</struct_decl>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/if.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dagnew.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dagapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dagpci.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dag_config_api.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap-dag.h"</cpp:file></cpp:include>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DAG_MAX_BOARDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAG_MAX_BOARDS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ERF_TYPE_AAL5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERF_TYPE_AAL5</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ERF_TYPE_MC_HDLC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERF_TYPE_MC_HDLC</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ERF_TYPE_MC_RAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERF_TYPE_MC_RAW</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ERF_TYPE_MC_ATM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERF_TYPE_MC_ATM</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ERF_TYPE_MC_RAW_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERF_TYPE_MC_RAW_CHANNEL</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ERF_TYPE_MC_AAL5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERF_TYPE_MC_AAL5</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ERF_TYPE_COLOR_HDLC_POS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERF_TYPE_COLOR_HDLC_POS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ERF_TYPE_COLOR_ETH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERF_TYPE_COLOR_ETH</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ERF_TYPE_MC_AAL2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERF_TYPE_MC_AAL2</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ERF_TYPE_IP_COUNTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERF_TYPE_IP_COUNTER</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ERF_TYPE_TCP_FLOW_COUNTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERF_TYPE_TCP_FLOW_COUNTER</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ERF_TYPE_DSM_COLOR_HDLC_POS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERF_TYPE_DSM_COLOR_HDLC_POS</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ERF_TYPE_DSM_COLOR_ETH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERF_TYPE_DSM_COLOR_ETH</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ERF_TYPE_COLOR_MC_HDLC_POS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERF_TYPE_COLOR_MC_HDLC_POS</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ERF_TYPE_AAL2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERF_TYPE_AAL2</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ERF_TYPE_COLOR_HASH_POS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERF_TYPE_COLOR_HASH_POS</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ERF_TYPE_COLOR_HASH_ETH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERF_TYPE_COLOR_HASH_ETH</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ERF_TYPE_INFINIBAND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERF_TYPE_INFINIBAND</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ERF_TYPE_IPV4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERF_TYPE_IPV4</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ERF_TYPE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERF_TYPE_IPV6</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ERF_TYPE_RAW_LINK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERF_TYPE_RAW_LINK</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ERF_TYPE_INFINIBAND_LINK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERF_TYPE_INFINIBAND_LINK</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ERF_TYPE_META</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERF_TYPE_META</name></cpp:macro> <cpp:value>27</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ERF_TYPE_PAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERF_TYPE_PAD</name></cpp:macro> <cpp:value>48</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATM_CELL_SIZE</name></cpp:macro> <cpp:value>52</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATM_HDR_SIZE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MTP2_SENT_OFFSET</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MTP2_ANNEX_A_USED_OFFSET</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MTP2_LINK_NUMBER_OFFSET</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MTP2_HDR_LEN</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MTP2_ANNEX_A_NOT_USED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MTP2_ANNEX_A_USED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MTP2_ANNEX_A_USED_UNKNOWN</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>


<struct>struct <name>sunatm_hdr</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>vpi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>vci</name></decl>;</decl_stmt>
}</block>;</struct>




<struct>struct <name>pcap_dag</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_stat</name></name></type> <name>stat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>dag_mem_bottom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>dag_mem_top</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dag_fcs_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dag_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dag_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dag_timeout</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>dag_card_ref_t</name></type> <name>dag_ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dag_component_t</name></type> <name>dag_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>attr_uuid_t</name></type> <name>drop_attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>required_select_timeout</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><struct>struct <name>pcap_dag_node</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_dag_node</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
}</block></struct></type> <name>pcap_dag_node_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>pcap_dag_node_t</name> <modifier>*</modifier></type><name>pcap_dags</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>atexit_handler_installed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name>endian_test_word</name> <init>= <expr><literal type="number">0x0100</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_BIGENDIAN</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(*((unsigned char *)&amp;endian_test_word))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_DAG_PACKET</name></cpp:macro> <cpp:value>65536</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>TempPkt</name><index>[<expr><name>MAX_DAG_PACKET</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DAG_LARGE_STREAMS_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dag_attach_stream64</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dag_attach_stream(a, b, c, d)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dag_get_stream_poll64</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dag_get_stream_poll(a, b, c, d, e)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dag_set_stream_poll64</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dag_set_stream_poll(a, b, c, d, e)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dag_size_t</name></cpp:macro> <cpp:value>uint32_t</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>dag_setfilter</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bpf_program</name></name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>dag_stats</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_stat</name></name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>dag_set_datalink</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>dag_get_datalink</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>dag_setnonblock</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nonblock</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>delete_pcap_dag</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pcap_dag_node_t</name> <modifier>*</modifier></type><name>curr</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>prev</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator> <expr><name>curr</name> <operator>=</operator> <name>pcap_dags</name></expr>;</init> <condition><expr><name>curr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>curr</name><operator>-&gt;</operator><name>p</name></name> <operator>!=</operator> <name>p</name></expr>;</condition> <incr><expr><name>prev</name> <operator>=</operator> <name>curr</name></expr><operator>,</operator> <expr><name>curr</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>curr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>curr</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <name>p</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pcap_dags</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>dag_platform_cleanup</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_dag</name></name> <modifier>*</modifier></type><name>pd</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>dag_stop_stream</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>pd</name><operator>-&gt;</operator><name>dag_stream</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"dag_stop_stream: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>dag_detach_stream</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>pd</name><operator>-&gt;</operator><name>dag_stream</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"dag_detach_stream: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pd</name><operator>-&gt;</operator><name>dag_ref</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dag_config_dispose</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>dag_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>dag_ref</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>delete_pcap_dag</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_cleanup_live_common</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>atexit_handler</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>pcap_dags</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pcap_dags</name><operator>-&gt;</operator><name>pid</name></name> <operator>==</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pcap_dags</name><operator>-&gt;</operator><name>p</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dag_platform_cleanup</name><argument_list>(<argument><expr><name><name>pcap_dags</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>delete_pcap_dag</name><argument_list>(<argument><expr><name><name>pcap_dags</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>new_pcap_dag</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pcap_dag_node_t</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>node</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pcap_dag_node_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>atexit_handler_installed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>atexit_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>atexit_handler_installed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>pcap_dags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pcap_dags</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type>
<name>dag_erf_ext_header_count</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>erf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>hdr_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>hdr_type</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>( <expr><name>erf</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name>len</name> <operator>&lt;</operator> <literal type="number">16</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>( <expr><operator>(</operator><name><name>erf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<do>do <block>{<block_content>


<if_stmt><if>if <condition>( <expr><name>len</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">24</literal> <operator>+</operator> <operator>(</operator><name>hdr_num</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>hdr_num</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>hdr_type</name> <operator>=</operator> <name><name>erf</name><index>[<expr><operator>(</operator><literal type="number">16</literal> <operator>+</operator> <operator>(</operator><name>hdr_num</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>hdr_num</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>( <expr><name>hdr_type</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr> )</condition>;</do>

<return>return <expr><name>hdr_num</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>dag_read</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>, <parameter><decl><type><name>pcap_handler</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_dag</name></name> <modifier>*</modifier></type><name>pd</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>processed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nonblocking</name> <init>= <expr><name><name>pd</name><operator>-&gt;</operator><name>dag_flags</name></name> <operator>&amp;</operator> <name>DAGF_NONBLOCK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_ext_hdr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ticks_per_second</name></decl>;</decl_stmt>


<while>while <condition>(<expr><name><name>pd</name><operator>-&gt;</operator><name>dag_mem_top</name></name> <operator>-</operator> <name><name>pd</name><operator>-&gt;</operator><name>dag_mem_bottom</name></name> <operator>&lt;</operator> <name>dag_record_size</name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>break_loop</name></name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>break_loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>












<if_stmt><if>if <condition>( <expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name><name>pd</name><operator>-&gt;</operator><name>dag_mem_top</name></name> <operator>=</operator> <call><name>dag_advance_stream</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>pd</name><operator>-&gt;</operator><name>dag_stream</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pd</name><operator>-&gt;</operator><name>dag_mem_bottom</name></name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nonblocking</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pd</name><operator>-&gt;</operator><name>dag_mem_top</name></name> <operator>-</operator> <name><name>pd</name><operator>-&gt;</operator><name>dag_mem_bottom</name></name> <operator>&lt;</operator> <name>dag_record_size</name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>nonblocking</name> <operator>&amp;&amp;</operator>
<name><name>pd</name><operator>-&gt;</operator><name>dag_timeout</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>pd</name><operator>-&gt;</operator><name>dag_mem_top</name></name> <operator>-</operator> <name><name>pd</name><operator>-&gt;</operator><name>dag_mem_bottom</name></name> <operator>&lt;</operator> <name>dag_record_size</name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

</block_content>}</block></while>


<while>while <condition>(<expr><name><name>pd</name><operator>-&gt;</operator><name>dag_mem_top</name></name> <operator>-</operator> <name><name>pd</name><operator>-&gt;</operator><name>dag_mem_bottom</name></name> <operator>&gt;=</operator> <name>dag_record_size</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>packet_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>caplen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_pkthdr</name></name></type> <name>pcap_header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dag_record_t</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><operator>(</operator><name>dag_record_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pd</name><operator>-&gt;</operator><name>dag_mem_bottom</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>dp</name> <init>= <expr><operator>(</operator><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name>header</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>rlen</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>break_loop</name></name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>break_loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rlen</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>rlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>&lt;</operator> <name>dag_record_size</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><literal type="string">"dag_read: record too small"</literal></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>dag_mem_bottom</name></name> <operator>+=</operator> <name>rlen</name></expr>;</expr_stmt>


<switch>switch<condition>(<expr><operator>(</operator><name><name>header</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ERF_TYPE_COLOR_HDLC_POS</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_COLOR_ETH</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_DSM_COLOR_HDLC_POS</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_DSM_COLOR_ETH</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_COLOR_MC_HDLC_POS</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_COLOR_HASH_ETH</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_COLOR_HASH_POS</name></expr>:</case>
<break>break;</break>

<default>default:</default>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name><name>pd</name><operator>-&gt;</operator><name>drop_attr</name></name> <operator>==</operator> <name>kNullAttributeUuid</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>header</name><operator>-&gt;</operator><name>lctr</name></name><operator>)</operator></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>ps_drop</name></name> <operator>+=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>lctr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>header</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>==</operator> <name>ERF_TYPE_PAD</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>num_ext_hdr</name> <operator>=</operator> <call><name>dag_erf_ext_header_count</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>rlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>















<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>==</operator> <name>DLT_ERF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>packet_len</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>wlen</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>dag_record_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>caplen</name> <operator>=</operator> <name>rlen</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><operator>(</operator><name><name>header</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ERF_TYPE_MC_AAL5</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_MC_ATM</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_MC_HDLC</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_MC_RAW_CHANNEL</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_MC_RAW</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_MC_AAL2</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_COLOR_MC_HDLC_POS</name></expr>:</case>
<expr_stmt><expr><name>packet_len</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ERF_TYPE_COLOR_HASH_ETH</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_DSM_COLOR_ETH</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_COLOR_ETH</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_ETH</name></expr>:</case>
<expr_stmt><expr><name>packet_len</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>


<expr_stmt><expr><name>packet_len</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>num_ext_hdr</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>caplen</name> <operator>&gt;</operator> <name>packet_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>caplen</name> <operator>=</operator> <name>packet_len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><name>dp</name> <operator>+=</operator> <name>dag_record_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dp</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <name>num_ext_hdr</name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><operator>(</operator><name><name>header</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ERF_TYPE_ATM</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_AAL5</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>header</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>==</operator> <name>ERF_TYPE_AAL5</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>packet_len</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>wlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>caplen</name> <operator>=</operator> <name>rlen</name> <operator>-</operator> <name>dag_record_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<case>case <expr><name>ERF_TYPE_MC_ATM</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>header</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>==</operator> <name>ERF_TYPE_MC_ATM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>caplen</name> <operator>=</operator> <name>packet_len</name> <operator>=</operator> <name>ATM_CELL_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dp</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<case>case <expr><name>ERF_TYPE_MC_AAL5</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>header</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>==</operator> <name>ERF_TYPE_MC_AAL5</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>packet_len</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>wlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>caplen</name> <operator>=</operator> <name>rlen</name> <operator>-</operator> <name>dag_record_size</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dp</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>caplen</name> <operator>-=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>num_ext_hdr</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>header</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>==</operator> <name>ERF_TYPE_ATM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>caplen</name> <operator>=</operator> <name>packet_len</name> <operator>=</operator> <name>ATM_CELL_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>==</operator> <name>DLT_SUNATM</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sunatm_hdr</name></name> <modifier>*</modifier></type><name>sunatm</name> <init>= <expr><operator>(</operator>struct <name>sunatm_hdr</name> <operator>*</operator><operator>)</operator><name>dp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>rawatm</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rawatm</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name> <operator>*</operator><operator>)</operator><name>dp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sunatm</name><operator>-&gt;</operator><name>vci</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><operator>(</operator><name>rawatm</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sunatm</name><operator>-&gt;</operator><name>vpi</name></name> <operator>=</operator> <operator>(</operator><name>rawatm</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sunatm</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>header</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>iface</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0x80</literal></expr> </then><else>: <expr><literal type="number">0x00</literal></expr></else></ternary><operator>)</operator> <operator>|</operator>
<operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>sunatm</name><operator>-&gt;</operator><name>vpi</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sunatm</name><operator>-&gt;</operator><name>vci</name></name> <operator>==</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">6</literal></expr> </then><else>:
<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>sunatm</name><operator>-&gt;</operator><name>vpi</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sunatm</name><operator>-&gt;</operator><name>vci</name></name> <operator>==</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">5</literal></expr> </then><else>:
<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>dp</name><index>[<expr><name>ATM_HDR_SIZE</name></expr>]</index></name> <operator>==</operator> <literal type="number">0xaa</literal> <operator>&amp;&amp;</operator>
<name><name>dp</name><index>[<expr><name>ATM_HDR_SIZE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xaa</literal> <operator>&amp;&amp;</operator>
<name><name>dp</name><index>[<expr><name>ATM_HDR_SIZE</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x03</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>==</operator> <name>DLT_ATM_RFC1483</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>packet_len</name> <operator>-=</operator> <name>ATM_HDR_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>caplen</name> <operator>-=</operator> <name>ATM_HDR_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dp</name> <operator>+=</operator> <name>ATM_HDR_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>ERF_TYPE_COLOR_HASH_ETH</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_DSM_COLOR_ETH</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_COLOR_ETH</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_ETH</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>!=</operator> <name>DLT_EN10MB</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>!=</operator> <name>DLT_DOCSIS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>packet_len</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>wlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>packet_len</name> <operator>-=</operator> <operator>(</operator><name><name>pd</name><operator>-&gt;</operator><name>dag_fcs_bits</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>caplen</name> <operator>=</operator> <name>rlen</name> <operator>-</operator> <name>dag_record_size</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>caplen</name> <operator>-=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>num_ext_hdr</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>caplen</name> <operator>&gt;</operator> <name>packet_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>caplen</name> <operator>=</operator> <name>packet_len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dp</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ERF_TYPE_COLOR_HASH_POS</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_DSM_COLOR_HDLC_POS</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_COLOR_HDLC_POS</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_HDLC_POS</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>!=</operator> <name>DLT_CHDLC</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>!=</operator> <name>DLT_PPP_SERIAL</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>!=</operator> <name>DLT_FRELAY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>packet_len</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>wlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>packet_len</name> <operator>-=</operator> <operator>(</operator><name><name>pd</name><operator>-&gt;</operator><name>dag_fcs_bits</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>caplen</name> <operator>=</operator> <name>rlen</name> <operator>-</operator> <name>dag_record_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>caplen</name> <operator>-=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>num_ext_hdr</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>caplen</name> <operator>&gt;</operator> <name>packet_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>caplen</name> <operator>=</operator> <name>packet_len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>ERF_TYPE_COLOR_MC_HDLC_POS</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_MC_HDLC</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>!=</operator> <name>DLT_CHDLC</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>!=</operator> <name>DLT_PPP_SERIAL</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>!=</operator> <name>DLT_FRELAY</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>!=</operator> <name>DLT_MTP2</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>!=</operator> <name>DLT_MTP2_WITH_PHDR</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>!=</operator> <name>DLT_LAPD</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>packet_len</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>wlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>packet_len</name> <operator>-=</operator> <operator>(</operator><name><name>pd</name><operator>-&gt;</operator><name>dag_fcs_bits</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>caplen</name> <operator>=</operator> <name>rlen</name> <operator>-</operator> <name>dag_record_size</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>caplen</name> <operator>-=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>num_ext_hdr</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>caplen</name> <operator>&gt;</operator> <name>packet_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>caplen</name> <operator>=</operator> <name>packet_len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DLT_MTP2_WITH_PHDR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>==</operator> <name>DLT_MTP2_WITH_PHDR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>caplen</name> <operator>+=</operator> <name>MTP2_HDR_LEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>packet_len</name> <operator>+=</operator> <name>MTP2_HDR_LEN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>TempPkt</name><index>[<expr><name>MTP2_SENT_OFFSET</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>TempPkt</name><index>[<expr><name>MTP2_ANNEX_A_USED_OFFSET</name></expr>]</index></name> <operator>=</operator> <name>MTP2_ANNEX_A_USED_UNKNOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>TempPkt</name><operator>+</operator><name>MTP2_LINK_NUMBER_OFFSET</name><operator>)</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>header</name><operator>-&gt;</operator><name>rec</name><operator>.</operator><name>mc_hdlc</name><operator>.</operator><name>mc_header</name></name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>TempPkt</name><operator>+</operator><name>MTP2_LINK_NUMBER_OFFSET</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>header</name><operator>-&gt;</operator><name>rec</name><operator>.</operator><name>mc_hdlc</name><operator>.</operator><name>mc_header</name></name><operator>&gt;&gt;</operator><literal type="number">24</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>TempPkt</name><operator>+</operator><name>MTP2_HDR_LEN</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><name>caplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dp</name> <operator>=</operator> <name>TempPkt</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>

<case>case <expr><name>ERF_TYPE_IPV4</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>!=</operator> <name>DLT_RAW</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>!=</operator> <name>DLT_IPV4</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>packet_len</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>wlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>caplen</name> <operator>=</operator> <name>rlen</name> <operator>-</operator> <name>dag_record_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>caplen</name> <operator>-=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>num_ext_hdr</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>caplen</name> <operator>&gt;</operator> <name>packet_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>caplen</name> <operator>=</operator> <name>packet_len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>ERF_TYPE_IPV6</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>!=</operator> <name>DLT_RAW</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>!=</operator> <name>DLT_IPV6</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>packet_len</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>wlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>caplen</name> <operator>=</operator> <name>rlen</name> <operator>-</operator> <name>dag_record_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>caplen</name> <operator>-=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>num_ext_hdr</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>caplen</name> <operator>&gt;</operator> <name>packet_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>caplen</name> <operator>=</operator> <name>packet_len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>


<case>case <expr><name>ERF_TYPE_MC_RAW</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_MC_RAW_CHANNEL</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_IP_COUNTER</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_TCP_FLOW_COUNTER</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_INFINIBAND</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_RAW_LINK</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_INFINIBAND_LINK</name></expr>:</case>
<default>default:</default>



<continue>continue;</continue>
</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>caplen</name> <operator>&gt;</operator> <name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>caplen</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <call><name>bpf_filter</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><name>packet_len</name></expr></argument>, <argument><expr><name>caplen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><specifier>register</specifier> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>ts</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_BIGENDIAN</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>SWAPLL</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ts</name> <operator>=</operator> <name><name>header</name><operator>-&gt;</operator><name>ts</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>tstamp_precision</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PCAP_TSTAMP_PRECISION_NANO</name></expr>:</case>
<expr_stmt><expr><name>ticks_per_second</name> <operator>=</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PCAP_TSTAMP_PRECISION_MICRO</name></expr>:</case>
<default>default:</default>
<expr_stmt><expr><name>ticks_per_second</name> <operator>=</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
<break>break;</break>

</block_content>}</block></switch>
<expr_stmt><expr><name><name>pcap_header</name><operator>.</operator><name>ts</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>ts</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ts</name> <operator>=</operator> <operator>(</operator><name>ts</name> <operator>&amp;</operator> <literal type="number">0xffffffffULL</literal><operator>)</operator> <operator>*</operator> <name>ticks_per_second</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ts</name> <operator>+=</operator> <literal type="number">0x80000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcap_header</name><operator>.</operator><name>ts</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <name>ts</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pcap_header</name><operator>.</operator><name>ts</name><operator>.</operator><name>tv_usec</name></name> <operator>&gt;=</operator> <name>ticks_per_second</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pcap_header</name><operator>.</operator><name>ts</name><operator>.</operator><name>tv_usec</name></name> <operator>-=</operator> <name>ticks_per_second</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcap_header</name><operator>.</operator><name>ts</name><operator>.</operator><name>tv_sec</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>pcap_header</name><operator>.</operator><name>caplen</name></name> <operator>=</operator> <name>caplen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcap_header</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>packet_len</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>ps_recv</name></name><operator>++</operator></expr>;</expr_stmt>


<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pcap_header</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>processed</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>processed</name> <operator>==</operator> <name>cnt</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>PACKET_COUNT_IS_UNLIMITED</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<return>return <expr><name>cnt</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>processed</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dag_inject</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><name>buf</name></type> <name>_U_</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <name>size</name></type> <name>_U_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><literal type="string">"Sending packets isn't supported on DAG cards"</literal></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>int</name></type> <name>dag_activate</name><parameter_list>(<parameter><decl><type><name>pcap_t</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_dag</name></name> <modifier>*</modifier></type><name>pd</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>daginf_t</name><modifier>*</modifier></type> <name>daginf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>newDev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>device</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dag_size_t</name></type> <name>mindata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>maxwait</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>poll</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>device</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"device is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>newDev</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newDev</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Can't allocate string for device name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>dag_parse_name</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>newDev</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pd</name><operator>-&gt;</operator><name>dag_stream</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"dag_parse_name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>device</name> <operator>=</operator> <name>newDev</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pd</name><operator>-&gt;</operator><name>dag_stream</name></name><operator>%</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"dag_parse_name: tx (even numbered) streams not supported for capture"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>pd</name><operator>-&gt;</operator><name>dag_ref</name></name> <operator>=</operator> <call><name>dag_config_init</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>device</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>PCAP_ERROR_NO_SUCH_DEVICE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EPERM</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EACCES</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>PCAP_ERROR_PERM_DENIED</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"dag_config_init %s"</literal></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>dag_config_get_card_fd</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>dag_ref</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"dag_config_get_card_fd %s"</literal></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failclose</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>dag_attach_stream64</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>pd</name><operator>-&gt;</operator><name>dag_stream</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"dag_attach_stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failclose</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>drop_attr</name></name> <operator>=</operator> <name>kNullAttributeUuid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>dag_root</name></name> <operator>=</operator> <call><name>dag_config_get_root_component</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>dag_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><call><name>dag_component_get_subcomponent</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>dag_root</name></name></expr></argument>, <argument><expr><name>kComponentStreamFeatures</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>drop_attr</name></name> <operator>=</operator> <call><name>dag_config_get_indexed_attribute_uuid</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>dag_ref</name></name></expr></argument>, <argument><expr><name>kUint32AttributeStreamDropCount</name></expr></argument>, <argument><expr><name><name>pd</name><operator>-&gt;</operator><name>dag_stream</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>dag_get_stream_poll64</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>pd</name><operator>-&gt;</operator><name>dag_stream</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>mindata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxwait</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>poll</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"dag_get_stream_poll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>faildetach</name>;</goto>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>required_select_timeout</name></name> <operator>=</operator> <name>poll</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>required_select_timeout</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pd</name><operator>-&gt;</operator><name>required_select_timeout</name></name></expr>;</expr_stmt>









<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>&gt;</operator> <name>MAXIMUM_SNAPLEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>=</operator> <name>MAXIMUM_SNAPLEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>immediate</name></name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>mindata</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<expr_stmt><expr><name>mindata</name> <operator>=</operator> <literal type="number">65536</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<expr_stmt><expr><name><name>maxwait</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>timeout</name></name><operator>/</operator><literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>maxwait</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>timeout</name></name><operator>%</operator><literal type="number">1000</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dag_set_stream_poll64</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>pd</name><operator>-&gt;</operator><name>dag_stream</name></name></expr></argument>,
<argument><expr><name>mindata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxwait</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>poll</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"dag_set_stream_poll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>faildetach</name>;</goto>
</block_content>}</block></if></if_stmt>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>



if (p-&gt;snapshot == 0 || p-&gt;snapshot &gt; MAX_DAG_SNAPLEN) {
p-&gt;snapshot = MAX_DAG_SNAPLEN;
} else if (snaplen &lt; MIN_DAG_SNAPLEN) {
p-&gt;snapshot = MIN_DAG_SNAPLEN;
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><call><name>dag_start_stream</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>pd</name><operator>-&gt;</operator><name>dag_stream</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"dag_start_stream %s"</literal></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>faildetach</name>;</goto>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>dag_mem_bottom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>dag_mem_top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>





<expr_stmt><expr><name>daginf</name> <operator>=</operator> <call><name>dag_info</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0x4200</literal> <operator>==</operator> <name><name>daginf</name><operator>-&gt;</operator><name>device_code</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><literal type="number">0x4230</literal> <operator>==</operator> <name><name>daginf</name><operator>-&gt;</operator><name>device_code</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>dag_fcs_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>linktype_ext</name></name> <operator>=</operator> <call><name>LT_FCS_DATALINK_EXT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>dag_fcs_bits</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"ERF_FCS_BITS"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>n</name> <operator>==</operator> <literal type="number">16</literal> <operator>||</operator> <name>n</name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>dag_fcs_bits</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"pcap_activate %s: bad ERF_FCS_BITS value (%d) in environment"</literal></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failstop</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"ERF_DONT_STRIP_FCS"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>linktype_ext</name></name> <operator>=</operator> <call><name>LT_FCS_DATALINK_EXT</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>dag_fcs_bits</name></name><operator>/</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>dag_fcs_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>dag_timeout</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>timeout</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dag_get_datalink</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>failstop</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>new_pcap_dag</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"new_pcap_dag %s"</literal></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failstop</name>;</goto>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>selectable_fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newDev</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>newDev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>read_op</name></name> <operator>=</operator> <name>dag_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>inject_op</name></name> <operator>=</operator> <name>dag_inject</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>setfilter_op</name></name> <operator>=</operator> <name>dag_setfilter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>setdirection_op</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>set_datalink_op</name></name> <operator>=</operator> <name>dag_set_datalink</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>getnonblock_op</name></name> <operator>=</operator> <name>pcap_getnonblock_fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>setnonblock_op</name></name> <operator>=</operator> <name>dag_setnonblock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>stats_op</name></name> <operator>=</operator> <name>dag_stats</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cleanup_op</name></name> <operator>=</operator> <name>dag_platform_cleanup</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>ps_drop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>ps_recv</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>ps_ifdrop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>failstop</name>:</label>
<if_stmt><if>if <condition>(<expr><call><name>dag_stop_stream</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>pd</name><operator>-&gt;</operator><name>dag_stream</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"dag_stop_stream: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>faildetach</name>:</label>
<if_stmt><if>if <condition>(<expr><call><name>dag_detach_stream</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>pd</name><operator>-&gt;</operator><name>dag_stream</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"dag_detach_stream: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>failclose</name>:</label>
<expr_stmt><expr><call><name>dag_config_dispose</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>dag_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>dag_ref</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>delete_pcap_dag</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>pcap_cleanup_live_common</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newDev</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>newDev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>pcap_t</name> <modifier>*</modifier></type><name>dag_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ebuf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>is_ours</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cpend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>devnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>stream</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>device</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="string">"dag"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>is_ours</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cp</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>devnum</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cpend</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cpend</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><operator>++</operator><name>cpend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cpend</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cpend</name> <operator>==</operator> <name>cp</name> <operator>||</operator> <operator>*</operator><name>cpend</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>is_ours</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>devnum</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>devnum</name> <operator>&gt;=</operator> <name>DAG_MAX_BOARDS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>is_ours</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>stream</name> <operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <name>stream</name> <operator>&gt;=</operator> <name>DAG_STREAM_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>is_ours</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><operator>*</operator><name>is_ours</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>pcap_create_common</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>pcap_dag</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>activate_op</name></name> <operator>=</operator> <name>dag_activate</name></expr>;</expr_stmt>








<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>tstamp_precision_count</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>tstamp_precision_list</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u_int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>tstamp_precision_list</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"malloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_close</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>tstamp_precision_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>PCAP_TSTAMP_PRECISION_MICRO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>tstamp_precision_list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>PCAP_TSTAMP_PRECISION_NANO</name></expr>;</expr_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dag_stats</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_stat</name></name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_dag</name></name> <modifier>*</modifier></type><name>pd</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>stream_drop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dag_err_t</name></type> <name>dag_error</name></decl>;</decl_stmt>








<if_stmt><if>if<condition>(<expr><name><name>pd</name><operator>-&gt;</operator><name>drop_attr</name></name> <operator>!=</operator> <name>kNullAttributeUuid</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dag_error</name> <operator>=</operator> <call><name>dag_config_get_uint32_attribute_ex</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>dag_ref</name></name></expr></argument>, <argument><expr><name><name>pd</name><operator>-&gt;</operator><name>drop_attr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stream_drop</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>kDagErrNone</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>ps_drop</name></name> <operator>=</operator> <name>stream_drop</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"reading stream drop attribute: %s"</literal></expr></argument>,
<argument><expr><call><name>dag_config_strerror</name><argument_list>(<argument><expr><name>dag_error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ps</name> <operator>=</operator> <name><name>pd</name><operator>-&gt;</operator><name>stat</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>dag_findalldevs</name><parameter_list>(<parameter><decl><type><name>pcap_if_list_t</name> <modifier>*</modifier></type><name>devlistp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>dagname</name><index>[<expr><name>DAGNAME_BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dagstream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dagfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dag_card_inf_t</name> <modifier>*</modifier></type><name>inf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>description</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stream</name></decl>, <decl><type ref="prev"/><name>rxstreams</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>DAG_MAX_BOARDS</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="string">"dag%d"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>dag_parse_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>dagname</name></expr></argument>, <argument><expr><name>DAGNAME_BUFSIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dagstream</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"dag: device name %s can't be parsed"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>dagfd</name> <operator>=</operator> <call><name>dag_open</name><argument_list>(<argument><expr><name>dagname</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>description</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>inf</name> <operator>=</operator> <call><name>dag_pciinfo</name><argument_list>(<argument><expr><name>dagfd</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>description</name> <operator>=</operator> <call><name>dag_device_name</name><argument_list>(<argument><expr><name><name>inf</name><operator>-&gt;</operator><name>device_code</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>









<if_stmt><if>if <condition>(<expr><call><name>add_dev</name><argument_list>(<argument><expr><name>devlistp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>



<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rxstreams</name> <operator>=</operator> <call><name>dag_rx_get_stream_count</name><argument_list>(<argument><expr><name>dagfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>stream</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>stream</name><operator>&lt;</operator><name>DAG_STREAM_MAX</name></expr>;</condition><incr><expr><name>stream</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>dag_attach_stream64</name><argument_list>(<argument><expr><name>dagfd</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dag_detach_stream</name><argument_list>(<argument><expr><name>dagfd</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="string">"dag%d:%d"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>add_dev</name><argument_list>(<argument><expr><name>devlistp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>



<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rxstreams</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>rxstreams</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>dag_close</name><argument_list>(<argument><expr><name>dagfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></for>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>dag_setfilter</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bpf_program</name></name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><literal type="string">"setfilter: No filter specified"</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>install_bpf_program</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dag_set_datalink</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>dlt</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dag_setnonblock</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nonblock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_dag</name></name> <modifier>*</modifier></type><name>pd</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dag_size_t</name></type> <name>mindata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>maxwait</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>poll</name></decl>;</decl_stmt>







<if_stmt><if>if <condition>(<expr><call><name>pcap_setnonblock_fd</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>nonblock</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dag_get_stream_poll64</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>pd</name><operator>-&gt;</operator><name>dag_stream</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>mindata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxwait</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>poll</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"dag_get_stream_poll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if<condition>(<expr><name>nonblock</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mindata</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mindata</name> <operator>=</operator> <literal type="number">65536</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dag_set_stream_poll64</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>pd</name><operator>-&gt;</operator><name>dag_stream</name></name></expr></argument>,
<argument><expr><name>mindata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxwait</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>poll</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"dag_set_stream_poll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nonblock</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>dag_flags</name></name> <operator>|=</operator> <name>DAGF_NONBLOCK</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>dag_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DAGF_NONBLOCK</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dag_get_datalink</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_dag</name></name> <modifier>*</modifier></type><name>pd</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>dlt_index</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>types</name><index>[<expr><literal type="number">255</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">255</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name></name><operator>)</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"malloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DAG_GET_STREAM_ERF_TYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>dag_get_stream_erf_types</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>pd</name><operator>-&gt;</operator><name>dag_stream</name></name></expr></argument>, <argument><expr><name>types</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"dag_get_stream_erf_types"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>types</name><index>[<expr><name>index</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>HAVE_DAG_GET_ERF_TYPES</name></expr></cpp:elif>

<if_stmt><if>if <condition>(<expr><call><name>dag_get_erf_types</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>types</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"dag_get_erf_types"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>types</name><index>[<expr><name>index</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>types</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <call><name>dag_linktype</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<switch>switch<condition>(<expr><operator>(</operator><name><name>types</name><index>[<expr><name>index</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ERF_TYPE_HDLC_POS</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_COLOR_HDLC_POS</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_DSM_COLOR_HDLC_POS</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_COLOR_HASH_POS</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name><index>[<expr><name>dlt_index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>DLT_CHDLC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name><index>[<expr><name>dlt_index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>DLT_PPP_SERIAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name><index>[<expr><name>dlt_index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>DLT_FRELAY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_CHDLC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>ERF_TYPE_ETH</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_COLOR_ETH</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_DSM_COLOR_ETH</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_COLOR_HASH_ETH</name></expr>:</case>










<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name><index>[<expr><name>dlt_index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>DLT_EN10MB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name><index>[<expr><name>dlt_index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>DLT_DOCSIS</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_EN10MB</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>ERF_TYPE_ATM</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_AAL5</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_MC_ATM</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_MC_AAL5</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name><index>[<expr><name>dlt_index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>DLT_ATM_RFC1483</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name><index>[<expr><name>dlt_index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>DLT_SUNATM</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_ATM_RFC1483</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>ERF_TYPE_COLOR_MC_HDLC_POS</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_MC_HDLC</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name><index>[<expr><name>dlt_index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>DLT_CHDLC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name><index>[<expr><name>dlt_index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>DLT_PPP_SERIAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name><index>[<expr><name>dlt_index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>DLT_FRELAY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name><index>[<expr><name>dlt_index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>DLT_MTP2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name><index>[<expr><name>dlt_index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>DLT_MTP2_WITH_PHDR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name><index>[<expr><name>dlt_index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>DLT_LAPD</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_CHDLC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>ERF_TYPE_IPV4</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name><index>[<expr><name>dlt_index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>DLT_RAW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name><index>[<expr><name>dlt_index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>DLT_IPV4</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_RAW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>ERF_TYPE_IPV6</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name><index>[<expr><name>dlt_index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>DLT_RAW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name><index>[<expr><name>dlt_index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>DLT_IPV6</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_RAW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>ERF_TYPE_LEGACY</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_MC_RAW</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_MC_RAW_CHANNEL</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_IP_COUNTER</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_TCP_FLOW_COUNTER</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_INFINIBAND</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_RAW_LINK</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_INFINIBAND_LINK</name></expr>:</case>
<case>case <expr><name>ERF_TYPE_META</name></expr>:</case>
<default>default:</default>


<break>break;</break>

</block_content>}</block></switch>
<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name><index>[<expr><name>dlt_index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>DLT_ERF</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dlt_count</name></name> <operator>=</operator> <name>dlt_index</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_ERF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name></expr>;</return>
</block_content>}</block></while>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DAG_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>








<function><type><name>int</name></type>
<name>pcap_platform_finddevs</name><parameter_list>(<parameter><decl><type><name>pcap_if_list_t</name> <modifier>*</modifier><name>devlistp</name></type> <name>_U_</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>pcap_t</name> <modifier>*</modifier></type>
<name>pcap_create_interface</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"This version of libpcap only supports DAG cards"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>pcap_lib_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>PCAP_VERSION_STRING</name> <literal type="string">" (DAG-only)"</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function></block_content></block></while></block_content></block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
