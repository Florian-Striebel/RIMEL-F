<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/bpf_image.c">




















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pcap-types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap-int.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OS_PROTO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os-proto.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>bpf_image</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bpf_insn</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>image</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>operand_buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>operand</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition> <block>{<block_content>

<default>default:</default>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"unimp"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>operand_buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>operand_buf</name></sizeof></expr></argument>, <argument><expr><literal type="string">"0x%x"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <name>operand_buf</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_RET</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"ret"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>operand_buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>operand_buf</name></sizeof></expr></argument>, <argument><expr><literal type="string">"#%d"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <name>operand_buf</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_RET</name><operator>|</operator><name>BPF_A</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"ret"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_LD</name><operator>|</operator><name>BPF_W</name><operator>|</operator><name>BPF_ABS</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"ld"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>operand_buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>operand_buf</name></sizeof></expr></argument>, <argument><expr><literal type="string">"[%d]"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <name>operand_buf</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_LD</name><operator>|</operator><name>BPF_H</name><operator>|</operator><name>BPF_ABS</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"ldh"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>operand_buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>operand_buf</name></sizeof></expr></argument>, <argument><expr><literal type="string">"[%d]"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <name>operand_buf</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_LD</name><operator>|</operator><name>BPF_B</name><operator>|</operator><name>BPF_ABS</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"ldb"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>operand_buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>operand_buf</name></sizeof></expr></argument>, <argument><expr><literal type="string">"[%d]"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <name>operand_buf</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_LD</name><operator>|</operator><name>BPF_W</name><operator>|</operator><name>BPF_LEN</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"ld"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <literal type="string">"#pktlen"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_LD</name><operator>|</operator><name>BPF_W</name><operator>|</operator><name>BPF_IND</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"ld"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>operand_buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>operand_buf</name></sizeof></expr></argument>, <argument><expr><literal type="string">"[x + %d]"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <name>operand_buf</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_LD</name><operator>|</operator><name>BPF_H</name><operator>|</operator><name>BPF_IND</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"ldh"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>operand_buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>operand_buf</name></sizeof></expr></argument>, <argument><expr><literal type="string">"[x + %d]"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <name>operand_buf</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_LD</name><operator>|</operator><name>BPF_B</name><operator>|</operator><name>BPF_IND</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"ldb"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>operand_buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>operand_buf</name></sizeof></expr></argument>, <argument><expr><literal type="string">"[x + %d]"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <name>operand_buf</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_LD</name><operator>|</operator><name>BPF_IMM</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"ld"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>operand_buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>operand_buf</name></sizeof></expr></argument>, <argument><expr><literal type="string">"#0x%x"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <name>operand_buf</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_LDX</name><operator>|</operator><name>BPF_IMM</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"ldx"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>operand_buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>operand_buf</name></sizeof></expr></argument>, <argument><expr><literal type="string">"#0x%x"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <name>operand_buf</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_LDX</name><operator>|</operator><name>BPF_MSH</name><operator>|</operator><name>BPF_B</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"ldxb"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>operand_buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>operand_buf</name></sizeof></expr></argument>, <argument><expr><literal type="string">"4*([%d]&amp;0xf)"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <name>operand_buf</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_LD</name><operator>|</operator><name>BPF_MEM</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"ld"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>operand_buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>operand_buf</name></sizeof></expr></argument>, <argument><expr><literal type="string">"M[%d]"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <name>operand_buf</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_LDX</name><operator>|</operator><name>BPF_MEM</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"ldx"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>operand_buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>operand_buf</name></sizeof></expr></argument>, <argument><expr><literal type="string">"M[%d]"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <name>operand_buf</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_ST</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"st"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>operand_buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>operand_buf</name></sizeof></expr></argument>, <argument><expr><literal type="string">"M[%d]"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <name>operand_buf</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_STX</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"stx"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>operand_buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>operand_buf</name></sizeof></expr></argument>, <argument><expr><literal type="string">"M[%d]"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <name>operand_buf</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_JMP</name><operator>|</operator><name>BPF_JA</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"ja"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>operand_buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>operand_buf</name></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <name>operand_buf</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_JMP</name><operator>|</operator><name>BPF_JGT</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"jgt"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>operand_buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>operand_buf</name></sizeof></expr></argument>, <argument><expr><literal type="string">"#0x%x"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <name>operand_buf</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_JMP</name><operator>|</operator><name>BPF_JGE</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"jge"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>operand_buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>operand_buf</name></sizeof></expr></argument>, <argument><expr><literal type="string">"#0x%x"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <name>operand_buf</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_JMP</name><operator>|</operator><name>BPF_JEQ</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"jeq"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>operand_buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>operand_buf</name></sizeof></expr></argument>, <argument><expr><literal type="string">"#0x%x"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <name>operand_buf</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_JMP</name><operator>|</operator><name>BPF_JSET</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"jset"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>operand_buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>operand_buf</name></sizeof></expr></argument>, <argument><expr><literal type="string">"#0x%x"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <name>operand_buf</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_JMP</name><operator>|</operator><name>BPF_JGT</name><operator>|</operator><name>BPF_X</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"jgt"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <literal type="string">"x"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_JMP</name><operator>|</operator><name>BPF_JGE</name><operator>|</operator><name>BPF_X</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"jge"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <literal type="string">"x"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_JMP</name><operator>|</operator><name>BPF_JEQ</name><operator>|</operator><name>BPF_X</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"jeq"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <literal type="string">"x"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_JMP</name><operator>|</operator><name>BPF_JSET</name><operator>|</operator><name>BPF_X</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"jset"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <literal type="string">"x"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_ADD</name><operator>|</operator><name>BPF_X</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"add"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <literal type="string">"x"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_SUB</name><operator>|</operator><name>BPF_X</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"sub"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <literal type="string">"x"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_MUL</name><operator>|</operator><name>BPF_X</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"mul"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <literal type="string">"x"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_DIV</name><operator>|</operator><name>BPF_X</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"div"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <literal type="string">"x"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_MOD</name><operator>|</operator><name>BPF_X</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"mod"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <literal type="string">"x"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_AND</name><operator>|</operator><name>BPF_X</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"and"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <literal type="string">"x"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_OR</name><operator>|</operator><name>BPF_X</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"or"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <literal type="string">"x"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_XOR</name><operator>|</operator><name>BPF_X</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"xor"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <literal type="string">"x"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_LSH</name><operator>|</operator><name>BPF_X</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"lsh"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <literal type="string">"x"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_RSH</name><operator>|</operator><name>BPF_X</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"rsh"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <literal type="string">"x"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_ADD</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"add"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>operand_buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>operand_buf</name></sizeof></expr></argument>, <argument><expr><literal type="string">"#%d"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <name>operand_buf</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_SUB</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"sub"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>operand_buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>operand_buf</name></sizeof></expr></argument>, <argument><expr><literal type="string">"#%d"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <name>operand_buf</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_MUL</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"mul"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>operand_buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>operand_buf</name></sizeof></expr></argument>, <argument><expr><literal type="string">"#%d"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <name>operand_buf</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_DIV</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"div"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>operand_buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>operand_buf</name></sizeof></expr></argument>, <argument><expr><literal type="string">"#%d"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <name>operand_buf</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_MOD</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"mod"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>operand_buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>operand_buf</name></sizeof></expr></argument>, <argument><expr><literal type="string">"#%d"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <name>operand_buf</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_AND</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"and"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>operand_buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>operand_buf</name></sizeof></expr></argument>, <argument><expr><literal type="string">"#0x%x"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <name>operand_buf</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_OR</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"or"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>operand_buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>operand_buf</name></sizeof></expr></argument>, <argument><expr><literal type="string">"#0x%x"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <name>operand_buf</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_XOR</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"xor"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>operand_buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>operand_buf</name></sizeof></expr></argument>, <argument><expr><literal type="string">"#0x%x"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <name>operand_buf</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_LSH</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"lsh"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>operand_buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>operand_buf</name></sizeof></expr></argument>, <argument><expr><literal type="string">"#%d"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <name>operand_buf</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_RSH</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"rsh"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>operand_buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>operand_buf</name></sizeof></expr></argument>, <argument><expr><literal type="string">"#%d"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <name>operand_buf</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_NEG</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"neg"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_MISC</name><operator>|</operator><name>BPF_TAX</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"tax"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_MISC</name><operator>|</operator><name>BPF_TXA</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"txa"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><call><name>BPF_CLASS</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BPF_JMP</name> <operator>&amp;&amp;</operator> <call><name>BPF_OP</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>BPF_JA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><sizeof>sizeof <name>image</name></sizeof></expr></argument>,
<argument><expr><literal type="string">"(%03d) %-8s %-16s jt %d\tjf %d"</literal></expr></argument>,
<argument><expr><name>n</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>operand</name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>jt</name></name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>jf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><sizeof>sizeof <name>image</name></sizeof></expr></argument>,
<argument><expr><literal type="string">"(%03d) %-8s %s"</literal></expr></argument>,
<argument><expr><name>n</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>operand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>image</name></expr>;</return>
</block_content>}</block></function>
</unit>
