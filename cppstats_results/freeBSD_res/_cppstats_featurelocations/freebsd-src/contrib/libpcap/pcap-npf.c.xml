<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/pcap-npf.c">
































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_DONT_INCLUDE_PCAP_BPF_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Packet32.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pcap-int.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pcap/dlt.h&gt;</cpp:file></cpp:include>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW64_VERSION_MAJOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ddk/ntddndis.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ddk/ndis.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ntddndis.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DAG_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dagnew.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dagapi.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pcap_setfilter_npf</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bpf_program</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pcap_setfilter_win32_dag</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bpf_program</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pcap_getnonblock_npf</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pcap_setnonblock_npf</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_DEFAULT_USER_BUFFER_SIZE</name></cpp:macro> <cpp:value>256000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_DEFAULT_KERNEL_BUFFER_SIZE</name></cpp:macro> <cpp:value>1000000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWAPS</name><parameter_list>(<parameter><type><name>_X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((_X &amp; 0xff) &lt;&lt; 8) | (_X &gt;&gt; 8)</cpp:value></cpp:define>




<struct>struct <name>pcap_win</name> <block>{
<decl_stmt><decl><type><name>ADAPTER</name> <modifier>*</modifier></type><name>adapter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nonblock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rfmon_selfstart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>filtering_in_kernel</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DAG_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>dag_fcs_bits</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_REMOTE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>samp_npkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>samp_time</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NPCAP_PACKET_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>PacketIsMonitorModeSupported</name><parameter_list>(<parameter><decl><type><name>PCHAR</name> <name>AdapterName</name></type> <name>_U_</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>PacketSetMonitorMode</name><parameter_list>(<parameter><decl><type><name>PCHAR</name> <name>AdapterName</name></type> <name>_U_</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>mode</name></type> <name>_U_</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>PacketGetMonitorMode</name><parameter_list>(<parameter><decl><type><name>PCHAR</name> <name>AdapterName</name></type> <name>_U_</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NDIS_STATUS_INVALID_OID</name></cpp:macro> <cpp:value>0xc0010017</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NDIS_STATUS_NOT_SUPPORTED</name></cpp:macro> <cpp:value>0xc00000bb</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NDIS_STATUS_NOT_RECOGNIZED</name></cpp:macro> <cpp:value>0x00010001</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>oid_get_request</name><parameter_list>(<parameter><decl><type><name>ADAPTER</name> <modifier>*</modifier></type><name>adapter</name></decl></parameter>, <parameter><decl><type><name>bpf_u_int32</name></type> <name>oid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>lenp</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PACKET_OID_DATA</name> <modifier>*</modifier></type><name>oid_data_arg</name></decl>;</decl_stmt>








<expr_stmt><expr><name>oid_data_arg</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>PACKET_OID_DATA</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>*</operator><name>lenp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>oid_data_arg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Couldn't allocate argument buffer for PacketRequest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>PCAP_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>oid_data_arg</name><operator>-&gt;</operator><name>Oid</name></name> <operator>=</operator> <name>oid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid_data_arg</name><operator>-&gt;</operator><name>Length</name></name> <operator>=</operator> <operator>(</operator><name>ULONG</name><operator>)</operator><operator>(</operator><operator>*</operator><name>lenp</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PacketRequest</name><argument_list>(<argument><expr><name>adapter</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>oid_data_arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_win32_err</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Error calling PacketRequest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>oid_data_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <name><name>oid_data_arg</name><operator>-&gt;</operator><name>Length</name></name></expr>;</expr_stmt>




<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>oid_data_arg</name><operator>-&gt;</operator><name>Data</name></name></expr></argument>, <argument><expr><operator>*</operator><name>lenp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>oid_data_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_stats_npf</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_stat</name></name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_win</name></name> <modifier>*</modifier></type><name>pw</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bpf_stat</name></name></type> <name>bstats</name></decl>;</decl_stmt>














<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PacketGetStats</name><argument_list>(<argument><expr><name><name>pw</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bstats</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_win32_err</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"PacketGetStats error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_recv</name></name> <operator>=</operator> <name><name>bstats</name><operator>.</operator><name>bs_recv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_drop</name></name> <operator>=</operator> <name><name>bstats</name><operator>.</operator><name>bs_drop</name></name></expr>;</expr_stmt>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
ps-&gt;ps_ifdrop = bstats.ps_ifdrop;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_ifdrop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>






















<function><type><name><name>struct</name> <name>pcap_stat</name></name> <modifier>*</modifier></type>
<name>pcap_stats_ex_npf</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pcap_stat_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_win</name></name> <modifier>*</modifier></type><name>pw</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bpf_stat</name></name></type> <name>bstats</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pcap_stat_size</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>stat</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>








<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PacketGetStatsEx</name><argument_list>(<argument><expr><name><name>pw</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bstats</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_win32_err</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"PacketGetStatsEx error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>ps_recv</name></name> <operator>=</operator> <name><name>bstats</name><operator>.</operator><name>bs_recv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>ps_drop</name></name> <operator>=</operator> <name><name>bstats</name><operator>.</operator><name>bs_drop</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>ps_ifdrop</name></name> <operator>=</operator> <name><name>bstats</name><operator>.</operator><name>ps_ifdrop</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_REMOTE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>ps_capt</name></name> <operator>=</operator> <name><name>bstats</name><operator>.</operator><name>bs_capt</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>stat</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_setbuff_npf</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_win</name></name> <modifier>*</modifier></type><name>pw</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>PacketSetBuff</name><argument_list>(<argument><expr><name><name>pw</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>,<argument><expr><name>dim</name></expr></argument>)</argument_list></call><operator>==</operator><name>FALSE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"driver error: not enough memory to allocate the kernel buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_setmode_npf</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_win</name></name> <modifier>*</modifier></type><name>pw</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>PacketSetMode</name><argument_list>(<argument><expr><name><name>pw</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>,<argument><expr><name>mode</name></expr></argument>)</argument_list></call><operator>==</operator><name>FALSE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"driver error: working mode not recognized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_setmintocopy_npf</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_win</name></name> <modifier>*</modifier></type><name>pw</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>PacketSetMinToCopy</name><argument_list>(<argument><expr><name><name>pw</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>==</operator><name>FALSE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"driver error: unable to set the requested mintocopy size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HANDLE</name></type>
<name>pcap_getevent_npf</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_win</name></name> <modifier>*</modifier></type><name>pw</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><call><name>PacketGetReadEvent</name><argument_list>(<argument><expr><name><name>pw</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_oid_get_request_npf</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>bpf_u_int32</name></type> <name>oid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>lenp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_win</name></name> <modifier>*</modifier></type><name>pw</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><call><name>oid_get_request</name><argument_list>(<argument><expr><name><name>pw</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>lenp</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_oid_set_request_npf</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>bpf_u_int32</name></type> <name>oid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>lenp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_win</name></name> <modifier>*</modifier></type><name>pw</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PACKET_OID_DATA</name> <modifier>*</modifier></type><name>oid_data_arg</name></decl>;</decl_stmt>








<expr_stmt><expr><name>oid_data_arg</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>PACKET_OID_DATA</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>*</operator><name>lenp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>oid_data_arg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Couldn't allocate argument buffer for PacketRequest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>PCAP_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>oid_data_arg</name><operator>-&gt;</operator><name>Oid</name></name> <operator>=</operator> <name>oid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid_data_arg</name><operator>-&gt;</operator><name>Length</name></name> <operator>=</operator> <operator>(</operator><name>ULONG</name><operator>)</operator><operator>(</operator><operator>*</operator><name>lenp</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>oid_data_arg</name><operator>-&gt;</operator><name>Data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>*</operator><name>lenp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PacketRequest</name><argument_list>(<argument><expr><name><name>pw</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>oid_data_arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_win32_err</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Error calling PacketRequest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>oid_data_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>PCAP_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <name><name>oid_data_arg</name><operator>-&gt;</operator><name>Length</name></name></expr>;</expr_stmt>




<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>oid_data_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>u_int</name></type>
<name>pcap_sendqueue_transmit_npf</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>pcap_send_queue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sync</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_win</name></name> <modifier>*</modifier></type><name>pw</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>res</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pw</name><operator>-&gt;</operator><name>adapter</name></name><operator>==</operator><name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Cannot transmit a queue to an offline capture or to a TurboCap port"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PacketSendPackets</name><argument_list>(<argument><expr><name><name>pw</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>,
<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>,
<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>len</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>BOOLEAN</name><operator>)</operator><name>sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name><name>queue</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_win32_err</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Error opening adapter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>res</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_setuserbuffer_npf</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>new_buff</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name><operator>&lt;=</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Error: invalid size %d"</literal></expr></argument>,<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>new_buff</name><operator>=</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_buff</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Error: not enough memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name><operator>=</operator><name>new_buff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bufsize</name></name><operator>=</operator><name>size</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_live_dump_npf</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxsize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxpacks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_win</name></name> <modifier>*</modifier></type><name>pw</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOLEAN</name></type> <name>res</name></decl>;</decl_stmt>


<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PacketSetMode</name><argument_list>(<argument><expr><name><name>pw</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>, <argument><expr><name>PACKET_MODE_DUMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name> <operator>==</operator> <name>FALSE</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Error setting dump mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PacketSetDumpName</name><argument_list>(<argument><expr><name><name>pw</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name> <operator>==</operator> <name>FALSE</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Error setting kernel dump file name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PacketSetDumpLimits</name><argument_list>(<argument><expr><name><name>pw</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>, <argument><expr><name>maxsize</name></expr></argument>, <argument><expr><name>maxpacks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Error setting dump limit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_live_dump_ended_npf</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sync</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_win</name></name> <modifier>*</modifier></type><name>pw</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><call><name>PacketIsDumpEnded</name><argument_list>(<argument><expr><name><name>pw</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>, <argument><expr><operator>(</operator><name>BOOLEAN</name><operator>)</operator><name>sync</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PAirpcapHandle</name></type>
<name>pcap_get_airpcap_handle_npf</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_AIRPCAP_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_win</name></name> <modifier>*</modifier></type><name>pw</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><call><name>PacketGetAirPcapHandle</name><argument_list>(<argument><expr><name><name>pw</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_read_npf</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>, <parameter><decl><type><name>pcap_handler</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PACKET</name></type> <name>Packet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>u_char</name> <modifier>*</modifier></type><name>bp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>datap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_win</name></name> <modifier>*</modifier></type><name>pw</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cc</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>cc</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>cc</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>break_loop</name></name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>break_loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>PCAP_ERROR_BREAK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>













<expr_stmt><expr><call><name>PacketInitPacket</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Packet</name></expr></argument>, <argument><expr><operator>(</operator><name>BYTE</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>bufsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PacketReceivePacket</name><argument_list>(<argument><expr><name><name>pw</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><name>DWORD</name></type> <name>errcode</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>errcode</name> <operator>==</operator> <name>ERROR_GEN_FAILURE</name></expr>)</condition> <block>{<block_content>














<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"The interface disappeared"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_win32_err</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errcode</name></expr></argument>,
<argument><expr><literal type="string">"PacketReceivePacket error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><name>PCAP_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cc</name> <operator>=</operator> <name><name>Packet</name><operator>.</operator><name>ulBytesReceived</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>bp</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bhp</name></cpp:macro> <cpp:value>((struct bpf_hdr *)bp)</cpp:value></cpp:define>
<expr_stmt><expr><name>ep</name> <operator>=</operator> <name>bp</name> <operator>+</operator> <name>cc</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>caplen</name></decl>, <decl><type ref="prev"/><name>hdrlen</name></decl>;</decl_stmt>











<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>break_loop</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>break_loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>PCAP_ERROR_BREAK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bp</name></name> <operator>=</operator> <name>bp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cc</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>ep</name> <operator>-</operator> <name>bp</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>&gt;=</operator> <name>ep</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>caplen</name> <operator>=</operator> <name><name>bhp</name><operator>-&gt;</operator><name>bh_caplen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>hdrlen</name> <operator>=</operator> <name><name>bhp</name><operator>-&gt;</operator><name>bh_hdrlen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>datap</name> <operator>=</operator> <name>bp</name> <operator>+</operator> <name>hdrlen</name></expr>;</expr_stmt>










<if_stmt><if>if <condition>(<expr><name><name>pw</name><operator>-&gt;</operator><name>filtering_in_kernel</name></name> <operator>||</operator>
<name><name>p</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>bpf_filter</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name></expr></argument>, <argument><expr><name>datap</name></expr></argument>, <argument><expr><name><name>bhp</name><operator>-&gt;</operator><name>bh_datalen</name></name></expr></argument>, <argument><expr><name>caplen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_REMOTE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<switch>switch <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>rmt_samp</name><operator>.</operator><name>method</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>PCAP_SAMP_1_EVERY_N</name></expr>:</case>
<expr_stmt><expr><name><name>pw</name><operator>-&gt;</operator><name>samp_npkt</name></name> <operator>=</operator> <operator>(</operator><name><name>pw</name><operator>-&gt;</operator><name>samp_npkt</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>p</name><operator>-&gt;</operator><name>rmt_samp</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>pw</name><operator>-&gt;</operator><name>samp_npkt</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bp</name> <operator>+=</operator> <call><name>Packet_WORDALIGN</name><argument_list>(<argument><expr><name>caplen</name> <operator>+</operator> <name>hdrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>PCAP_SAMP_FIRST_AFTER_N_MS</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_pkthdr</name></name> <modifier>*</modifier></type><name>pkt_header</name> <init>= <expr><operator>(</operator>struct <name>pcap_pkthdr</name><operator>*</operator><operator>)</operator> <name>bp</name></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name><name>pkt_header</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>tv_sec</name></name> <operator>&lt;</operator> <name><name>pw</name><operator>-&gt;</operator><name>samp_time</name><operator>.</operator><name>tv_sec</name></name> <operator>||</operator>
<operator>(</operator><name><name>pkt_header</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>tv_sec</name></name> <operator>==</operator> <name><name>pw</name><operator>-&gt;</operator><name>samp_time</name><operator>.</operator><name>tv_sec</name></name> <operator>&amp;&amp;</operator> <name><name>pkt_header</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>tv_usec</name></name> <operator>&lt;</operator> <name><name>pw</name><operator>-&gt;</operator><name>samp_time</name><operator>.</operator><name>tv_usec</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bp</name> <operator>+=</operator> <call><name>Packet_WORDALIGN</name><argument_list>(<argument><expr><name>caplen</name> <operator>+</operator> <name>hdrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><name><name>pw</name><operator>-&gt;</operator><name>samp_time</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <name><name>pkt_header</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>tv_usec</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>rmt_samp</name><operator>.</operator><name>value</name></name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pw</name><operator>-&gt;</operator><name>samp_time</name><operator>.</operator><name>tv_usec</name></name> <operator>&gt;</operator> <literal type="number">1000000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pw</name><operator>-&gt;</operator><name>samp_time</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>pkt_header</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>tv_sec</name></name> <operator>+</operator> <name><name>pw</name><operator>-&gt;</operator><name>samp_time</name><operator>.</operator><name>tv_usec</name></name> <operator>/</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pw</name><operator>-&gt;</operator><name>samp_time</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <name><name>pw</name><operator>-&gt;</operator><name>samp_time</name><operator>.</operator><name>tv_usec</name></name> <operator>%</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<expr_stmt><expr><call>(<modifier>*</modifier><name>callback</name>)<argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>pcap_pkthdr</name><operator>*</operator><operator>)</operator><name>bp</name></expr></argument>, <argument><expr><name>datap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bp</name> <operator>+=</operator> <call><name>Packet_WORDALIGN</name><argument_list>(<argument><expr><name>caplen</name> <operator>+</operator> <name>hdrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>n</name> <operator>&gt;=</operator> <name>cnt</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>PACKET_COUNT_IS_UNLIMITED</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bp</name></name> <operator>=</operator> <name>bp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cc</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>ep</name> <operator>-</operator> <name>bp</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><name>bp</name> <operator>+=</operator> <call><name>Packet_WORDALIGN</name><argument_list>(<argument><expr><name>caplen</name> <operator>+</operator> <name>hdrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>bhp</name></cpp:undef>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DAG_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_read_win32_dag</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>, <parameter><decl><type><name>pcap_handler</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_win</name></name> <modifier>*</modifier></type><name>pw</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PACKET</name></type> <name>Packet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>dp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>packet_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>caplen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_pkthdr</name></name></type> <name>pcap_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>endofbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dag_record_t</name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>erf_record_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONGLONG</name></type> <name>ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>swt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>dfp</name> <init>= <expr><name><name>pw</name><operator>-&gt;</operator><name>adapter</name><operator>-&gt;</operator><name>DagFastProcess</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cc</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>cc</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>












<expr_stmt><expr><call><name>PacketInitPacket</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Packet</name></expr></argument>, <argument><expr><operator>(</operator><name>BYTE</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>bufsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PacketReceivePacket</name><argument_list>(<argument><expr><name><name>pw</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"read error: PacketReceivePacket failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cc</name> <operator>=</operator> <name><name>Packet</name><operator>.</operator><name>ulBytesReceived</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>cc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>header</name> <operator>=</operator> <operator>(</operator><name>dag_record_t</name><operator>*</operator><operator>)</operator><name><name>pw</name><operator>-&gt;</operator><name>adapter</name><operator>-&gt;</operator><name>DagBuffer</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>header</name> <operator>=</operator> <operator>(</operator><name>dag_record_t</name><operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>bp</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>endofbuf</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>header</name> <operator>+</operator> <name>cc</name></expr>;</expr_stmt>




<do>do
<block>{<block_content>
<expr_stmt><expr><name>erf_record_len</name> <operator>=</operator> <call><name>SWAPS</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>rlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>header</name> <operator>+</operator> <name>erf_record_len</name> <operator>&gt;</operator> <name>endofbuf</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>ps_recv</name></name><operator>++</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>dp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name>header</name><operator>)</operator> <operator>+</operator> <name>dag_record_size</name></expr>;</expr_stmt>


<switch>switch<condition>(<expr><name><name>header</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>TYPE_ATM</name></expr>:</case>
<expr_stmt><expr><name>packet_len</name> <operator>=</operator> <name>ATM_SNAPLEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>caplen</name> <operator>=</operator> <name>ATM_SNAPLEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_ETH</name></expr>:</case>
<expr_stmt><expr><name>swt</name> <operator>=</operator> <call><name>SWAPS</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>wlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>packet_len</name> <operator>=</operator> <name>swt</name> <operator>-</operator> <operator>(</operator><name><name>pw</name><operator>-&gt;</operator><name>dag_fcs_bits</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>caplen</name> <operator>=</operator> <name>erf_record_len</name> <operator>-</operator> <name>dag_record_size</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>caplen</name> <operator>&gt;</operator> <name>packet_len</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>caplen</name> <operator>=</operator> <name>packet_len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dp</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_HDLC_POS</name></expr>:</case>
<expr_stmt><expr><name>swt</name> <operator>=</operator> <call><name>SWAPS</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>wlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>packet_len</name> <operator>=</operator> <name>swt</name> <operator>-</operator> <operator>(</operator><name><name>pw</name><operator>-&gt;</operator><name>dag_fcs_bits</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>caplen</name> <operator>=</operator> <name>erf_record_len</name> <operator>-</operator> <name>dag_record_size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>caplen</name> <operator>&gt;</operator> <name>packet_len</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>caplen</name> <operator>=</operator> <name>packet_len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name>caplen</name> <operator>&gt;</operator> <name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>caplen</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>










<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>break_loop</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>break_loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">2</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bp</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>header</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cc</name></name> <operator>=</operator> <name>endofbuf</name> <operator>-</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>header</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>dfp</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>ts</name> <operator>=</operator> <name><name>header</name><operator>-&gt;</operator><name>ts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcap_header</name><operator>.</operator><name>ts</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ts</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ts</name> <operator>=</operator> <operator>(</operator><name>ts</name> <operator>&amp;</operator> <literal type="number">0xffffffffi64</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ts</name> <operator>+=</operator> <literal type="number">0x80000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcap_header</name><operator>.</operator><name>ts</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ts</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pcap_header</name><operator>.</operator><name>ts</name><operator>.</operator><name>tv_usec</name></name> <operator>&gt;=</operator> <literal type="number">1000000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pcap_header</name><operator>.</operator><name>ts</name><operator>.</operator><name>tv_usec</name></name> <operator>-=</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcap_header</name><operator>.</operator><name>ts</name><operator>.</operator><name>tv_sec</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>bpf_filter</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><name>packet_len</name></expr></argument>, <argument><expr><name>caplen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>header</name> <operator>=</operator> <operator>(</operator><name>dag_record_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>header</name> <operator>+</operator> <name>erf_record_len</name><operator>)</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>pcap_header</name><operator>.</operator><name>caplen</name></name> <operator>=</operator> <name>caplen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcap_header</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>packet_len</name></expr>;</expr_stmt>


<expr_stmt><expr><call>(<modifier>*</modifier><name>callback</name>)<argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pcap_header</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>header</name> <operator>=</operator> <operator>(</operator><name>dag_record_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>header</name> <operator>+</operator> <name>erf_record_len</name><operator>)</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>++</operator><name>n</name> <operator>&gt;=</operator> <name>cnt</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>PACKET_COUNT_IS_UNLIMITED</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bp</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>header</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cc</name></name> <operator>=</operator> <name>endofbuf</name> <operator>-</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>header</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
while<condition>(<expr><operator>(</operator><name>u_char</name><operator>*</operator><operator>)</operator><name>header</name> <operator>&lt;</operator> <name>endofbuf</name></expr>)</condition>;</do>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_inject_npf</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_win</name></name> <modifier>*</modifier></type><name>pw</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PACKET</name></type> <name>pkt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PacketInitPacket</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><operator>(</operator><name>PVOID</name><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>PacketSendPacket</name><argument_list>(<argument><expr><name><name>pw</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>,<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"send error: PacketSendPacket failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>






<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>size</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>pcap_cleanup_npf</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_win</name></name> <modifier>*</modifier></type><name>pw</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pw</name><operator>-&gt;</operator><name>adapter</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PacketCloseAdapter</name><argument_list>(<argument><expr><name><name>pw</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pw</name><operator>-&gt;</operator><name>adapter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pw</name><operator>-&gt;</operator><name>rfmon_selfstart</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>PacketSetMonitorMode</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>pcap_cleanup_live_common</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_activate_npf</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_win</name></name> <modifier>*</modifier></type><name>pw</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NetType</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>rfmon</name></name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>PacketGetMonitorMode</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>pw</name><operator>-&gt;</operator><name>rfmon_selfstart</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>PacketSetMonitorMode</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>pw</name><operator>-&gt;</operator><name>rfmon_selfstart</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>PCAP_ERROR_RFMON_NOTSUP</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>pw</name><operator>-&gt;</operator><name>rfmon_selfstart</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>pcap_wsockinit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pw</name><operator>-&gt;</operator><name>adapter</name></name> <operator>=</operator> <call><name>PacketOpenAdapter</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pw</name><operator>-&gt;</operator><name>adapter</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>errcode</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>errcode</name> <operator>==</operator> <name>ERROR_BAD_UNIT</name></expr>)</condition> <block>{<block_content>



<return>return <expr><operator>(</operator><name>PCAP_ERROR_NO_SUCH_DEVICE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_win32_err</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errcode</name></expr></argument>, <argument><expr><literal type="string">"Error opening adapter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pw</name><operator>-&gt;</operator><name>rfmon_selfstart</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>PacketSetMonitorMode</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>PCAP_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><call><name>PacketGetNetType</name> <argument_list>(<argument><expr><name><name>pw</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_win32_err</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Cannot determine the network type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>bad</name>;</goto>
</block_content>}</block></if></if_stmt>


<switch>switch <condition>(<expr><name><name>type</name><operator>.</operator><name>LinkType</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>NdisMediumWan</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_EN10MB</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NdisMedium802_3</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_EN10MB</name></expr>;</expr_stmt>










<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name></name> <operator>=</operator> <operator>(</operator><name>u_int</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u_int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>DLT_EN10MB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>DLT_DOCSIS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dlt_count</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>NdisMediumFddi</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_FDDI</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NdisMedium802_5</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_IEEE802</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NdisMediumArcnetRaw</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_ARCNET</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NdisMediumArcnet878_2</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_ARCNET</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NdisMediumAtm</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_ATM_RFC1483</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NdisMediumCHDLC</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_CHDLC</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NdisMediumPPPSerial</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_PPP_SERIAL</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NdisMediumNull</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_NULL</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NdisMediumBare80211</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_IEEE802_11</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NdisMediumRadio80211</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_IEEE802_11_RADIO</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NdisMediumPpi</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_PPI</name></expr>;</expr_stmt>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NdisMediumWirelessWan</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>NdisMediumWirelessWan</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_RAW</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>











<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_EN10MB</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Unknown NdisMedium value %d, defaulting to DLT_EN10MB"</literal></expr></argument>,
<argument><expr><name><name>type</name><operator>.</operator><name>LinkType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PCAP_WARNING</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>









<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>&gt;</operator> <name>MAXIMUM_SNAPLEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>=</operator> <name>MAXIMUM_SNAPLEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>promisc</name></name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>PacketSetHwFilter</name><argument_list>(<argument><expr><name><name>pw</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>,<argument><expr><name>NDIS_PACKET_TYPE_PROMISCUOUS</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"failed to set hardware filter to promiscuous mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>bad</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>






<if_stmt><if>if <condition>(<expr><call><name>PacketSetHwFilter</name><argument_list>(<argument><expr><name><name>pw</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>,
<argument><expr><name>NDIS_PACKET_TYPE_ALL_LOCAL</name> <operator>|</operator>
<name>NDIS_PACKET_TYPE_DIRECTED</name> <operator>|</operator>
<name>NDIS_PACKET_TYPE_BROADCAST</name> <operator>|</operator>
<name>NDIS_PACKET_TYPE_MULTICAST</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"failed to set hardware filter to non-promiscuous mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>bad</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>=</operator> <name>WIN32_DEFAULT_USER_BUFFER_SIZE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>pw</name><operator>-&gt;</operator><name>adapter</name><operator>-&gt;</operator><name>Flags</name></name> <operator>&amp;</operator> <name>INFO_FLAG_DAG_CARD</name><operator>)</operator></expr>)</condition>
<block>{<block_content>







<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>buffer_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>buffer_size</name></name> <operator>=</operator> <name>WIN32_DEFAULT_KERNEL_BUFFER_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>PacketSetBuff</name><argument_list>(<argument><expr><name><name>pw</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>,<argument><expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>buffer_size</name></name></expr></argument>)</argument_list></call><operator>==</operator><name>FALSE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"driver error: not enough memory to allocate the kernel buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>bad</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>bufsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"malloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>bad</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>immediate</name></name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>PacketSetMinToCopy</name><argument_list>(<argument><expr><name><name>pw</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>==</operator><name>FALSE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_win32_err</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Error calling PacketSetMinToCopy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>bad</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>PacketSetMinToCopy</name><argument_list>(<argument><expr><name><name>pw</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>,<argument><expr><literal type="number">16000</literal></expr></argument>)</argument_list></call><operator>==</operator><name>FALSE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_win32_err</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Error calling PacketSetMinToCopy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>bad</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DAG_API</name></expr></argument>)</argument_list></call></expr></cpp:if>



<decl_stmt><decl><type><name>LONG</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HKEY</name></type> <name>dagkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>lptype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>lpcbdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>postype</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>keyname</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>keyname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>keyname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s\\CardParams\\%s"</literal></expr></argument>,
<argument><expr><literal type="string">"SYSTEM\\CurrentControlSet\\Services\\DAG"</literal></expr></argument>,
<argument><expr><call><name>strstr</name><argument_list>(<argument><expr><call><name>_strlwr</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"dag"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>RegOpenKeyEx</name><argument_list>(<argument><expr><name>HKEY_LOCAL_MACHINE</name></expr></argument>, <argument><expr><name>keyname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>KEY_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dagkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>status</name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>RegQueryValueEx</name><argument_list>(<argument><expr><name>dagkey</name></expr></argument>,
<argument><expr><literal type="string">"PosType"</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>lptype</name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>postype</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>lpcbdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>postype</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>dagkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
while<condition>(<expr><name>FALSE</name></expr>)</condition>;</do>


<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>=</operator> <call><name>PacketSetSnapLen</name><argument_list>(<argument><expr><name><name>pw</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>pw</name><operator>-&gt;</operator><name>dag_fcs_bits</name></name> <operator>=</operator> <name><name>pw</name><operator>-&gt;</operator><name>adapter</name><operator>-&gt;</operator><name>DagFcsLen</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>



<goto>goto <name>bad</name>;</goto>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>PacketSetReadTimeout</name><argument_list>(<argument><expr><name><name>pw</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>nocapture_local</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PacketSetLoopbackBehavior</name><argument_list>(<argument><expr><name><name>pw</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>, <argument><expr><name>NPF_DISABLE_LOOPBACK</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Unable to disable the capture of loopback packets."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>bad</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DAG_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>pw</name><operator>-&gt;</operator><name>adapter</name><operator>-&gt;</operator><name>Flags</name></name> <operator>&amp;</operator> <name>INFO_FLAG_DAG_CARD</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>read_op</name></name> <operator>=</operator> <name>pcap_read_win32_dag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>setfilter_op</name></name> <operator>=</operator> <name>pcap_setfilter_win32_dag</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>read_op</name></name> <operator>=</operator> <name>pcap_read_npf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>setfilter_op</name></name> <operator>=</operator> <name>pcap_setfilter_npf</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DAG_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>setdirection_op</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>inject_op</name></name> <operator>=</operator> <name>pcap_inject_npf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>set_datalink_op</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>getnonblock_op</name></name> <operator>=</operator> <name>pcap_getnonblock_npf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>setnonblock_op</name></name> <operator>=</operator> <name>pcap_setnonblock_npf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>stats_op</name></name> <operator>=</operator> <name>pcap_stats_npf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>stats_ex_op</name></name> <operator>=</operator> <name>pcap_stats_ex_npf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>setbuff_op</name></name> <operator>=</operator> <name>pcap_setbuff_npf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>setmode_op</name></name> <operator>=</operator> <name>pcap_setmode_npf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>setmintocopy_op</name></name> <operator>=</operator> <name>pcap_setmintocopy_npf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>getevent_op</name></name> <operator>=</operator> <name>pcap_getevent_npf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>oid_get_request_op</name></name> <operator>=</operator> <name>pcap_oid_get_request_npf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>oid_set_request_op</name></name> <operator>=</operator> <name>pcap_oid_set_request_npf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>sendqueue_transmit_op</name></name> <operator>=</operator> <name>pcap_sendqueue_transmit_npf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>setuserbuffer_op</name></name> <operator>=</operator> <name>pcap_setuserbuffer_npf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>live_dump_op</name></name> <operator>=</operator> <name>pcap_live_dump_npf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>live_dump_ended_op</name></name> <operator>=</operator> <name>pcap_live_dump_ended_npf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>get_airpcap_handle_op</name></name> <operator>=</operator> <name>pcap_get_airpcap_handle_npf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cleanup_op</name></name> <operator>=</operator> <name>pcap_cleanup_npf</name></expr>;</expr_stmt>












<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <name><name>pw</name><operator>-&gt;</operator><name>adapter</name><operator>-&gt;</operator><name>hFile</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>status</name><operator>)</operator></expr>;</return>
<label><name>bad</name>:</label>
<expr_stmt><expr><call><name>pcap_cleanup_npf</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>PCAP_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_can_set_rfmon_npf</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>PacketIsMonitorModeSupported</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>pcap_t</name> <modifier>*</modifier></type>
<name>pcap_create_interface</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>device</name></type> <name>_U_</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ebuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>pcap_create_common</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>pcap_win</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>activate_op</name></name> <operator>=</operator> <name>pcap_activate_npf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>can_set_rfmon_op</name></name> <operator>=</operator> <name>pcap_can_set_rfmon_npf</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_setfilter_npf</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bpf_program</name></name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_win</name></name> <modifier>*</modifier></type><name>pw</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>PacketSetBpf</name><argument_list>(<argument><expr><name><name>pw</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>,<argument><expr><name>fp</name></expr></argument>)</argument_list></call><operator>==</operator><name>FALSE</name></expr>)</condition><block>{<block_content>































<if_stmt><if>if <condition>(<expr><call><name>install_bpf_program</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pw</name><operator>-&gt;</operator><name>filtering_in_kernel</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>pw</name><operator>-&gt;</operator><name>filtering_in_kernel</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>







<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_setfilter_win32_dag</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bpf_program</name></name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><literal type="string">"setfilter: No filter specified"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>install_bpf_program</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_getnonblock_npf</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_win</name></name> <modifier>*</modifier></type><name>pw</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>






<return>return <expr><operator>(</operator><name><name>pw</name><operator>-&gt;</operator><name>nonblock</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_setnonblock_npf</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nonblock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_win</name></name> <modifier>*</modifier></type><name>pw</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>newtimeout</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nonblock</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>newtimeout</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>








<expr_stmt><expr><name>newtimeout</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>timeout</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PacketSetReadTimeout</name><argument_list>(<argument><expr><name><name>pw</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>, <argument><expr><name>newtimeout</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_win32_err</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"PacketSetReadTimeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pw</name><operator>-&gt;</operator><name>nonblock</name></name> <operator>=</operator> <operator>(</operator><name>newtimeout</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_add_if_npf</name><parameter_list>(<parameter><decl><type><name>pcap_if_list_t</name> <modifier>*</modifier></type><name>devlistp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>bpf_u_int32</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pcap_if_t</name> <modifier>*</modifier></type><name>curdev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>npf_if_addr</name></type> <name><name>if_addrs</name><index>[<expr><name>MAX_NETWORK_ADDRESSES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LONG</name></type> <name>if_addr_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>if_addr_size</name> <operator>=</operator> <name>MAX_NETWORK_ADDRESSES</name></expr>;</expr_stmt>




<expr_stmt><expr><name>curdev</name> <operator>=</operator> <call><name>add_dev</name><argument_list>(<argument><expr><name>devlistp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>curdev</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>



<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PacketGetNetInfoEx</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><name>if_addrs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>if_addr_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>









<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<while>while <condition>(<expr><name>if_addr_size</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>add_addr_to_dev</name><argument_list>(<argument><expr><name>curdev</name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>if_addrs</name><index>[<expr><name>if_addr_size</name></expr>]</index></name><operator>.</operator><name>IPAddress</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>if_addrs</name><index>[<expr><name>if_addr_size</name></expr>]</index></name><operator>.</operator><name>SubnetMask</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>if_addrs</name><index>[<expr><name>if_addr_size</name></expr>]</index></name><operator>.</operator><name>Broadcast</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>



<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>res</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_if_flags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>bpf_u_int32</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name_copy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ADAPTER</name> <modifier>*</modifier></type><name>adapter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NDIS_HARDWARE_STATUS</name></type> <name>hardware_status</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OID_GEN_PHYSICAL_MEDIUM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>NDIS_PHYSICAL_MEDIUM</name></type> <name>phys_medium</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bpf_u_int32</name></type> <name><name>gen_physical_medium_oids</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OID_GEN_PHYSICAL_MEDIUM_EX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>OID_GEN_PHYSICAL_MEDIUM_EX</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><name>OID_GEN_PHYSICAL_MEDIUM</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_GEN_PHYSICAL_MEDIUM_OIDS</name></cpp:macro> <cpp:value>(sizeof gen_physical_medium_oids / sizeof gen_physical_medium_oids[0])</cpp:value></cpp:define>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OID_GEN_LINK_STATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>NDIS_LINK_STATE</name></type> <name>link_state</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>connect_status</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>flags</name> <operator>&amp;</operator> <name>PCAP_IF_LOOPBACK</name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>PCAP_IF_UP</name> <operator>|</operator> <name>PCAP_IF_RUNNING</name> <operator>|</operator> <name>PCAP_IF_CONNECTION_STATUS_NOT_APPLICABLE</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>








<expr_stmt><expr><name>name_copy</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>adapter</name> <operator>=</operator> <call><name>PacketOpenAdapter</name><argument_list>(<argument><expr><name>name_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>adapter</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>



<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_AIRPCAP_API</name></expr></argument>)</argument_list></call></expr></cpp:if>




<if_stmt><if>if <condition>(<expr><call><name>PacketGetAirPcapHandle</name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>=</operator> <name>PCAP_IF_UP</name> <operator>|</operator> <name>PCAP_IF_RUNNING</name></expr>;</expr_stmt>




<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>PCAP_IF_WIRELESS</name></expr>;</expr_stmt>




<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>PCAP_IF_CONNECTION_STATUS_NOT_APPLICABLE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PacketCloseAdapter</name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>hardware_status</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>oid_get_request</name><argument_list>(<argument><expr><name>adapter</name></expr></argument>, <argument><expr><name>OID_GEN_HARDWARE_STATUS</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>hardware_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>hardware_status</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>NdisHardwareStatusReady</name></expr>:</case>




<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>PCAP_IF_UP</name> <operator>|</operator> <name>PCAP_IF_RUNNING</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NdisHardwareStatusInitializing</name></expr>:</case>
<case>case <expr><name>NdisHardwareStatusReset</name></expr>:</case>




<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>PCAP_IF_UP</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NdisHardwareStatusClosing</name></expr>:</case>
<case>case <expr><name>NdisHardwareStatusNotReady</name></expr>:</case>




<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else <block>{<block_content>




<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>PCAP_IF_UP</name> <operator>|</operator> <name>PCAP_IF_RUNNING</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OID_GEN_PHYSICAL_MEDIUM</name></expr></argument>)</argument_list></call></expr></cpp:if>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N_GEN_PHYSICAL_MEDIUM_OIDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>phys_medium</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>oid_get_request</name><argument_list>(<argument><expr><name>adapter</name></expr></argument>, <argument><expr><name><name>gen_physical_medium_oids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>phys_medium</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<break>break;</break>
</block_content>}</block></if></if_stmt>






</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<switch>switch <condition>(<expr><name>phys_medium</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>NdisPhysicalMediumWirelessLan</name></expr>:</case>
<case>case <expr><name>NdisPhysicalMediumWirelessWan</name></expr>:</case>
<case>case <expr><name>NdisPhysicalMediumNative802_11</name></expr>:</case>
<case>case <expr><name>NdisPhysicalMediumBluetooth</name></expr>:</case>
<case>case <expr><name>NdisPhysicalMediumUWB</name></expr>:</case>
<case>case <expr><name>NdisPhysicalMediumIrda</name></expr>:</case>



<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>PCAP_IF_WIRELESS</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>



<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OID_GEN_LINK_STATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>link_state</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>oid_get_request</name><argument_list>(<argument><expr><name>adapter</name></expr></argument>, <argument><expr><name>OID_GEN_LINK_STATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>link_state</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<switch>switch <condition>(<expr><name><name>link_state</name><operator>.</operator><name>MediaConnectState</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MediaConnectStateConnected</name></expr>:</case>



<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>PCAP_IF_CONNECTION_STATUS_CONNECTED</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>MediaConnectStateDisconnected</name></expr>:</case>



<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>PCAP_IF_CONNECTION_STATUS_DISCONNECTED</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>



<expr_stmt><expr><name>status</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>oid_get_request</name><argument_list>(<argument><expr><name>adapter</name></expr></argument>, <argument><expr><name>OID_GEN_MEDIA_CONNECT_STATUS</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>connect_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>connect_status</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>NdisMediaStateConnected</name></expr>:</case>



<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>PCAP_IF_CONNECTION_STATUS_CONNECTED</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NdisMediaStateDisconnected</name></expr>:</case>



<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>PCAP_IF_CONNECTION_STATUS_DISCONNECTED</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>PacketCloseAdapter</name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pcap_platform_finddevs</name><parameter_list>(<parameter><decl><type><name>pcap_if_list_t</name> <modifier>*</modifier></type><name>devlistp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>AdaptersName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>NameLength</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>


















<expr_stmt><expr><name>NameLength</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PacketGetAdapterNames</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>NameLength</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>last_error</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>last_error</name> <operator>!=</operator> <name>ERROR_INSUFFICIENT_BUFFER</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_win32_err</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>last_error</name></expr></argument>, <argument><expr><literal type="string">"PacketGetAdapterNames"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>NameLength</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>AdaptersName</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>NameLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>AdaptersName</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Cannot allocate enough memory to list the adapters."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PacketGetAdapterNames</name><argument_list>(<argument><expr><name>AdaptersName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>NameLength</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_win32_err</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"PacketGetAdapterNames"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>AdaptersName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>













<expr_stmt><expr><name>desc</name> <operator>=</operator> <operator>&amp;</operator><name><name>AdaptersName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>desc</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><name>desc</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>desc</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>







<expr_stmt><expr><name>desc</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>




<expr_stmt><expr><name>name</name> <operator>=</operator> <operator>&amp;</operator><name><name>AdaptersName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>name</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bpf_u_int32</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PACKET_IS_LOOPBACK_ADAPTER</name></expr></argument>)</argument_list></call></expr></cpp:if>



<if_stmt><if>if <condition>(<expr><call><name>PacketIsLoopbackAdapter</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>PCAP_IF_LOOPBACK</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<if_stmt><if>if <condition>(<expr><call><name>get_if_flags</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>pcap_add_if_npf</name><argument_list>(<argument><expr><name>devlistp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>,
<argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>name</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>desc</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>AdaptersName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADAPTERSNAME_LEN</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>pcap_lookupdev</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwVersion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwWindowsMajorVersion</name></decl>;</decl_stmt>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name> <name>(</name><name>push</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name> <name>(</name><name>disable</name><name>:</name> <name>4996</name><name>)</name></cpp:pragma>
<expr_stmt><expr><name>dwVersion</name> <operator>=</operator> <call><name>GetVersion</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name> <name>(</name><name>pop</name><name>)</name></cpp:pragma>
<expr_stmt><expr><name>dwWindowsMajorVersion</name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><operator>(</operator><call><name>LOBYTE</name><argument_list>(<argument><expr><call><name>LOWORD</name><argument_list>(<argument><expr><name>dwVersion</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dwVersion</name> <operator>&gt;=</operator> <literal type="number">0x80000000</literal> <operator>&amp;&amp;</operator> <name>dwWindowsMajorVersion</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>ULONG</name></type> <name>NameLength</name> <init>= <expr><name>ADAPTERSNAME_LEN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>AdaptersName</name><index>[<expr><name>ADAPTERSNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PacketGetAdapterNames</name><argument_list>(<argument><expr><name>AdaptersName</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>NameLength</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>AdaptersName</name><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<decl_stmt><decl><type><name>ULONG</name></type> <name>NameLength</name> <init>= <expr><name>ADAPTERSNAME_LEN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>WCHAR</name></type> <name><name>AdaptersName</name><index>[<expr><name>ADAPTERSNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>BufferSpaceLeft</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tAstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>Unameptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>Adescptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>namelen</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>TAdaptersName</name> <init>= <expr><operator>(</operator><name>WCHAR</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>ADAPTERSNAME_LEN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>NAdapts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>TAdaptersName</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"memory allocation failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>PacketGetAdapterNames</name><argument_list>(<argument><expr><operator>(</operator><name>PTSTR</name><operator>)</operator><name>TAdaptersName</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>NameLength</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_win32_err</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"PacketGetAdapterNames"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>TAdaptersName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>BufferSpaceLeft</name> <operator>=</operator> <name>ADAPTERSNAME_LEN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>tAstr</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>TAdaptersName</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Unameptr</name> <operator>=</operator> <name>AdaptersName</name></expr>;</expr_stmt>




<do>do <block>{<block_content>




<expr_stmt><expr><name>namelen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>tAstr</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>BufferSpaceLeft</name> <operator>&lt;</operator> <name>namelen</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>



<goto>goto <name>quit</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>BufferSpaceLeft</name> <operator>-=</operator> <name>namelen</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>






<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>namelen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>Unameptr</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>tAstr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>




<expr_stmt><expr><name>NAdapts</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>namelen</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>;</do>





<expr_stmt><expr><name>Adescptr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>Unameptr</name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>NAdapts</name><operator>--</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>desclen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>desclen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>tAstr</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>BufferSpaceLeft</name> <operator>&lt;</operator> <name>desclen</name></expr>)</condition> <block>{<block_content>



<goto>goto <name>quit</name>;</goto>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>Adescptr</name></expr></argument>, <argument><expr><name>tAstr</name></expr></argument>, <argument><expr><name>desclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Adescptr</name> <operator>+=</operator> <name>desclen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tAstr</name> <operator>+=</operator> <name>desclen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>BufferSpaceLeft</name> <operator>-=</operator> <name>desclen</name></expr>;</expr_stmt>
</block_content>}</block></while>

<label><name>quit</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>TAdaptersName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>AdaptersName</name><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>









<function><type><name>int</name></type>
<name>pcap_lookupnet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>bpf_u_int32</name> <modifier>*</modifier></type><name>netp</name></decl></parameter>, <parameter><decl><type><name>bpf_u_int32</name> <modifier>*</modifier></type><name>maskp</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<decl_stmt><decl><type><name>npf_if_addr</name></type> <name><name>if_addrs</name><index>[<expr><name>MAX_NETWORK_ADDRESSES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LONG</name></type> <name>if_addr_size</name> <init>= <expr><name>MAX_NETWORK_ADDRESSES</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>t_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LONG</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PacketGetNetInfoEx</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>device</name></expr></argument>, <argument><expr><name>if_addrs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>if_addr_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>netp</name> <operator>=</operator> <operator>*</operator><name>maskp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>if_addr_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>if_addrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>IPAddress</name><operator>.</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>t_addr</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><operator>(</operator><name><name>if_addrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>IPAddress</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>netp</name> <operator>=</operator> <name><name>t_addr</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>S_un</name><operator>.</operator><name>S_addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t_addr</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><operator>(</operator><name><name>if_addrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>SubnetMask</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>maskp</name> <operator>=</operator> <name><name>t_addr</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>S_un</name><operator>.</operator><name>S_addr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>netp</name> <operator>&amp;=</operator> <operator>*</operator><name>maskp</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>netp</name> <operator>=</operator> <operator>*</operator><name>maskp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pcap_lib_version_string</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_VERSION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../version.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pcap_version_string</name><index>[]</index></name> <init>=
<expr><name>WINPCAP_PRODUCT_NAME</name> <literal type="string">" version "</literal> <name>WINPCAP_VER_STRING</name> <literal type="string">", based on "</literal> <name>PCAP_VERSION_STRING</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>pcap_lib_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pcap_lib_version_string</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>packet_version_string</name> <init>= <expr><call><name>PacketGetVersion</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>WINPCAP_VER_STRING</name></expr></argument>, <argument><expr><name>packet_version_string</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name>pcap_lib_version_string</name> <operator>=</operator> <name>pcap_version_string</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>







<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>full_pcap_version_string</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pcap_asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>full_pcap_version_string</name></expr></argument>,
<argument><expr><name>WINPCAP_PRODUCT_NAME</name> <literal type="string">" version "</literal> <name>WINPCAP_VER_STRING</name> <literal type="string">" (packet.dll version %s), based on "</literal> <name>PCAP_VERSION_STRING</name></expr></argument>,
<argument><expr><name>packet_version_string</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pcap_lib_version_string</name> <operator>=</operator> <name>full_pcap_version_string</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>pcap_lib_version_string</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>





<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>pcap_lib_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pcap_lib_version_string</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>full_pcap_version_string</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pcap_asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>full_pcap_version_string</name></expr></argument>,
<argument><expr><name>PCAP_VERSION_STRING</name> <literal type="string">" (packet.dll version %s)"</literal></expr></argument>,
<argument><expr><call><name>PacketGetVersion</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pcap_lib_version_string</name> <operator>=</operator> <name>full_pcap_version_string</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>pcap_lib_version_string</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
