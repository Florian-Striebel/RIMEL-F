<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/ieee80211.h">
































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_NET80211_IEEE80211_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_NET80211_IEEE80211_H_</name></cpp:macro></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC0_VERSION_MASK</name></cpp:macro> <cpp:value>0x03</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC0_VERSION_SHIFT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC0_VERSION_0</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC0_TYPE_MASK</name></cpp:macro> <cpp:value>0x0c</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC0_TYPE_SHIFT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC0_TYPE_MGT</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC0_TYPE_CTL</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC0_TYPE_DATA</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC0_SUBTYPE_MASK</name></cpp:macro> <cpp:value>0xf0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC0_SUBTYPE_SHIFT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC0_SUBTYPE_ASSOC_REQ</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC0_SUBTYPE_ASSOC_RESP</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC0_SUBTYPE_REASSOC_REQ</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC0_SUBTYPE_REASSOC_RESP</name></cpp:macro> <cpp:value>0x30</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC0_SUBTYPE_PROBE_REQ</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC0_SUBTYPE_PROBE_RESP</name></cpp:macro> <cpp:value>0x50</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC0_SUBTYPE_BEACON</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC0_SUBTYPE_ATIM</name></cpp:macro> <cpp:value>0x90</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC0_SUBTYPE_DISASSOC</name></cpp:macro> <cpp:value>0xa0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC0_SUBTYPE_AUTH</name></cpp:macro> <cpp:value>0xb0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC0_SUBTYPE_DEAUTH</name></cpp:macro> <cpp:value>0xc0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC0_SUBTYPE_PS_POLL</name></cpp:macro> <cpp:value>0xa0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC0_SUBTYPE_RTS</name></cpp:macro> <cpp:value>0xb0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC0_SUBTYPE_CTS</name></cpp:macro> <cpp:value>0xc0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC0_SUBTYPE_ACK</name></cpp:macro> <cpp:value>0xd0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC0_SUBTYPE_CF_END</name></cpp:macro> <cpp:value>0xe0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC0_SUBTYPE_CF_END_ACK</name></cpp:macro> <cpp:value>0xf0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC0_SUBTYPE_DATA</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC0_SUBTYPE_CF_ACK</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC0_SUBTYPE_CF_POLL</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC0_SUBTYPE_CF_ACPL</name></cpp:macro> <cpp:value>0x30</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC0_SUBTYPE_NODATA</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC0_SUBTYPE_NODATA_CF_ACK</name></cpp:macro> <cpp:value>0x50</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC0_SUBTYPE_NODATA_CF_POLL</name></cpp:macro> <cpp:value>0x60</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC0_SUBTYPE_NODATA_CF_ACPL</name></cpp:macro> <cpp:value>0x70</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC0_SUBTYPE_QOS</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC0_SUBTYPE_QOS_NULL</name></cpp:macro> <cpp:value>0xc0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC1_DIR_MASK</name></cpp:macro> <cpp:value>0x03</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC1_DIR_NODS</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC1_DIR_TODS</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC1_DIR_FROMDS</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC1_DIR_DSTODS</name></cpp:macro> <cpp:value>0x03</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC1_MORE_FRAG</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC1_RETRY</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC1_PWR_MGT</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC1_MORE_DATA</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC1_WEP</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_FC1_ORDER</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_SEQ_FRAG_MASK</name></cpp:macro> <cpp:value>0x000f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_SEQ_FRAG_SHIFT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_SEQ_SEQ_MASK</name></cpp:macro> <cpp:value>0xfff0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_SEQ_SEQ_SHIFT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_NWID_LEN</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_QOS_TXOP</name></cpp:macro> <cpp:value>0x00ff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_QOS_ACKPOLICY</name></cpp:macro> <cpp:value>0x60</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_QOS_ACKPOLICY_S</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_QOS_ESOP</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_QOS_ESOP_S</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_QOS_TID</name></cpp:macro> <cpp:value>0x0f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_MGT_SUBTYPE_NAMES</name></cpp:macro> <cpp:value>{ "assoc-req", "assoc-resp", "reassoc-req", "reassoc-resp", "probe-req", "probe-resp", "reserved#6", "reserved#7", "beacon", "atim", "disassoc", "auth", "deauth", "reserved#13", "reserved#14", "reserved#15" }</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_CTL_SUBTYPE_NAMES</name></cpp:macro> <cpp:value>{ "reserved#0", "reserved#1", "reserved#2", "reserved#3", "reserved#3", "reserved#5", "reserved#6", "reserved#7", "reserved#8", "reserved#9", "ps-poll", "rts", "cts", "ack", "cf-end", "cf-end-ack" }</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_DATA_SUBTYPE_NAMES</name></cpp:macro> <cpp:value>{ "data", "data-cf-ack", "data-cf-poll", "data-cf-ack-poll", "null", "cf-ack", "cf-poll", "cf-ack-poll", "qos-data", "qos-data-cf-ack", "qos-data-cf-poll", "qos-data-cf-ack-poll", "qos", "reserved#13", "qos-cf-poll", "qos-cf-ack-poll" }</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE80211_TYPE_NAMES</name></cpp:macro> <cpp:value>{ "mgt", "ctl", "data", "reserved#4" }</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
