<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/pcap-netfilter-linux.c">





























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap-int.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NEED_STRERROR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strerror.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/netlink.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/netfilter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/netfilter/nfnetlink.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/netfilter/nfnetlink_log.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/netfilter/nfnetlink_queue.h&gt;</cpp:file></cpp:include>










<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap-netfilter-linux.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HDR_LENGTH</name></cpp:macro> <cpp:value>(NLMSG_LENGTH(NLMSG_ALIGN(sizeof(struct nfgenmsg))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFLOG_IFACE</name></cpp:macro> <cpp:value>"nflog"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFQUEUE_IFACE</name></cpp:macro> <cpp:value>"nfqueue"</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{ <decl><name>OTHER</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><name>NFLOG</name></decl>, <decl><name>NFQUEUE</name></decl> }</block></enum></type> <name>nftype_t</name>;</typedef>




<struct>struct <name>pcap_netfilter</name> <block>{
<decl_stmt><decl><type><name>u_int</name></type> <name>packets_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>packets_nobufs</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>nfqueue_send_verdict</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>group_id</name></decl></parameter>, <parameter><decl><type><name>u_int32_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>u_int32_t</name></type> <name>verdict</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>netfilter_read_linux</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_packets</name></decl></parameter>, <parameter><decl><type><name>pcap_handler</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_netfilter</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>u_char</name> <modifier>*</modifier></type><name>bp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>break_loop</name></name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>break_loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR_BREAK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>handle</name><operator>-&gt;</operator><name>cc</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>









<do>do <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>recv</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>bufsize</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>break_loop</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>break_loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR_BREAK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOBUFS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>packets_nobufs</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><operator>(</operator><name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>errno</name> <operator>==</operator> <name>EINTR</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ENOBUFS</name><operator>)</operator></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Can't receive packet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>handle</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <name><name>handle</name><operator>-&gt;</operator><name>bp</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>ep</name> <operator>=</operator> <name>bp</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>bp</name> <operator>&lt;</operator> <name>ep</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>nlmsghdr</name></name> <modifier>*</modifier></type><name>nlh</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>nlmsghdr</name> <operator>*</operator><operator>)</operator> <name>bp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>msg_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nftype_t</name></type> <name>type</name> <init>= <expr><name>OTHER</name></expr></init></decl>;</decl_stmt>










<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>break_loop</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>bp</name></name> <operator>=</operator> <name>bp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>cc</name></name> <operator>=</operator> <name>ep</name> <operator>-</operator> <name>bp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>break_loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR_BREAK</name></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><name>count</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ep</name> <operator>-</operator> <name>bp</name> <operator>&lt;</operator> <call><name>NLMSG_SPACE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>




<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_len</name></name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>nlmsghdr</name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <operator>(</operator><name>u_int</name><operator>)</operator><name>len</name> <operator>&lt;</operator> <name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Message truncated: (got: %d) (nlmsg_len: %u)"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NFNL_SUBSYS_ID</name><argument_list>(<argument><expr><name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_type</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NFNL_SUBSYS_ULOG</name> <operator>&amp;&amp;</operator>
<call><name>NFNL_MSG_TYPE</name><argument_list>(<argument><expr><name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_type</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NFULNL_MSG_PACKET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>NFLOG</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>NFNL_SUBSYS_ID</name><argument_list>(<argument><expr><name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_type</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NFNL_SUBSYS_QUEUE</name> <operator>&amp;&amp;</operator>
<call><name>NFNL_MSG_TYPE</name><argument_list>(<argument><expr><name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_type</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NFQNL_MSG_PACKET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>NFQUEUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>OTHER</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>payload</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_pkthdr</name></name></type> <name>pkth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>nfgenmsg</name></name> <modifier>*</modifier></type><name>nfg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>!=</operator> <name>DLT_NFLOG</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>nfattr</name></name> <modifier>*</modifier></type><name>payload_attr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_len</name></name> <operator>&lt;</operator> <name>HDR_LENGTH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Malformed message: (nlmsg_len: %u)"</literal></expr></argument>, <argument><expr><name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nfg</name> <operator>=</operator> <call><name>NLMSG_DATA</name><argument_list>(<argument><expr><name>nlh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_len</name></name> <operator>&gt;</operator> <name>HDR_LENGTH</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>nfattr</name></name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><call><name>NFM_NFA</name><argument_list>(<argument><expr><name>nfg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr_len</name> <init>= <expr><name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_len</name></name> <operator>-</operator> <call><name>NLMSG_ALIGN</name><argument_list>(<argument><expr><name>HDR_LENGTH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>NFA_OK</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>attr_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>NFQUEUE</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><call><name>NFA_TYPE</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NFQA_PACKET_HDR</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>nfqnl_msg_packet_hdr</name></name> <modifier>*</modifier></type><name>pkt_hdr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>nfqnl_msg_packet_hdr</name> <operator>*</operator><operator>)</operator> <call><name>NFA_DATA</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>pkt_hdr</name><operator>-&gt;</operator><name>packet_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>NFQA_PAYLOAD</name></expr>:</case>
<expr_stmt><expr><name>payload_attr</name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>NFLOG</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><call><name>NFA_TYPE</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NFULA_PAYLOAD</name></expr>:</case>
<expr_stmt><expr><name>payload_attr</name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>NFA_NEXT</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>attr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>payload_attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>payload</name> <operator>=</operator> <call><name>NFA_DATA</name><argument_list>(<argument><expr><name>payload_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkth</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name><name>pkth</name><operator>.</operator><name>caplen</name></name> <operator>=</operator> <call><name>NFA_PAYLOAD</name><argument_list>(<argument><expr><name>payload_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>payload</name> <operator>=</operator> <call><name>NLMSG_DATA</name><argument_list>(<argument><expr><name>nlh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkth</name><operator>.</operator><name>caplen</name></name> <operator>=</operator> <name><name>pkth</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_len</name></name><operator>-</operator><call><name>NLMSG_ALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>nlmsghdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>payload</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkth</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>bpf_filter</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name></expr></argument>, <argument><expr><name>payload</name></expr></argument>, <argument><expr><name><name>pkth</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>pkth</name><operator>.</operator><name>caplen</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>packets_read</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkth</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>NFQUEUE</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>nfg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>nfqueue_send_verdict</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>nfg</name><operator>-&gt;</operator><name>res_id</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>NF_ACCEPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>msg_len</name> <operator>=</operator> <call><name>NLMSG_ALIGN</name><argument_list>(<argument><expr><name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>msg_len</name> <operator>&gt;</operator> <name>ep</name> <operator>-</operator> <name>bp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>msg_len</name> <operator>=</operator> <name>ep</name> <operator>-</operator> <name>bp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bp</name> <operator>+=</operator> <name>msg_len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <name>max_packets</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>PACKET_COUNT_IS_UNLIMITED</name><argument_list>(<argument><expr><name>max_packets</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>bp</name></name> <operator>=</operator> <name>bp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>cc</name></name> <operator>=</operator> <name>ep</name> <operator>-</operator> <name>bp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>cc</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>cc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>cc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>netfilter_set_datalink</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>dlt</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>netfilter_stats_linux</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_stat</name></name> <modifier>*</modifier></type><name>stats</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_netfilter</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>ps_recv</name></name> <operator>=</operator> <name><name>handlep</name><operator>-&gt;</operator><name>packets_read</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>ps_drop</name></name> <operator>=</operator> <name><name>handlep</name><operator>-&gt;</operator><name>packets_nobufs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>ps_ifdrop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>netfilter_inject_linux</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><name>buf</name></type> <name>_U_</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <name>size</name></type> <name>_U_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Packet injection is not supported on netfilter devices"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>my_nfattr</name> <block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>nfa_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>nfa_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>netfilter_send_config_msg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>msg_type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ack</name></decl></parameter>, <parameter><decl><type><name>u_int8_t</name></type> <name>family</name></decl></parameter>, <parameter><decl><type><name>u_int16_t</name></type> <name>res_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>my_nfattr</name></name> <modifier>*</modifier></type><name>mynfa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>aligned</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>nlmsghdr</name></name> <modifier>*</modifier></type><name>nlh</name> <init>= <expr><operator>(</operator>struct <name>nlmsghdr</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>nfgenmsg</name></name> <modifier>*</modifier></type><name>nfg</name> <init>= <expr><operator>(</operator>struct <name>nfgenmsg</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>buf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>nlmsghdr</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_nl</name></name></type> <name>snl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>seq_id</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>seq_id</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>seq_id</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>seq_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_len</name></name> <operator>=</operator> <call><name>NLMSG_LENGTH</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>nfgenmsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_type</name></name> <operator>=</operator> <name>msg_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_flags</name></name> <operator>=</operator> <name>NLM_F_REQUEST</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>ack</name></expr> ?</condition><then> <expr><name>NLM_F_ACK</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_pid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_seq</name></name> <operator>=</operator> <name>seq_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nfg</name><operator>-&gt;</operator><name>nfgen_family</name></name> <operator>=</operator> <name>family</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nfg</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>NFNETLINK_V0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nfg</name><operator>-&gt;</operator><name>res_id</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>res_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mynfa</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>nfattr</name></name> <modifier>*</modifier></type><name>nfa</name> <init>= <expr><operator>(</operator>struct <name>nfattr</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>buf</name> <operator>+</operator> <call><name>NLMSG_ALIGN</name><argument_list>(<argument><expr><name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_len</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>nfa</name><operator>-&gt;</operator><name>nfa_type</name></name> <operator>=</operator> <name><name>mynfa</name><operator>-&gt;</operator><name>nfa_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nfa</name><operator>-&gt;</operator><name>nfa_len</name></name> <operator>=</operator> <call><name>NFA_LENGTH</name><argument_list>(<argument><expr><name><name>mynfa</name><operator>-&gt;</operator><name>nfa_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>NFA_DATA</name><argument_list>(<argument><expr><name>nfa</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>mynfa</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>mynfa</name><operator>-&gt;</operator><name>nfa_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_len</name></name> <operator>=</operator> <call><name>NLMSG_ALIGN</name><argument_list>(<argument><expr><name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_len</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>NFA_ALIGN</name><argument_list>(<argument><expr><name><name>nfa</name><operator>-&gt;</operator><name>nfa_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>snl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snl</name><operator>.</operator><name>nl_family</name></name> <operator>=</operator> <name>AF_NETLINK</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sendto</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>nlh</name></expr></argument>, <argument><expr><name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>snl</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>snl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ack</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<do>do <block>{<block_content>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>addrlen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>snl</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>


<do>do <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>recvfrom</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>snl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>(</operator><name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>errno</name> <operator>==</operator> <name>EINTR</name><operator>)</operator></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>len</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>addrlen</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>snl</name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <name><name>snl</name><operator>.</operator><name>nl_family</name></name> <operator>!=</operator> <name>AF_NETLINK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nlh</name> <operator>=</operator> <operator>(</operator>struct <name>nlmsghdr</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>snl</name><operator>.</operator><name>nl_pid</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>seq_id</name> <operator>!=</operator> <name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_seq</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>u_int</name><operator>)</operator><name>len</name> <operator>&gt;=</operator> <call><name>NLMSG_SPACE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>NLMSG_OK</name><argument_list>(<argument><expr><name>nlh</name></expr></argument>, <argument><expr><operator>(</operator><name>u_int</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_type</name></name> <operator>==</operator> <name>NLMSG_ERROR</name> <operator>||</operator> <operator>(</operator><name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_type</name></name> <operator>==</operator> <name>NLMSG_DONE</name> <operator>&amp;&amp;</operator> <name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_flags</name></name> <operator>&amp;</operator> <name>NLM_F_MULTI</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_len</name></name> <operator>&lt;</operator> <call><name>NLMSG_ALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>nlmsgerr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBADMSG</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <operator>-</operator><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>NLMSG_DATA</name><argument_list>(<argument><expr><name>nlh</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>errno</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nlh</name> <operator>=</operator> <call><name>NLMSG_NEXT</name><argument_list>(<argument><expr><name>nlh</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block> while <condition>(<expr><literal type="number">1</literal></expr>)</condition>;</do>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>nflog_send_config_msg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>family</name></decl></parameter>, <parameter><decl><type><name>u_int16_t</name></type> <name>group_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>my_nfattr</name></name> <modifier>*</modifier></type><name>mynfa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>netfilter_send_config_msg</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>(</operator><name>NFNL_SUBSYS_ULOG</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>NFULNL_MSG_CONFIG</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>family</name></expr></argument>, <argument><expr><name>group_id</name></expr></argument>, <argument><expr><name>mynfa</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>nflog_send_config_cmd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>group_id</name></decl></parameter>, <parameter><decl><type><name>u_int8_t</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>u_int8_t</name></type> <name>family</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>nfulnl_msg_config_cmd</name></name></type> <name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>my_nfattr</name></name></type> <name>nfa</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>command</name></name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nfa</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>&amp;</operator><name>msg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nfa</name><operator>.</operator><name>nfa_type</name></name> <operator>=</operator> <name>NFULA_CFG_CMD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nfa</name><operator>.</operator><name>nfa_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<return>return <expr><call><name>nflog_send_config_msg</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>family</name></expr></argument>, <argument><expr><name>group_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nfa</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>nflog_send_config_mode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>group_id</name></decl></parameter>, <parameter><decl><type><name>u_int8_t</name></type> <name>copy_mode</name></decl></parameter>, <parameter><decl><type><name>u_int32_t</name></type> <name>copy_range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>nfulnl_msg_config_mode</name></name></type> <name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>my_nfattr</name></name></type> <name>nfa</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>copy_range</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>copy_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>copy_mode</name></name> <operator>=</operator> <name>copy_mode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nfa</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>&amp;</operator><name>msg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nfa</name><operator>.</operator><name>nfa_type</name></name> <operator>=</operator> <name>NFULA_CFG_MODE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nfa</name><operator>.</operator><name>nfa_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<return>return <expr><call><name>nflog_send_config_msg</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>AF_UNSPEC</name></expr></argument>, <argument><expr><name>group_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nfa</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>nfqueue_send_verdict</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>group_id</name></decl></parameter>, <parameter><decl><type><name>u_int32_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>u_int32_t</name></type> <name>verdict</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>nfqnl_msg_verdict_hdr</name></name></type> <name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>my_nfattr</name></name></type> <name>nfa</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>id</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>verdict</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>verdict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nfa</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>&amp;</operator><name>msg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nfa</name><operator>.</operator><name>nfa_type</name></name> <operator>=</operator> <name>NFQA_VERDICT_HDR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nfa</name><operator>.</operator><name>nfa_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<return>return <expr><call><name>netfilter_send_config_msg</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>(</operator><name>NFNL_SUBSYS_QUEUE</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>NFQNL_MSG_VERDICT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AF_UNSPEC</name></expr></argument>, <argument><expr><name>group_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nfa</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>nfqueue_send_config_msg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>family</name></decl></parameter>, <parameter><decl><type><name>u_int16_t</name></type> <name>group_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>my_nfattr</name></name> <modifier>*</modifier></type><name>mynfa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>netfilter_send_config_msg</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>(</operator><name>NFNL_SUBSYS_QUEUE</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>NFQNL_MSG_CONFIG</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>family</name></expr></argument>, <argument><expr><name>group_id</name></expr></argument>, <argument><expr><name>mynfa</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>nfqueue_send_config_cmd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>group_id</name></decl></parameter>, <parameter><decl><type><name>u_int8_t</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>u_int16_t</name></type> <name>pf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>nfqnl_msg_config_cmd</name></name></type> <name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>my_nfattr</name></name></type> <name>nfa</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>command</name></name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>pf</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>pf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nfa</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>&amp;</operator><name>msg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nfa</name><operator>.</operator><name>nfa_type</name></name> <operator>=</operator> <name>NFQA_CFG_CMD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nfa</name><operator>.</operator><name>nfa_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<return>return <expr><call><name>nfqueue_send_config_msg</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>AF_UNSPEC</name></expr></argument>, <argument><expr><name>group_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nfa</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>nfqueue_send_config_mode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>group_id</name></decl></parameter>, <parameter><decl><type><name>u_int8_t</name></type> <name>copy_mode</name></decl></parameter>, <parameter><decl><type><name>u_int32_t</name></type> <name>copy_range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>nfqnl_msg_config_params</name></name></type> <name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>my_nfattr</name></name></type> <name>nfa</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>copy_range</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>copy_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>copy_mode</name></name> <operator>=</operator> <name>copy_mode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nfa</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>&amp;</operator><name>msg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nfa</name><operator>.</operator><name>nfa_type</name></name> <operator>=</operator> <name>NFQA_CFG_PARAMS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nfa</name><operator>.</operator><name>nfa_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<return>return <expr><call><name>nfqueue_send_config_msg</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>AF_UNSPEC</name></expr></argument>, <argument><expr><name>group_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nfa</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>netfilter_activate</name><parameter_list>(<parameter><decl><type><name>pcap_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dev</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name><name>groups</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>group_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nftype_t</name></type> <name>type</name> <init>= <expr><name>OTHER</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>NFLOG_IFACE</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>NFLOG_IFACE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dev</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>NFLOG_IFACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>NFLOG</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>NFQUEUE_IFACE</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>NFQUEUE_IFACE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dev</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>NFQUEUE_IFACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>NFQUEUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>OTHER</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>dev</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dev</name><operator>++</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>dev</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>group_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end_dev</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>group_count</name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Maximum 32 netfilter groups! dev: %s"</literal></expr></argument>,
<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>group_id</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end_dev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end_dev</name> <operator>!=</operator> <name>dev</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>group_id</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>group_id</name></expr></argument> &gt;</argument_list></name> <literal type="number">65535</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Netfilter group range from 0 to 65535 (got %ld)"</literal></expr></argument>,
<argument><expr><name>group_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>groups</name><index>[<expr><name>group_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <name>group_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dev</name> <operator>=</operator> <name>end_dev</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>dev</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dev</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>OTHER</name> <operator>||</operator> <operator>*</operator><name>dev</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Can't get netfilter group(s) index from %s"</literal></expr></argument>,
<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>group_count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>groups</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>group_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>









<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>&gt;</operator> <name>MAXIMUM_SNAPLEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>=</operator> <name>MAXIMUM_SNAPLEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>=</operator> <literal type="number">128</literal> <operator>+</operator> <name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>read_op</name></name> <operator>=</operator> <name>netfilter_read_linux</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>inject_op</name></name> <operator>=</operator> <name>netfilter_inject_linux</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>setfilter_op</name></name> <operator>=</operator> <name>install_bpf_program</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>setdirection_op</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>set_datalink_op</name></name> <operator>=</operator> <name>netfilter_set_datalink</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>getnonblock_op</name></name> <operator>=</operator> <name>pcap_getnonblock_fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>setnonblock_op</name></name> <operator>=</operator> <name>pcap_setnonblock_fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>stats_op</name></name> <operator>=</operator> <name>netfilter_stats_linux</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_NETLINK</name></expr></argument>, <argument><expr><name>SOCK_RAW</name></expr></argument>, <argument><expr><name>NETLINK_NETFILTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Can't create raw socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>NFLOG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_NFLOG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>dlt_list</name></name> <operator>=</operator> <operator>(</operator><name>u_int</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u_int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>dlt_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>dlt_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>DLT_NFLOG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>dlt_list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>DLT_IPV4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>dlt_count</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_IPV4</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>bufsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>handle</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Can't allocate dump buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>close_fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>NFLOG</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>nflog_send_config_cmd</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NFULNL_CFG_CMD_PF_UNBIND</name></expr></argument>, <argument><expr><name>AF_INET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"NFULNL_CFG_CMD_PF_UNBIND"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>close_fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>nflog_send_config_cmd</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NFULNL_CFG_CMD_PF_BIND</name></expr></argument>, <argument><expr><name>AF_INET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"NFULNL_CFG_CMD_PF_BIND"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>close_fail</name>;</goto>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>group_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>nflog_send_config_cmd</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NFULNL_CFG_CMD_BIND</name></expr></argument>, <argument><expr><name>AF_UNSPEC</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Can't listen on group group index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>close_fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>nflog_send_config_mode</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NFULNL_COPY_PACKET</name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"NFULNL_COPY_PACKET"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>close_fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>nfqueue_send_config_cmd</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NFQNL_CFG_CMD_PF_UNBIND</name></expr></argument>, <argument><expr><name>AF_INET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"NFQNL_CFG_CMD_PF_UNBIND"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>close_fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>nfqueue_send_config_cmd</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NFQNL_CFG_CMD_PF_BIND</name></expr></argument>, <argument><expr><name>AF_INET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"NFQNL_CFG_CMD_PF_BIND"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>close_fail</name>;</goto>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>group_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>nfqueue_send_config_cmd</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NFQNL_CFG_CMD_BIND</name></expr></argument>, <argument><expr><name>AF_UNSPEC</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Can't listen on group group index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>close_fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>nfqueue_send_config_mode</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NFQNL_COPY_PACKET</name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"NFQNL_COPY_PACKET"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>close_fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>rfmon</name></name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>pcap_cleanup_live_common</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR_RFMON_NOTSUP</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>buffer_size</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_RCVBUF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>buffer_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>buffer_size</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"SO_RCVBUF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>close_fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>selectable_fd</name></name> <operator>=</operator> <name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>close_fail</name>:</label>
<expr_stmt><expr><call><name>pcap_cleanup_live_common</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>pcap_t</name> <modifier>*</modifier></type>
<name>netfilter_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ebuf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>is_ours</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>


<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>device</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>NFLOG_IFACE</name></expr></argument>, <argument><expr><sizeof>sizeof <name>NFLOG_IFACE</name></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cp</name> <operator>+=</operator> <sizeof>sizeof <name>NFLOG_IFACE</name></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>NFQUEUE_IFACE</name></expr></argument>, <argument><expr><sizeof>sizeof <name>NFQUEUE_IFACE</name></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cp</name> <operator>+=</operator> <sizeof>sizeof <name>NFQUEUE_IFACE</name></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>is_ours</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>is_ours</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><operator>*</operator><name>is_ours</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>pcap_create_common</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>pcap_netfilter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>activate_op</name></name> <operator>=</operator> <name>netfilter_activate</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>netfilter_findalldevs</name><parameter_list>(<parameter><decl><type><name>pcap_if_list_t</name> <modifier>*</modifier></type><name>devlistp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err_str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sock</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sock</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_NETLINK</name></expr></argument>, <argument><expr><name>SOCK_RAW</name></expr></argument>, <argument><expr><name>NETLINK_NETFILTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sock</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EAFNOSUPPORT</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EPROTONOSUPPORT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>err_str</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Can't open netlink socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><call><name>add_dev</name><argument_list>(<argument><expr><name>devlistp</name></expr></argument>, <argument><expr><name>NFLOG_IFACE</name></expr></argument>,
<argument><expr><name>PCAP_IF_CONNECTION_STATUS_NOT_APPLICABLE</name></expr></argument>,
<argument><expr><literal type="string">"Linux netfilter log (NFLOG) interface"</literal></expr></argument>, <argument><expr><name>err_str</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>add_dev</name><argument_list>(<argument><expr><name>devlistp</name></expr></argument>, <argument><expr><name>NFQUEUE_IFACE</name></expr></argument>,
<argument><expr><name>PCAP_IF_CONNECTION_STATUS_NOT_APPLICABLE</name></expr></argument>,
<argument><expr><literal type="string">"Linux netfilter queue (NFQUEUE) interface"</literal></expr></argument>, <argument><expr><name>err_str</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
