<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/missing/snprintf.c">




































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"portability.h"</cpp:file></cpp:include>

<enum>enum <name>format_flags</name> <block>{
<decl><name>minus_flag</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>plus_flag</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>space_flag</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>alternate_flag</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>zero_flag</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>
}</block>;</enum>





<struct>struct <name>state</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>theend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>max_sz</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>append_char</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>char</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>reserve</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_VSNPRINTF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>sn_reserve</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>state</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name>n</name> <operator>&gt;</operator> <name><name>state</name><operator>-&gt;</operator><name>theend</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>sn_append_char</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>sn_reserve</name> <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>state</name><operator>-&gt;</operator><name>s</name></name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static int
as_reserve (struct state *state, size_t n)
{
if (state-&gt;s + n &gt; state-&gt;theend) {
int off = state-&gt;s - state-&gt;str;
unsigned char *tmp;

if (state-&gt;max_sz &amp;&amp; state-&gt;sz &gt;= state-&gt;max_sz)
return 1;

state-&gt;sz = max(state-&gt;sz * 2, state-&gt;sz + n);
if (state-&gt;max_sz)
state-&gt;sz = min(state-&gt;sz, state-&gt;max_sz);
tmp = realloc (state-&gt;str, state-&gt;sz);
if (tmp == NULL)
return 1;
state-&gt;str = tmp;
state-&gt;s = state-&gt;str + off;
state-&gt;theend = state-&gt;str + state-&gt;sz - 1;
}
return 0;
}

static int
as_append_char (struct state *state, unsigned char c)
{
if(as_reserve (state, 1))
return 1;
else {
*state-&gt;s++ = c;
return 0;
}
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>append_number</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>rep</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minusp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name>prec</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>zero_flag</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>prec</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>prec</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>num</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<do>do<block>{<block_content>
<if_stmt><if>if<condition>(<expr><call>(<modifier>*</modifier><name><name>state</name><operator>-&gt;</operator><name>append_char</name></name>)<argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>rep</name><index>[<expr><name>num</name> <operator>%</operator> <name>base</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>/=</operator> <name>base</name></expr>;</expr_stmt>
</block_content>}</block>while<condition>(<expr><name>num</name></expr>)</condition>;</do>
<expr_stmt><expr><name>prec</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

<while>while<condition>(<expr><name>prec</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<if_stmt><if>if<condition>(<expr><call>(<modifier>*</modifier><name><name>state</name><operator>-&gt;</operator><name>append_char</name></name>)<argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>alternate_flag</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>base</name> <operator>==</operator> <literal type="number">16</literal> <operator>||</operator> <name>base</name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>base</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>zero_flag</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>width</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>minusp</name> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>space_flag</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>plus_flag</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>width</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while<condition>(<expr><name>width</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<if_stmt><if>if<condition>(<expr><call>(<modifier>*</modifier><name><name>state</name><operator>-&gt;</operator><name>append_char</name></name>)<argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>alternate_flag</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>base</name> <operator>==</operator> <literal type="number">16</literal> <operator>||</operator> <name>base</name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition><block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>base</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><call>(<modifier>*</modifier><name><name>state</name><operator>-&gt;</operator><name>append_char</name></name>)<argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>rep</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>+</operator> <literal type="number">23</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call>(<modifier>*</modifier><name><name>state</name><operator>-&gt;</operator><name>append_char</name></name>)<argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>minusp</name></expr>)</condition><block>{<block_content>
<if_stmt><if>if<condition>(<expr><call>(<modifier>*</modifier><name><name>state</name><operator>-&gt;</operator><name>append_char</name></name>)<argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>plus_flag</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call>(<modifier>*</modifier><name><name>state</name><operator>-&gt;</operator><name>append_char</name></name>)<argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>space_flag</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call>(<modifier>*</modifier><name><name>state</name><operator>-&gt;</operator><name>append_char</name></name>)<argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>minus_flag</name></expr>)</condition><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>s</name><index>[<expr><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>s</name><index>[<expr><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>s</name><index>[<expr><operator>-</operator><name>len</name><operator>+</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>s</name><index>[<expr><operator>-</operator><name>len</name><operator>+</operator><name>i</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></if></if_stmt>
<expr_stmt><expr><name>width</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>width</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<if_stmt><if>if<condition>(<expr><call>(<modifier>*</modifier><name><name>state</name><operator>-&gt;</operator><name>append_char</name></name>)<argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>minus_flag</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>s</name><index>[<expr><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>s</name><index>[<expr><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>s</name><index>[<expr><operator>-</operator><name>len</name><operator>+</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>s</name><index>[<expr><operator>-</operator><name>len</name><operator>+</operator><name>i</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>append_string</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>prec</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>prec</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>width</name> <operator>-=</operator> <name>prec</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>width</name> <operator>-=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>minus_flag</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<while>while<condition>(<expr><name>width</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><call>(<modifier>*</modifier><name><name>state</name><operator>-&gt;</operator><name>append_char</name></name>) <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></while></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>prec</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>arg</name> <operator>&amp;&amp;</operator> <name>prec</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name><name>state</name><operator>-&gt;</operator><name>append_char</name></name>) <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>*</operator><name>arg</name><operator>++</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>arg</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name><name>state</name><operator>-&gt;</operator><name>append_char</name></name>) <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>*</operator><name>arg</name><operator>++</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>minus_flag</name></expr>)</condition><block type="pseudo"><block_content>
<while>while<condition>(<expr><name>width</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><call>(<modifier>*</modifier><name><name>state</name><operator>-&gt;</operator><name>append_char</name></name>) <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></while></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>append_char</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>arg</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while<condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>minus_flag</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>--</operator><name>width</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><call>(<modifier>*</modifier><name><name>state</name><operator>-&gt;</operator><name>append_char</name></name>) <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>

<if_stmt><if>if<condition>(<expr><call>(<modifier>*</modifier><name><name>state</name><operator>-&gt;</operator><name>append_char</name></name>) <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<while>while<condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>minus_flag</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>--</operator><name>width</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><call>(<modifier>*</modifier><name><name>state</name><operator>-&gt;</operator><name>append_char</name></name>) <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARSE_INT_FORMAT</name><parameter_list>(<parameter><type><name>res</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>, <parameter><type><name>unsig</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (long_flag) res = (unsig long)va_arg(arg, unsig long); else if (short_flag) res = (unsig short)va_arg(arg, unsig int); else res = (unsig int)va_arg(arg, unsig int)</cpp:value></cpp:define>











<function><type><specifier>static</specifier> <name>int</name></type>
<name>xyzprintf</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>char_format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>format</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>char_format</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl>;</decl_stmt>

<while>while<condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>format</name><operator>++</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prec</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>long_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>short_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<while>while<condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>format</name><operator>++</operator><operator>)</operator></expr>)</condition><block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>minus_flag</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>plus_flag</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>space_flag</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>alternate_flag</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>zero_flag</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>space_flag</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>plus_flag</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>^=</operator> <name>space_flag</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>minus_flag</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>zero_flag</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>^=</operator> <name>zero_flag</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name>width</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>format</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block> while<condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>;</do></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>format</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>format</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><name>prec</name> <operator>=</operator> <name>prec</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>format</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block> while<condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>;</do></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prec</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>format</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'h'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>short_flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>format</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>long_flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>format</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'c'</literal></expr> :</case>
<if_stmt><if>if<condition>(<expr><call><name>append_char</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr> :</case>
<if_stmt><if>if <condition>(<expr><call><name>append_string</name><argument_list>(<argument><expr><name>state</name></expr></argument>,
<argument><expr><macro><name>va_arg</name><argument_list>(<argument>ap</argument>, <argument>unsigned char*</argument>)</argument_list></macro></expr></argument>,
<argument><expr><name>width</name></expr></argument>,
<argument><expr><name>prec</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'d'</literal></expr> :</case>
<case>case <expr><literal type="char">'i'</literal></expr> :</case> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minusp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PARSE_INT_FORMAT</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>, <argument><expr><name>signed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>minusp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>-</operator><name>arg</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>append_number</name> <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="string">"0123456789"</literal></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><name>prec</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>minusp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'u'</literal></expr> :</case> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>arg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PARSE_INT_FORMAT</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>append_number</name> <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="string">"0123456789"</literal></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><name>prec</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'o'</literal></expr> :</case> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>arg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PARSE_INT_FORMAT</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>append_number</name> <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">010</literal></expr></argument>, <argument><expr><literal type="string">"01234567"</literal></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><name>prec</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'x'</literal></expr> :</case> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>arg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PARSE_INT_FORMAT</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>append_number</name> <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>, <argument><expr><literal type="string">"0123456789abcdef"</literal></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><name>prec</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'X'</literal></expr> :</case><block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>arg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PARSE_INT_FORMAT</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>append_number</name> <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>, <argument><expr><literal type="string">"0123456789ABCDEF"</literal></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><name>prec</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'p'</literal></expr> :</case> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>arg</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>append_number</name> <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>, <argument><expr><literal type="string">"0123456789ABCDEF"</literal></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><name>prec</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'n'</literal></expr> :</case> <block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name><operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>s</name></name> <operator>-</operator> <name><name>state</name><operator>-&gt;</operator><name>str</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'\0'</literal></expr> :</case>
<expr_stmt><expr><operator>--</operator><name>format</name></expr>;</expr_stmt>

<case>case <expr><literal type="char">'%'</literal></expr> :</case>
<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name><name>state</name><operator>-&gt;</operator><name>append_char</name></name>)<argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<default>default :</default>
<if_stmt><if>if <condition>( <expr><call>(<modifier>*</modifier><name><name>state</name><operator>-&gt;</operator><name>append_char</name></name>)<argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call>(<modifier>*</modifier><name><name>state</name><operator>-&gt;</operator><name>append_char</name></name>)<argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <if type="elseif">else
if <condition>(<expr><call>(<modifier>*</modifier><name><name>state</name><operator>-&gt;</operator><name>append_char</name></name>) <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SNPRINTF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type>
<name>pcap_snprintf</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pcap_vsnprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PARANOIA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret2</name> <operator>=</operator> <call><name>pcap_vsprintf</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ret2</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ASPRINTF</name></expr></argument>)</argument_list></call></expr></cpp:if>
int
asprintf (char **ret, const char *format, ...)
{
va_list args;
int val;

va_start(args, format);
val = vasprintf (ret, format, args);

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PARANOIA</name></expr></argument>)</argument_list></call></expr></cpp:if>
{
int ret2;
char *tmp;
tmp = malloc (val + 1);
if (tmp == NULL)
abort ();

ret2 = vsprintf (tmp, format, args);
if (val != ret2 || strcmp(*ret, tmp))
abort ();
free (tmp);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

va_end(args);
return val;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ASNPRINTF</name></expr></argument>)</argument_list></call></expr></cpp:if>
int
pcap_asnprintf (char **ret, size_t max_sz, const char *format, ...)
{
va_list args;
int val;

va_start(args, format);
val = pcap_vasnprintf (ret, max_sz, format, args);
va_end(args);

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PARANOIA</name></expr></argument>)</argument_list></call></expr></cpp:if>
{
int ret2;
char *tmp;
tmp = malloc (val + 1);
if (tmp == NULL)
abort ();

va_start(args, format);
ret2 = pcap_vsprintf (tmp, format, args);
va_end(args);
if (val != ret2 || strcmp(*ret, tmp))
abort ();
free (tmp);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

return val;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_VASPRINTF</name></expr></argument>)</argument_list></call></expr></cpp:if>
int
pcap_vasprintf (char **ret, const char *format, va_list args)
{
return pcap_vasnprintf (ret, 0, format, args);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_VASNPRINTF</name></expr></argument>)</argument_list></call></expr></cpp:if>
int
pcap_vasnprintf (char **ret, size_t max_sz, const char *format, va_list args)
{
int st;
size_t len;
struct state state;

state.max_sz = max_sz;
state.sz = 1;
state.str = malloc(state.sz);
if (state.str == NULL) {
*ret = NULL;
return -1;
}
state.s = state.str;
state.theend = state.s + state.sz - 1;
state.append_char = as_append_char;
state.reserve = as_reserve;

st = xyzprintf (&amp;state, format, args);
if (st) {
free (state.str);
*ret = NULL;
return -1;
} else {
char *tmp;

*state.s = '\0';
len = state.s - state.str;
tmp = realloc (state.str, len+1);
if (tmp == NULL) {
free (state.str);
*ret = NULL;
return -1;
}
*ret = tmp;
return len;
}
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_VSNPRINTF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type>
<name>pcap_vsnprintf</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>state</name></name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ustr</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>str</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>state</name><operator>.</operator><name>max_sz</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>.</operator><name>sz</name></name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name>ustr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>.</operator><name>s</name></name> <operator>=</operator> <name>ustr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>.</operator><name>theend</name></name> <operator>=</operator> <name>ustr</name> <operator>+</operator> <name>sz</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>.</operator><name>append_char</name></name> <operator>=</operator> <name>sn_append_char</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>.</operator><name>reserve</name></name> <operator>=</operator> <name>sn_reserve</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>xyzprintf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>state</name><operator>.</operator><name>s</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>sz</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name><name>state</name><operator>.</operator><name>s</name></name> <operator>-</operator> <name><name>state</name><operator>.</operator><name>str</name></name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
