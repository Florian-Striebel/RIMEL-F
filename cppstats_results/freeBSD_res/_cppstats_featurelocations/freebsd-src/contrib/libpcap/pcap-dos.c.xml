<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/pcap-dos.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_32BIT_DRIVERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msdos/pm_drvr/pmdrvr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msdos/pm_drvr/pci.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msdos/pm_drvr/bios32.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msdos/pm_drvr/module.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msdos/pm_drvr/3c501.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msdos/pm_drvr/3c503.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msdos/pm_drvr/3c509.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msdos/pm_drvr/3c59x.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msdos/pm_drvr/3c515.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msdos/pm_drvr/3c90x.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msdos/pm_drvr/3c575_cb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msdos/pm_drvr/ne.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msdos/pm_drvr/wd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msdos/pm_drvr/accton.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msdos/pm_drvr/cs89x0.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msdos/pm_drvr/rtl8139.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msdos/pm_drvr/ne2k-pci.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap-dos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap-int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msdos/pktdrvr.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NDIS2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msdos/ndis2.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/if.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/if_arp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/if_ether.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/if_packe.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tcp.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_32BIT_DRIVERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLUSHK</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { _printk_safe = 1; _printk_flush(); } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NDIS_NEXT_DEV</name></cpp:macro> <cpp:value>&amp;rtl8139_dev</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>rx_pool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>init_32bit</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pktq_init</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rx_ringbuf</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pktq_check</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rx_ringbuf</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pktq_inc_out</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rx_ringbuf</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>pktq_in_index</name> <argument_list>(<argument><expr>struct <name>rx_ringbuf</name> <operator>*</operator><name>q</name></expr></argument>)</argument_list> <name>LOCKED_FUNC</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>pktq_clear</name> <argument_list>(<argument><expr>struct <name>rx_ringbuf</name> <operator>*</operator><name>q</name></expr></argument>)</argument_list> <name>LOCKED_FUNC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>rx_elem</name></name> <modifier>*</modifier></type><name>pktq_in_elem</name> <argument_list>(<argument><expr>struct <name>rx_ringbuf</name> <operator>*</operator><name>q</name></expr></argument>)</argument_list> <name>LOCKED_FUNC</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>rx_elem</name></name> <modifier>*</modifier></type><name>pktq_out_elem</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rx_ringbuf</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLUSHK</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NDIS_NEXT_DEV</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<decl_stmt><decl><type><specifier>extern</specifier> <name>WORD</name></type> <name>_pktdevclass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>BOOL</name></type> <name>_eth_is_init</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>_w32_dynamic_host</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>_watt_do_exit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>_watt_is_init</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>_w32__bootp_on</name></decl>, <decl><type ref="prev"/><name>_w32__dhcp_on</name></decl>, <decl><type ref="prev"/><name>_w32__rarp_on</name></decl>, <decl><type ref="prev"/><name>_w32__do_mask_req</name></decl>;</decl_stmt>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> (<modifier>*</modifier><name>_w32_usr_post_init</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> (<modifier>*</modifier><name>_w32_print_hook</name>)<parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dbug_write</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>pkt_get_mtu</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ref_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>u_long</name></type> <name>mac_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>u_long</name></type> <name>filter_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>BOOL</name></type> <name>exc_occured</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>device</name></name> <modifier>*</modifier></type><name><name>handle_to_device</name> <index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pcap_activate_dos</name> <parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pcap_read_dos</name> <parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>, <parameter><decl><type><name>pcap_handler</name></type> <name>callback</name></decl></parameter>,
<parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pcap_cleanup_dos</name> <parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pcap_stats_dos</name> <parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_stat</name></name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pcap_sendpacket_dos</name> <parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pcap_setfilter_dos</name> <parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bpf_program</name></name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ndis_probe</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>device</name></name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pkt_probe</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>device</name></name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>close_driver</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>init_watt32</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pcap</name></name> <modifier>*</modifier></type><name>pcap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dev_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err_buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>first_init</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ebuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>promisc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>watt32_recv_hook</name> <parameter_list>(<parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>dummy</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pcap_pkthdr</name></name> <modifier>*</modifier></type><name>pcap</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>device</name></name></type> <name>ndis_dev</name> <init>= <expr><block>{
<expr><literal type="string">"ndis"</literal></expr>,
<expr><literal type="string">"NDIS2 LanManager"</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><name>NDIS_NEXT_DEV</name></expr>,
<expr><name>ndis_probe</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>device</name></name></type> <name>pkt_dev</name> <init>= <expr><block>{
<expr><literal type="string">"pkt"</literal></expr>,
<expr><literal type="string">"Packet-Driver"</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><operator>&amp;</operator><name>ndis_dev</name></expr>,
<expr><name>pkt_probe</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>device</name></name> <modifier>*</modifier></type><name>get_device</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>fd</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>handle_to_device</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>handle_to_device</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>handle_to_device</name> <index>[<expr><name>fd</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>




<struct>struct <name>pcap_dos</name> <block>{
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>wait_proc</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_stat</name></name></type> <name>stat</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>pcap_t</name> <modifier>*</modifier></type><name>pcap_create_interface</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>device</name></type> <name>_U_</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ebuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>pcap_create_common</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>pcap_dos</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>activate_op</name></name> <operator>=</operator> <name>pcap_activate_dos</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>pcap_activate_dos</name> <parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>pcap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pcap</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>rfmon</name></name></expr>)</condition> <block>{<block_content>



<return>return <expr><operator>(</operator><name>PCAP_ERROR_RFMON_NOTSUP</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>









<if_stmt><if>if <condition>(<expr><name><name>pcap</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pcap</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>&gt;</operator> <name>MAXIMUM_SNAPLEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pcap</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>=</operator> <name>MAXIMUM_SNAPLEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pcap</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>&lt;</operator> <name>ETH_MIN</name><operator>+</operator><literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pcap</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>=</operator> <name>ETH_MIN</name><operator>+</operator><literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pcap</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>&gt;</operator> <name>ETH_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pcap</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>=</operator> <name>ETH_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pcap</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_EN10MB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcap</name><operator>-&gt;</operator><name>cleanup_op</name></name> <operator>=</operator> <name>pcap_cleanup_dos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcap</name><operator>-&gt;</operator><name>read_op</name></name> <operator>=</operator> <name>pcap_read_dos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcap</name><operator>-&gt;</operator><name>stats_op</name></name> <operator>=</operator> <name>pcap_stats_dos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcap</name><operator>-&gt;</operator><name>inject_op</name></name> <operator>=</operator> <name>pcap_sendpacket_dos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcap</name><operator>-&gt;</operator><name>setfilter_op</name></name> <operator>=</operator> <name>pcap_setfilter_dos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcap</name><operator>-&gt;</operator><name>setdirection_op</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcap</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>++</operator><name>ref_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pcap</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>=</operator> <name>ETH_MAX</name><operator>+</operator><literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcap</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name><name>pcap</name><operator>-&gt;</operator><name>bufsize</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pcap</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>init_watt32</name><argument_list>(<argument><expr><name>pcap</name></expr></argument>, <argument><expr><name><name>pcap</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><name><name>pcap</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>first_init</name><argument_list>(<argument><expr><name><name>pcap</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><name><name>pcap</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name><name>pcap</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>promisc</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<return>return <expr><operator>(</operator><name>PCAP_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>atexit</name> <argument_list>(<argument><expr><name>close_driver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>stricmp</name><argument_list>(<argument><expr><name><name>active_dev</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><name><name>pcap</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name> <argument_list>(<argument><expr><name><name>pcap</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Cannot use different devices simultaneously "</literal>
<literal type="string">"(`%s' vs. `%s')"</literal></expr></argument>, <argument><expr><name><name>active_dev</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pcap</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>PCAP_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>handle_to_device</name> <index>[<expr><name><name>pcap</name><operator>-&gt;</operator><name>fd</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>active_dev</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_read_one</name> <parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>pcap_handler</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_dos</name></name> <modifier>*</modifier></type><name>pd</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_pkthdr</name></name></type> <name>pcap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>now</name></decl>, <decl><type ref="prev"/><name>expiry</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rx_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>timeout</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>gettimeofday2</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>expiry</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <name><name>now</name><operator>.</operator><name>tv_usec</name></name> <operator>+</operator> <literal type="number">1000UL</literal> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>timeout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>expiry</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>now</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>expiry</name><operator>.</operator><name>tv_usec</name></name> <operator>&gt;=</operator> <literal type="number">1000000L</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>expiry</name><operator>.</operator><name>tv_usec</name></name> <operator>-=</operator> <literal type="number">1000000L</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>expiry</name><operator>.</operator><name>tv_sec</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><name>exc_occured</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>volatile</specifier> <name><name>struct</name> <name>device</name></name> <modifier>*</modifier></type><name>dev</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dev</name> <operator>=</operator> <call><name>get_device</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dev</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>PCAP_ASSERT</name> <argument_list>(<argument><expr><name><name>dev</name><operator>-&gt;</operator><name>copy_rx_buf</name></name> <operator>||</operator> <name><name>dev</name><operator>-&gt;</operator><name>peek_rx_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FLUSHK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>dev</name><operator>-&gt;</operator><name>peek_rx_buf</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>PCAP_ASSERT</name> <argument_list>(<argument><expr><name><name>dev</name><operator>-&gt;</operator><name>release_rx_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rx_len</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>dev</name><operator>-&gt;</operator><name>peek_rx_buf</name></name>) <argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>rx_len</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>dev</name><operator>-&gt;</operator><name>copy_rx_buf</name></name>) <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rx_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>mac_count</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FLUSHK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pcap</name><operator>.</operator><name>caplen</name></name> <operator>=</operator> <call><name>min</name> <argument_list>(<argument><expr><name>rx_len</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcap</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>rx_len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>callback</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name> <operator>||</operator> <call><name>bpf_filter</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>pcap</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>pcap</name><operator>.</operator><name>caplen</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>filter_count</name><operator>++</operator></expr>;</expr_stmt>




<expr_stmt><expr><call><name>gettimeofday2</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>pcap</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>callback</name>) <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pcap</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dev</name><operator>-&gt;</operator><name>release_rx_buf</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>dev</name><operator>-&gt;</operator><name>release_rx_buf</name></name>) <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pcap_pkt_debug</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>callback</name> <operator>==</operator> <name>watt32_recv_hook</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dbug_write</name> <argument_list>(<argument><expr><literal type="string">"pcap_recv_hook\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>dbug_write</name> <argument_list>(<argument><expr><literal type="string">"pcap_read_op\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>FLUSHK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>break_loop</name></name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>break_loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">2</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>timeout</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><specifier>volatile</specifier> <name>int</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gettimeofday2</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>timercmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>expiry</name></expr></argument>, <argument><expr><operator>&gt;</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DJGPP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>kbhit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>pd</name><operator>-&gt;</operator><name>wait_proc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>pd</name><operator>-&gt;</operator><name>wait_proc</name></name>)<argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>rx_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>ps_drop</name></name><operator>++</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_32BIT_DRIVERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>pcap_pkt_debug</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printk</name> <argument_list>(<argument><expr><literal type="string">"pkt-err %s\n"</literal></expr></argument>, <argument><expr><name><name>pktInfo</name><operator>.</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_read_dos</name> <parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>, <parameter><decl><type><name>pcap_handler</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>, <decl><type ref="prev"/><name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>num</name> <operator>&lt;=</operator> <name>cnt</name> <operator>||</operator> <call><name>PACKET_COUNT_IS_UNLIMITED</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>pcap_read_one</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>_w32_os_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>num</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>pcap_stats_dos</name> <parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_stat</name></name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>net_device_stats</name></name> <modifier>*</modifier></type><name>stats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_dos</name></name> <modifier>*</modifier></type><name>pd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>device</name></name> <modifier>*</modifier></type><name>dev</name> <init>= <expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><call><name>get_device</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dev</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><literal type="string">"illegal pcap handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dev</name><operator>-&gt;</operator><name>get_stats</name></name> <operator>||</operator> <operator>(</operator><name>stats</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>dev</name><operator>-&gt;</operator><name>get_stats</name></name>)<argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><literal type="string">"device statistics not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>FLUSHK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pd</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>ps_recv</name></name> <operator>=</operator> <name><name>stats</name><operator>-&gt;</operator><name>rx_packets</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>ps_drop</name></name> <operator>+=</operator> <name><name>stats</name><operator>-&gt;</operator><name>rx_missed_errors</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>ps_ifdrop</name></name> <operator>=</operator> <name><name>stats</name><operator>-&gt;</operator><name>rx_dropped</name></name> <operator>+</operator>
<name><name>stats</name><operator>-&gt;</operator><name>rx_errors</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ps</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ps</name> <operator>=</operator> <name><name>pd</name><operator>-&gt;</operator><name>stat</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>pcap_stats_ex</name> <parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_stat_ex</name></name> <modifier>*</modifier></type><name>se</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>device</name></name> <modifier>*</modifier></type><name>dev</name> <init>= <expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><call><name>get_device</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dev</name> <operator>||</operator> <operator>!</operator><name><name>dev</name><operator>-&gt;</operator><name>get_stats</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_strlcpy</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><literal type="string">"detailed device statistics not available"</literal></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strnicmp</name><argument_list>(<argument><expr><name><name>dev</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><literal type="string">"pkt"</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_strlcpy</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><literal type="string">"pktdrvr doesn't have detailed statistics"</literal></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>se</name></expr></argument>, <argument><expr><call>(<modifier>*</modifier><name><name>dev</name><operator>-&gt;</operator><name>get_stats</name></name>)<argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>se</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>pcap_setfilter_dos</name> <parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bpf_program</name></name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>fcode</name></name> <operator>=</operator> <operator>*</operator><name>fp</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>u_long</name></type> <name>pcap_mac_packets</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>mac_count</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>u_long</name></type> <name>pcap_filter_packets</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>filter_count</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>pcap_cleanup_dos</name> <parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_dos</name></name> <modifier>*</modifier></type><name>pd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exc_occured</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>pd</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pcap_stats</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>ps_drop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_device</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>handle_to_device</name> <index>[<expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ref_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ref_count</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ref_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>close_driver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>





<function><type><name>char</name> <modifier>*</modifier></type><name>pcap_lookupdev</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ebuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>device</name></name> <modifier>*</modifier></type><name>dev</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_32BIT_DRIVERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>init_32bit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>dev</name> <operator>=</operator> <operator>(</operator>struct <name>device</name><operator>*</operator><operator>)</operator><name>dev_base</name></expr>;</init> <condition><expr><name>dev</name></expr>;</condition> <incr><expr><name>dev</name> <operator>=</operator> <name><name>dev</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>PCAP_ASSERT</name> <argument_list>(<argument><expr><name><name>dev</name><operator>-&gt;</operator><name>probe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name><name>dev</name><operator>-&gt;</operator><name>probe</name></name>)<argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>FLUSHK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>probed_dev</name> <operator>=</operator> <operator>(</operator>struct <name>device</name><operator>*</operator><operator>)</operator> <name>dev</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>dev</name><operator>-&gt;</operator><name>name</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>ebuf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><literal type="string">"No driver found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>pcap_lookupnet</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>bpf_u_int32</name> <modifier>*</modifier></type><name>localnet</name></decl></parameter>,
<parameter><decl><type><name>bpf_u_int32</name> <modifier>*</modifier></type><name>netmask</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>mask</name></decl>, <decl><type ref="prev"/><name>net</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>_watt_is_init</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="string">"pcap_open_offline() or pcap_activate() must be "</literal>
<literal type="string">"called first"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <name>_w32_sin_mask</name></expr>;</expr_stmt>
<expr_stmt><expr><name>net</name> <operator>=</operator> <name>my_ip_addr</name> <operator>&amp;</operator> <name>mask</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>net</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IN_CLASSA</name><argument_list>(<argument><expr><operator>*</operator><name>netmask</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>net</name> <operator>=</operator> <name>IN_CLASSA_NET</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>IN_CLASSB</name><argument_list>(<argument><expr><operator>*</operator><name>netmask</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>net</name> <operator>=</operator> <name>IN_CLASSB_NET</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>IN_CLASSC</name><argument_list>(<argument><expr><operator>*</operator><name>netmask</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>net</name> <operator>=</operator> <name>IN_CLASSC_NET</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name> <argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"inet class for 0x%lx unknown"</literal></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>localnet</name> <operator>=</operator> <call><name>htonl</name> <argument_list>(<argument><expr><name>net</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>netmask</name> <operator>=</operator> <call><name>htonl</name> <argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ARGSUSED</name> <argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>pcap_platform_finddevs</name> <parameter_list>(<parameter><decl><type><name>pcap_if_list_t</name> <modifier>*</modifier></type><name>devlistp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>device</name></name> <modifier>*</modifier></type><name>dev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcap_if_t</name> <modifier>*</modifier></type><name>curdev</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
struct sockaddr_in sa_ll_1, sa_ll_2;
struct sockaddr *addr, *netmask, *broadaddr, *dstaddr;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>dev</name> <operator>=</operator> <operator>(</operator>struct <name>device</name><operator>*</operator><operator>)</operator><name>dev_base</name></expr>;</init> <condition><expr><name>dev</name></expr>;</condition> <incr><expr><name>dev</name> <operator>=</operator> <name><name>dev</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>PCAP_ASSERT</name> <argument_list>(<argument><expr><name><name>dev</name><operator>-&gt;</operator><name>probe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call>(<modifier>*</modifier><name><name>dev</name><operator>-&gt;</operator><name>probe</name></name>)<argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>PCAP_ASSERT</name> <argument_list>(<argument><expr><name><name>dev</name><operator>-&gt;</operator><name>close</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FLUSHK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>dev</name><operator>-&gt;</operator><name>close</name></name>) <argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><operator>(</operator><name>curdev</name> <operator>=</operator> <call><name>add_dev</name><argument_list>(<argument><expr><name>devlistp</name></expr></argument>, <argument><expr><name><name>dev</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>dev</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
memset (&amp;sa_ll_1, 0, sizeof(sa_ll_1));
memset (&amp;sa_ll_2, 0, sizeof(sa_ll_2));
sa_ll_1.sin_family = AF_INET;
sa_ll_2.sin_family = AF_INET;

addr = (struct sockaddr*) &amp;sa_ll_1;
netmask = (struct sockaddr*) &amp;sa_ll_1;
dstaddr = (struct sockaddr*) &amp;sa_ll_1;
broadaddr = (struct sockaddr*) &amp;sa_ll_2;
memset (&amp;sa_ll_2.sin_addr, 0xFF, sizeof(sa_ll_2.sin_addr));

if (add_addr_to_dev(curdev, addr, sizeof(*addr),
netmask, sizeof(*netmask),
broadaddr, sizeof(*broadaddr),
dstaddr, sizeof(*dstaddr), errbuf) &lt; 0)
{
ret = -1;
break;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="string">"No drivers found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>pcap_assert</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>what</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>FLUSHK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s (%u): Assertion \"%s\" failed\n"</literal></expr></argument>,
<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close_driver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_exit</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>pcap_set_wait</name> <parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>yield</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wait</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_dos</name></name> <modifier>*</modifier></type><name>pd</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>wait_proc</name></name> <operator>=</operator> <name>yield</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>timeout</name></name> <operator>=</operator> <name>wait</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name><name>struct</name> <name>device</name></name> <modifier>*</modifier></type>
<name>open_driver</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dev_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ebuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>promisc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>device</name></name> <modifier>*</modifier></type><name>dev</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>dev</name> <operator>=</operator> <operator>(</operator>struct <name>device</name><operator>*</operator><operator>)</operator><name>dev_base</name></expr>;</init> <condition><expr><name>dev</name></expr>;</condition> <incr><expr><name>dev</name> <operator>=</operator> <name><name>dev</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>PCAP_ASSERT</name> <argument_list>(<argument><expr><name><name>dev</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>dev_name</name></expr></argument>,<argument><expr><name><name>dev</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>probed_dev</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>PCAP_ASSERT</name> <argument_list>(<argument><expr><name><name>dev</name><operator>-&gt;</operator><name>probe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call>(<modifier>*</modifier><name><name>dev</name><operator>-&gt;</operator><name>probe</name></name>)<argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name> <argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"failed to detect device `%s'"</literal></expr></argument>, <argument><expr><name>dev_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>probed_dev</name> <operator>=</operator> <name>dev</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>dev</name> <operator>!=</operator> <name>probed_dev</name></expr>)</condition>
<block>{<block_content>
<goto>goto <name>not_probed</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>FLUSHK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>promisc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dev</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <operator>(</operator><name>IFF_ALLMULTI</name> <operator>|</operator> <name>IFF_PROMISC</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>dev</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>IFF_ALLMULTI</name> <operator>|</operator> <name>IFF_PROMISC</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>PCAP_ASSERT</name> <argument_list>(<argument><expr><name><name>dev</name><operator>-&gt;</operator><name>open</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call>(<modifier>*</modifier><name><name>dev</name><operator>-&gt;</operator><name>open</name></name>)<argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name> <argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"failed to activate device `%s'"</literal></expr></argument>, <argument><expr><name>dev_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pktInfo</name><operator>.</operator><name>error</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>dev</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><literal type="string">"pkt"</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><literal type="string">": "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><name><name>pktInfo</name><operator>.</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>promisc</name> <operator>&amp;&amp;</operator> <name><name>dev</name><operator>-&gt;</operator><name>set_multicast_list</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>dev</name><operator>-&gt;</operator><name>set_multicast_list</name></name>) <argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>active_dev</name> <operator>=</operator> <name>dev</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></for>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dev</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name> <argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"device `%s' not supported"</literal></expr></argument>, <argument><expr><name>dev_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<label><name>not_probed</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>probed_dev</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name> <argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"device `%s' not probed"</literal></expr></argument>, <argument><expr><name>dev_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>dev</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>close_driver</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>device</name></name> <modifier>*</modifier></type><name>dev</name> <init>= <expr><name>active_dev</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dev</name> <operator>&amp;&amp;</operator> <name><name>dev</name><operator>-&gt;</operator><name>close</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>dev</name><operator>-&gt;</operator><name>close</name></name>) <argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FLUSHK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>active_dev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_32BIT_DRIVERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>rx_pool</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>k_free</name> <argument_list>(<argument><expr><name>rx_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rx_pool</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dev</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pcibios_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__DJGPP__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_signals</name> <parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>handler</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>signal</name> <argument_list>(<argument><expr><name>SIGSEGV</name></expr></argument>,<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signal</name> <argument_list>(<argument><expr><name>SIGILL</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signal</name> <argument_list>(<argument><expr><name>SIGFPE</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>exc_handler</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_32BIT_DRIVERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>active_dev</name><operator>-&gt;</operator><name>irq</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>disable_irq</name> <argument_list>(<argument><expr><name><name>active_dev</name><operator>-&gt;</operator><name>irq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>irq_eoi_cmd</name> <argument_list>(<argument><expr><name><name>active_dev</name><operator>-&gt;</operator><name>irq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_printk_safe</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch <condition>(<expr><name>sig</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>SIGSEGV</name></expr>:</case>
<expr_stmt><expr><call><name>fputs</name> <argument_list>(<argument><expr><literal type="string">"Catching SIGSEGV.\n"</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SIGILL</name></expr>:</case>
<expr_stmt><expr><call><name>fputs</name> <argument_list>(<argument><expr><literal type="string">"Catching SIGILL.\n"</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SIGFPE</name></expr>:</case>
<expr_stmt><expr><call><name>_fpreset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name> <argument_list>(<argument><expr><literal type="string">"Catching SIGFPE.\n"</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Catching signal %d.\n"</literal></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name>exc_occured</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close_driver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><specifier>static</specifier> <name>int</name></type> <name>first_init</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ebuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>promisc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>device</name></name> <modifier>*</modifier></type><name>dev</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_32BIT_DRIVERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>rx_pool</name> <operator>=</operator> <call><name>k_calloc</name> <argument_list>(<argument><expr><name>RECEIVE_BUF_SIZE</name></expr></argument>, <argument><expr><name>RECEIVE_QUEUE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rx_pool</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><literal type="string">"Not enough memory (Rx pool)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__DJGPP__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>setup_signals</name> <argument_list>(<argument><expr><name>exc_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_32BIT_DRIVERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>init_32bit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>dev</name> <operator>=</operator> <call><name>open_driver</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>ebuf</name></expr></argument>, <argument><expr><name>promisc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dev</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_32BIT_DRIVERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>k_free</name> <argument_list>(<argument><expr><name>rx_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rx_pool</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__DJGPP__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>setup_signals</name> <argument_list>(<argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_32BIT_DRIVERS</name></expr></argument>)</argument_list></call></expr></cpp:if>





<if_stmt><if>if <condition>(<expr><name><name>dev</name><operator>-&gt;</operator><name>copy_rx_buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>dev</name><operator>-&gt;</operator><name>get_rx_buf</name></name> <operator>=</operator> <name>get_rxbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dev</name><operator>-&gt;</operator><name>peek_rx_buf</name></name> <operator>=</operator> <name>peek_rxbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dev</name><operator>-&gt;</operator><name>release_rx_buf</name></name> <operator>=</operator> <name>release_rxbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pktq_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>dev</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>, <argument><expr><name>RECEIVE_BUF_SIZE</name></expr></argument>, <argument><expr><name>RECEIVE_QUEUE_SIZE</name></expr></argument>, <argument><expr><name>rx_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_32BIT_DRIVERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>init_32bit</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>init_pci</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>_printk_file</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_printk_init</name> <argument_list>(<argument><expr><literal type="number">64</literal><operator>*</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init_pci</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pci_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>init_pci</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>rxbuf</name> <index>[<expr><name>ETH_MAX</name><operator>+</operator><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>WORD</name></type> <name>etype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pcap_t</name></type> <name>pcap_save</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>watt32_recv_hook</name> <parameter_list>(<parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>dummy</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pcap_pkthdr</name></name> <modifier>*</modifier></type><name>pcap</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ether_header</name></name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><operator>(</operator>struct <name>ether_header</name><operator>*</operator><operator>)</operator> <name>buf</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>rxbuf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pcap</name><operator>-&gt;</operator><name>caplen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>etype</name> <operator>=</operator> <name><name>ep</name><operator>-&gt;</operator><name>ether_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ARGSUSED</name> <argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>WATTCP_VER</name> <operator>&gt;=</operator> <literal type="number">0x0224</literal><operator>)</operator></expr></cpp:if>




<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>pcap_recv_hook</name> <parameter_list>(<parameter><decl><type><name>WORD</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>pcap_read_dos</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pcap_save</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>watt32_recv_hook</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>etype</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>rxbuf</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>pcap_xmit_hook</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pcap_pkt_debug</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dbug_write</name> <argument_list>(<argument><expr><literal type="string">"pcap_xmit_hook: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>active_dev</name> <operator>&amp;&amp;</operator> <name><name>active_dev</name><operator>-&gt;</operator><name>xmit</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name><name>active_dev</name><operator>-&gt;</operator><name>xmit</name></name>) <argument_list>(<argument><expr><name>active_dev</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pcap_pkt_debug</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dbug_write</name> <argument_list>(<argument><expr><ternary><condition><expr><name>rc</name></expr> ?</condition><then> <expr><literal type="string">"ok\n"</literal></expr> </then><else>: <expr><literal type="string">"fail\n"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pcap_sendpacket_dos</name> <parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>device</name></name> <modifier>*</modifier></type><name>dev</name> <init>= <expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><call><name>get_device</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dev</name> <operator>||</operator> <operator>!</operator><name><name>dev</name><operator>-&gt;</operator><name>xmit</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call>(<modifier>*</modifier><name><name>dev</name><operator>-&gt;</operator><name>xmit</name></name>) <argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>prev_post_hook</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pcap_init_hook</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>_w32__bootp_on</name> <operator>=</operator> <name>_w32__dhcp_on</name> <operator>=</operator> <name>_w32__rarp_on</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>_w32__do_mask_req</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>_w32_dynamic_host</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>prev_post_hook</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name>prev_post_hook</name>)<argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>null_print</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>init_watt32</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pcap</name></name> <modifier>*</modifier></type><name>pcap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dev_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>, <decl><type ref="prev"/><name>MTU</name></decl>, <decl><type ref="prev"/><name>has_ip_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>using_pktdrv</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>_watt_is_init</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sock_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>env</name> <operator>=</operator> <call><name>getenv</name> <argument_list>(<argument><expr><literal type="string">"PCAP_TRACE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>env</name> <operator>&amp;&amp;</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>pcap_pkt_debug</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>dbug_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pcap_pkt_debug</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>_watt_do_exit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_post_hook</name> <operator>=</operator> <name>_w32_usr_post_init</name></expr>;</expr_stmt>
<expr_stmt><expr><name>_w32_usr_post_init</name> <operator>=</operator> <name>pcap_init_hook</name></expr>;</expr_stmt>
<expr_stmt><expr><name>_w32_print_hook</name> <operator>=</operator> <name>null_print</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dev_name</name> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>dev_name</name></expr></argument>,<argument><expr><literal type="string">"pkt"</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>using_pktdrv</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sock_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>has_ip_addr</name> <operator>=</operator> <operator>(</operator><name>rc</name> <operator>!=</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>









<expr_stmt><expr><name>_watt_is_init</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>using_pktdrv</name> <operator>||</operator> <operator>!</operator><name>has_ip_addr</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>myip</name><index>[]</index></name> <init>= <expr><literal type="string">"192.168.0.1"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>mask</name><index>[]</index></name> <init>= <expr><literal type="string">"255.255.255.0"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Just guessing, using IP %s and netmask %s\n"</literal></expr></argument>, <argument><expr><name>myip</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>my_ip_addr</name> <operator>=</operator> <call><name>aton</name> <argument_list>(<argument><expr><name>myip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_w32_sin_mask</name> <operator>=</operator> <call><name>aton</name> <argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>rc</name> <operator>&amp;&amp;</operator> <name>using_pktdrv</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name> <argument_list>(<argument><expr><name>err_buf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"sock_init() failed, code %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>WATTCP_VER</name> <operator>&gt;=</operator> <literal type="number">0x0224</literal><operator>)</operator></expr></cpp:if>
<expr_stmt><expr><name>_eth_recv_hook</name> <operator>=</operator> <name>pcap_recv_hook</name></expr>;</expr_stmt>
<expr_stmt><expr><name>_eth_xmit_hook</name> <operator>=</operator> <name>pcap_xmit_hook</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<if_stmt><if>if <condition>(<expr><name>using_pktdrv</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_eth_release</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pcap_save</name></expr></argument>, <argument><expr><name>pcap</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pcap_save</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MTU</name> <operator>=</operator> <call><name>pkt_get_mtu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcap_save</name><operator>.</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcap_save</name><operator>.</operator><name>linktype</name></name> <operator>=</operator> <call><name>_eth_get_hwtype</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcap_save</name><operator>.</operator><name>snapshot</name></name> <operator>=</operator> <ternary><condition><expr><name>MTU</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>MTU</name></expr> </then><else>: <expr><name>ETH_MAX</name></expr></else></ternary></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>


<expr_stmt><expr><name>last_nameserver</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>EISA_bus</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_table</name></name></type> <name><name>debug_tab</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"PKT.DEBUG"</literal></expr>, <expr><name>ARG_ATOI</name></expr>, <expr><operator>&amp;</operator><name>pcap_pkt_debug</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"PKT.VECTOR"</literal></expr>, <expr><name>ARG_ATOX_W</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"NDIS.DEBUG"</literal></expr>, <expr><name>ARG_ATOI</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_32BIT_DRIVERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"3C503.DEBUG"</literal></expr>, <expr><name>ARG_ATOI</name></expr>, <expr><operator>&amp;</operator><name>ei_debug</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"3C503.IO_BASE"</literal></expr>, <expr><name>ARG_ATOX_W</name></expr>, <expr><operator>&amp;</operator><name><name>el2_dev</name><operator>.</operator><name>base_addr</name></name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"3C503.MEMORY"</literal></expr>, <expr><name>ARG_ATOX_W</name></expr>, <expr><operator>&amp;</operator><name><name>el2_dev</name><operator>.</operator><name>mem_start</name></name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"3C503.IRQ"</literal></expr>, <expr><name>ARG_ATOI</name></expr>, <expr><operator>&amp;</operator><name><name>el2_dev</name><operator>.</operator><name>irq</name></name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"3C505.DEBUG"</literal></expr>, <expr><name>ARG_ATOI</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"3C505.BASE"</literal></expr>, <expr><name>ARG_ATOX_W</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"3C507.DEBUG"</literal></expr>, <expr><name>ARG_ATOI</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"3C509.DEBUG"</literal></expr>, <expr><name>ARG_ATOI</name></expr>, <expr><operator>&amp;</operator><name>el3_debug</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"3C509.ILOOP"</literal></expr>, <expr><name>ARG_ATOI</name></expr>, <expr><operator>&amp;</operator><name>el3_max_loop</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"3C529.DEBUG"</literal></expr>, <expr><name>ARG_ATOI</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"3C575.DEBUG"</literal></expr>, <expr><name>ARG_ATOI</name></expr>, <expr><operator>&amp;</operator><name>debug_3c575</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"3C59X.DEBUG"</literal></expr>, <expr><name>ARG_ATOI</name></expr>, <expr><operator>&amp;</operator><name>vortex_debug</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"3C59X.IFACE0"</literal></expr>, <expr><name>ARG_ATOI</name></expr>, <expr><operator>&amp;</operator><name><name>vortex_options</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"3C59X.IFACE1"</literal></expr>, <expr><name>ARG_ATOI</name></expr>, <expr><operator>&amp;</operator><name><name>vortex_options</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"3C59X.IFACE2"</literal></expr>, <expr><name>ARG_ATOI</name></expr>, <expr><operator>&amp;</operator><name><name>vortex_options</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"3C59X.IFACE3"</literal></expr>, <expr><name>ARG_ATOI</name></expr>, <expr><operator>&amp;</operator><name><name>vortex_options</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"3C90X.DEBUG"</literal></expr>, <expr><name>ARG_ATOX_W</name></expr>, <expr><operator>&amp;</operator><name>tc90xbc_debug</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ACCT.DEBUG"</literal></expr>, <expr><name>ARG_ATOI</name></expr>, <expr><operator>&amp;</operator><name>ethpk_debug</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"CS89.DEBUG"</literal></expr>, <expr><name>ARG_ATOI</name></expr>, <expr><operator>&amp;</operator><name>cs89_debug</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"RTL8139.DEBUG"</literal></expr>, <expr><name>ARG_ATOI</name></expr>, <expr><operator>&amp;</operator><name>rtl8139_debug</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SMC.DEBUG"</literal></expr>, <expr><name>ARG_ATOI</name></expr>, <expr><operator>&amp;</operator><name>ei_debug</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"PCI.DEBUG"</literal></expr>, <expr><name>ARG_ATOI</name></expr>, <expr><operator>&amp;</operator><name>pci_debug</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"BIOS32.DEBUG"</literal></expr>, <expr><name>ARG_ATOI</name></expr>, <expr><operator>&amp;</operator><name>bios32_debug</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"IRQ.DEBUG"</literal></expr>, <expr><name>ARG_ATOI</name></expr>, <expr><operator>&amp;</operator><name>irq_debug</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"TIMER.IRQ"</literal></expr>, <expr><name>ARG_ATOI</name></expr>, <expr><operator>&amp;</operator><name>timer_irq</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>





<function><type><name>int</name></type> <name>pcap_config_hook</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>keyword</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>parse_config_table</name> <argument_list>(<argument><expr><name>debug_tab</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>keyword</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<decl_stmt><decl><type><name><name>struct</name> <name>device</name></name> <modifier>*</modifier></type><name>active_dev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>device</name></name> <modifier>*</modifier></type><name>probed_dev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>device</name></name> <modifier>*</modifier></type><name>dev_base</name> <init>= <expr><operator>&amp;</operator><name>pkt_dev</name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>pcap_pkt_debug</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pkt_close</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>device</name></name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BOOL</name></type> <name>okay</name> <init>= <expr><call><name>PktExitDriver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pcap_pkt_debug</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"pkt_close(): %d\n"</literal></expr></argument>, <argument><expr><name>okay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dev</name><operator>-&gt;</operator><name>priv</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>dev</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dev</name><operator>-&gt;</operator><name>priv</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pkt_open</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>device</name></name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PKT_RX_MODE</name></type> <name>mode</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dev</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IFF_PROMISC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>PDRX_ALL_PACKETS</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>mode</name> <operator>=</operator> <name>PDRX_BROADCAST</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PktInitDriver</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>PktResetStatistics</name> <argument_list>(<argument><expr><name><name>pktInfo</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PktQueueBusy</name> <argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pkt_xmit</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>device</name></name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>net_device_stats</name></name> <modifier>*</modifier></type><name>stats</name> <init>= <expr><operator>(</operator>struct <name>net_device_stats</name><operator>*</operator><operator>)</operator> <name><name>dev</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pcap_pkt_debug</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dbug_write</name> <argument_list>(<argument><expr><literal type="string">"pcap_xmit\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PktTransmit</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>tx_errors</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>len</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>pkt_stats</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>device</name></name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>net_device_stats</name></name> <modifier>*</modifier></type><name>stats</name> <init>= <expr><operator>(</operator>struct <name>net_device_stats</name><operator>*</operator><operator>)</operator> <name><name>dev</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stats</name> <operator>||</operator> <operator>!</operator><call><name>PktSessStatistics</name><argument_list>(<argument><expr><name><name>pktInfo</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>rx_packets</name></name> <operator>=</operator> <name><name>pktStat</name><operator>.</operator><name>inPackets</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>rx_errors</name></name> <operator>=</operator> <name><name>pktStat</name><operator>.</operator><name>lost</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>rx_missed_errors</name></name> <operator>=</operator> <call><name>PktRxDropped</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>stats</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pkt_probe</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>device</name></name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PktSearchDriver</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dev</name><operator>-&gt;</operator><name>open</name></name> <operator>=</operator> <name>pkt_open</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dev</name><operator>-&gt;</operator><name>xmit</name></name> <operator>=</operator> <name>pkt_xmit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dev</name><operator>-&gt;</operator><name>close</name></name> <operator>=</operator> <name>pkt_close</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dev</name><operator>-&gt;</operator><name>get_stats</name></name> <operator>=</operator> <name>pkt_stats</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dev</name><operator>-&gt;</operator><name>copy_rx_buf</name></name> <operator>=</operator> <name>PktReceive</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dev</name><operator>-&gt;</operator><name>get_rx_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dev</name><operator>-&gt;</operator><name>peek_rx_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dev</name><operator>-&gt;</operator><name>release_rx_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dev</name><operator>-&gt;</operator><name>priv</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>net_device_stats</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dev</name><operator>-&gt;</operator><name>priv</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>ndis_close</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>device</name></name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NDIS2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>NdisShutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>ARGSUSED</name> <argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ndis_open</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>device</name></name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>promis</name> <init>= <expr><operator>(</operator><name><name>dev</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IFF_PROMISC</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NDIS2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NdisInit</name><argument_list>(<argument><expr><name>promis</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>ARGSUSED</name> <argument_list>(<argument><expr><name>promis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>ndis_stats</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>device</name></name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>net_device_stats</name></name></type> <name>stats</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>ARGSUSED</name> <argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>&amp;</operator><name>stats</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ndis_probe</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>device</name></name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NDIS2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NdisOpen</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>dev</name><operator>-&gt;</operator><name>open</name></name> <operator>=</operator> <name>ndis_open</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dev</name><operator>-&gt;</operator><name>xmit</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dev</name><operator>-&gt;</operator><name>close</name></name> <operator>=</operator> <name>ndis_close</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dev</name><operator>-&gt;</operator><name>get_stats</name></name> <operator>=</operator> <name>ndis_stats</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dev</name><operator>-&gt;</operator><name>copy_rx_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dev</name><operator>-&gt;</operator><name>get_rx_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dev</name><operator>-&gt;</operator><name>peek_rx_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dev</name><operator>-&gt;</operator><name>release_rx_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_32BIT_DRIVERS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name><name>struct</name> <name>device</name></name> <name>el2_dev</name></type> <name>LOCKED_VAR</name> <init>= <expr><block>{
<expr><literal type="string">"3c503"</literal></expr>,
<expr><literal type="string">"EtherLink II"</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><name>NULL</name></expr>,
<expr><name>el2_probe</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>device</name></name> <name>el3_dev</name></type> <name>LOCKED_VAR</name> <init>= <expr><block>{
<expr><literal type="string">"3c509"</literal></expr>,
<expr><literal type="string">"EtherLink III"</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><operator>&amp;</operator><name>el2_dev</name></expr>,
<expr><name>el3_probe</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>device</name></name> <name>tc515_dev</name></type> <name>LOCKED_VAR</name> <init>= <expr><block>{
<expr><literal type="string">"3c515"</literal></expr>,
<expr><literal type="string">"EtherLink PCI"</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><operator>&amp;</operator><name>el3_dev</name></expr>,
<expr><name>tc515_probe</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>device</name></name> <name>tc59_dev</name></type> <name>LOCKED_VAR</name> <init>= <expr><block>{
<expr><literal type="string">"3c59x"</literal></expr>,
<expr><literal type="string">"EtherLink PCI"</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><operator>&amp;</operator><name>tc515_dev</name></expr>,
<expr><name>tc59x_probe</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>device</name></name> <name>tc90xbc_dev</name></type> <name>LOCKED_VAR</name> <init>= <expr><block>{
<expr><literal type="string">"3c90x"</literal></expr>,
<expr><literal type="string">"EtherLink 90X"</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><operator>&amp;</operator><name>tc59_dev</name></expr>,
<expr><name>tc90xbc_probe</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>device</name></name> <name>wd_dev</name></type> <name>LOCKED_VAR</name> <init>= <expr><block>{
<expr><literal type="string">"wd"</literal></expr>,
<expr><literal type="string">"Westen Digital"</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><operator>&amp;</operator><name>tc90xbc_dev</name></expr>,
<expr><name>wd_probe</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>device</name></name> <name>ne_dev</name></type> <name>LOCKED_VAR</name> <init>= <expr><block>{
<expr><literal type="string">"ne"</literal></expr>,
<expr><literal type="string">"NEx000"</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><operator>&amp;</operator><name>wd_dev</name></expr>,
<expr><name>ne_probe</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>device</name></name> <name>acct_dev</name></type> <name>LOCKED_VAR</name> <init>= <expr><block>{
<expr><literal type="string">"acct"</literal></expr>,
<expr><literal type="string">"Accton EtherPocket"</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><operator>&amp;</operator><name>ne_dev</name></expr>,
<expr><name>ethpk_probe</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>device</name></name> <name>cs89_dev</name></type> <name>LOCKED_VAR</name> <init>= <expr><block>{
<expr><literal type="string">"cs89"</literal></expr>,
<expr><literal type="string">"Crystal Semiconductor"</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><operator>&amp;</operator><name>acct_dev</name></expr>,
<expr><name>cs89x0_probe</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>device</name></name> <name>rtl8139_dev</name></type> <name>LOCKED_VAR</name> <init>= <expr><block>{
<expr><literal type="string">"rtl8139"</literal></expr>,
<expr><literal type="string">"RealTek PCI"</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><operator>&amp;</operator><name>cs89_dev</name></expr>,
<expr><name>rtl8139_probe</name></expr>
}</block></expr></init></decl>;</decl_stmt>






<function><type><name>int</name></type> <name>peek_rxbuf</name> <parameter_list>(<parameter><decl><type><name>BYTE</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rx_elem</name></name> <modifier>*</modifier></type><name>tail</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PCAP_ASSERT</name> <argument_list>(<argument><expr><call><name>pktq_check</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>active_dev</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DISABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tail</name> <operator>=</operator> <call><name>pktq_out_elem</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>active_dev</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>head</name> <operator>=</operator> <call><name>pktq_in_elem</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>active_dev</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>head</name> <operator>!=</operator> <name>tail</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>PCAP_ASSERT</name> <argument_list>(<argument><expr><name><name>tail</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name><name>active_dev</name><operator>-&gt;</operator><name>queue</name><operator>.</operator><name>elem_size</name></name><operator>-</operator><literal type="number">4</literal><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <operator>&amp;</operator><name><name>tail</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>tail</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>release_rxbuf</name> <parameter_list>(<parameter><decl><type><name>BYTE</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>rx_elem</name></name> <modifier>*</modifier></type><name>tail</name> <init>= <expr><call><name>pktq_out_elem</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>active_dev</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PCAP_ASSERT</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tail</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>ARGSUSED</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>pktq_inc_out</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>active_dev</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>BYTE</name> <modifier>*</modifier></type><name>get_rxbuf</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>len</name> <argument_list type="generic">&lt; <argument><expr><name>ETH_MIN</name> <operator>||</operator> <name>len</name></expr></argument> &gt;</argument_list></name> <name>ETH_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>pktq_in_index</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>active_dev</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <name>fan_idx</name></type> <name>LOCKED_VAR</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>writew</name> <argument_list>(<argument><expr><literal type="string">"-\\|/"</literal><index>[<expr><name>fan_idx</name><operator>++</operator></expr>]</index> <operator>|</operator> <operator>(</operator><literal type="number">15</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>,
<argument><expr><literal type="number">0xB8000</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">79</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fan_idx</name> <operator>&amp;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>!=</operator> <name><name>active_dev</name><operator>-&gt;</operator><name>queue</name><operator>.</operator><name>out_index</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rx_elem</name></name> <modifier>*</modifier></type><name>head</name> <init>= <expr><call><name>pktq_in_elem</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>active_dev</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>active_dev</name><operator>-&gt;</operator><name>queue</name><operator>.</operator><name>in_index</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>&amp;</operator><name><name>head</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>pktq_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>active_dev</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PKTQ_MARKER</name></cpp:macro> <cpp:value>0xDEADBEEF</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pktq_check</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rx_ringbuf</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>q</name> <operator>||</operator> <operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>num_elem</name></name> <operator>||</operator> <operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>buf_start</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>buf_start</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>num_elem</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name><name>q</name><operator>-&gt;</operator><name>elem_size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>DWORD</name><operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DWORD</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>!=</operator> <name>PKTQ_MARKER</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pktq_init</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rx_ringbuf</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>elem_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>num_elem</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>buf_start</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>in_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>out_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCAP_ASSERT</name> <argument_list>(<argument><expr><name>size</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>rx_elem</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DWORD</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCAP_ASSERT</name> <argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCAP_ASSERT</name> <argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
struct rx_elem *elem = (struct rx_elem*) pool;



PCAP_ASSERT (((unsigned)(&amp;elem-&gt;data[0]) &amp; 3) == 0);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>pool</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>DWORD</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>pool</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DWORD</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>=</operator> <name>PKTQ_MARKER</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>pktq_inc_out</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rx_ringbuf</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>out_index</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>out_index</name></name> <operator>&gt;=</operator> <name><name>q</name><operator>-&gt;</operator><name>num_elem</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>out_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>out_index</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>pktq_in_index</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rx_ringbuf</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>index</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>in_index</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>q</name><operator>-&gt;</operator><name>num_elem</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>index</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name><name>struct</name> <name>rx_elem</name></name> <modifier>*</modifier></type><name>pktq_in_elem</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rx_ringbuf</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator>struct <name>rx_elem</name><operator>*</operator><operator>)</operator> <operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>buf_start</name></name> <operator>+</operator> <operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>elem_size</name></name> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>in_index</name></name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name><name>struct</name> <name>rx_elem</name></name> <modifier>*</modifier></type><name>pktq_out_elem</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rx_ringbuf</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator>struct <name>rx_elem</name><operator>*</operator><operator>)</operator> <operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>buf_start</name></name> <operator>+</operator> <operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>elem_size</name></name> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>out_index</name></name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>pktq_clear</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rx_ringbuf</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>in_index</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>out_index</name></name></expr>;</expr_stmt>
</block_content>}</block></function>




<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__IOPORT_H</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__DMA_H</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>extern</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__inline__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msdos/pm_drvr/ioport.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msdos/pm_drvr/dma.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>pcap_lib_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><literal type="string">"DOS-"</literal> <name>PCAP_VERSION_STRING</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
