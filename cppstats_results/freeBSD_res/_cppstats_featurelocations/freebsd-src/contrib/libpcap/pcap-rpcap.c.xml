<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/pcap-rpcap.c">
































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ftmacros.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sockutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap-int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rpcap-protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap-rpcap.h"</cpp:file></cpp:include>



















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_STATS_STANDARD</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_STATS_EX</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>











<struct>struct <name>activehosts</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>host</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>sockctrl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8</name></type> <name>protocol_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>activehosts</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>


<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>activehosts</name></name> <modifier>*</modifier></type><name>activeHosts</name></decl>;</decl_stmt>







<decl_stmt><decl><type><specifier>static</specifier> <name>SOCKET</name></type> <name>sockmain</name></decl>;</decl_stmt>




<struct>struct <name>pcap_rpcap</name> <block>{





<decl_stmt><decl><type><name>int</name></type> <name>rmt_clientside</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SOCKET</name></type> <name>rmt_sockctrl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>rmt_sockdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rmt_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rmt_capstarted</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>currentfilter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8</name></type> <name>protocol_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>TotNetDrops</name></decl>;</decl_stmt>

















<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>TotCapt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pcap_stat</name></name></type> <name>stat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pcap</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>






<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>pcap_stat</name></name> <modifier>*</modifier></type><name>rpcap_stats_rpcap</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_stat</name></name> <modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pcap_pack_bpffilter</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>sendbuf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sendbufidx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bpf_program</name></name> <modifier>*</modifier></type><name>prog</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pcap_createfilter_norpcappkt</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bpf_program</name></name> <modifier>*</modifier></type><name>prog</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pcap_updatefilter_remote</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bpf_program</name></name> <modifier>*</modifier></type><name>prog</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pcap_save_current_filter_rpcap</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pcap_setfilter_rpcap</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bpf_program</name></name> <modifier>*</modifier></type><name>prog</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pcap_setsampling_remote</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pcap_startcapture_remote</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rpcap_recv_msg_header</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rpcap_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rpcap_check_msg_ver</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name>uint8</name></type> <name>expected_ver</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rpcap_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rpcap_check_msg_type</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name>uint8</name></type> <name>request_type</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rpcap_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>uint16</name> <modifier>*</modifier></type><name>errcode</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rpcap_process_msg_header</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name>uint8</name></type> <name>ver</name></decl></parameter>, <parameter><decl><type><name>uint8</name></type> <name>request_type</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rpcap_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rpcap_recv</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>toread</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>plen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>rpcap_msg_err</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sockctrl</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>plen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>remote_errbuf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rpcap_discard</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rpcap_read_packet_msg</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>



























































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCKADDR_IN_LEN</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCKADDR_IN6_LEN</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_BSD_AF_INET_BE</name></cpp:macro> <cpp:value>((SOCKADDR_IN_LEN &lt;&lt; 8) | 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_BSD_AF_INET_LE</name></cpp:macro> <cpp:value>(SOCKADDR_IN_LEN &lt;&lt; 8)</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_BSD_AF_INET6_BSD_BE</name></cpp:macro> <cpp:value>((SOCKADDR_IN6_LEN &lt;&lt; 8) | 24)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_BSD_AF_INET6_FREEBSD_BE</name></cpp:macro> <cpp:value>((SOCKADDR_IN6_LEN &lt;&lt; 8) | 28)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_BSD_AF_INET6_DARWIN_BE</name></cpp:macro> <cpp:value>((SOCKADDR_IN6_LEN &lt;&lt; 8) | 30)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_BSD_AF_INET6_LE</name></cpp:macro> <cpp:value>(SOCKADDR_IN6_LEN &lt;&lt; 8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINUX_AF_INET6</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HPUX_AF_INET6</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AIX_AF_INET6</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOLARIS_AF_INET6</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rpcap_deseraddr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rpcap_sockaddr</name></name> <modifier>*</modifier></type><name>sockaddrin</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>sockaddrout</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<switch>switch <condition>(<expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>sockaddrin</name><operator>-&gt;</operator><name>family</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>RPCAP_AF_INET</name></expr>:</case>
<case>case <expr><name>NEW_BSD_AF_INET_BE</name></expr>:</case>
<case>case <expr><name>NEW_BSD_AF_INET_LE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_sockaddr_in</name></name> <modifier>*</modifier></type><name>sockaddrin_ipv4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>sockaddrout_ipv4</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>sockaddrout</name><operator>)</operator> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_storage</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>sockaddrout</name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"malloc() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sockaddrin_ipv4</name> <operator>=</operator> <operator>(</operator>struct <name>rpcap_sockaddr_in</name> <operator>*</operator><operator>)</operator> <name>sockaddrin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sockaddrout_ipv4</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>*</operator><name>sockaddrout</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sockaddrout_ipv4</name><operator>-&gt;</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sockaddrout_ipv4</name><operator>-&gt;</operator><name>sin_port</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>sockaddrin_ipv4</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sockaddrout_ipv4</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sockaddrin_ipv4</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sockaddrout_ipv4</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>sockaddrout_ipv4</name><operator>-&gt;</operator><name>sin_zero</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sockaddrout_ipv4</name><operator>-&gt;</operator><name>sin_zero</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>RPCAP_AF_INET6</name></expr>:</case>
<case>case <expr><name>NEW_BSD_AF_INET6_BSD_BE</name></expr>:</case>
<case>case <expr><name>NEW_BSD_AF_INET6_FREEBSD_BE</name></expr>:</case>
<case>case <expr><name>NEW_BSD_AF_INET6_DARWIN_BE</name></expr>:</case>
<case>case <expr><name>NEW_BSD_AF_INET6_LE</name></expr>:</case>
<case>case <expr><name>LINUX_AF_INET6</name></expr>:</case>
<case>case <expr><name>HPUX_AF_INET6</name></expr>:</case>
<case>case <expr><name>AIX_AF_INET6</name></expr>:</case>
<case>case <expr><name>SOLARIS_AF_INET6</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_sockaddr_in6</name></name> <modifier>*</modifier></type><name>sockaddrin_ipv6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>sockaddrout_ipv6</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>sockaddrout</name><operator>)</operator> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_storage</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>sockaddrout</name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"malloc() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sockaddrin_ipv6</name> <operator>=</operator> <operator>(</operator>struct <name>rpcap_sockaddr_in6</name> <operator>*</operator><operator>)</operator> <name>sockaddrin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sockaddrout_ipv6</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>*</operator><name>sockaddrout</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sockaddrout_ipv6</name><operator>-&gt;</operator><name>sin6_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sockaddrout_ipv6</name><operator>-&gt;</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>sockaddrin_ipv6</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sockaddrout_ipv6</name><operator>-&gt;</operator><name>sin6_flowinfo</name></name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>sockaddrin_ipv6</name><operator>-&gt;</operator><name>flowinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sockaddrout_ipv6</name><operator>-&gt;</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sockaddrin_ipv6</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sockaddrout_ipv6</name><operator>-&gt;</operator><name>sin6_addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sockaddrout_ipv6</name><operator>-&gt;</operator><name>sin6_scope_id</name></name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>sockaddrin_ipv6</name><operator>-&gt;</operator><name>scope_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>




<expr_stmt><expr><operator>*</operator><name>sockaddrout</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




















<function><type><specifier>static</specifier> <name>int</name></type> <name>pcap_read_nocb_remote</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_pkthdr</name></name> <modifier>*</modifier></type><name>pkt_header</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pkt_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_rpcap</name></name> <modifier>*</modifier></type><name>pr</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_header</name></name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_pkthdr</name></name> <modifier>*</modifier></type><name>net_pkt_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>net_pkt_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>plen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>msglen</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fd_set</name></type> <name>rfds</name></decl>;</decl_stmt>





<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>timeout</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>timeout</name></name> <operator>-</operator> <name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_sockdata</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>select</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>pr</name><operator>-&gt;</operator><name>rmt_sockdata</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition>
<block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"select()"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><name>header</name> <operator>=</operator> <operator>(</operator>struct <name>rpcap_header</name> <operator>*</operator><operator>)</operator> <name><name>p</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>net_pkt_header</name> <operator>=</operator> <operator>(</operator>struct <name>rpcap_pkthdr</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_header</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>net_pkt_data</name> <operator>=</operator> <operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_header</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_pkthdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_flags</name></name> <operator>&amp;</operator> <name>PCAP_OPENFLAG_DATATX_UDP</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>msglen</name> <operator>=</operator> <call><name>sock_recv_dgram</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_sockdata</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>bufsize</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>msglen</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>msglen</name> <operator>==</operator> <operator>-</operator><literal type="number">3</literal></expr>)</condition>
<block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>msglen</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_header</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"UDP packet message is shorter than an rpcap header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>plen</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>plen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>msglen</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_header</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>plen</name></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"UDP packet message is shorter than its rpcap header claims"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>cc</name></name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_header</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
<block>{<block_content>





<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>rpcap_read_packet_msg</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_sockdata</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <operator>-</operator><literal type="number">3</literal></expr>)</condition>
<block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>







<expr_stmt><expr><name>plen</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>plen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>plen</name> <operator>&gt;</operator> <name><name>p</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_header</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
<block>{<block_content>






<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Server sent us a message larger than the largest expected packet message"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>rpcap_read_packet_msg</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_sockdata</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_header</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <operator>-</operator><literal type="number">3</literal></expr>)</condition>
<block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bp</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>plen</name></name> <operator>=</operator> <name>plen</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>rpcap_check_msg_ver</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_sockdata</name></name></expr></argument>, <argument><expr><name><name>pr</name><operator>-&gt;</operator><name>protocol_version</name></name></expr></argument>,
<argument><expr><name>header</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>RPCAP_MSG_PACKET</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>net_pkt_header</name><operator>-&gt;</operator><name>caplen</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>plen</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Packet's captured data goes past the end of the received packet message."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>pkt_header</name><operator>-&gt;</operator><name>caplen</name></name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>net_pkt_header</name><operator>-&gt;</operator><name>caplen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt_header</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>net_pkt_header</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt_header</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>net_pkt_header</name><operator>-&gt;</operator><name>timestamp_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt_header</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>net_pkt_header</name><operator>-&gt;</operator><name>timestamp_usec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>*</operator><name>pkt_data</name> <operator>=</operator> <name>net_pkt_data</name></expr>;</expr_stmt>





<expr_stmt><expr><name><name>pr</name><operator>-&gt;</operator><name>TotCapt</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_flags</name></name> <operator>&amp;</operator> <name>PCAP_OPENFLAG_DATATX_UDP</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>npkt</name></decl>;</decl_stmt>


<expr_stmt><expr><name>npkt</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>net_pkt_header</name><operator>-&gt;</operator><name>npkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pr</name><operator>-&gt;</operator><name>TotCapt</name></name> <operator>!=</operator> <name>npkt</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>pr</name><operator>-&gt;</operator><name>TotNetDrops</name></name> <operator>+=</operator> <operator>(</operator><name>npkt</name> <operator>-</operator> <name><name>pr</name><operator>-&gt;</operator><name>TotCapt</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pr</name><operator>-&gt;</operator><name>TotCapt</name></name> <operator>=</operator> <name>npkt</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type> <name>pcap_read_rpcap</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>, <parameter><decl><type><name>pcap_handler</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_rpcap</name></name> <modifier>*</modifier></type><name>pr</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_pkthdr</name></name></type> <name>pkt_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>pkt_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_clientside</name></name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pr</name><operator>-&gt;</operator><name>rmt_capstarted</name></name></expr>)</condition>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><call><name>pcap_startcapture_remote</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>cnt</name> <operator>||</operator> <call><name>PACKET_COUNT_IS_UNLIMITED</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>break_loop</name></name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>break_loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>PCAP_ERROR_BREAK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pcap_read_nocb_remote</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt_header</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><call>(<modifier>*</modifier><name>callback</name>)<argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt_header</name></expr></argument>, <argument><expr><name>pkt_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>







<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>break_loop</name></name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>break_loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>PCAP_ERROR_BREAK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>void</name></type> <name>pcap_cleanup_rpcap</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_rpcap</name></name> <modifier>*</modifier></type><name>pr</name> <init>= <expr><name><name>fp</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_header</name></name></type> <name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>activehosts</name></name> <modifier>*</modifier></type><name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>active</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>activeHosts</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>temp</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>temp</name><operator>-&gt;</operator><name>sockctrl</name></name> <operator>==</operator> <name><name>pr</name><operator>-&gt;</operator><name>rmt_sockctrl</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>active</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>temp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcap_createhdr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><name><name>pr</name><operator>-&gt;</operator><name>protocol_version</name></name></expr></argument>,
<argument><expr><name>RPCAP_MSG_CLOSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sock_send</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_sockctrl</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>header</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>rpcap_createhdr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><name><name>pr</name><operator>-&gt;</operator><name>protocol_version</name></name></expr></argument>,
<argument><expr><name>RPCAP_MSG_ENDCAP_REQ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><call><name>sock_send</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_sockctrl</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>header</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>





<if_stmt><if>if <condition>(<expr><call><name>rpcap_process_msg_header</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_sockctrl</name></name></expr></argument>,
<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>protocol_version</name></name></expr></argument>, <argument><expr><name>RPCAP_MSG_ENDCAP_REQ</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>rpcap_discard</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_sockctrl</name></name></expr></argument>,
<argument><expr><name><name>header</name><operator>.</operator><name>plen</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_sockdata</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_close</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_sockdata</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_sockdata</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>active</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pr</name><operator>-&gt;</operator><name>rmt_sockctrl</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sock_close</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_sockctrl</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_sockctrl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pr</name><operator>-&gt;</operator><name>currentfilter</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>currentfilter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pr</name><operator>-&gt;</operator><name>currentfilter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pcap_cleanup_live_common</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>sock_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>pcap_stats_rpcap</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_stat</name></name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_stat</name></name> <modifier>*</modifier></type><name>retval</name></decl>;</decl_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rpcap_stats_rpcap</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><name>PCAP_STATS_STANDARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>retval</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><specifier>static</specifier> <name><name>struct</name> <name>pcap_stat</name></name> <modifier>*</modifier></type><name>pcap_stats_ex_rpcap</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pcap_stat_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pcap_stat_size</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>stat</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>


<return>return <expr><operator>(</operator><call><name>rpcap_stats_rpcap</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>stat</name></name><operator>)</operator></expr></argument>, <argument><expr><name>PCAP_STATS_EX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






































<function><type><specifier>static</specifier> <name><name>struct</name> <name>pcap_stat</name></name> <modifier>*</modifier></type><name>rpcap_stats_rpcap</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_stat</name></name> <modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_rpcap</name></name> <modifier>*</modifier></type><name>pr</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_header</name></name></type> <name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_stats</name></name></type> <name>netstats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>plen</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>!=</operator> <name>PCAP_STATS_STANDARD</name> <operator>&amp;&amp;</operator> <name>mode</name> <operator>!=</operator> <name>PCAP_STATS_EX</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>!=</operator> <name>PCAP_STATS_STANDARD</name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Invalid stats mode %d"</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pr</name><operator>-&gt;</operator><name>rmt_capstarted</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_drop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_ifdrop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_recv</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>PCAP_STATS_EX</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_capt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_sent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_netdrop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>ps</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rpcap_createhdr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><name><name>pr</name><operator>-&gt;</operator><name>protocol_version</name></name></expr></argument>,
<argument><expr><name>RPCAP_MSG_STATS_REQ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>sock_send</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_sockctrl</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>header</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>rpcap_process_msg_header</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_sockctrl</name></name></expr></argument>, <argument><expr><name><name>pr</name><operator>-&gt;</operator><name>protocol_version</name></name></expr></argument>,
<argument><expr><name>RPCAP_MSG_STATS_REQ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>plen</name> <operator>=</operator> <name><name>header</name><operator>.</operator><name>plen</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>rpcap_recv</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_sockctrl</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>netstats</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_stats</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>plen</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_drop</name></name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>netstats</name><operator>.</operator><name>krnldrop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_ifdrop</name></name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>netstats</name><operator>.</operator><name>ifdrop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_recv</name></name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>netstats</name><operator>.</operator><name>ifrecv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>PCAP_STATS_EX</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_capt</name></name> <operator>=</operator> <name><name>pr</name><operator>-&gt;</operator><name>TotCapt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_netdrop</name></name> <operator>=</operator> <name><name>pr</name><operator>-&gt;</operator><name>TotNetDrops</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_sent</name></name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>netstats</name><operator>.</operator><name>svrcapt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><call><name>rpcap_discard</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_sockctrl</name></name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error_nodiscard</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><name>ps</name></expr>;</return>

<label><name>error</name>:</label>





<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>rpcap_discard</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_sockctrl</name></name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>error_nodiscard</name>:</label>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>




















<function><type><specifier>static</specifier> <name><name>struct</name> <name>activehosts</name></name> <modifier>*</modifier></type>
<name>rpcap_remoteact_getsock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>activehosts</name></name> <modifier>*</modifier></type><name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>addrinfo</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ai_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>


<expr_stmt><expr><name>addrinfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>addrinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addrinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"getaddrinfo() %s"</literal></expr></argument>,
<argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>activeHosts</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>temp</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ai_next</name> <operator>=</operator> <name>addrinfo</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ai_next</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>sock_cmpaddr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr_storage</name> <operator>*</operator><operator>)</operator> <name><name>ai_next</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>addrinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>temp</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ai_next</name> <operator>=</operator> <name><name>ai_next</name><operator>-&gt;</operator><name>ai_next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>temp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>addrinfo</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>addrinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>int</name></type> <name>pcap_startcapture_remote</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_rpcap</name></name> <modifier>*</modifier></type><name>pr</name> <init>= <expr><name><name>fp</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>sendbuf</name><index>[<expr><name>RPCAP_NETBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sendbufidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>portdata</name><index>[<expr><name>PCAP_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>plen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>active</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>activehosts</name></name> <modifier>*</modifier></type><name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>host</name><index>[<expr><name>INET6_ADDRSTRLEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>addrinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>sockdata</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>saddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>saddrlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ai_family</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_header</name></name></type> <name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_startcapreq</name></name> <modifier>*</modifier></type><name>startcapreq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_startcapreply</name></name></type> <name>startcapreply</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>itemp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sockbufsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>server_sockbufsize</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><call><name>pcap_setsampling_remote</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>activeHosts</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>temp</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>temp</name><operator>-&gt;</operator><name>sockctrl</name></name> <operator>==</operator> <name><name>pr</name><operator>-&gt;</operator><name>rmt_sockctrl</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>active</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>temp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>addrinfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>








<expr_stmt><expr><name>saddrlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getpeername</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_sockctrl</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>saddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>saddrlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"getsockname()"</literal></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error_nodiscard</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ai_family</name> <operator>=</operator> <operator>(</operator><operator>(</operator>struct <name>sockaddr_storage</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>saddr</name><operator>)</operator><operator>-&gt;</operator><name>ss_family</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>getnameinfo</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>saddr</name></expr></argument>, <argument><expr><name>saddrlen</name></expr></argument>, <argument><expr><name>host</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NI_NUMERICHOST</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"getnameinfo()"</literal></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error_nodiscard</name>;</goto>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name>active</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>pr</name><operator>-&gt;</operator><name>rmt_flags</name></name> <operator>&amp;</operator> <name>PCAP_OPENFLAG_DATATX_UDP</name><operator>)</operator></expr>)</condition>
<block>{<block_content>





<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>addrinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>ai_family</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>pr</name><operator>-&gt;</operator><name>rmt_flags</name></name> <operator>&amp;</operator> <name>PCAP_OPENFLAG_DATATX_UDP</name><operator>)</operator></expr> ?</condition><then> <expr><name>SOCK_DGRAM</name></expr> </then><else>: <expr><name>SOCK_STREAM</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <name>AI_PASSIVE</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>sock_initaddress</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addrinfo</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error_nodiscard</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sockdata</name> <operator>=</operator> <call><name>sock_open</name><argument_list>(<argument><expr><name>addrinfo</name></expr></argument>, <argument><expr><name>SOCKOPEN_SERVER</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument> , <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>INVALID_SOCKET</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error_nodiscard</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>addrinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addrinfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><name>saddrlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getsockname</name><argument_list>(<argument><expr><name>sockdata</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>saddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>saddrlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"getsockname()"</literal></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error_nodiscard</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>getnameinfo</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>saddr</name></expr></argument>, <argument><expr><name>saddrlen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>portdata</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>portdata</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"getnameinfo()"</literal></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error_nodiscard</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><call><name>sock_bufferize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>sendbufidx</name></expr></argument>, <argument><expr><name>RPCAP_NETBUF_SIZE</name></expr></argument>, <argument><expr><name>SOCKBUF_CHECKONLY</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error_nodiscard</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rpcap_createhdr</name><argument_list>(<argument><expr><operator>(</operator>struct <name>rpcap_header</name> <operator>*</operator><operator>)</operator> <name>sendbuf</name></expr></argument>,
<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>protocol_version</name></name></expr></argument>, <argument><expr><name>RPCAP_MSG_STARTCAP_REQ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_startcapreq</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_filter</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>fp</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_len</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_filterbpf_insn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>startcapreq</name> <operator>=</operator> <operator>(</operator>struct <name>rpcap_startcapreq</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>sendbuf</name><index>[<expr><name>sendbufidx</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sock_bufferize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_startcapreq</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>sendbufidx</name></expr></argument>, <argument><expr><name>RPCAP_NETBUF_SIZE</name></expr></argument>, <argument><expr><name>SOCKBUF_CHECKONLY</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error_nodiscard</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>startcapreq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_startcapreq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>timeout</name></name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>timeout</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>startcapreq</name><operator>-&gt;</operator><name>read_timeout</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>active</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>pr</name><operator>-&gt;</operator><name>rmt_flags</name></name> <operator>&amp;</operator> <name>PCAP_OPENFLAG_DATATX_UDP</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>portdata</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>startcapreq</name><operator>-&gt;</operator><name>portdata</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>startcapreq</name><operator>-&gt;</operator><name>portdata</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>startcapreq</name><operator>-&gt;</operator><name>portdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>startcapreq</name><operator>-&gt;</operator><name>snaplen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>snapshot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>startcapreq</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_flags</name></name> <operator>&amp;</operator> <name>PCAP_OPENFLAG_PROMISCUOUS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>startcapreq</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>RPCAP_STARTCAPREQ_FLAG_PROMISC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_flags</name></name> <operator>&amp;</operator> <name>PCAP_OPENFLAG_DATATX_UDP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>startcapreq</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>RPCAP_STARTCAPREQ_FLAG_DGRAM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>active</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>startcapreq</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>RPCAP_STARTCAPREQ_FLAG_SERVEROPEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>startcapreq</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>startcapreq</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>pcap_pack_bpffilter</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sendbuf</name><index>[<expr><name>sendbufidx</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sendbufidx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>fcode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error_nodiscard</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sock_send</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_sockctrl</name></name></expr></argument>, <argument><expr><name>sendbuf</name></expr></argument>, <argument><expr><name>sendbufidx</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error_nodiscard</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>rpcap_process_msg_header</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_sockctrl</name></name></expr></argument>, <argument><expr><name><name>pr</name><operator>-&gt;</operator><name>protocol_version</name></name></expr></argument>,
<argument><expr><name>RPCAP_MSG_STARTCAP_REQ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error_nodiscard</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>plen</name> <operator>=</operator> <name><name>header</name><operator>.</operator><name>plen</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rpcap_recv</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_sockctrl</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>startcapreply</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_startcapreply</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>plen</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>












<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>pr</name><operator>-&gt;</operator><name>rmt_flags</name></name> <operator>&amp;</operator> <name>PCAP_OPENFLAG_DATATX_UDP</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>addrinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>ai_family</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>pr</name><operator>-&gt;</operator><name>rmt_flags</name></name> <operator>&amp;</operator> <name>PCAP_OPENFLAG_DATATX_UDP</name><operator>)</operator></expr> ?</condition><then> <expr><name>SOCK_DGRAM</name></expr> </then><else>: <expr><name>SOCK_STREAM</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>portdata</name></expr></argument>, <argument><expr><name>PCAP_BUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>startcapreply</name><operator>.</operator><name>portdata</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>sock_initaddress</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>portdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addrinfo</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sockdata</name> <operator>=</operator> <call><name>sock_open</name><argument_list>(<argument><expr><name>addrinfo</name></expr></argument>, <argument><expr><name>SOCKOPEN_CLIENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>INVALID_SOCKET</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>addrinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addrinfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>socktemp</name></decl>;</decl_stmt>


<expr_stmt><expr><name>saddrlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>socktemp</name> <operator>=</operator> <call><name>accept</name><argument_list>(<argument><expr><name>sockdata</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>saddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>saddrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>socktemp</name> <operator>==</operator> <name>INVALID_SOCKET</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"accept()"</literal></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>sock_close</name><argument_list>(<argument><expr><name>sockdata</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sockdata</name> <operator>=</operator> <name>socktemp</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_sockdata</name></name> <operator>=</operator> <name>sockdata</name></expr>;</expr_stmt>






<expr_stmt><expr><name>server_sockbufsize</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>startcapreply</name><operator>.</operator><name>bufsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>itemp</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sockbufsize</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>getsockopt</name><argument_list>(<argument><expr><name>sockdata</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_RCVBUF</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sockbufsize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>itemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"pcap_startcapture_remote(): getsockopt() failed"</literal></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>











<if_stmt><if>if <condition>(<expr><name>server_sockbufsize</name> <operator>&lt;=</operator> <operator>(</operator><name>u_int</name><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>snapshot</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>server_sockbufsize</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>pcap_pkthdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>u_int</name><operator>)</operator> <name>sockbufsize</name> <operator>&lt;</operator> <name>server_sockbufsize</name></expr>)</condition>
<block>{<block_content>




<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>setsockopt</name><argument_list>(<argument><expr><name>sockdata</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_RCVBUF</name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name>server_sockbufsize</name><operator>)</operator></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>server_sockbufsize</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>






<expr_stmt><expr><name>server_sockbufsize</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>u_int</name><operator>)</operator> <name>sockbufsize</name> <operator>&gt;=</operator> <name>server_sockbufsize</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>server_sockbufsize</name> <operator>=</operator> <name>sockbufsize</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>










<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_header</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_pkthdr</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>fp</name><operator>-&gt;</operator><name>snapshot</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>bufsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"malloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>bp</name></name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>cc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>rpcap_discard</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_sockctrl</name></name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error_nodiscard</name>;</goto></block_content></block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_flags</name></name> <operator>&amp;</operator> <name>PCAP_OPENFLAG_NOCAPTURE_RPCAP</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bpf_program</name></name></type> <name>fcode</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pcap_createfilter_norpcappkt</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fcode</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>pcap_updatefilter_remote</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fcode</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pcap_freecode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_capstarted</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>












<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>rpcap_discard</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_sockctrl</name></name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>error_nodiscard</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sockdata</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>sockdata</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sock_close</name><argument_list>(<argument><expr><name>sockdata</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sock_close</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_sockctrl</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>addrinfo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>addrinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
if (fp)
{
pcap_close(fp);
fp= NULL;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

























<function><type><specifier>static</specifier> <name>int</name></type> <name>pcap_pack_bpffilter</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>sendbuf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sendbufidx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bpf_program</name></name> <modifier>*</modifier></type><name>prog</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_filterbpf_insn</name></name> <modifier>*</modifier></type><name>insn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bpf_insn</name></name> <modifier>*</modifier></type><name>bf_insn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bpf_program</name></name></type> <name>fake_prog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prog</name><operator>-&gt;</operator><name>bf_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>pcap_compile</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fake_prog</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>prog</name> <operator>=</operator> <operator>&amp;</operator><name>fake_prog</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>filter</name> <operator>=</operator> <operator>(</operator>struct <name>rpcap_filter</name> <operator>*</operator><operator>)</operator> <name>sendbuf</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sock_bufferize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_filter</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sendbufidx</name></expr></argument>,
<argument><expr><name>RPCAP_NETBUF_SIZE</name></expr></argument>, <argument><expr><name>SOCKBUF_CHECKONLY</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>filtertype</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>RPCAP_UPDATEFILTER_BPF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>nitems</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name><operator>)</operator><name><name>prog</name><operator>-&gt;</operator><name>bf_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sock_bufferize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>prog</name><operator>-&gt;</operator><name>bf_len</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_filterbpf_insn</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sendbufidx</name></expr></argument>, <argument><expr><name>RPCAP_NETBUF_SIZE</name></expr></argument>, <argument><expr><name>SOCKBUF_CHECKONLY</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>insn</name> <operator>=</operator> <operator>(</operator>struct <name>rpcap_filterbpf_insn</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>filter</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>bf_insn</name> <operator>=</operator> <name><name>prog</name><operator>-&gt;</operator><name>bf_insns</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>prog</name><operator>-&gt;</operator><name>bf_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>insn</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>bf_insn</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>insn</name><operator>-&gt;</operator><name>jf</name></name> <operator>=</operator> <name><name>bf_insn</name><operator>-&gt;</operator><name>jf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>insn</name><operator>-&gt;</operator><name>jt</name></name> <operator>=</operator> <name><name>bf_insn</name><operator>-&gt;</operator><name>jt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>insn</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>bf_insn</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>insn</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>bf_insn</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


























<function><type><specifier>static</specifier> <name>int</name></type> <name>pcap_updatefilter_remote</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bpf_program</name></name> <modifier>*</modifier></type><name>prog</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_rpcap</name></name> <modifier>*</modifier></type><name>pr</name> <init>= <expr><name><name>fp</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>sendbuf</name><index>[<expr><name>RPCAP_NETBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sendbufidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_header</name></name></type> <name>header</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sock_bufferize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sendbufidx</name></expr></argument>,
<argument><expr><name>RPCAP_NETBUF_SIZE</name></expr></argument>, <argument><expr><name>SOCKBUF_CHECKONLY</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rpcap_createhdr</name><argument_list>(<argument><expr><operator>(</operator>struct <name>rpcap_header</name> <operator>*</operator><operator>)</operator> <name>sendbuf</name></expr></argument>,
<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>protocol_version</name></name></expr></argument>, <argument><expr><name>RPCAP_MSG_UPDATEFILTER_REQ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_filter</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>prog</name><operator>-&gt;</operator><name>bf_len</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_filterbpf_insn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pcap_pack_bpffilter</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sendbuf</name><index>[<expr><name>sendbufidx</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sendbufidx</name></expr></argument>, <argument><expr><name>prog</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sock_send</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_sockctrl</name></name></expr></argument>, <argument><expr><name>sendbuf</name></expr></argument>, <argument><expr><name>sendbufidx</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>rpcap_process_msg_header</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_sockctrl</name></name></expr></argument>, <argument><expr><name><name>pr</name><operator>-&gt;</operator><name>protocol_version</name></name></expr></argument>,
<argument><expr><name>RPCAP_MSG_UPDATEFILTER_REQ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>rpcap_discard</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_sockctrl</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>plen</name></name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>pcap_save_current_filter_rpcap</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_rpcap</name></name> <modifier>*</modifier></type><name>pr</name> <init>= <expr><name><name>fp</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>









<if_stmt><if>if <condition>(<expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_clientside</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>pr</name><operator>-&gt;</operator><name>rmt_flags</name></name> <operator>&amp;</operator> <name>PCAP_OPENFLAG_NOCAPTURE_RPCAP</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pr</name><operator>-&gt;</operator><name>currentfilter</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>currentfilter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>filter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>filter</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pr</name><operator>-&gt;</operator><name>currentfilter</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type> <name>pcap_setfilter_rpcap</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bpf_program</name></name> <modifier>*</modifier></type><name>prog</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_rpcap</name></name> <modifier>*</modifier></type><name>pr</name> <init>= <expr><name><name>fp</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pr</name><operator>-&gt;</operator><name>rmt_capstarted</name></name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>install_bpf_program</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>prog</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>pcap_updatefilter_remote</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>prog</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>int</name></type> <name>pcap_createfilter_norpcappkt</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bpf_program</name></name> <modifier>*</modifier></type><name>prog</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_rpcap</name></name> <modifier>*</modifier></type><name>pr</name> <init>= <expr><name><name>fp</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>RetVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_flags</name></name> <operator>&amp;</operator> <name>PCAP_OPENFLAG_NOCAPTURE_RPCAP</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>saddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>saddrlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>myaddress</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>myctrlport</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>mydataport</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>peeraddress</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>peerctrlport</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newfilter</name></decl>;</decl_stmt>


<expr_stmt><expr><name>saddrlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getpeername</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_sockctrl</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>saddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>saddrlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"getpeername()"</literal></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getnameinfo</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>saddr</name></expr></argument>, <argument><expr><name>saddrlen</name></expr></argument>, <argument><expr><name>peeraddress</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>peeraddress</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>peerctrlport</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>peerctrlport</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NI_NUMERICHOST</name> <operator>|</operator> <name>NI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"getnameinfo()"</literal></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>getsockname</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_sockctrl</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>saddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>saddrlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"getsockname()"</literal></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>getnameinfo</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>saddr</name></expr></argument>, <argument><expr><name>saddrlen</name></expr></argument>, <argument><expr><name>myaddress</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>myaddress</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>myctrlport</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>myctrlport</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NI_NUMERICHOST</name> <operator>|</operator> <name>NI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"getnameinfo()"</literal></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>getsockname</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_sockdata</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>saddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>saddrlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"getsockname()"</literal></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>getnameinfo</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>saddr</name></expr></argument>, <argument><expr><name>saddrlen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mydataport</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mydataport</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"getnameinfo()"</literal></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pr</name><operator>-&gt;</operator><name>currentfilter</name></name> <operator>&amp;&amp;</operator> <name><name>pr</name><operator>-&gt;</operator><name>currentfilter</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><call><name>pcap_asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newfilter</name></expr></argument>,
<argument><expr><literal type="string">"(%s) and not (host %s and host %s and port %s and port %s) and not (host %s and host %s and port %s)"</literal></expr></argument>,
<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>currentfilter</name></name></expr></argument>, <argument><expr><name>myaddress</name></expr></argument>, <argument><expr><name>peeraddress</name></expr></argument>,
<argument><expr><name>myctrlport</name></expr></argument>, <argument><expr><name>peerctrlport</name></expr></argument>, <argument><expr><name>myaddress</name></expr></argument>, <argument><expr><name>peeraddress</name></expr></argument>,
<argument><expr><name>mydataport</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory for new filter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><call><name>pcap_asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newfilter</name></expr></argument>,
<argument><expr><literal type="string">"not (host %s and host %s and port %s and port %s) and not (host %s and host %s and port %s)"</literal></expr></argument>,
<argument><expr><name>myaddress</name></expr></argument>, <argument><expr><name>peeraddress</name></expr></argument>, <argument><expr><name>myctrlport</name></expr></argument>, <argument><expr><name>peerctrlport</name></expr></argument>,
<argument><expr><name>myaddress</name></expr></argument>, <argument><expr><name>peeraddress</name></expr></argument>, <argument><expr><name>mydataport</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory for new filter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>






<expr_stmt><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_clientside</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pcap_compile</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>newfilter</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>RetVal</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_clientside</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>newfilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>RetVal</name></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>int</name></type> <name>pcap_setsampling_remote</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_rpcap</name></name> <modifier>*</modifier></type><name>pr</name> <init>= <expr><name><name>fp</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>sendbuf</name><index>[<expr><name>RPCAP_NETBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sendbufidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_header</name></name></type> <name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_sampling</name></name> <modifier>*</modifier></type><name>sampling_pars</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>rmt_samp</name><operator>.</operator><name>method</name></name> <operator>==</operator> <name>PCAP_SAMP_NOSAMP</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>rmt_samp</name><operator>.</operator><name>method</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>fp</name><operator>-&gt;</operator><name>rmt_samp</name><operator>.</operator><name>method</name></name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Invalid sampling method %d"</literal></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>rmt_samp</name><operator>.</operator><name>method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>rmt_samp</name><operator>.</operator><name>value</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>fp</name><operator>-&gt;</operator><name>rmt_samp</name><operator>.</operator><name>value</name></name> <operator>&gt;</operator> <literal type="number">65535</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Invalid sampling value %d"</literal></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>rmt_samp</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sock_bufferize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>sendbufidx</name></expr></argument>, <argument><expr><name>RPCAP_NETBUF_SIZE</name></expr></argument>, <argument><expr><name>SOCKBUF_CHECKONLY</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rpcap_createhdr</name><argument_list>(<argument><expr><operator>(</operator>struct <name>rpcap_header</name> <operator>*</operator><operator>)</operator> <name>sendbuf</name></expr></argument>,
<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>protocol_version</name></name></expr></argument>, <argument><expr><name>RPCAP_MSG_SETSAMPLING_REQ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_sampling</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>sampling_pars</name> <operator>=</operator> <operator>(</operator>struct <name>rpcap_sampling</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>sendbuf</name><index>[<expr><name>sendbufidx</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sock_bufferize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_sampling</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>sendbufidx</name></expr></argument>, <argument><expr><name>RPCAP_NETBUF_SIZE</name></expr></argument>, <argument><expr><name>SOCKBUF_CHECKONLY</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>sampling_pars</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_sampling</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sampling_pars</name><operator>-&gt;</operator><name>method</name></name> <operator>=</operator> <operator>(</operator><name>uint8</name><operator>)</operator><name><name>fp</name><operator>-&gt;</operator><name>rmt_samp</name><operator>.</operator><name>method</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sampling_pars</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <operator>(</operator><name>uint16</name><operator>)</operator><call><name>htonl</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>rmt_samp</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sock_send</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_sockctrl</name></name></expr></argument>, <argument><expr><name>sendbuf</name></expr></argument>, <argument><expr><name>sendbufidx</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>rpcap_process_msg_header</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_sockctrl</name></name></expr></argument>, <argument><expr><name><name>pr</name><operator>-&gt;</operator><name>protocol_version</name></name></expr></argument>,
<argument><expr><name>RPCAP_MSG_SETSAMPLING_REQ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>rpcap_discard</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_sockctrl</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>plen</name></name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>







































<function><type><specifier>static</specifier> <name>int</name></type> <name>rpcap_doauth</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sockctrl</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>ver</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_rmtauth</name></name> <modifier>*</modifier></type><name>auth</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>sendbuf</name><index>[<expr><name>RPCAP_NETBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sendbufidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_auth</name></name> <modifier>*</modifier></type><name>rpauth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16</name></type> <name>auth_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_header</name></name></type> <name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>str_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>plen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_authreply</name></name></type> <name>authreply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8</name></type> <name>ourvers</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>auth</name></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>auth</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>RPCAP_RMTAUTH_NULL</name></expr>:</case>
<expr_stmt><expr><name>length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_auth</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>RPCAP_RMTAUTH_PWD</name></expr>:</case>
<expr_stmt><expr><name>length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_auth</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>auth</name><operator>-&gt;</operator><name>username</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>str_length</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>auth</name><operator>-&gt;</operator><name>username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str_length</name> <operator>&gt;</operator> <literal type="number">65535</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"User name is too long (&gt; 65535 bytes)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <operator>(</operator><name>uint16</name><operator>)</operator><name>str_length</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>auth</name><operator>-&gt;</operator><name>password</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>str_length</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>auth</name><operator>-&gt;</operator><name>password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str_length</name> <operator>&gt;</operator> <literal type="number">65535</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Password is too long (&gt; 65535 bytes)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <operator>(</operator><name>uint16</name><operator>)</operator><name>str_length</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Authentication type not recognized."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><name>auth_type</name> <operator>=</operator> <operator>(</operator><name>uint16</name><operator>)</operator><name><name>auth</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>auth_type</name> <operator>=</operator> <name>RPCAP_RMTAUTH_NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_auth</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sock_bufferize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>sendbufidx</name></expr></argument>, <argument><expr><name>RPCAP_NETBUF_SIZE</name></expr></argument>, <argument><expr><name>SOCKBUF_CHECKONLY</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rpcap_createhdr</name><argument_list>(<argument><expr><operator>(</operator>struct <name>rpcap_header</name> <operator>*</operator><operator>)</operator> <name>sendbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>RPCAP_MSG_AUTH_REQ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rpauth</name> <operator>=</operator> <operator>(</operator>struct <name>rpcap_auth</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>sendbuf</name><index>[<expr><name>sendbufidx</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sock_bufferize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_auth</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>sendbufidx</name></expr></argument>, <argument><expr><name>RPCAP_NETBUF_SIZE</name></expr></argument>, <argument><expr><name>SOCKBUF_CHECKONLY</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>rpauth</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_auth</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rpauth</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>auth_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>auth_type</name> <operator>==</operator> <name>RPCAP_RMTAUTH_PWD</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>auth</name><operator>-&gt;</operator><name>username</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rpauth</name><operator>-&gt;</operator><name>slen1</name></name> <operator>=</operator> <operator>(</operator><name>uint16</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>auth</name><operator>-&gt;</operator><name>username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rpauth</name><operator>-&gt;</operator><name>slen1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sock_bufferize</name><argument_list>(<argument><expr><name><name>auth</name><operator>-&gt;</operator><name>username</name></name></expr></argument>, <argument><expr><name><name>rpauth</name><operator>-&gt;</operator><name>slen1</name></name></expr></argument>, <argument><expr><name>sendbuf</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>sendbufidx</name></expr></argument>, <argument><expr><name>RPCAP_NETBUF_SIZE</name></expr></argument>, <argument><expr><name>SOCKBUF_BUFFERIZE</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>auth</name><operator>-&gt;</operator><name>password</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rpauth</name><operator>-&gt;</operator><name>slen2</name></name> <operator>=</operator> <operator>(</operator><name>uint16</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>auth</name><operator>-&gt;</operator><name>password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rpauth</name><operator>-&gt;</operator><name>slen2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sock_bufferize</name><argument_list>(<argument><expr><name><name>auth</name><operator>-&gt;</operator><name>password</name></name></expr></argument>, <argument><expr><name><name>rpauth</name><operator>-&gt;</operator><name>slen2</name></name></expr></argument>, <argument><expr><name>sendbuf</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>sendbufidx</name></expr></argument>, <argument><expr><name>RPCAP_NETBUF_SIZE</name></expr></argument>, <argument><expr><name>SOCKBUF_BUFFERIZE</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rpauth</name><operator>-&gt;</operator><name>slen1</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>rpauth</name><operator>-&gt;</operator><name>slen1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rpauth</name><operator>-&gt;</operator><name>slen2</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>rpauth</name><operator>-&gt;</operator><name>slen2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sock_send</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><name>sendbuf</name></expr></argument>, <argument><expr><name>sendbufidx</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>rpcap_process_msg_header</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>RPCAP_MSG_AUTH_REQ</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>






<expr_stmt><expr><name>plen</name> <operator>=</operator> <name><name>header</name><operator>.</operator><name>plen</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>plen</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>plen</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_authreply</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>rpcap_discard</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>rpcap_recv</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>authreply</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_authreply</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>plen</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>rpcap_discard</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>rpcap_discard</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>authreply</name><operator>.</operator><name>minvers</name></name> <operator>&gt;</operator> <name><name>authreply</name><operator>.</operator><name>maxvers</name></name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"The server's minimum supported protocol version is greater than its maximum supported protocol version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name><name>authreply</name><operator>.</operator><name>minvers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>authreply</name><operator>.</operator><name>maxvers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<expr_stmt><expr><name>ourvers</name> <operator>=</operator> <name><name>authreply</name><operator>.</operator><name>maxvers</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RPCAP_MIN_VERSION</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>




<if_stmt><if>if <condition>(<expr><name>ourvers</name> <operator>&lt;</operator> <name>RPCAP_MIN_VERSION</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>novers</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<if_stmt><if>if <condition>(<expr><name>ourvers</name> <operator>&gt;</operator> <name>RPCAP_MAX_VERSION</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ourvers</name> <operator>=</operator> <name>RPCAP_MAX_VERSION</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>ourvers</name> <operator>&lt;</operator> <name><name>authreply</name><operator>.</operator><name>minvers</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>novers</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ver</name> <operator>=</operator> <name>ourvers</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>novers</name>:</label>



<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"The server doesn't support any protocol version that we support"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_getnonblock_rpcap</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Non-blocking mode isn't supported for capturing remotely with rpcap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_setnonblock_rpcap</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>nonblock</name></type> <name>_U_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Non-blocking mode isn't supported for capturing remotely with rpcap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rpcap_setup_session</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_rmtauth</name></name> <modifier>*</modifier></type><name>auth</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>activep</name></decl></parameter>, <parameter><decl><type><name>SOCKET</name> <modifier>*</modifier></type><name>sockctrlp</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>protocol_versionp</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>iface</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>activehosts</name></name> <modifier>*</modifier></type><name>activeconn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>






<if_stmt><if>if <condition>(<expr><call><name>pcap_parsesrcstr</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>iface</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>PCAP_SRC_IFREMOTE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Non-remote interface passed to remote capture routine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>sock_init</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>activeconn</name> <operator>=</operator> <call><name>rpcap_remoteact_getsock</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>activeconn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>activep</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>sockctrlp</name> <operator>=</operator> <name><name>activeconn</name><operator>-&gt;</operator><name>sockctrl</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>protocol_versionp</name> <operator>=</operator> <name><name>activeconn</name><operator>-&gt;</operator><name>protocol_version</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>activep</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>addrinfo</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition>
<block>{<block_content>



<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>addrinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>port</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>sock_initaddress</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>RPCAP_DEFAULT_NETPORT</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addrinfo</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>sock_initaddress</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addrinfo</name></expr></argument>,
<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>sockctrlp</name> <operator>=</operator> <call><name>sock_open</name><argument_list>(<argument><expr><name>addrinfo</name></expr></argument>, <argument><expr><name>SOCKOPEN_CLIENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>INVALID_SOCKET</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>addrinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>addrinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addrinfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rpcap_doauth</name><argument_list>(<argument><expr><operator>*</operator><name>sockctrlp</name></expr></argument>, <argument><expr><name>protocol_versionp</name></expr></argument>, <argument><expr><name>auth</name></expr></argument>,
<argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_close</name><argument_list>(<argument><expr><operator>*</operator><name>sockctrlp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>








































<function><type><name>pcap_t</name> <modifier>*</modifier></type><name>pcap_open_rpcap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>snaplen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>read_timeout</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_rmtauth</name></name> <modifier>*</modifier></type><name>auth</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>source_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_rpcap</name></name> <modifier>*</modifier></type><name>pr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>host</name><index>[<expr><name>PCAP_BUF_SIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ctrlport</name><index>[<expr><name>PCAP_BUF_SIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>iface</name><index>[<expr><name>PCAP_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>sockctrl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8</name></type> <name>protocol_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>plen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>sendbuf</name><index>[<expr><name>RPCAP_NETBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sendbufidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_header</name></name></type> <name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_openreply</name></name></type> <name>openreply</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>pcap_create_common</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>pcap_rpcap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>source_str</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>source_str</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"malloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>












<if_stmt><if>if <condition>(<expr><name>snaplen</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>snaplen</name> <operator>&gt;</operator> <name>MAXIMUM_SNAPLEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>snaplen</name> <operator>=</operator> <name>MAXIMUM_SNAPLEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name> <operator>=</operator> <name>source_str</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>=</operator> <name>snaplen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>timeout</name></name> <operator>=</operator> <name>read_timeout</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pr</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>priv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>rpcap_setup_session</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><name>auth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>active</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sockctrl</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>protocol_version</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>ctrlport</name></expr></argument>, <argument><expr><name>iface</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>pcap_close</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><call><name>sock_bufferize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>sendbufidx</name></expr></argument>, <argument><expr><name>RPCAP_NETBUF_SIZE</name></expr></argument>, <argument><expr><name>SOCKBUF_CHECKONLY</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error_nodiscard</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rpcap_createhdr</name><argument_list>(<argument><expr><operator>(</operator>struct <name>rpcap_header</name> <operator>*</operator><operator>)</operator> <name>sendbuf</name></expr></argument>, <argument><expr><name>protocol_version</name></expr></argument>,
<argument><expr><name>RPCAP_MSG_OPEN_REQ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>iface</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sock_bufferize</name><argument_list>(<argument><expr><name>iface</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>iface</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sendbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sendbufidx</name></expr></argument>,
<argument><expr><name>RPCAP_NETBUF_SIZE</name></expr></argument>, <argument><expr><name>SOCKBUF_BUFFERIZE</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error_nodiscard</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sock_send</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><name>sendbuf</name></expr></argument>, <argument><expr><name>sendbufidx</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error_nodiscard</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>rpcap_process_msg_header</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><name>protocol_version</name></expr></argument>,
<argument><expr><name>RPCAP_MSG_OPEN_REQ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error_nodiscard</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>plen</name> <operator>=</operator> <name><name>header</name><operator>.</operator><name>plen</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>rpcap_recv</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>openreply</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_openreply</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>plen</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>rpcap_discard</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error_nodiscard</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>openreply</name><operator>.</operator><name>linktype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>tzoff</name></name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>openreply</name><operator>.</operator><name>tzoff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_sockctrl</name></name> <operator>=</operator> <name>sockctrl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pr</name><operator>-&gt;</operator><name>protocol_version</name></name> <operator>=</operator> <name>protocol_version</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pr</name><operator>-&gt;</operator><name>rmt_clientside</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_op</name></name> <operator>=</operator> <name>pcap_read_rpcap</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>save_current_filter_op</name></name> <operator>=</operator> <name>pcap_save_current_filter_rpcap</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>setfilter_op</name></name> <operator>=</operator> <name>pcap_setfilter_rpcap</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>getnonblock_op</name></name> <operator>=</operator> <name>pcap_getnonblock_rpcap</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>setnonblock_op</name></name> <operator>=</operator> <name>pcap_setnonblock_rpcap</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>stats_op</name></name> <operator>=</operator> <name>pcap_stats_rpcap</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>stats_ex_op</name></name> <operator>=</operator> <name>pcap_stats_ex_rpcap</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>cleanup_op</name></name> <operator>=</operator> <name>pcap_cleanup_rpcap</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>activated</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>fp</name></expr>;</return>

<label><name>error</name>:</label>












<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>rpcap_discard</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>error_nodiscard</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sock_close</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pcap_close</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_TEXT_SOURCE_ADAPTER</name></cpp:macro> <cpp:value>"Network adapter"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_TEXT_SOURCE_ADAPTER_LEN</name></cpp:macro> <cpp:value>(sizeof PCAP_TEXT_SOURCE_ADAPTER - 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_TEXT_SOURCE_ON_REMOTE_HOST</name></cpp:macro> <cpp:value>"on remote node"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_TEXT_SOURCE_ON_REMOTE_HOST_LEN</name></cpp:macro> <cpp:value>(sizeof PCAP_TEXT_SOURCE_ON_REMOTE_HOST - 1)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>freeaddr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pcap_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>netmask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>broadaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>dstaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pcap_findalldevs_ex_remote</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_rmtauth</name></name> <modifier>*</modifier></type><name>auth</name></decl></parameter>, <parameter><decl><type><name>pcap_if_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>alldevs</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8</name></type> <name>protocol_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>sockctrl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>plen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_header</name></name></type> <name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nif</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>host</name><index>[<expr><name>PCAP_BUF_SIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>port</name><index>[<expr><name>PCAP_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmpstring</name><index>[<expr><name>PCAP_BUF_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcap_if_t</name> <modifier>*</modifier></type><name>lastdev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcap_if_t</name> <modifier>*</modifier></type><name>dev</name></decl>;</decl_stmt>


<expr_stmt><expr><operator>(</operator><operator>*</operator><name>alldevs</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lastdev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>rpcap_setup_session</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>auth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>active</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sockctrl</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>protocol_version</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>rpcap_createhdr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><name>protocol_version</name></expr></argument>, <argument><expr><name>RPCAP_MSG_FINDALLIF_REQ</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sock_send</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_header</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error_nodiscard</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>rpcap_process_msg_header</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><name>protocol_version</name></expr></argument>,
<argument><expr><name>RPCAP_MSG_FINDALLIF_REQ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error_nodiscard</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>plen</name> <operator>=</operator> <name><name>header</name><operator>.</operator><name>plen</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>nif</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nif</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_findalldevs_if</name></name></type> <name>findalldevs_if</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmpstring2</name><index>[<expr><name>PCAP_BUF_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prevaddr</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tmpstring2</name><index>[<expr><name>PCAP_BUF_SIZE</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>rpcap_recv</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>findalldevs_if</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_findalldevs_if</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>plen</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>findalldevs_if</name><operator>.</operator><name>namelen</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>findalldevs_if</name><operator>.</operator><name>namelen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>findalldevs_if</name><operator>.</operator><name>desclen</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>findalldevs_if</name><operator>.</operator><name>desclen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>findalldevs_if</name><operator>.</operator><name>naddr</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>findalldevs_if</name><operator>.</operator><name>naddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>dev</name> <operator>=</operator> <operator>(</operator><name>pcap_if_t</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pcap_if_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dev</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"malloc() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pcap_if_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>lastdev</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><operator>*</operator><name>alldevs</name> <operator>=</operator> <name>dev</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>



<expr_stmt><expr><name><name>lastdev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>dev</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>lastdev</name> <operator>=</operator> <name>dev</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>findalldevs_if</name><operator>.</operator><name>namelen</name></name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>findalldevs_if</name><operator>.</operator><name>namelen</name></name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmpstring</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Interface name too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>rpcap_recv</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><name>tmpstring</name></expr></argument>,
<argument><expr><name><name>findalldevs_if</name><operator>.</operator><name>namelen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>plen</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tmpstring</name><index>[<expr><name><name>findalldevs_if</name><operator>.</operator><name>namelen</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>pcap_createsrcstr</name><argument_list>(<argument><expr><name>tmpstring2</name></expr></argument>, <argument><expr><name>PCAP_SRC_IFREMOTE</name></expr></argument>,
<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>tmpstring</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dev</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>tmpstring2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dev</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"malloc() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>findalldevs_if</name><operator>.</operator><name>desclen</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>findalldevs_if</name><operator>.</operator><name>desclen</name></name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmpstring</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Interface description too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>rpcap_recv</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><name>tmpstring</name></expr></argument>,
<argument><expr><name><name>findalldevs_if</name><operator>.</operator><name>desclen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>plen</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tmpstring</name><index>[<expr><name><name>findalldevs_if</name><operator>.</operator><name>desclen</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pcap_asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dev</name><operator>-&gt;</operator><name>description</name></name></expr></argument>,
<argument><expr><literal type="string">"%s '%s' %s %s"</literal></expr></argument>, <argument><expr><name>PCAP_TEXT_SOURCE_ADAPTER</name></expr></argument>,
<argument><expr><name>tmpstring</name></expr></argument>, <argument><expr><name>PCAP_TEXT_SOURCE_ON_REMOTE_HOST</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"malloc() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dev</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>findalldevs_if</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prevaddr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>findalldevs_if</name><operator>.</operator><name>naddr</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_findalldevs_ifaddr</name></name></type> <name>ifaddr</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>rpcap_recv</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ifaddr</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_findalldevs_ifaddr</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>&amp;</operator><name>plen</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>




<expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>(</operator>struct <name>pcap_addr</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>pcap_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"malloc() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>netmask</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>broadaddr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>dstaddr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rpcap_deseraddr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ifaddr</name><operator>.</operator><name>addr</name></name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr_storage</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>freeaddr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rpcap_deseraddr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ifaddr</name><operator>.</operator><name>netmask</name></name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr_storage</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>netmask</name></name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>freeaddr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rpcap_deseraddr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ifaddr</name><operator>.</operator><name>broadaddr</name></name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr_storage</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>broadaddr</name></name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>freeaddr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rpcap_deseraddr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ifaddr</name><operator>.</operator><name>dstaddr</name></name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr_storage</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>dstaddr</name></name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>freeaddr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>addr</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>addr</name><operator>-&gt;</operator><name>netmask</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>addr</name><operator>-&gt;</operator><name>broadaddr</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>addr</name><operator>-&gt;</operator><name>dstaddr</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>prevaddr</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>dev</name><operator>-&gt;</operator><name>addresses</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>prevaddr</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>prevaddr</name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><call><name>rpcap_discard</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error_nodiscard</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>active</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>sock_close</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>sock_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>













<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>rpcap_discard</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>error_nodiscard</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sock_close</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>sock_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>pcap_freealldevs</name><argument_list>(<argument><expr><operator>*</operator><name>alldevs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>








<function><type><name>SOCKET</name></type> <name>pcap_remoteact_accept</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostlist</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>connectinghost</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_rmtauth</name></name> <modifier>*</modifier></type><name>auth</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>addrinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>from</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>fromlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>sockctrl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8</name></type> <name>protocol_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>activehosts</name></name> <modifier>*</modifier></type><name>temp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>connectinghost</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>addrinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <name>AI_PASSIVE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>sock_init</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SOCKET</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>port</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>port</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>sock_initaddress</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>RPCAP_DEFAULT_NETPORT_ACTIVE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addrinfo</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>SOCKET</name><operator>)</operator><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>sock_initaddress</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addrinfo</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>SOCKET</name><operator>)</operator><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sockmain</name> <operator>=</operator> <call><name>sock_open</name><argument_list>(<argument><expr><name>addrinfo</name></expr></argument>, <argument><expr><name>SOCKOPEN_SERVER</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>INVALID_SOCKET</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>addrinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SOCKET</name><operator>)</operator><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>addrinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>fromlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>sockctrl</name> <operator>=</operator> <call><name>accept</name><argument_list>(<argument><expr><name>sockmain</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>from</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fromlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>sockmain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sockmain</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sockctrl</name> <operator>==</operator> <name>INVALID_SOCKET</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"accept()"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SOCKET</name><operator>)</operator><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>getnameinfo</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>from</name></expr></argument>, <argument><expr><name>fromlen</name></expr></argument>, <argument><expr><name>connectinghost</name></expr></argument>, <argument><expr><name>RPCAP_HOSTLIST_SIZE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NI_NUMERICHOST</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"getnameinfo()"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rpcap_senderror</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PCAP_ERR_REMOTEACCEPT</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sock_close</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SOCKET</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>sock_check_hostlist</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>hostlist</name></expr></argument>, <argument><expr><name>RPCAP_HOSTLIST_SEP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>from</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcap_senderror</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PCAP_ERR_REMOTEACCEPT</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sock_close</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SOCKET</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>rpcap_doauth</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>protocol_version</name></expr></argument>, <argument><expr><name>auth</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>rpcap_senderror</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PCAP_ERR_REMOTEACCEPT</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sock_close</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SOCKET</name><operator>)</operator><operator>-</operator><literal type="number">3</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>activeHosts</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>temp</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>sock_cmpaddr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>from</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>sockctrl</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>temp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>(</operator>struct <name>activehosts</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>activehosts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>prev</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>activeHosts</name> <operator>=</operator> <operator>(</operator>struct <name>activehosts</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>activehosts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>activeHosts</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>temp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"malloc() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rpcap_senderror</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><name>protocol_version</name></expr></argument>, <argument><expr><name>PCAP_ERR_REMOTEACCEPT</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sock_close</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SOCKET</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>from</name></expr></argument>, <argument><expr><name>fromlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name><operator>-&gt;</operator><name>sockctrl</name></name> <operator>=</operator> <name>sockctrl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name><operator>-&gt;</operator><name>protocol_version</name></name> <operator>=</operator> <name>protocol_version</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>sockctrl</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>pcap_remoteact_close</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>activehosts</name></name> <modifier>*</modifier></type><name>temp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>addrinfo</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ai_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>activeHosts</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><name>addrinfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>addrinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addrinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"getaddrinfo() %s"</literal></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>temp</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ai_next</name> <operator>=</operator> <name>addrinfo</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ai_next</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>sock_cmpaddr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr_storage</name> <operator>*</operator><operator>)</operator> <name><name>ai_next</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_header</name></name></type> <name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>rpcap_createhdr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><name><name>temp</name><operator>-&gt;</operator><name>protocol_version</name></name></expr></argument>,
<argument><expr><name>RPCAP_MSG_CLOSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><call><name>sock_send</name><argument_list>(<argument><expr><name><name>temp</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>header</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sock_close</name><argument_list>(<argument><expr><name><name>temp</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>sock_close</name><argument_list>(<argument><expr><name><name>temp</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>





<if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>temp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>activeHosts</name> <operator>=</operator> <name><name>temp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>addrinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>sock_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ai_next</name> <operator>=</operator> <name><name>ai_next</name><operator>-&gt;</operator><name>ai_next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>temp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>addrinfo</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>addrinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>sock_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"The host you want to close the active connection is not known"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>pcap_remoteact_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sockmain</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>sockmain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>sock_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>pcap_remoteact_list</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>hostlist</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>sep</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>activehosts</name></name> <modifier>*</modifier></type><name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>hoststr</name><index>[<expr><name>RPCAP_HOSTLIST_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>activeHosts</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>hostlist</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>temp</name></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>sock_getascii_addrport</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr_storage</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>temp</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name>hoststr</name></expr></argument>,
<argument><expr><name>RPCAP_HOSTLIST_SIZE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NI_NUMERICHOST</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>


<block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>len</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>hoststr</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr> ;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>len</name> <operator>&gt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>size</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"The string you provided is not able to keep "</literal>
<literal type="string">"the hostnames for all the active connections"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pcap_strlcat</name><argument_list>(<argument><expr><name>hostlist</name></expr></argument>, <argument><expr><name>hoststr</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hostlist</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>sep</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hostlist</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>temp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>rpcap_recv_msg_header</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rpcap_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nrecv</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nrecv</name> <operator>=</operator> <call><name>sock_recv</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>header</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_header</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>SOCK_RECEIVEALL_YES</name><operator>|</operator><name>SOCK_EOF_IS_ERROR</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nrecv</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>plen</name></name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>plen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>rpcap_check_msg_ver</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name>uint8</name></type> <name>expected_ver</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rpcap_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>-&gt;</operator><name>ver</name></name> <operator>!=</operator> <name>expected_ver</name></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>rpcap_discard</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>plen</name></name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>errbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Server sent us a message with version %u when we were expecting %u"</literal></expr></argument>,
<argument><expr><name><name>header</name><operator>-&gt;</operator><name>ver</name></name></expr></argument>, <argument><expr><name>expected_ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>rpcap_check_msg_type</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name>uint8</name></type> <name>request_type</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rpcap_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>uint16</name> <modifier>*</modifier></type><name>errcode</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>request_type_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg_type_string</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>RPCAP_MSG_ERROR</name></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><operator>*</operator><name>errcode</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rpcap_msg_err</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>plen</name></name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>errcode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <operator>(</operator><name>request_type</name> <operator>|</operator> <name>RPCAP_MSG_IS_REPLY</name><operator>)</operator></expr>)</condition>
<block>{<block_content>







<if_stmt><if>if <condition>(<expr><call><name>rpcap_discard</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>plen</name></name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>request_type_string</name> <operator>=</operator> <call><name>rpcap_msg_type_string</name><argument_list>(<argument><expr><name>request_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_type_string</name> <operator>=</operator> <call><name>rpcap_msg_type_string</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>request_type_string</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"rpcap_check_msg_type called for request message with type %u"</literal></expr></argument>,
<argument><expr><name>request_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>msg_type_string</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"%s message received in response to a %s message"</literal></expr></argument>,
<argument><expr><name>msg_type_string</name></expr></argument>, <argument><expr><name>request_type_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Message of unknown type %u message received in response to a %s request"</literal></expr></argument>,
<argument><expr><name><name>header</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>request_type_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>rpcap_process_msg_header</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name>uint8</name></type> <name>expected_ver</name></decl></parameter>, <parameter><decl><type><name>uint8</name></type> <name>request_type</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rpcap_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16</name></type> <name>errcode</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rpcap_recv_msg_header</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>rpcap_check_msg_ver</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>expected_ver</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>




<return>return <expr><call><name>rpcap_check_msg_type</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>request_type</name></expr></argument>, <argument><expr><name>header</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>errcode</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type> <name>rpcap_recv</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>toread</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>plen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nread</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>toread</name> <operator>&gt;</operator> <operator>*</operator><name>plen</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Message payload is too short"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>sock_recv</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>toread</name></expr></argument>,
<argument><expr><name>SOCK_RECEIVEALL_YES</name><operator>|</operator><name>SOCK_EOF_IS_ERROR</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nread</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>plen</name> <operator>-=</operator> <name>nread</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>rpcap_msg_err</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sockctrl</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>plen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>remote_errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><name>PCAP_ERRBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>plen</name> <operator>&gt;=</operator> <name>PCAP_ERRBUF_SIZE</name></expr>)</condition>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><call><name>sock_recv</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><name>remote_errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>SOCK_RECEIVEALL_YES</name><operator>|</operator><name>SOCK_EOF_IS_ERROR</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>remote_errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Read of error message from client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>remote_errbuf</name><index>[<expr><name>PCAP_ERRBUF_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>




<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>rpcap_discard</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><name>plen</name> <operator>-</operator> <operator>(</operator><name>PCAP_ERRBUF_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>remote_errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>plen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>remote_errbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>sock_recv</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><name>remote_errbuf</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>,
<argument><expr><name>SOCK_RECEIVEALL_YES</name><operator>|</operator><name>SOCK_EOF_IS_ERROR</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>remote_errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Read of error message from client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>remote_errbuf</name><index>[<expr><name>plen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>rpcap_discard</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>sock_discard</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>rpcap_read_packet_msg</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bytes_read</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>bp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>cc</name></name></expr>;</expr_stmt>





<while>while <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>cc</name> <operator>&lt;</operator> <name>size</name></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <call><name>sock_recv</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>cc</name></expr></argument>,
<argument><expr><name>SOCK_RECEIVEALL_NO</name><operator>|</operator><name>SOCK_EOF_IS_ERROR</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_read</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bp</name></name> <operator>=</operator> <name>bp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cc</name></name> <operator>=</operator> <name>cc</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_read</name> <operator>==</operator> <operator>-</operator><literal type="number">3</literal></expr>)</condition>
<block>{<block_content>





<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bp</name></name> <operator>=</operator> <name>bp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cc</name></name> <operator>=</operator> <name>cc</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">3</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_read</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>





<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"The server terminated the connection."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bp</name> <operator>+=</operator> <name>bytes_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>+=</operator> <name>bytes_read</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bp</name></name> <operator>=</operator> <name>bp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cc</name></name> <operator>=</operator> <name>cc</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
