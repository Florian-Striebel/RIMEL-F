<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/gencode.h">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap/funcattrs.h"</cpp:file></cpp:include>





































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_HOST</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_NET</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_PORT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_GATEWAY</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_PROTO</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_PROTOCHAIN</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_PORTRANGE</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_LINK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_IP</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_ARP</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_RARP</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_SCTP</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_TCP</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_UDP</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_ICMP</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_IGMP</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_IGRP</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_ATALK</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_DECNET</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_LAT</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_SCA</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_MOPRC</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_MOPDL</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_IPV6</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_ICMPV6</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_AH</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_ESP</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_PIM</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_VRRP</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_AARP</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_ISO</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_ESIS</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_ISIS</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_CLNP</name></cpp:macro> <cpp:value>27</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_STP</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_IPX</name></cpp:macro> <cpp:value>29</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_NETBEUI</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_ISIS_L1</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_ISIS_L2</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_ISIS_IIH</name></cpp:macro> <cpp:value>33</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_ISIS_SNP</name></cpp:macro> <cpp:value>34</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_ISIS_CSNP</name></cpp:macro> <cpp:value>35</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_ISIS_PSNP</name></cpp:macro> <cpp:value>36</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_ISIS_LSP</name></cpp:macro> <cpp:value>37</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_RADIO</name></cpp:macro> <cpp:value>38</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_CARP</name></cpp:macro> <cpp:value>39</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_SRC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_DST</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_OR</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_AND</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_ADDR1</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_ADDR2</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_ADDR3</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_ADDR4</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_RA</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_TA</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_DEFAULT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q_UNDEF</name></cpp:macro> <cpp:value>255</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_METAC</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_BCC</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_OAMF4SC</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_OAMF4EC</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_SC</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_ILMIC</name></cpp:macro> <cpp:value>27</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_OAM</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_OAMF4</name></cpp:macro> <cpp:value>29</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_LANE</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_LLC</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_SETUP</name></cpp:macro> <cpp:value>41</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_CALLPROCEED</name></cpp:macro> <cpp:value>42</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_CONNECT</name></cpp:macro> <cpp:value>43</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_CONNECTACK</name></cpp:macro> <cpp:value>44</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_RELEASE</name></cpp:macro> <cpp:value>45</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_RELEASE_DONE</name></cpp:macro> <cpp:value>46</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_VPI</name></cpp:macro> <cpp:value>51</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_VCI</name></cpp:macro> <cpp:value>52</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_PROTOTYPE</name></cpp:macro> <cpp:value>53</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_MSGTYPE</name></cpp:macro> <cpp:value>54</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_CALLREFTYPE</name></cpp:macro> <cpp:value>55</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_CONNECTMSG</name></cpp:macro> <cpp:value>70</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_METACONNECT</name></cpp:macro> <cpp:value>71</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_FISU</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_LSSU</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_MSU</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MH_FISU</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MH_LSSU</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MH_MSU</name></cpp:macro> <cpp:value>27</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_SIO</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_OPC</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_DPC</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_SLS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MH_SIO</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MH_OPC</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MH_DPC</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MH_SLS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>


<struct_decl>struct <name>slist</name>;</struct_decl>

<struct>struct <name>stmt</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>slist</name></name> <modifier>*</modifier></type><name>jt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>slist</name></name> <modifier>*</modifier></type><name>jf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bpf_int32</name></type> <name>k</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>slist</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>stmt</name></name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>slist</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>





<typedef>typedef <type><name>bpf_u_int32</name></type> <name>atomset</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMMASK</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(1 &lt;&lt; (n))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMELEM</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(d &amp; ATOMMASK(n))</cpp:value></cpp:define>




<typedef>typedef <type><name>bpf_u_int32</name> <modifier>*</modifier></type><name>uset</name>;</typedef>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_ATOMS</name></cpp:macro> <cpp:value>(BPF_MEMWORDS+2)</cpp:value></cpp:define>

<struct>struct <name>edge</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uset</name></type> <name>edom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>succ</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>pred</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>edge</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>block</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>slist</name></name> <modifier>*</modifier></type><name>stmts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stmt</name></name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mark</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>longjt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>longjf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sense</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>edge</name></name></type> <name>et</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>edge</name></name></type> <name>ef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>link</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uset</name></type> <name>dom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uset</name></type> <name>closure</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>edge</name></name> <modifier>*</modifier></type><name>in_edges</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomset</name></type> <name>def</name></decl>, <decl><type ref="prev"/><name>kill</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomset</name></type> <name>in_use</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomset</name></type> <name>out_use</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>oval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>val</name><index>[<expr><name>N_ATOMS</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VAL_UNKNOWN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<struct>struct <name>arth</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>slist</name></name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>regno</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>qual</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>proto</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>pad</name></decl>;</decl_stmt>
}</block>;</struct>

<struct_decl>struct <name>_compiler_state</name>;</struct_decl>

<typedef>typedef <type><name><name>struct</name> <name>_compiler_state</name></name></type> <name>compiler_state_t</name>;</typedef>

<function_decl><type><name><name>struct</name> <name>arth</name></name> <modifier>*</modifier></type><name>gen_loadi</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>arth</name></name> <modifier>*</modifier></type><name>gen_load</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>arth</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>arth</name></name> <modifier>*</modifier></type><name>gen_loadlen</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>arth</name></name> <modifier>*</modifier></type><name>gen_neg</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>arth</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>arth</name></name> <modifier>*</modifier></type><name>gen_arth</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>arth</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>arth</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>gen_and</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>gen_or</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>gen_not</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>gen_scode</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>qual</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>gen_ecode</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>qual</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>gen_acode</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>qual</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>gen_mcode</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>qual</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>gen_mcode6</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>qual</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>gen_ncode</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bpf_u_int32</name></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>qual</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>gen_proto_abbrev</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>gen_relation</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>arth</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>arth</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>gen_less</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>gen_greater</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>gen_byteop</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>gen_broadcast</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>gen_multicast</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>gen_inbound</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>gen_llc</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>gen_llc_i</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>gen_llc_s</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>gen_llc_u</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>gen_llc_s_subtype</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bpf_u_int32</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>gen_llc_u_subtype</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bpf_u_int32</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>gen_vlan</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bpf_u_int32</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>gen_mpls</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bpf_u_int32</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>gen_pppoed</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>gen_pppoes</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bpf_u_int32</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>gen_geneve</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bpf_u_int32</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>gen_atmfield_code</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>bpf_int32</name></type></decl></parameter>,
<parameter><decl><type><name>bpf_u_int32</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>gen_atmtype_abbrev</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>gen_atmmulti_abbrev</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>gen_mtp2type_abbrev</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>gen_mtp3field_code</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>bpf_u_int32</name></type></decl></parameter>,
<parameter><decl><type><name>bpf_u_int32</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>gen_pf_ifname</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>gen_pf_rnr</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>gen_pf_srnr</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>gen_pf_ruleset</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>gen_pf_reason</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>gen_pf_action</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>gen_p80211_type</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>gen_p80211_fcdir</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isMarked</name><parameter_list>(<parameter><type><name>icp</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((p)-&gt;mark == (icp)-&gt;cur_mark)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unMarkAll</name><parameter_list>(<parameter><type><name>icp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(icp)-&gt;cur_mark += 1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Mark</name><parameter_list>(<parameter><type><name>icp</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((p)-&gt;mark = (icp)-&gt;cur_mark)</cpp:value></cpp:define>

<struct>struct <name>icode</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur_mark</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>int</name></type> <name>bpf_optimize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>icode</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bpf_set_error</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
PCAP_PRINTFLIKE<parameter_list>(</parameter_list>2<operator>,</operator> 3</function_decl>)<empty_stmt>;</empty_stmt>

<function_decl><type><name>int</name></type> <name>finish_parse</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>sdup</name><parameter_list>(<parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>bpf_insn</name></name> <modifier>*</modifier></type><name>icode_to_fcode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>icode</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>u_int</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sappend</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>slist</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>slist</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> <name>pcap_parse</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>compiler_state_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JT</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((b)-&gt;et.succ)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JF</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((b)-&gt;ef.succ)</cpp:value></cpp:define>
</unit>
