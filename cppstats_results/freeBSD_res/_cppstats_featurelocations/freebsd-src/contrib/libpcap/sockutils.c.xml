<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/sockutils.c">































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ftmacros.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIMITS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_MAX</name></cpp:macro> <cpp:value>2147483647</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap-int.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sockutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"portability.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINSOCK_MAJOR_VERSION</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINSOCK_MINOR_VERSION</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>sockcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHUT_WR</name></cpp:macro> <cpp:value>SD_SEND</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCK_ERRBUF_SIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCKET_NO_NAME_AVAILABLE</name></cpp:macro> <cpp:value>"No name available"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCKET_NO_PORT_AVAILABLE</name></cpp:macro> <cpp:value>"No port available"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCKET_NAME_NULL_DAD</name></cpp:macro> <cpp:value>"Null address (possibly DAD Phase)"</cpp:value></cpp:define>















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_SSIZE_T_DEFINED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>int</name></type> <name>ssize_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>sock_ismcastaddr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>saddr</name></decl></parameter>)</parameter_list>;</function_decl>











<function><type><name>void</name></type> <name>sock_fmterror</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>caller</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errcode</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errbuflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_win32_err</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>, <argument><expr><name>errcode</name></expr></argument>,
<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>caller</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>, <argument><expr><name>errcode</name></expr></argument>,
<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>caller</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





















<function><type><name>void</name></type> <name>sock_geterror</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>caller</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errbuflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>sock_fmterror</name><argument_list>(<argument><expr><name>caller</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>sock_fmterror</name><argument_list>(<argument><expr><name>caller</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>sock_init</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errbuflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sockcount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>WSADATA</name></type> <name>wsaData</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>WSAStartup</name><argument_list>(<argument><expr><call><name>MAKEWORD</name><argument_list>(<argument><expr><name>WINSOCK_MAJOR_VERSION</name></expr></argument>,
<argument><expr><name>WINSOCK_MINOR_VERSION</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>wsaData</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errbuf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>, <argument><expr><literal type="string">"Failed to initialize Winsock\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>WSACleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sockcount</name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>int</name></type> <name>sock_init</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><name>errbuf</name></type> <name>_U_</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>errbuflen</name></type> <name>_U_</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>










<function><type><name>void</name></type> <name>sock_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>sockcount</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sockcount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>WSACleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>sock_ismcastaddr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>saddr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>saddr</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>PF_INET</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>saddr4</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator> <name>saddr</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IN_MULTICAST</name><argument_list>(<argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>saddr4</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>saddr6</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator> <name>saddr</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IN6_IS_ADDR_MULTICAST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>saddr6</name><operator>-&gt;</operator><name>sin6_addr</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
































<function><type><name>SOCKET</name></type> <name>sock_open</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>addrinfo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>server</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nconn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errbuflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>sock</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_NOSIGPIPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>IPV6_V6ONLY</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>IPV6_BINDV6ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>on</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>sock</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name><name>addrinfo</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><name><name>addrinfo</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr></argument>, <argument><expr><name><name>addrinfo</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sock</name> <operator>==</operator> <name>INVALID_SOCKET</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"socket()"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>INVALID_SOCKET</name></expr>;</return>
</block_content>}</block></if></if_stmt>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_NOSIGPIPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_NOSIGPIPE</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>on</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"setsockopt(SO_NOSIGPIPE)"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>INVALID_SOCKET</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name>server</name></expr>)</condition>
<block>{<block_content>






<decl_stmt><decl><type><name>int</name></type> <name>optval</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>setsockopt</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_REUSEADDR</name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>optval</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>optval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPV6_V6ONLY</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>IPV6_BINDV6ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>




























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>IPV6_V6ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPV6_V6ONLY</name></cpp:macro> <cpp:value>IPV6_BINDV6ONLY</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>addrinfo</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name>PF_INET6</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>IPPROTO_IPV6</name></expr></argument>, <argument><expr><name>IPV6_V6ONLY</name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>on</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errbuf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>, <argument><expr><literal type="string">"setsockopt(IPV6_V6ONLY)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>INVALID_SOCKET</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>addrinfo</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>addrinfo</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"bind()"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>INVALID_SOCKET</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>addrinfo</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>==</operator> <name>SOCK_STREAM</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>listen</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>nconn</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"listen()"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>INVALID_SOCKET</name></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>


<return>return <expr><name>sock</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>tempaddrinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errbufptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bufspaceleft</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tempaddrinfo</name> <operator>=</operator> <name>addrinfo</name></expr>;</expr_stmt>
<expr_stmt><expr><name>errbufptr</name> <operator>=</operator> <name>errbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bufspaceleft</name> <operator>=</operator> <name>errbuflen</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>errbufptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>






<while>while <condition>(<expr><name>tempaddrinfo</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>connect</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>tempaddrinfo</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>tempaddrinfo</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>msglen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>TmpBuffer</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>SocketErrorMessage</name><index>[<expr><name>SOCK_ERRBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>





<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"Connect to socket failed"</literal></expr></argument>,
<argument><expr><name>SocketErrorMessage</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SocketErrorMessage</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>sock_getascii_addrport</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr_storage</name> <operator>*</operator><operator>)</operator> <name><name>tempaddrinfo</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name>TmpBuffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TmpBuffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NI_NUMERICHOST</name></expr></argument>, <argument><expr><name>TmpBuffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TmpBuffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbufptr</name></expr></argument>, <argument><expr><name>bufspaceleft</name></expr></argument>,
<argument><expr><literal type="string">"Is the server properly installed on %s? %s"</literal></expr></argument>, <argument><expr><name>TmpBuffer</name></expr></argument>, <argument><expr><name>SocketErrorMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>msglen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>errbufptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>errbufptr</name><index>[<expr><name>msglen</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>errbufptr</name><index>[<expr><name>msglen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bufspaceleft</name> <operator>=</operator> <name>bufspaceleft</name> <operator>-</operator> <operator>(</operator><name>msglen</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>errbufptr</name> <operator>+=</operator> <operator>(</operator><name>msglen</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tempaddrinfo</name> <operator>=</operator> <name><name>tempaddrinfo</name><operator>-&gt;</operator><name>ai_next</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></while>





<if_stmt><if>if <condition>(<expr><name>tempaddrinfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>INVALID_SOCKET</name></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>sock</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



















<function><type><name>int</name></type> <name>sock_close</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errbuflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<if_stmt><if>if <condition>(<expr><call><name>shutdown</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>SHUT_WR</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"shutdown()"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_gai_errstring</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errbuflen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>portname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>hostport</name><index>[<expr><name>PCAP_ERRBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hostname</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>portname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>hostport</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"%s:%s"</literal></expr></argument>,
<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>portname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>hostname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>hostport</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>portname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>hostport</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">":%s"</literal></expr></argument>,
<argument><expr><name>portname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>hostport</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"&lt;no host or port!&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<switch>switch <condition>(<expr><name>err</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EAI_ADDRFAMILY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>EAI_ADDRFAMILY</name></expr>:</case>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>,
<argument><expr><literal type="string">"%sAddress family for %s not supported"</literal></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>hostport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>EAI_AGAIN</name></expr>:</case>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>,
<argument><expr><literal type="string">"%s%s could not be resolved at this time"</literal></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>hostport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>EAI_BADFLAGS</name></expr>:</case>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>,
<argument><expr><literal type="string">"%sThe ai_flags parameter for looking up %s had an invalid value"</literal></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>hostport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>EAI_FAIL</name></expr>:</case>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>,
<argument><expr><literal type="string">"%sA non-recoverable error occurred when attempting to resolve %s"</literal></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>hostport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>EAI_FAMILY</name></expr>:</case>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>,
<argument><expr><literal type="string">"%sThe address family for looking up %s was not recognized"</literal></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>hostport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>EAI_MEMORY</name></expr>:</case>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>,
<argument><expr><literal type="string">"%sOut of memory trying to allocate storage when looking up %s"</literal></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>hostport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EAI_NODATA</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>EAI_NODATA</name> <operator>!=</operator> <name>EAI_NONAME</name></expr></cpp:if>
<case>case <expr><name>EAI_NODATA</name></expr>:</case>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>,
<argument><expr><literal type="string">"%sNo address associated with %s"</literal></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>hostport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>EAI_NONAME</name></expr>:</case>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>,
<argument><expr><literal type="string">"%sThe host name %s couldn't be resolved"</literal></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>hostport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>EAI_SERVICE</name></expr>:</case>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>,
<argument><expr><literal type="string">"%sThe service value specified when looking up %s as not recognized for the socket type"</literal></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>hostport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>EAI_SOCKTYPE</name></expr>:</case>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>,
<argument><expr><literal type="string">"%sThe socket type specified when looking up %s as not recognized"</literal></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>hostport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EAI_SYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>EAI_SYSTEM</name></expr>:</case>



<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>,
<argument><expr><literal type="string">"%sAn error occurred when looking up %s: %s"</literal></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>hostport</name></expr></argument>, <argument><expr><call><name>pcap_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EAI_BADHINTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>EAI_BADHINTS</name></expr>:</case>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>,
<argument><expr><literal type="string">"%sInvalid value for hints when looking up %s"</literal></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>hostport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EAI_PROTOCOL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>EAI_PROTOCOL</name></expr>:</case>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>,
<argument><expr><literal type="string">"%sResolved protocol when looking up %s is unknown"</literal></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>hostport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EAI_OVERFLOW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>EAI_OVERFLOW</name></expr>:</case>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>,
<argument><expr><literal type="string">"%sArgument buffer overflow when looking up %s"</literal></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>hostport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>,
<argument><expr><literal type="string">"%sgetaddrinfo() error %d when looking up %s"</literal></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>hostport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>







































<function><type><name>int</name></type> <name>sock_initaddress</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>port</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>hints</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>addrinfo</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errbuflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>hints</name></expr></argument>, <argument><expr><name>addrinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errbuf</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>get_gai_errstring</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>retval</name></expr></argument>,
<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>













<if_stmt><if>if <condition>(<expr><operator>(</operator><name><operator>(</operator><operator>*</operator><name>addrinfo</name><operator>)</operator><operator>-&gt;</operator><name>ai_family</name></name> <operator>!=</operator> <name>PF_INET</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><operator>(</operator><operator>*</operator><name>addrinfo</name><operator>)</operator><operator>-&gt;</operator><name>ai_family</name></name> <operator>!=</operator> <name>PF_INET6</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errbuf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>, <argument><expr><literal type="string">"getaddrinfo(): socket type not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><operator>*</operator><name>addrinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>addrinfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name><operator>(</operator><operator>*</operator><name>addrinfo</name><operator>)</operator><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>==</operator> <name>SOCK_STREAM</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>sock_ismcastaddr</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>addrinfo</name><operator>)</operator><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errbuf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>, <argument><expr><literal type="string">"getaddrinfo(): multicast addresses are not valid when using TCP streams"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><operator>*</operator><name>addrinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>addrinfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




























<function><type><name>int</name></type> <name>sock_send</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errbuflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>remaining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>nsent</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errbuf</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>,
<argument><expr><literal type="string">"Can't send more than %u bytes with sock_send"</literal></expr></argument>,
<argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>remaining</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>size</name></expr>;</expr_stmt>

<do>do <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSG_NOSIGNAL</name></expr></argument>)</argument_list></call></expr></cpp:if>






<expr_stmt><expr><name>nsent</name> <operator>=</operator> <call><name>send</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>remaining</name></expr></argument>, <argument><expr><name>MSG_NOSIGNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>nsent</name> <operator>=</operator> <call><name>send</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>remaining</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>nsent</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>





<decl_stmt><decl><type><name>int</name></type> <name>errcode</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>errcode</name> <operator>=</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errcode</name> <operator>==</operator> <name>WSAECONNRESET</name> <operator>||</operator>
<name>errcode</name> <operator>==</operator> <name>WSAECONNABORTED</name></expr>)</condition>
<block>{<block_content>






<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sock_fmterror</name><argument_list>(<argument><expr><literal type="string">"send()"</literal></expr></argument>, <argument><expr><name>errcode</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>errcode</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errcode</name> <operator>==</operator> <name>ECONNRESET</name> <operator>||</operator> <name>errcode</name> <operator>==</operator> <name>EPIPE</name></expr>)</condition>
<block>{<block_content>





<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sock_fmterror</name><argument_list>(<argument><expr><literal type="string">"send()"</literal></expr></argument>, <argument><expr><name>errcode</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>remaining</name> <operator>-=</operator> <name>nsent</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buffer</name> <operator>+=</operator> <name>nsent</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>remaining</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
























































<function><type><name>int</name></type> <name>sock_bufferize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tempbuf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>totsize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>checkonly</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errbuflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>offset</name> <operator>+</operator> <name>size</name><operator>)</operator> <operator>&gt;</operator> <name>totsize</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errbuf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>, <argument><expr><literal type="string">"Not enough space in the temporary send buffer."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>checkonly</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tempbuf</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>offset</name><operator>)</operator></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>offset</name><operator>)</operator> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>















































<function><type><name>int</name></type> <name>sock_recv</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errbuflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bufp</name> <init>= <expr><name>buffer</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>remaining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>nread</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errbuf</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>,
<argument><expr><literal type="string">"Can't read more than %u bytes with sock_recv"</literal></expr></argument>,
<argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bufp</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name>remaining</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>size</name></expr>;</expr_stmt>





<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>recv</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>bufp</name></expr></argument>, <argument><expr><name>remaining</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nread</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"recv()"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nread</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SOCK_EOF_IS_ERROR</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>remaining</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>size</name><operator>)</operator></expr>)</condition>
<block>{<block_content>





<if_stmt><if>if <condition>(<expr><name>errbuf</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>,
<argument><expr><literal type="string">"The other host terminated the connection."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SOCK_RECEIVEALL_YES</name><operator>)</operator></expr>)</condition>
<block>{<block_content>



<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <name>nread</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bufp</name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>
<expr_stmt><expr><name>remaining</name> <operator>-=</operator> <name>nread</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>remaining</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <name>size</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>sock_recv_dgram</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errbuflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>nread</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>msghdr</name></name></type> <name>message</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name>iov</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errbuf</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>,
<argument><expr><literal type="string">"Can't read more than %u bytes with sock_recv_dgram"</literal></expr></argument>,
<argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>recv</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nread</name> <operator>==</operator> <name>SOCKET_ERROR</name></expr>)</condition>
<block>{<block_content>













<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"recv()"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>











<expr_stmt><expr><name><name>message</name><operator>.</operator><name>msg_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>message</name><operator>.</operator><name>msg_namelen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_base</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_len</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>message</name><operator>.</operator><name>msg_iov</name></name> <operator>=</operator> <operator>&amp;</operator><name>iov</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>message</name><operator>.</operator><name>msg_iovlen</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_MSGHDR_MSG_CONTROL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>message</name><operator>.</operator><name>msg_control</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>message</name><operator>.</operator><name>msg_controllen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_MSGHDR_MSG_FLAGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>message</name><operator>.</operator><name>msg_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>recvmsg</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>message</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nread</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"recv()"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_MSGHDR_MSG_FLAGS</name></expr></argument>)</argument_list></call></expr></cpp:if>





<if_stmt><if>if <condition>(<expr><name><name>message</name><operator>.</operator><name>msg_flags</name></name> <operator>&amp;</operator> <name>MSG_TRUNC</name></expr>)</condition>
<block>{<block_content>






<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>, <argument><expr><literal type="string">"recv(): Message too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>nread</name></expr>;</return>
</block_content>}</block></function>


























<function><type><name>int</name></type> <name>sock_discard</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errbuflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMP_BUF_SIZE</name></cpp:macro> <cpp:value>32768</cpp:value></cpp:define>

<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>TEMP_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>









<while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>TEMP_BUF_SIZE</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>sock_recv</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>TEMP_BUF_SIZE</name></expr></argument>, <argument><expr><name>SOCK_RECEIVEALL_YES</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>TEMP_BUF_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></while>





<if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>sock_recv</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>SOCK_RECEIVEALL_YES</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





























<function><type><name>int</name></type> <name>sock_check_hostlist</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>hostlist</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errbuflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hostlist</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hostlist</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>addrinfo</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ai_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>temphostlist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lasts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>getaddrinfo_failed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>





<expr_stmt><expr><name>temphostlist</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>hostlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>temphostlist</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"sock_check_hostlist(), malloc() failed"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>pcap_strtok_r</name><argument_list>(<argument><expr><name>temphostlist</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lasts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>addrinfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>token</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<expr_stmt><expr><name>addrinfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>addrinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addrinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errbuf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>get_gai_errstring</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>,
<argument><expr><literal type="string">"Allowed host list error: "</literal></expr></argument>,
<argument><expr><name>retval</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<expr_stmt><expr><name>getaddrinfo_failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>pcap_strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lasts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>ai_next</name> <operator>=</operator> <name>addrinfo</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ai_next</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>sock_cmpaddr</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr_storage</name> <operator>*</operator><operator>)</operator> <name><name>ai_next</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>temphostlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>addrinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>ai_next</name> <operator>=</operator> <name><name>ai_next</name><operator>-&gt;</operator><name>ai_next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>addrinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addrinfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>pcap_strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lasts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>addrinfo</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>addrinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addrinfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>temphostlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>getaddrinfo_failed</name></expr>)</condition> <block>{<block_content>






<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>errbuf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>, <argument><expr><literal type="string">"The host is not in the allowed host list. Connection refused."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>



















<function><type><name>int</name></type> <name>sock_cmpaddr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>second</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>first</name><operator>-&gt;</operator><name>ss_family</name></name> <operator>==</operator> <name><name>second</name><operator>-&gt;</operator><name>ss_family</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>first</name><operator>-&gt;</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator> <name>first</name><operator>)</operator><operator>-&gt;</operator><name>sin_addr</name><operator>)</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator> <name>second</name><operator>)</operator><operator>-&gt;</operator><name>sin_addr</name><operator>)</operator></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator> <name>first</name><operator>)</operator><operator>-&gt;</operator><name>sin6_addr</name><operator>)</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator> <name>second</name><operator>)</operator><operator>-&gt;</operator><name>sin6_addr</name><operator>)</operator></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>










































<function><type><name>int</name></type> <name>sock_getmyinfo</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>address</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>addrlen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>portlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errbuflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>mysockaddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>sockaddrlen</name></decl>;</decl_stmt>


<expr_stmt><expr><name>sockaddrlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getsockname</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>mysockaddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sockaddrlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"getsockname()"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<return>return <expr><call><name>sock_getascii_addrport</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mysockaddr</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>portlen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

















































<function><type><name>int</name></type> <name>sock_getascii_addrport</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>sockaddr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>address</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>addrlen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>portlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errbuflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>sockaddrlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sockaddr</name><operator>-&gt;</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sockaddrlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sockaddrlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>sockaddrlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>NI_NUMERICHOST</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sockaddr</name><operator>-&gt;</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET6</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator> <name>sockaddr</name><operator>)</operator><operator>-&gt;</operator><name>sin6_addr</name></expr></argument>, <argument><expr><literal type="string">"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>address</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>SOCKET_NAME_NULL_DAD</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getnameinfo</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <name>sockaddr</name></expr></argument>, <argument><expr><name>sockaddrlen</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>portlen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>errbuf</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"getnameinfo()"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>errbuf</name><index>[<expr><name>errbuflen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>address</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>SOCKET_NO_NAME_AVAILABLE</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>address</name><index>[<expr><name>addrlen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>port</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><name>SOCKET_NO_PORT_AVAILABLE</name></expr></argument>, <argument><expr><name>portlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>port</name><index>[<expr><name>portlen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>





































<function><type><name>int</name></type> <name>sock_present2network</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>sockaddr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>addr_family</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errbuflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>addrinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>addr_family</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>retval</name> <operator>=</operator> <call><name>sock_initaddress</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><literal type="string">"22222"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addrinfo</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>addrinfo</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name>PF_INET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>sockaddr</name></expr></argument>, <argument><expr><name><name>addrinfo</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>sockaddr</name></expr></argument>, <argument><expr><name><name>addrinfo</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>addrinfo</name><operator>-&gt;</operator><name>ai_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>addrinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>errbuf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>, <argument><expr><literal type="string">"More than one socket requested; using the first one returned"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>addrinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
