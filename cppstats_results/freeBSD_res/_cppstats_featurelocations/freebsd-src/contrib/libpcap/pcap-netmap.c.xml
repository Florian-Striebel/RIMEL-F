<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/pcap-netmap.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETMAP_WITH_LIBS</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/netmap_user.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap-int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap-netmap.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IFF_PPROMISC</name></cpp:macro> <cpp:value>IFF_PROMISC</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>pcap_netmap</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>nm_desc</name></name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcap_handler</name></type> <name>cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>cb_arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>must_clear_promisc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>rx_pkts</name></decl>;</decl_stmt>
}</block>;</struct>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_netmap_stats</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_stat</name></name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_netmap</name></name> <modifier>*</modifier></type><name>pn</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_recv</name></name> <operator>=</operator> <operator>(</operator><name>u_int</name><operator>)</operator><name><name>pn</name><operator>-&gt;</operator><name>rx_pkts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_drop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_ifdrop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>pcap_netmap_filter</name><parameter_list>(<parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_pkthdr</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>pcap_t</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_netmap</name></name> <modifier>*</modifier></type><name>pn</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bpf_insn</name></name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>++</operator><name><name>pn</name><operator>-&gt;</operator><name>rx_pkts</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pc</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>bpf_filter</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>caplen</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>pn</name><operator>-&gt;</operator><name>cb</name></name><argument_list>(<argument><expr><name><name>pn</name><operator>-&gt;</operator><name>cb_arg</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_netmap_dispatch</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>, <parameter><decl><type><name>pcap_handler</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_netmap</name></name> <modifier>*</modifier></type><name>pn</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>nm_desc</name></name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name><name>pn</name><operator>-&gt;</operator><name>d</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name>pfd</name> <init>= <expr><block>{ <expr><operator>.</operator><name>fd</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr>, <expr><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name></expr>, <expr><operator>.</operator><name>revents</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pn</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pn</name><operator>-&gt;</operator><name>cb_arg</name></name> <operator>=</operator> <name>user</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>break_loop</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>break_loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR_BREAK</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>nm_dispatch</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>d</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>pcap_netmap_filter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>poll</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_netmap_inject</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_netmap</name></name> <modifier>*</modifier></type><name>pn</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>nm_desc</name></name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name><name>pn</name><operator>-&gt;</operator><name>d</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>nm_inject</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_netmap_ioctl</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>u_long</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>if_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_netmap</name></name> <modifier>*</modifier></type><name>pn</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>nm_desc</name></name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name><name>pn</name><operator>-&gt;</operator><name>d</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ifreq</name></name></type> <name>ifr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>, <decl><type ref="prev"/><name>fd</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>fd</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>linux</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error: cannot get device control socket.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ifr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>nr_name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>what</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SIOCSIFFLAGS</name></expr>:</case>











<expr_stmt><expr><name><name>ifr</name><operator>.</operator><name>ifr_flags</name></name> <operator>=</operator> <operator>*</operator><name>if_flags</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>






<expr_stmt><expr><name><name>ifr</name><operator>.</operator><name>ifr_flagshigh</name></name> <operator>=</operator> <operator>*</operator><name>if_flags</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>error</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>what</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SIOCGIFFLAGS</name></expr>:</case>










<expr_stmt><expr><operator>*</operator><name>if_flags</name> <operator>=</operator> <name><name>ifr</name><operator>.</operator><name>ifr_flags</name></name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>







<expr_stmt><expr><operator>*</operator><name>if_flags</name> <operator>|=</operator> <operator>(</operator><name><name>ifr</name><operator>.</operator><name>ifr_flagshigh</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>linux</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><ternary><condition><expr><name>error</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>pcap_netmap_close</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_netmap</name></name> <modifier>*</modifier></type><name>pn</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>nm_desc</name></name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name><name>pn</name><operator>-&gt;</operator><name>d</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>if_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pn</name><operator>-&gt;</operator><name>must_clear_promisc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_netmap_ioctl</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>SIOCGIFFLAGS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>if_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>if_flags</name> <operator>&amp;</operator> <name>IFF_PPROMISC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>if_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>IFF_PPROMISC</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_netmap_ioctl</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>SIOCSIFFLAGS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>if_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>nm_close</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_cleanup_live_common</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_netmap_activate</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_netmap</name></name> <modifier>*</modifier></type><name>pn</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>nm_desc</name></name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>if_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>nm_open</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"netmap open: cannot access %s"</literal></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_cleanup_live_common</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>PCAP_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
fprintf(stderr, "%s device %s priv %p fd %d ports %d..%d\n",
__FUNCTION__, p-&gt;opt.device, d, d-&gt;fd,
d-&gt;first_rx_ring, d-&gt;last_rx_ring);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>pn</name><operator>-&gt;</operator><name>d</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>









<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>&gt;</operator> <name>MAXIMUM_SNAPLEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>=</operator> <name>MAXIMUM_SNAPLEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>promisc</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>nr_ringid</name></name> <operator>&amp;</operator> <name>NETMAP_SW_RING</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_netmap_ioctl</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>SIOCGIFFLAGS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>if_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>if_flags</name> <operator>&amp;</operator> <name>IFF_PPROMISC</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pn</name><operator>-&gt;</operator><name>must_clear_promisc</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>if_flags</name> <operator>|=</operator> <name>IFF_PPROMISC</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_netmap_ioctl</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>SIOCSIFFLAGS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>if_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_EN10MB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>selectable_fd</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>read_op</name></name> <operator>=</operator> <name>pcap_netmap_dispatch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>inject_op</name></name> <operator>=</operator> <name>pcap_netmap_inject</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>setfilter_op</name></name> <operator>=</operator> <name>install_bpf_program</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>setdirection_op</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>set_datalink_op</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>getnonblock_op</name></name> <operator>=</operator> <name>pcap_getnonblock_fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>setnonblock_op</name></name> <operator>=</operator> <name>pcap_setnonblock_fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>stats_op</name></name> <operator>=</operator> <name>pcap_netmap_stats</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cleanup_op</name></name> <operator>=</operator> <name>pcap_netmap_close</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>pcap_t</name> <modifier>*</modifier></type>
<name>pcap_netmap_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ebuf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>is_ours</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>is_ours</name> <operator>=</operator> <operator>(</operator><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><literal type="string">"netmap:"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><literal type="string">"vale"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>*</operator><name>is_ours</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>pcap_create_common</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>pcap_netmap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>activate_op</name></name> <operator>=</operator> <name>pcap_netmap_activate</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>pcap_netmap_findalldevs</name><parameter_list>(<parameter><decl><type><name>pcap_if_list_t</name> <modifier>*</modifier><name>devlistp</name></type> <name>_U_</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><name>err_str</name></type> <name>_U_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
