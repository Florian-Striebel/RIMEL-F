<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/com_err/com_err.c">

































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"com_err.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name><name>struct</name> <name>et_list</name></name> <modifier>*</modifier></type><name>_et_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<function><type><name>KRB5_LIB_FUNCTION</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <name>KRB5_LIB_CALL</name></type>
<name>error_message</name> <parameter_list>(<parameter><decl><type><name>long</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>msg</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>com_right</name><argument_list>(<argument><expr><name>_et_list</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Unknown error %ld"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Unknown error %ld"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>msg</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>KRB5_LIB_FUNCTION</name> <name>int</name> <name>KRB5_LIB_CALL</name></type>
<name>init_error_table</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>msgs</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>initialize_error_table_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_et_list</name></expr></argument>, <argument><expr><name>msgs</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name> <name>KRB5_CALLCONV</name></type>
<name>default_proc</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>whoami</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>
__attribute__<parameter_list>(<parameter/></parameter_list>(__format__<parameter_list>(<parameter><decl><type><name>__printf__</name></type></decl></parameter>, <parameter/></parameter_list>3<operator>,</operator> 0</function_decl>)))<empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <name>void</name> <name>KRB5_CALLCONV</name></type>
<name>default_proc</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>whoami</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>whoami</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: "</literal></expr></argument>, <argument><expr><name>whoami</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><call><name>error_message</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fmt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>errf</name></type> <name>com_err_hook</name> <init>= <expr><name>default_proc</name></expr></init></decl>;</decl_stmt>

<function><type><name>KRB5_LIB_FUNCTION</name> <name>void</name> <name>KRB5_LIB_CALL</name></type>
<name>com_err_va</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>whoami</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>code</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,
<parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name>com_err_hook</name>) <argument_list>(<argument><expr><name>whoami</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>KRB5_LIB_FUNCTION</name> <name>void</name> <name>KRB5_LIB_CALL</name></type>
<name>com_err</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>whoami</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>code</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,
<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>com_err_va</name> <argument_list>(<argument><expr><name>whoami</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>KRB5_LIB_FUNCTION</name> <name>errf</name> <name>KRB5_LIB_CALL</name></type>
<name>set_com_err_hook</name> <parameter_list>(<parameter><decl><type><name>errf</name></type> <name>new</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>errf</name></type> <name>old</name> <init>= <expr><name>com_err_hook</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>new</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>com_err_hook</name> <operator>=</operator> <name>new</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>com_err_hook</name> <operator>=</operator> <name>default_proc</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>old</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>KRB5_LIB_FUNCTION</name> <name>errf</name> <name>KRB5_LIB_CALL</name></type>
<name>reset_com_err_hook</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>set_com_err_hook</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERRCODE_RANGE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITS_PER_CHAR</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>char_set</name><index>[]</index></name> <init>=
<expr><literal type="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>KRB5_LIB_FUNCTION</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <name>KRB5_LIB_CALL</name></type>
<name>error_table_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>&gt;&gt;=</operator> <name>ERRCODE_RANGE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>&amp;=</operator> <literal type="number">077777777</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <name>BITS_PER_CHAR</name> <operator>*</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>BITS_PER_CHAR</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>char_set</name><index>[<expr><name>ch</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><name>buf</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>KRB5_LIB_FUNCTION</name> <name>void</name> <name>KRB5_LIB_CALL</name></type>
<name>add_to_error_table</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>et_list</name></name> <modifier>*</modifier></type><name>new_table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>et_list</name></name> <modifier>*</modifier></type><name>et</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>et</name> <operator>=</operator> <name>_et_list</name></expr>;</init> <condition><expr><name>et</name></expr>;</condition> <incr><expr><name>et</name> <operator>=</operator> <name><name>et</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>et</name><operator>-&gt;</operator><name>table</name><operator>-&gt;</operator><name>base</name></name> <operator>==</operator> <name><name>new_table</name><operator>-&gt;</operator><name>table</name><operator>-&gt;</operator><name>base</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>new_table</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>_et_list</name></expr>;</expr_stmt>
<expr_stmt><expr><name>_et_list</name> <operator>=</operator> <name>new_table</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
