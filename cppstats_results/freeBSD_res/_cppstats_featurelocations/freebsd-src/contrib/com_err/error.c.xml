<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/com_err/error.c">

































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;com_right.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBINTL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libintl.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dgettext</name><parameter_list>(<parameter><type><name>d</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(s)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>KRB5_LIB_FUNCTION</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <name>KRB5_LIB_CALL</name></type>
<name>com_right</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>et_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>et_list</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>list</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&gt;=</operator> <name><name>p</name><operator>-&gt;</operator><name>table</name><operator>-&gt;</operator><name>base</name></name> <operator>&amp;&amp;</operator> <name>code</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>table</name><operator>-&gt;</operator><name>base</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>table</name><operator>-&gt;</operator><name>n_msgs</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>table</name><operator>-&gt;</operator><name>msgs</name><index>[<expr><name>code</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>table</name><operator>-&gt;</operator><name>base</name></name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>KRB5_LIB_FUNCTION</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <name>KRB5_LIB_CALL</name></type>
<name>com_right_r</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>et_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>et_list</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>list</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&gt;=</operator> <name><name>p</name><operator>-&gt;</operator><name>table</name><operator>-&gt;</operator><name>base</name></name> <operator>&amp;&amp;</operator> <name>code</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>table</name><operator>-&gt;</operator><name>base</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>table</name><operator>-&gt;</operator><name>n_msgs</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>table</name><operator>-&gt;</operator><name>msgs</name><index>[<expr><name>code</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>table</name><operator>-&gt;</operator><name>base</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBINTL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>domain</name><index>[<expr><literal type="number">12</literal> <operator>+</operator> <literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>domain</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"heim_com_err%d"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>table</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>dgettext</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>foobar</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>et_list</name></name></type> <name>etl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>error_table</name></name></type> <name>et</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>KRB5_LIB_FUNCTION</name> <name>void</name> <name>KRB5_LIB_CALL</name></type>
<name>initialize_error_table_r</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>et_list</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>messages</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>num_errors</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>et_list</name></name> <modifier>*</modifier></type><name>et</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>foobar</name></name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>end</name> <operator>=</operator> <name>list</name></expr><operator>,</operator> <expr><name>et</name> <operator>=</operator> <operator>*</operator><name>list</name></expr>;</init> <condition><expr><name>et</name></expr>;</condition> <incr><expr><name>end</name> <operator>=</operator> <operator>&amp;</operator><name><name>et</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><name>et</name> <operator>=</operator> <name><name>et</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>et</name><operator>-&gt;</operator><name>table</name><operator>-&gt;</operator><name>msgs</name></name> <operator>==</operator> <name>messages</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>f</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>et</name> <operator>=</operator> <operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>etl</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>et</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>et</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>et</name><operator>-&gt;</operator><name>table</name><operator>-&gt;</operator><name>msgs</name></name> <operator>=</operator> <name>messages</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>et</name><operator>-&gt;</operator><name>table</name><operator>-&gt;</operator><name>n_msgs</name></name> <operator>=</operator> <name>num_errors</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>et</name><operator>-&gt;</operator><name>table</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>et</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <name>et</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>KRB5_LIB_FUNCTION</name> <name>void</name> <name>KRB5_LIB_CALL</name></type>
<name>free_error_table</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>et_list</name></name> <modifier>*</modifier></type><name>et</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while<condition>(<expr><name>et</name></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>et_list</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>et</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>et</name> <operator>=</operator> <name><name>et</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
</unit>
