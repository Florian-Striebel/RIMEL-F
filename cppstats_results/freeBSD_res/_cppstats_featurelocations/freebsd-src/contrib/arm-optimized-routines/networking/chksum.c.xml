<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/arm-optimized-routines/networking/chksum.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"networking.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chksum_common.h"</cpp:file></cpp:include>

<function><type><name>always_inline</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>slurp_head32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pptr</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>nbytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>*</operator><name>nbytes</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>off</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator> <operator>*</operator><name>pptr</name> <operator>%</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>off</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr32</name> <init>= <expr><call><name>align_ptr</name><argument_list>(<argument><expr><operator>*</operator><name>pptr</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>mask</name> <init>= <expr><operator>~</operator><literal type="number">0U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>CHAR_BIT</name> <operator>*</operator> <name>off</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>load32</name><argument_list>(<argument><expr><name>ptr32</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>mask</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pptr</name> <operator>=</operator> <name>ptr32</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>nbytes</name> <operator>-=</operator> <literal type="number">4</literal> <operator>-</operator> <name>off</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>sum</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>unsigned</name> <name>short</name></type>
<name>__chksum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nbytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>swap</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&gt;</operator> <literal type="number">300</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>swap</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator> <name>ptr</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>slurp_head32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cptr</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>nquads</name> <init>= <expr><name>nbytes</name> <operator>/</operator> <literal type="number">16</literal></expr></init></decl>;</init> <condition><expr><name>nquads</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>nquads</name><operator>--</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>h0</name> <init>= <expr><call><name>load32</name><argument_list>(<argument><expr><name>cptr</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>h1</name> <init>= <expr><call><name>load32</name><argument_list>(<argument><expr><name>cptr</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>h2</name> <init>= <expr><call><name>load32</name><argument_list>(<argument><expr><name>cptr</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>h3</name> <init>= <expr><call><name>load32</name><argument_list>(<argument><expr><name>cptr</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>h0</name> <operator>+</operator> <name>h1</name> <operator>+</operator> <name>h2</name> <operator>+</operator> <name>h3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cptr</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>nbytes</name> <operator>%=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>nbytes</name> <operator>&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><name>nbytes</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>load32</name><argument_list>(<argument><expr><name>cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cptr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nbytes</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>nbytes</name> <operator>&lt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>load16</name><argument_list>(<argument><expr><name>cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>*</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>cptr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>fold_and_swap</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>swap</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
