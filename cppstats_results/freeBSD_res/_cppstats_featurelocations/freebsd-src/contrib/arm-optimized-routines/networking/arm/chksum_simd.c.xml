<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/arm-optimized-routines/networking/arm/chksum_simd.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"networking.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../chksum_common.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ARM_NEON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>target</name><name>(</name><cpp:literal>"+simd"</cpp:literal><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arm_neon.h&gt;</cpp:file></cpp:include>

<function><type><name>unsigned</name> <name>short</name></type>
<name>__chksum_arm_simd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nbytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>swap</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator> <name>ptr</name> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64x1_t</name></type> <name>vsum</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>nbytes</name> <operator>&lt;</operator> <literal type="number">40</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>sum</name> <init>= <expr><call><name>slurp_small</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>fold_and_swap</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>nbytes</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>off</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator> <name>ptr</name> <operator>&amp;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>off</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier><name>may_alias</name></type> <name>ptr64</name> <init>= <expr><call><name>align_ptr</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64x1_t</name></type> <name>vword64</name> <init>= <expr><call><name>vld1_u64</name><argument_list>(<argument><expr><name>ptr64</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64x1_t</name></type> <name>vmask</name> <init>= <expr><call><name>vdup_n_u64</name><argument_list>(<argument><expr><name>ALL_ONES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64x1_t</name></type> <name>vshiftl</name> <init>= <expr><call><name>vdup_n_s64</name><argument_list>(<argument><expr><name>CHAR_BIT</name> <operator>*</operator> <name>off</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>vmask</name> <operator>=</operator> <call><name>vshl_u64</name><argument_list>(<argument><expr><name>vmask</name></expr></argument>, <argument><expr><name>vshiftl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vword64</name> <operator>=</operator> <call><name>vand_u64</name><argument_list>(<argument><expr><name>vword64</name></expr></argument>, <argument><expr><name>vmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32x2_t</name></type> <name>vtmp</name> <init>= <expr><call><name>vreinterpret_u32_u64</name><argument_list>(<argument><expr><name>vword64</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>vsum</name> <operator>=</operator> <call><name>vpaddl_u32</name><argument_list>(<argument><expr><name>vtmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ptr64</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nbytes</name> <operator>-=</operator> <literal type="number">8</literal> <operator>-</operator> <name>off</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator> <name>ptr</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>uint64x2_t</name></type> <name>vsum0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64x2_t</name></type> <name>vsum1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64x2_t</name></type> <name>vsum2</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64x2_t</name></type> <name>vsum3</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier><name>may_alias</name></type> <name>ptr32</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbytes</name> <operator>/</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>vtmp0</name> <init>= <expr><call><name>vld1q_u32</name><argument_list>(<argument><expr><name>ptr32</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>vtmp1</name> <init>= <expr><call><name>vld1q_u32</name><argument_list>(<argument><expr><name>ptr32</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>vtmp2</name> <init>= <expr><call><name>vld1q_u32</name><argument_list>(<argument><expr><name>ptr32</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>vtmp3</name> <init>= <expr><call><name>vld1q_u32</name><argument_list>(<argument><expr><name>ptr32</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>vsum0</name> <operator>=</operator> <call><name>vpadalq_u32</name><argument_list>(<argument><expr><name>vsum0</name></expr></argument>, <argument><expr><name>vtmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vsum1</name> <operator>=</operator> <call><name>vpadalq_u32</name><argument_list>(<argument><expr><name>vsum1</name></expr></argument>, <argument><expr><name>vtmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vsum2</name> <operator>=</operator> <call><name>vpadalq_u32</name><argument_list>(<argument><expr><name>vsum2</name></expr></argument>, <argument><expr><name>vtmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vsum3</name> <operator>=</operator> <call><name>vpadalq_u32</name><argument_list>(<argument><expr><name>vsum3</name></expr></argument>, <argument><expr><name>vtmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr32</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>nbytes</name> <operator>%=</operator> <literal type="number">64</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>vsum0</name> <operator>=</operator> <call><name>vpadalq_u32</name><argument_list>(<argument><expr><name>vsum0</name></expr></argument>, <argument><expr><call><name>vreinterpretq_u32_u64</name><argument_list>(<argument><expr><name>vsum2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vsum1</name> <operator>=</operator> <call><name>vpadalq_u32</name><argument_list>(<argument><expr><name>vsum1</name></expr></argument>, <argument><expr><call><name>vreinterpretq_u32_u64</name><argument_list>(<argument><expr><name>vsum3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vsum0</name> <operator>=</operator> <call><name>vpadalq_u32</name><argument_list>(<argument><expr><name>vsum0</name></expr></argument>, <argument><expr><call><name>vreinterpretq_u32_u64</name><argument_list>(<argument><expr><name>vsum1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>nbytes</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32x4_t</name></type> <name>vtmp0</name> <init>= <expr><call><name>vld1q_u32</name><argument_list>(<argument><expr><name>ptr32</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>vsum0</name> <operator>=</operator> <call><name>vpadalq_u32</name><argument_list>(<argument><expr><name>vsum0</name></expr></argument>, <argument><expr><name>vtmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr32</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nbytes</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>nbytes</name> <operator>&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<block>{<block_content>

<expr_stmt><expr><name>vsum0</name> <operator>=</operator> <call><name>vpaddlq_u32</name><argument_list>(<argument><expr><call><name>vreinterpretq_u32_u64</name><argument_list>(<argument><expr><name>vsum0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vsum0</name> <operator>=</operator> <call><name>vpaddlq_u32</name><argument_list>(<argument><expr><call><name>vreinterpretq_u32_u64</name><argument_list>(<argument><expr><name>vsum0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><call><name>vgetq_lane_u64</name><argument_list>(<argument><expr><name>vsum0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><call><name>vgetq_lane_u64</name><argument_list>(<argument><expr><name>vsum0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32x2_t</name></type> <name>vtmp</name> <init>= <expr><call><name>vmovn_u64</name><argument_list>(<argument><expr><name>vsum0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>vsum</name> <operator>=</operator> <call><name>vpadal_u32</name><argument_list>(<argument><expr><name>vsum</name></expr></argument>, <argument><expr><name>vtmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32x2_t</name></type> <name>vtmp</name> <init>= <expr><call><name>vld1_u32</name><argument_list>(<argument><expr><name>ptr32</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>vsum</name> <operator>=</operator> <call><name>vpadal_u32</name><argument_list>(<argument><expr><name>vsum</name></expr></argument>, <argument><expr><name>vtmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr32</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nbytes</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>nbytes</name> <operator>&lt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>nbytes</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator> <name>ptr32</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>nbytes</name> <operator>&lt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint64x1_t</name></type> <name>vword64</name> <init>= <expr><call><name>vld1_u64</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint64_t</name> <operator>*</operator><operator>)</operator> <name>ptr32</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64x1_t</name></type> <name>vmask</name> <init>= <expr><call><name>vdup_n_u64</name><argument_list>(<argument><expr><name>ALL_ONES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64x1_t</name></type> <name>vshiftr</name> <init>= <expr><call><name>vdup_n_s64</name><argument_list>(<argument><expr><operator>-</operator><name>CHAR_BIT</name> <operator>*</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>nbytes</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>vmask</name> <operator>=</operator> <call><name>vshl_u64</name><argument_list>(<argument><expr><name>vmask</name></expr></argument>, <argument><expr><name>vshiftr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vword64</name> <operator>=</operator> <call><name>vand_u64</name><argument_list>(<argument><expr><name>vword64</name></expr></argument>, <argument><expr><name>vmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vword64</name> <operator>=</operator> <call><name>vpaddl_u32</name><argument_list>(<argument><expr><call><name>vreinterpret_u32_u64</name><argument_list>(<argument><expr><name>vword64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vsum</name> <operator>=</operator> <call><name>vpadal_u32</name><argument_list>(<argument><expr><name>vsum</name></expr></argument>, <argument><expr><call><name>vreinterpret_u32_u64</name><argument_list>(<argument><expr><name>vword64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>vsum</name> <operator>=</operator> <call><name>vpaddl_u32</name><argument_list>(<argument><expr><call><name>vreinterpret_u32_u64</name><argument_list>(<argument><expr><name>vsum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vsum</name> <operator>=</operator> <call><name>vpaddl_u32</name><argument_list>(<argument><expr><call><name>vreinterpret_u32_u64</name><argument_list>(<argument><expr><name>vsum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>vget_lane_u32</name><argument_list>(<argument><expr><call><name>vreinterpret_u32_u64</name><argument_list>(<argument><expr><name>vsum</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>uint32x2_t</name></type> <name>vsum32</name> <init>= <expr><call><name>vreinterpret_u32_u64</name><argument_list>(<argument><expr><name>vsum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>vsum32</name> <operator>=</operator> <call><name>vpaddl_u16</name><argument_list>(<argument><expr><call><name>vreinterpret_u16_u32</name><argument_list>(<argument><expr><name>vsum32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vsum32</name> <operator>=</operator> <call><name>vpaddl_u16</name><argument_list>(<argument><expr><call><name>vreinterpret_u16_u32</name><argument_list>(<argument><expr><name>vsum32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>vget_lane_u16</name><argument_list>(<argument><expr><call><name>vreinterpret_u16_u32</name><argument_list>(<argument><expr><name>vsum32</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>vget_lane_u16</name><argument_list>(<argument><expr><call><name>vreinterpret_u16_u32</name><argument_list>(<argument><expr><name>vsum32</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>vget_lane_u16</name><argument_list>(<argument><expr><call><name>vreinterpret_u16_u32</name><argument_list>(<argument><expr><name>vsum32</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>uint16_t</name></type> <name>sum</name> <init>= <expr><call><name>vget_lane_u16</name><argument_list>(<argument><expr><call><name>vreinterpret_u16_u32</name><argument_list>(<argument><expr><name>vsum32</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>swap</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>bswap16</name><argument_list>(<argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>sum</name></expr>;</return>
</block_content>}</block></function>
</unit>
