<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/arm-optimized-routines/math/v_log.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v_math.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v_log.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>V_SUPPORTED</name></expr></cpp:if>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>f64_t</name></type> <name><name>Poly</name><index>[]</index></name> <init>= <expr><block>{

<expr><operator>-</operator><literal type="number">0x1</literal><operator>.</operator><name>ffffffffffff7p</name><operator>-</operator><literal type="number">2</literal></expr>,
<expr><literal type="number">0x1</literal><literal type="number">.55555555170d4p</literal><operator>-</operator><literal type="number">2</literal></expr>,
<expr><operator>-</operator><literal type="number">0x1</literal><literal type="number">.0000000399c27p</literal><operator>-</operator><literal type="number">2</literal></expr>,
<expr><literal type="number">0x1</literal><literal type="number">.999b2e90e94cap</literal><operator>-</operator><literal type="number">3</literal></expr>,
<expr><operator>-</operator><literal type="number">0x1</literal><literal type="number">.554e550bd501ep</literal><operator>-</operator><literal type="number">3</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A0</name></cpp:macro> <cpp:value>v_f64 (Poly[0])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A1</name></cpp:macro> <cpp:value>v_f64 (Poly[1])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A2</name></cpp:macro> <cpp:value>v_f64 (Poly[2])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A3</name></cpp:macro> <cpp:value>v_f64 (Poly[3])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A4</name></cpp:macro> <cpp:value>v_f64 (Poly[4])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ln2</name></cpp:macro> <cpp:value>v_f64 (0x1.62e42fefa39efp-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>(1 &lt;&lt; V_LOG_TABLE_BITS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFF</name></cpp:macro> <cpp:value>v_u64 (0x3fe6900900000000)</cpp:value></cpp:define>

<struct>struct <name>entry</name>
<block>{
<decl_stmt><decl><type><name>v_f64_t</name></type> <name>invc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v_f64_t</name></type> <name>logc</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>entry</name></name></type>
<name>lookup</name> <parameter_list>(<parameter><decl><type><name>v_u64_t</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>entry</name></name></type> <name>e</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SCALAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>e</name><operator>.</operator><name>invc</name></name> <operator>=</operator> <name><name>__v_log_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>invc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>.</operator><name>logc</name></name> <operator>=</operator> <name><name>__v_log_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>logc</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>e</name><operator>.</operator><name>invc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>__v_log_data</name><index>[<expr><name><name>i</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>invc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>.</operator><name>logc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>__v_log_data</name><index>[<expr><name><name>i</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>logc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>.</operator><name>invc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>__v_log_data</name><index>[<expr><name><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>invc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>.</operator><name>logc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>__v_log_data</name><index>[<expr><name><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>logc</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>e</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>VPCS_ATTR</name></type>
<name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>noinline</name><operator>)</operator></expr></argument>)</argument_list> static <name>v_f64_t</name>
<name>specialcase</name> <argument_list>(<argument><expr><name>v_f64_t</name> <name>x</name></expr></argument>, <argument><expr><name>v_f64_t</name> <name>y</name></expr></argument>, <argument><expr><name>v_u64_t</name> <name>cmp</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>v_call_f64</name> <argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>VPCS_ATTR</name>
<name>v_f64_t</name>
<name>V_NAME</name></type>(<name>log</name>) <parameter_list>(<parameter><decl><type><name>v_f64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v_f64_t</name></type> <name>z</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>r2</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>kd</name></decl>, <decl><type ref="prev"/><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v_u64_t</name></type> <name>ix</name></decl>, <decl><type ref="prev"/><name>iz</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>, <decl><type ref="prev"/><name>top</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>cmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v_s64_t</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>entry</name></name></type> <name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ix</name> <operator>=</operator> <call><name>v_as_u64_f64</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>top</name> <operator>=</operator> <name>ix</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>v_cond_u64</name> <argument_list>(<argument><expr><name>top</name> <operator>-</operator> <call><name>v_u64</name> <argument_list>(<argument><expr><literal type="number">0x0010</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <call><name>v_u64</name> <argument_list>(<argument><expr><literal type="number">0x7ff0</literal> <operator>-</operator> <literal type="number">0x0010</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>ix</name> <operator>-</operator> <name>OFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">52</literal> <operator>-</operator> <name>V_LOG_TABLE_BITS</name><operator>)</operator><operator>)</operator> <operator>%</operator> <name>N</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>v_as_s64_u64</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">52</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>iz</name> <operator>=</operator> <name>ix</name> <operator>-</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <call><name>v_u64</name> <argument_list>(<argument><expr><literal type="number">0xfffULL</literal> <operator>&lt;&lt;</operator> <literal type="number">52</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>v_as_f64_u64</name> <argument_list>(<argument><expr><name>iz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>lookup</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>v_fma_f64</name> <argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>invc</name></name></expr></argument>, <argument><expr><call><name>v_f64</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>kd</name> <operator>=</operator> <call><name>v_to_f64_s64</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>hi</name> <operator>=</operator> <call><name>v_fma_f64</name> <argument_list>(<argument><expr><name>kd</name></expr></argument>, <argument><expr><name>Ln2</name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>logc</name></name> <operator>+</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r2</name> <operator>=</operator> <name>r</name> <operator>*</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>v_fma_f64</name> <argument_list>(<argument><expr><name>A3</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>v_fma_f64</name> <argument_list>(<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>v_fma_f64</name> <argument_list>(<argument><expr><name>A4</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>v_fma_f64</name> <argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>v_fma_f64</name> <argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name> <argument_list>(<argument><expr><call><name>v_any_u64</name> <argument_list>(<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>specialcase</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>y</name></expr>;</return>
</block_content>}</block></function>
<expr><name>VPCS_ALIAS</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
