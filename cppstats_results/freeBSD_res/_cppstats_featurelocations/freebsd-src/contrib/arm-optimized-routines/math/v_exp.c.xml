<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/arm-optimized-routines/math/v_exp.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v_math.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>V_SUPPORTED</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v_exp.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>V_EXP_TABLE_BITS</name> <operator>==</operator> <literal type="number">7</literal></expr></cpp:if>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C1</name></cpp:macro> <cpp:value>v_f64 (0x1.ffffffffffd43p-2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C2</name></cpp:macro> <cpp:value>v_f64 (0x1.55555c75adbb2p-3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C3</name></cpp:macro> <cpp:value>v_f64 (0x1.55555da646206p-5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>InvLn2</name></cpp:macro> <cpp:value>v_f64 (0x1.71547652b82fep7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ln2hi</name></cpp:macro> <cpp:value>v_f64 (0x1.62e42fefa39efp-8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ln2lo</name></cpp:macro> <cpp:value>v_f64 (0x1.abc9e3b39803f3p-63)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>V_EXP_TABLE_BITS</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:elif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C1</name></cpp:macro> <cpp:value>v_f64 (0x1.fffffffffffd4p-2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C2</name></cpp:macro> <cpp:value>v_f64 (0x1.5555571d6b68cp-3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C3</name></cpp:macro> <cpp:value>v_f64 (0x1.5555576a59599p-5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>InvLn2</name></cpp:macro> <cpp:value>v_f64 (0x1.71547652b82fep8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ln2hi</name></cpp:macro> <cpp:value>v_f64 (0x1.62e42fefa39efp-9)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ln2lo</name></cpp:macro> <cpp:value>v_f64 (0x1.abc9e3b39803f3p-64)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>(1 &lt;&lt; V_EXP_TABLE_BITS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Tab</name></cpp:macro> <cpp:value>__v_exp_data</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IndexMask</name></cpp:macro> <cpp:value>v_u64 (N - 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Shift</name></cpp:macro> <cpp:value>v_f64 (0x1.8p+52)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Thres</name></cpp:macro> <cpp:value>v_f64 (704.0)</cpp:value></cpp:define>

<function><type><name>VPCS_ATTR</name>
<specifier>static</specifier> <name>v_f64_t</name></type>
<name>specialcase</name> <parameter_list>(<parameter><decl><type><name>v_f64_t</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>v_f64_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>v_f64_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v_f64_t</name></type> <name>absn</name> <init>= <expr><call><name>v_abs_f64</name> <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>v_u64_t</name></type> <name>b</name> <init>= <expr><call><name>v_cond_u64</name> <argument_list>(<argument><expr><name>n</name> <operator>&lt;=</operator> <call><name>v_f64</name> <argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;</operator> <call><name>v_u64</name> <argument_list>(<argument><expr><literal type="number">0x6000000000000000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v_f64_t</name></type> <name>s1</name> <init>= <expr><call><name>v_as_f64_u64</name> <argument_list>(<argument><expr><call><name>v_u64</name> <argument_list>(<argument><expr><literal type="number">0x7000000000000000</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v_f64_t</name></type> <name>s2</name> <init>= <expr><call><name>v_as_f64_u64</name> <argument_list>(<argument><expr><call><name>v_as_u64_f64</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>v_u64</name> <argument_list>(<argument><expr><literal type="number">0x3010000000000000</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v_u64_t</name></type> <name>cmp</name> <init>= <expr><call><name>v_cond_u64</name> <argument_list>(<argument><expr><name>absn</name> <operator>&gt;</operator> <call><name>v_f64</name> <argument_list>(<argument><expr><literal type="number">1280.0</literal> <operator>*</operator> <name>N</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v_f64_t</name></type> <name>r1</name> <init>= <expr><name>s1</name> <operator>*</operator> <name>s1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v_f64_t</name></type> <name>r0</name> <init>= <expr><call><name>v_fma_f64</name> <argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>s1</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>v_as_f64_u64</name> <argument_list>(<argument><expr><operator>(</operator><name>cmp</name> <operator>&amp;</operator> <call><name>v_as_u64_f64</name> <argument_list>(<argument><expr><name>r1</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>~</operator><name>cmp</name> <operator>&amp;</operator> <call><name>v_as_u64_f64</name> <argument_list>(<argument><expr><name>r0</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VPCS_ATTR</name>
<name>v_f64_t</name>
<name>V_NAME</name></type>(<name>exp</name>) <parameter_list>(<parameter><decl><type><name>v_f64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v_f64_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>r2</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v_u64_t</name></type> <name>cmp</name></decl>, <decl><type ref="prev"/><name>u</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>v_cond_u64</name> <argument_list>(<argument><expr><call><name>v_abs_f64</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>Thres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>v_fma_f64</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>InvLn2</name></expr></argument>, <argument><expr><name>Shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>v_as_u64_f64</name> <argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>z</name> <operator>-</operator> <name>Shift</name></expr>;</expr_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>v_fma_f64</name> <argument_list>(<argument><expr><operator>-</operator><name>Ln2hi</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>v_fma_f64</name> <argument_list>(<argument><expr><operator>-</operator><name>Ln2lo</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name>u</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">52</literal> <operator>-</operator> <name>V_EXP_TABLE_BITS</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>u</name> <operator>&amp;</operator> <name>IndexMask</name></expr>;</expr_stmt>


<expr_stmt><expr><name>r2</name> <operator>=</operator> <name>r</name> <operator>*</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>v_fma_f64</name> <argument_list>(<argument><expr><name>C2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>C1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>v_fma_f64</name> <argument_list>(<argument><expr><name>C3</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>v_fma_f64</name> <argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>v_lookup_u64</name> <argument_list>(<argument><expr><name>Tab</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>v_as_f64_u64</name> <argument_list>(<argument><expr><name>u</name> <operator>+</operator> <name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name> <argument_list>(<argument><expr><call><name>v_any_u64</name> <argument_list>(<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>specialcase</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>v_fma_f64</name> <argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<expr><name>VPCS_ALIAS</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
