<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/arm-optimized-routines/math/erf.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"math_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TwoOverSqrtPiMinusOne</name></cpp:macro> <cpp:value>0x1.06eba8214db69p-3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C</name></cpp:macro> <cpp:value>0x1.b0ac16p-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PA</name></cpp:macro> <cpp:value>__erf_data.erf_poly_A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NA</name></cpp:macro> <cpp:value>__erf_data.erf_ratio_N_A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DA</name></cpp:macro> <cpp:value>__erf_data.erf_ratio_D_A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NB</name></cpp:macro> <cpp:value>__erf_data.erf_ratio_N_B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DB</name></cpp:macro> <cpp:value>__erf_data.erf_ratio_D_B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PC</name></cpp:macro> <cpp:value>__erf_data.erfc_poly_C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PD</name></cpp:macro> <cpp:value>__erf_data.erfc_poly_D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PE</name></cpp:macro> <cpp:value>__erf_data.erfc_poly_E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF</name></cpp:macro> <cpp:value>__erf_data.erfc_poly_F</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>top32</name> <parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>asuint64</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>double</name></type>
<name>erf</name> <parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ix</name> <init>= <expr><call><name>top32</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ia</name> <init>= <expr><name>ix</name> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sign</name> <init>= <expr><name>ix</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>ia</name> <operator>&lt;</operator> <literal type="number">0x3feb0000</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ia</name> <operator>&lt;</operator> <literal type="number">0x3e300000</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ia</name> <operator>&lt;</operator> <literal type="number">0x00800000</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>y</name> <init>= <expr><call><name>fma</name> <argument_list>(<argument><expr><name>TwoOverSqrtPiMinusOne</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>check_uflow</name> <argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>x</name> <operator>+</operator> <name>TwoOverSqrtPiMinusOne</name> <operator>*</operator> <name>x</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>x2</name> <init>= <expr><name>x</name> <operator>*</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ia</name> <operator>&lt;</operator> <literal type="number">0x3fe00000</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>r1</name> <init>= <expr><call><name>fma</name> <argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name><name>PA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>PA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r2</name> <init>= <expr><call><name>fma</name> <argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name><name>PA</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>PA</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r3</name> <init>= <expr><call><name>fma</name> <argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name><name>PA</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>PA</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r4</name> <init>= <expr><call><name>fma</name> <argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name><name>PA</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>PA</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r5</name> <init>= <expr><call><name>fma</name> <argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name><name>PA</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>PA</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>x4</name> <init>= <expr><name>x2</name> <operator>*</operator> <name>x2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r</name> <init>= <expr><name>r5</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>x4</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>x4</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>x4</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>x4</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>fma</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>x4</name></decl>, <decl><type ref="prev"/><name>x8</name></decl>, <decl><type ref="prev"/><name>r1n</name></decl>, <decl><type ref="prev"/><name>r2n</name></decl>, <decl><type ref="prev"/><name>r1d</name></decl>, <decl><type ref="prev"/><name>r2d</name></decl>, <decl><type ref="prev"/><name>r3d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r1n</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name><name>NA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>NA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x4</name> <operator>=</operator> <name>x2</name> <operator>*</operator> <name>x2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r2n</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name><name>NA</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>NA</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x8</name> <operator>=</operator> <name>x4</name> <operator>*</operator> <name>x4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r1d</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name><name>DA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r2d</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name><name>DA</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>DA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r3d</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name><name>DA</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>DA</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>P</name> <init>= <expr><name>r1n</name> <operator>+</operator> <name>x4</name> <operator>*</operator> <name>r2n</name> <operator>+</operator> <name>x8</name> <operator>*</operator> <name><name>NA</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>Q</name> <init>= <expr><name>r1d</name> <operator>+</operator> <name>x4</name> <operator>*</operator> <name>r2d</name> <operator>+</operator> <name>x8</name> <operator>*</operator> <name>r3d</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>fma</name> <argument_list>(<argument><expr><name>P</name> <operator>/</operator> <name>Q</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>ia</name> <operator>&lt;</operator> <literal type="number">0x3ff40000</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>a2</name></decl>, <decl><type ref="prev"/><name>a4</name></decl>, <decl><type ref="prev"/><name>a6</name></decl>, <decl><type ref="prev"/><name>r1n</name></decl>, <decl><type ref="prev"/><name>r2n</name></decl>, <decl><type ref="prev"/><name>r3n</name></decl>, <decl><type ref="prev"/><name>r4n</name></decl>, <decl><type ref="prev"/><name>r1d</name></decl>, <decl><type ref="prev"/><name>r2d</name></decl>, <decl><type ref="prev"/><name>r3d</name></decl>, <decl><type ref="prev"/><name>r4d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>a</name> <init>= <expr><call><name>fabs</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>r1n</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>NB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>NB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a2</name> <operator>=</operator> <name>a</name> <operator>*</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r1d</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>DB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a4</name> <operator>=</operator> <name>a2</name> <operator>*</operator> <name>a2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r2n</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>NB</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>NB</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a6</name> <operator>=</operator> <name>a4</name> <operator>*</operator> <name>a2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r2d</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>DB</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>DB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r3n</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>NB</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>NB</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r3d</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>DB</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>DB</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r4n</name> <operator>=</operator> <name><name>NB</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r4d</name> <operator>=</operator> <name><name>DB</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>P</name> <init>= <expr><name>r1n</name> <operator>+</operator> <name>a2</name> <operator>*</operator> <name>r2n</name> <operator>+</operator> <name>a4</name> <operator>*</operator> <name>r3n</name> <operator>+</operator> <name>a6</name> <operator>*</operator> <name>r4n</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>Q</name> <init>= <expr><name>r1d</name> <operator>+</operator> <name>a2</name> <operator>*</operator> <name>r2d</name> <operator>+</operator> <name>a4</name> <operator>*</operator> <name>r3d</name> <operator>+</operator> <name>a6</name> <operator>*</operator> <name>r4d</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><name>C</name> <operator>-</operator> <name>P</name> <operator>/</operator> <name>Q</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>C</name> <operator>+</operator> <name>P</name> <operator>/</operator> <name>Q</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>ia</name> <operator>&lt;</operator> <literal type="number">0x40000000</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>a</name> <init>= <expr><call><name>fabs</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>a</name> <operator>-</operator> <literal type="number">1.25</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>r1</name> <init>= <expr><call><name>fma</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>PC</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>PC</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r2</name> <init>= <expr><call><name>fma</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>PC</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>PC</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r3</name> <init>= <expr><call><name>fma</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>PC</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>PC</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r4</name> <init>= <expr><call><name>fma</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>PC</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>PC</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r5</name> <init>= <expr><call><name>fma</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>PC</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>PC</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r6</name> <init>= <expr><call><name>fma</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>PC</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>PC</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r7</name> <init>= <expr><call><name>fma</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>PC</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>PC</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r8</name> <init>= <expr><call><name>fma</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>PC</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>PC</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>a2</name> <init>= <expr><name>a</name> <operator>*</operator> <name>a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>r</name> <init>= <expr><name>r8</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1.0</literal> <operator>+</operator> <name>r</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">1.0</literal> <operator>-</operator> <name>r</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>ia</name> <operator>&lt;</operator> <literal type="number">0x400a0000</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>a</name> <init>= <expr><call><name>fabs</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>r1</name> <init>= <expr><call><name>fma</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>PD</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>PD</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r2</name> <init>= <expr><call><name>fma</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>PD</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>PD</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r3</name> <init>= <expr><call><name>fma</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>PD</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>PD</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r4</name> <init>= <expr><call><name>fma</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>PD</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>PD</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r5</name> <init>= <expr><call><name>fma</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>PD</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>PD</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r6</name> <init>= <expr><call><name>fma</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>PD</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>PD</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r7</name> <init>= <expr><call><name>fma</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>PD</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>PD</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r8</name> <init>= <expr><call><name>fma</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>PD</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>PD</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r9</name> <init>= <expr><call><name>fma</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>PD</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>PD</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>a2</name> <init>= <expr><name>a</name> <operator>*</operator> <name>a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>r</name> <init>= <expr><name>r9</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1.0</literal> <operator>+</operator> <name>r</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">1.0</literal> <operator>-</operator> <name>r</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>ia</name> <operator>&lt;</operator> <literal type="number">0x40100000</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>a</name> <init>= <expr><call><name>fabs</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>a</name> <operator>-</operator> <literal type="number">3.25</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>r1</name> <init>= <expr><call><name>fma</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>PE</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>PE</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r2</name> <init>= <expr><call><name>fma</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>PE</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>PE</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r3</name> <init>= <expr><call><name>fma</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>PE</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>PE</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r4</name> <init>= <expr><call><name>fma</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>PE</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>PE</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r5</name> <init>= <expr><call><name>fma</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>PE</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>PE</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r6</name> <init>= <expr><call><name>fma</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>PE</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>PE</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r7</name> <init>= <expr><call><name>fma</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>PE</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>PE</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>a2</name> <init>= <expr><name>a</name> <operator>*</operator> <name>a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>r</name> <init>= <expr><name>r7</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1.0</literal> <operator>+</operator> <name>r</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">1.0</literal> <operator>-</operator> <name>r</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>ia</name> <operator>&lt;</operator> <literal type="number">0x4017a000</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>a</name> <init>= <expr><call><name>fabs</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>r1</name> <init>= <expr><call><name>fma</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>PF</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>PF</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r2</name> <init>= <expr><call><name>fma</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>PF</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>PF</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r3</name> <init>= <expr><call><name>fma</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>PF</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>PF</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r4</name> <init>= <expr><call><name>fma</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>PF</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>PF</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r5</name> <init>= <expr><call><name>fma</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>PF</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>PF</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r6</name> <init>= <expr><call><name>fma</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>PF</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>PF</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r7</name> <init>= <expr><call><name>fma</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>PF</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>PF</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r8</name> <init>= <expr><call><name>fma</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>PF</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>PF</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r9</name> <init>= <expr><name><name>PF</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>a2</name> <init>= <expr><name>a</name> <operator>*</operator> <name>a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>r</name> <init>= <expr><name>r9</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1.0</literal> <operator>+</operator> <name>r</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">1.0</literal> <operator>-</operator> <name>r</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name> <argument_list>(<argument><expr><name>ia</name> <operator>&gt;=</operator> <literal type="number">0x7ff00000</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <operator>(</operator><name>sign</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1.0</literal> <operator>/</operator> <name>x</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1.0</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">1.0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
