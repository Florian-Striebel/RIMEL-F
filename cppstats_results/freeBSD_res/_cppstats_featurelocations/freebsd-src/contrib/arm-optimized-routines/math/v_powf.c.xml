<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/arm-optimized-routines/math/v_powf.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v_math.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>V_SUPPORTED</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Min</name></cpp:macro> <cpp:value>v_u32 (0x00800000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Max</name></cpp:macro> <cpp:value>v_u32 (0x7f800000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBITS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Tlog</name></cpp:macro> <cpp:value>v__powf_log2_data.tab</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Texp</name></cpp:macro> <cpp:value>v__exp2f_data.tab</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name></cpp:macro> <cpp:value>v__powf_log2_data.poly</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C</name></cpp:macro> <cpp:value>v__exp2f_data.poly</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOGDEG</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LOGDEG</name> <operator>==</operator> <literal type="number">5</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFF</name></cpp:macro> <cpp:value>v_u32 (0x3f330000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TBITS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LOGDEG</name> <operator>==</operator> <literal type="number">4</literal></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFF</name></cpp:macro> <cpp:value>v_u32 (0x3f35d000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TBITS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V_EXP2F_TABLE_BITS</name></cpp:macro> <cpp:value>SBITS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V_EXP2F_POLY_ORDER</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<struct>struct <name>v_exp2f_data</name>
<block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>tab</name><index>[<expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>V_EXP2F_TABLE_BITS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>poly</name><index>[<expr><name>V_EXP2F_POLY_ORDER</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V_POWF_LOG2_TABLE_BITS</name></cpp:macro> <cpp:value>TBITS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V_POWF_LOG2_POLY_ORDER</name></cpp:macro> <cpp:value>LOGDEG</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCALE</name></cpp:macro> <cpp:value>((double) (1 &lt;&lt; SBITS))</cpp:value></cpp:define>
<struct>struct <name>v_powf_log2_data</name>
<block>{
<struct>struct
<block>{
<decl_stmt><decl><type><name>double</name></type> <name>invc</name></decl>, <decl><type ref="prev"/><name>logc</name></decl>;</decl_stmt>
}</block> <decl><name><name>tab</name><index>[<expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>V_POWF_LOG2_TABLE_BITS</name></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>double</name></type> <name><name>poly</name><index>[<expr><name>V_POWF_LOG2_POLY_ORDER</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>v_powf_log2_data</name></name></type> <name>v__powf_log2_data</name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LOGDEG</name> <operator>==</operator> <literal type="number">5</literal></expr></cpp:if>
<expr><operator>.</operator><name>tab</name> <operator>=</operator> <block>{
<expr><block>{ <expr><literal type="number">0x1</literal><literal type="number">.661ec79f8f3bep</literal><operator>+</operator><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">0x1</literal><operator>.</operator><name>efec65b963019p</name><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>SCALE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x1</literal><literal type="number">.571ed4aaf883dp</literal><operator>+</operator><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">0x1</literal><operator>.</operator><name>b0b6832d4fca4p</name><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>SCALE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x1</literal><literal type="number">.49539f0f010bp</literal><operator>+</operator><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">0x1</literal><literal type="number">.7418b0a1fb77bp</literal><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>SCALE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x1</literal><literal type="number">.3c995b0b80385p</literal><operator>+</operator><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">0x1</literal><literal type="number">.39de91a6dcf7bp</literal><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>SCALE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x1</literal><literal type="number">.30d190c8864a5p</literal><operator>+</operator><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">0x1</literal><literal type="number">.01d9bf3f2b631p</literal><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>SCALE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x1</literal><literal type="number">.25e227b0b8eap</literal><operator>+</operator><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">0x1</literal><literal type="number">.97c1d1b3b7afp</literal><operator>-</operator><literal type="number">3</literal> <operator>*</operator> <name>SCALE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x1</literal><literal type="number">.1bb4a4a1a343fp</literal><operator>+</operator><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">0x1</literal><literal type="number">.2f9e393af3c9fp</literal><operator>-</operator><literal type="number">3</literal> <operator>*</operator> <name>SCALE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x1</literal><literal type="number">.12358f08ae5bap</literal><operator>+</operator><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">0x1</literal><literal type="number">.960cbbf788d5cp</literal><operator>-</operator><literal type="number">4</literal> <operator>*</operator> <name>SCALE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x1</literal><literal type="number">.0953f419900a7p</literal><operator>+</operator><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">0x1</literal><operator>.</operator><name>a6f9db6475fcep</name><operator>-</operator><literal type="number">5</literal> <operator>*</operator> <name>SCALE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x1p</literal><operator>+</operator><literal type="number">0</literal></expr>, <expr><literal type="number">0x0p</literal><operator>+</operator><literal type="number">0</literal> <operator>*</operator> <name>SCALE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x1</literal><operator>.</operator><name>e608cfd9a47acp</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0x1</literal><literal type="number">.338ca9f24f53dp</literal><operator>-</operator><literal type="number">4</literal> <operator>*</operator> <name>SCALE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x1</literal><operator>.</operator><name>ca4b31f026aap</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0x1</literal><literal type="number">.476a9543891bap</literal><operator>-</operator><literal type="number">3</literal> <operator>*</operator> <name>SCALE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x1</literal><operator>.</operator><name>b2036576afce6p</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0x1</literal><operator>.</operator><name>e840b4ac4e4d2p</name><operator>-</operator><literal type="number">3</literal> <operator>*</operator> <name>SCALE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x1</literal><literal type="number">.9c2d163a1aa2dp</literal><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0x1</literal><literal type="number">.40645f0c6651cp</literal><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>SCALE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x1</literal><literal type="number">.886e6037841edp</literal><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0x1</literal><literal type="number">.88e9c2c1b9ff8p</literal><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>SCALE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x1</literal><literal type="number">.767dcf5534862p</literal><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0x1</literal><operator>.</operator><name>ce0a44eb17bccp</name><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>SCALE</name></expr> }</block></expr>,
}</block></expr>,

<expr><operator>.</operator><name>poly</name> <operator>=</operator> <block>{
<expr><literal type="number">0x1</literal><literal type="number">.27616c9496e0bp</literal><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>SCALE</name></expr>, <expr><operator>-</operator><literal type="number">0x1</literal><literal type="number">.71969a075c67ap</literal><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>SCALE</name></expr>,
<expr><literal type="number">0x1</literal><operator>.</operator><name>ec70a6ca7baddp</name><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>SCALE</name></expr>, <expr><operator>-</operator><literal type="number">0x1</literal><literal type="number">.7154748bef6c8p</literal><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name>SCALE</name></expr>,
<expr><literal type="number">0x1</literal><literal type="number">.71547652ab82bp0</literal> <operator>*</operator> <name>SCALE</name></expr>,
}</block>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LOGDEG</name> <operator>==</operator> <literal type="number">4</literal></expr></cpp:elif>
<operator>.</operator><name>tab</name> <operator>=</operator> <block>{
<expr><block>{<expr><literal type="number">0x1</literal><literal type="number">.6489890582816p</literal><operator>+</operator><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">0x1</literal><operator>.</operator><name>e960f97b22702p</name><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>SCALE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1</literal><literal type="number">.5cf19b35e3472p</literal><operator>+</operator><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">0x1</literal><operator>.</operator><name>c993406cd4db6p</name><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>SCALE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1</literal><literal type="number">.55aac0e956d65p</literal><operator>+</operator><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">0x1</literal><operator>.</operator><name>aa711d9a7d0f3p</name><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>SCALE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1</literal><literal type="number">.4eb0022977e01p</literal><operator>+</operator><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">0x1</literal><literal type="number">.8bf37bacdce9bp</literal><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>SCALE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1</literal><literal type="number">.47fcccda1dd1fp</literal><operator>+</operator><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">0x1</literal><literal type="number">.6e13b3519946ep</literal><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>SCALE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1</literal><literal type="number">.418ceabab68c1p</literal><operator>+</operator><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">0x1</literal><literal type="number">.50cb8281e4089p</literal><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>SCALE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1</literal><literal type="number">.3b5c788f1edb3p</literal><operator>+</operator><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">0x1</literal><literal type="number">.341504a237e2bp</literal><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>SCALE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1</literal><literal type="number">.3567de48e9c9ap</literal><operator>+</operator><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">0x1</literal><literal type="number">.17eaab624ffbbp</literal><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>SCALE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1</literal><literal type="number">.2fabc80fd19bap</literal><operator>+</operator><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">0x1</literal><operator>.</operator><name>f88e708f8c853p</name><operator>-</operator><literal type="number">3</literal> <operator>*</operator> <name>SCALE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1</literal><literal type="number">.2a25200ce536bp</literal><operator>+</operator><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">0x1</literal><operator>.</operator><name>c24b6da113914p</name><operator>-</operator><literal type="number">3</literal> <operator>*</operator> <name>SCALE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1</literal><literal type="number">.24d108e0152e3p</literal><operator>+</operator><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">0x1</literal><literal type="number">.8d02ee397cb1dp</literal><operator>-</operator><literal type="number">3</literal> <operator>*</operator> <name>SCALE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1</literal><literal type="number">.1facd8ab2fbe1p</literal><operator>+</operator><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">0x1</literal><literal type="number">.58ac1223408b3p</literal><operator>-</operator><literal type="number">3</literal> <operator>*</operator> <name>SCALE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1</literal><literal type="number">.1ab614a03efdfp</literal><operator>+</operator><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">0x1</literal><literal type="number">.253e6fd190e89p</literal><operator>-</operator><literal type="number">3</literal> <operator>*</operator> <name>SCALE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1</literal><literal type="number">.15ea6d03af9ffp</literal><operator>+</operator><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">0x1</literal><operator>.</operator><name>e5641882c12ffp</name><operator>-</operator><literal type="number">4</literal> <operator>*</operator> <name>SCALE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1</literal><literal type="number">.1147b994bb776p</literal><operator>+</operator><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">0x1</literal><literal type="number">.81fea712926f7p</literal><operator>-</operator><literal type="number">4</literal> <operator>*</operator> <name>SCALE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1</literal><literal type="number">.0ccbf650593aap</literal><operator>+</operator><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">0x1</literal><literal type="number">.203e240de64a3p</literal><operator>-</operator><literal type="number">4</literal> <operator>*</operator> <name>SCALE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1</literal><literal type="number">.0875408477302p</literal><operator>+</operator><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">0x1</literal><literal type="number">.8029b86a78281p</literal><operator>-</operator><literal type="number">5</literal> <operator>*</operator> <name>SCALE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1</literal><literal type="number">.0441d42a93328p</literal><operator>+</operator><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">0x1</literal><literal type="number">.85d713190fb9p</literal><operator>-</operator><literal type="number">6</literal> <operator>*</operator> <name>SCALE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1p</literal><operator>+</operator><literal type="number">0</literal></expr>, <expr><literal type="number">0x0p</literal><operator>+</operator><literal type="number">0</literal> <operator>*</operator> <name>SCALE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1</literal><operator>.</operator><name>f1d006c855e86p</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0x1</literal><literal type="number">.4c1cc07312997p</literal><operator>-</operator><literal type="number">5</literal> <operator>*</operator> <name>SCALE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1</literal><operator>.</operator><name>e28c3341aa301p</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0x1</literal><literal type="number">.5e1848ccec948p</literal><operator>-</operator><literal type="number">4</literal> <operator>*</operator> <name>SCALE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1</literal><operator>.</operator><name>d4bdf9aa64747p</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0x1</literal><literal type="number">.04cfcb7f1196fp</literal><operator>-</operator><literal type="number">3</literal> <operator>*</operator> <name>SCALE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1</literal><operator>.</operator><name>c7b45a24e5803p</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0x1</literal><literal type="number">.582813d463c21p</literal><operator>-</operator><literal type="number">3</literal> <operator>*</operator> <name>SCALE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1</literal><operator>.</operator><name>bb5f5eb2ed60ap</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0x1</literal><operator>.</operator><name>a936fa68760ccp</name><operator>-</operator><literal type="number">3</literal> <operator>*</operator> <name>SCALE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1</literal><operator>.</operator><name>afb0bff8fe6b4p</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0x1</literal><operator>.</operator><name>f81bc31d6cc4ep</name><operator>-</operator><literal type="number">3</literal> <operator>*</operator> <name>SCALE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1</literal><operator>.</operator><name>a49badf7ab1f5p</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0x1</literal><literal type="number">.2279a09fae6b1p</literal><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>SCALE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1</literal><literal type="number">.9a14a111fc4c9p</literal><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0x1</literal><literal type="number">.47ec0b6df5526p</literal><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>SCALE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1</literal><literal type="number">.901131f5b2fdcp</literal><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0x1</literal><literal type="number">.6c71762280f1p</literal><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>SCALE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1</literal><literal type="number">.8687f73f6d865p</literal><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0x1</literal><literal type="number">.90155070798dap</literal><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>SCALE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1</literal><literal type="number">.7d7067eb77986p</literal><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0x1</literal><operator>.</operator><name>b2e23b1d3068cp</name><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>SCALE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1</literal><literal type="number">.74c2c1cf97b65p</literal><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0x1</literal><operator>.</operator><name>d4e21b0daa86ap</name><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>SCALE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1</literal><literal type="number">.6c77f37cff2a1p</literal><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0x1</literal><operator>.</operator><name>f61e2a2f67f3fp</name><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>SCALE</name></expr>}</block></expr>,
}</block></expr>,

<expr><operator>.</operator><name>poly</name> <operator>=</operator> <block>{
<expr><operator>-</operator><literal type="number">0x1</literal><literal type="number">.6ff5daa3b3d7cp</literal><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>SCALE</name></expr>,
<expr><literal type="number">0x1</literal><operator>.</operator><name>ec81d03c01aebp</name><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>SCALE</name></expr>,
<expr><operator>-</operator><literal type="number">0x1</literal><literal type="number">.71547bb43f101p</literal><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name>SCALE</name></expr>,
<expr><literal type="number">0x1</literal><literal type="number">.7154764a815cbp0</literal> <operator>*</operator> <name>SCALE</name></expr>,
}</block></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>v_exp2f_data</name></name></type> <name>v__exp2f_data</name> <init>= <expr><block>{
<expr><operator>.</operator><name>tab</name> <operator>=</operator> <block>{
<expr><literal type="number">0x3ff0000000000000</literal></expr>, <expr><literal type="number">0x3fefd9b0d3158574</literal></expr>, <expr><literal type="number">0x3fefb5586cf9890f</literal></expr>, <expr><literal type="number">0x3fef9301d0125b51</literal></expr>,
<expr><literal type="number">0x3fef72b83c7d517b</literal></expr>, <expr><literal type="number">0x3fef54873168b9aa</literal></expr>, <expr><literal type="number">0x3fef387a6e756238</literal></expr>, <expr><literal type="number">0x3fef1e9df51fdee1</literal></expr>,
<expr><literal type="number">0x3fef06fe0a31b715</literal></expr>, <expr><literal type="number">0x3feef1a7373aa9cb</literal></expr>, <expr><literal type="number">0x3feedea64c123422</literal></expr>, <expr><literal type="number">0x3feece086061892d</literal></expr>,
<expr><literal type="number">0x3feebfdad5362a27</literal></expr>, <expr><literal type="number">0x3feeb42b569d4f82</literal></expr>, <expr><literal type="number">0x3feeab07dd485429</literal></expr>, <expr><literal type="number">0x3feea47eb03a5585</literal></expr>,
<expr><literal type="number">0x3feea09e667f3bcd</literal></expr>, <expr><literal type="number">0x3fee9f75e8ec5f74</literal></expr>, <expr><literal type="number">0x3feea11473eb0187</literal></expr>, <expr><literal type="number">0x3feea589994cce13</literal></expr>,
<expr><literal type="number">0x3feeace5422aa0db</literal></expr>, <expr><literal type="number">0x3feeb737b0cdc5e5</literal></expr>, <expr><literal type="number">0x3feec49182a3f090</literal></expr>, <expr><literal type="number">0x3feed503b23e255d</literal></expr>,
<expr><literal type="number">0x3feee89f995ad3ad</literal></expr>, <expr><literal type="number">0x3feeff76f2fb5e47</literal></expr>, <expr><literal type="number">0x3fef199bdd85529c</literal></expr>, <expr><literal type="number">0x3fef3720dcef9069</literal></expr>,
<expr><literal type="number">0x3fef5818dcfba487</literal></expr>, <expr><literal type="number">0x3fef7c97337b9b5f</literal></expr>, <expr><literal type="number">0x3fefa4afa2a490da</literal></expr>, <expr><literal type="number">0x3fefd0765b6e4540</literal></expr>,
}</block></expr>,

<expr><operator>.</operator><name>poly</name> <operator>=</operator> <block>{
<expr><literal type="number">0x1</literal><operator>.</operator><name>c6af84b912394p</name><operator>-</operator><literal type="number">5</literal><operator>/</operator><name>SCALE</name><operator>/</operator><name>SCALE</name><operator>/</operator><name>SCALE</name></expr>, <expr><literal type="number">0x1</literal><operator>.</operator><name>ebfce50fac4f3p</name><operator>-</operator><literal type="number">3</literal><operator>/</operator><name>SCALE</name><operator>/</operator><name>SCALE</name></expr>, <expr><literal type="number">0x1</literal><literal type="number">.62e42ff0c52d6p</literal><operator>-</operator><literal type="number">1</literal><operator>/</operator><name>SCALE</name></expr>
}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VPCS_ATTR</name></type>
<name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>noinline</name><operator>)</operator></expr></argument>)</argument_list> static <name>v_f32_t</name>
<name>specialcase</name> <argument_list>(<argument><expr><name>v_f32_t</name> <name>x</name></expr></argument>, <argument><expr><name>v_f32_t</name> <name>y</name></expr></argument>, <argument><expr><name>v_f32_t</name> <name>ret</name></expr></argument>, <argument><expr><name>v_u32_t</name> <name>cmp</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>v_call2_f32</name> <argument_list>(<argument><expr><name>powf</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>VPCS_ATTR</name>
<name>v_f32_t</name>
<name>V_NAME</name></type>(<name>powf</name>) <parameter_list>(<parameter><decl><type><name>v_f32_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>v_f32_t</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v_u32_t</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>, <decl><type ref="prev"/><name>cmp</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>top</name></decl>, <decl><type ref="prev"/><name>iz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v_s32_t</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v_f32_t</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>v_as_u32_f32</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>v_cond_u32</name> <argument_list>(<argument><expr><name>u</name> <operator>-</operator> <name>Min</name> <operator>&gt;=</operator> <name>Max</name> <operator>-</operator> <name>Min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>u</name> <operator>-</operator> <name>OFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">23</literal> <operator>-</operator> <name>TBITS</name><operator>)</operator><operator>)</operator> <operator>%</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>TBITS</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>top</name> <operator>=</operator> <name>tmp</name> <operator>&amp;</operator> <literal type="number">0xff800000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>iz</name> <operator>=</operator> <name>u</name> <operator>-</operator> <name>top</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>v_as_s32_u32</name> <argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">23</literal> <operator>-</operator> <name>SBITS</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>lane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>lane</name> <operator>&lt;</operator> <call><name>v_lanes32</name> <argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>lane</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>si</name></decl>, <decl><type ref="prev"/><name>siz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>sk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>sy</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>double</name></type> <name>invc</name></decl>, <decl><type ref="prev"/><name>logc</name></decl>, <decl><type ref="prev"/><name>z</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>y0</name></decl>, <decl><type ref="prev"/><name>logx</name></decl>, <decl><type ref="prev"/><name>ylogx</name></decl>, <decl><type ref="prev"/><name>kd</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ki</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>si</name> <operator>=</operator> <call><name>v_get_u32</name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>lane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>siz</name> <operator>=</operator> <call><name>v_get_u32</name> <argument_list>(<argument><expr><name>iz</name></expr></argument>, <argument><expr><name>lane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sk</name> <operator>=</operator> <call><name>v_get_s32</name> <argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>lane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sy</name> <operator>=</operator> <call><name>v_get_f32</name> <argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>lane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>invc</name> <operator>=</operator> <name><name>Tlog</name><index>[<expr><name>si</name></expr>]</index></name><operator>.</operator><name>invc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>logc</name> <operator>=</operator> <name><name>Tlog</name><index>[<expr><name>si</name></expr>]</index></name><operator>.</operator><name>logc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <call><name>as_f32_u32</name> <argument_list>(<argument><expr><name>siz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>__builtin_fma</name> <argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>invc</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y0</name> <operator>=</operator> <name>logc</name> <operator>+</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>sk</name></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LOGDEG</name> <operator>==</operator> <literal type="number">5</literal></expr></cpp:if>
<expr_stmt><expr><name>logx</name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>logx</name> <operator>=</operator> <name>r</name> <operator>*</operator> <name>logx</name> <operator>+</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>logx</name> <operator>=</operator> <name>r</name> <operator>*</operator> <name>logx</name> <operator>+</operator> <name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>logx</name> <operator>=</operator> <name>r</name> <operator>*</operator> <name>logx</name> <operator>+</operator> <name><name>A</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>logx</name> <operator>=</operator> <name>r</name> <operator>*</operator> <name>logx</name> <operator>+</operator> <name><name>A</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>logx</name> <operator>=</operator> <name>r</name> <operator>*</operator> <name>logx</name> <operator>+</operator> <name>y0</name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LOGDEG</name> <operator>==</operator> <literal type="number">4</literal></expr></cpp:elif>
<expr_stmt><expr><name>logx</name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>logx</name> <operator>=</operator> <name>r</name> <operator>*</operator> <name>logx</name> <operator>+</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>logx</name> <operator>=</operator> <name>r</name> <operator>*</operator> <name>logx</name> <operator>+</operator> <name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>logx</name> <operator>=</operator> <name>r</name> <operator>*</operator> <name>logx</name> <operator>+</operator> <name><name>A</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>logx</name> <operator>=</operator> <name>r</name> <operator>*</operator> <name>logx</name> <operator>+</operator> <name>y0</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>ylogx</name> <operator>=</operator> <name>sy</name> <operator>*</operator> <name>logx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>v_set_u32</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cmp</name></expr></argument>, <argument><expr><name>lane</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><call><name>as_u64_f64</name> <argument_list>(<argument><expr><name>ylogx</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">47</literal> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator>
<operator>&gt;=</operator> <call><name>as_u64_f64</name> <argument_list>(<argument><expr><literal type="number">126.0</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>SBITS</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">47</literal></expr>
?</condition><then> <expr><literal type="number">1</literal></expr>
</then><else>: <expr><call><name>v_get_u32</name> <argument_list>(<argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>lane</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TOINT_INTRINSICS</name></expr></cpp:if>
<expr_stmt><expr><name>kd</name> <operator>=</operator> <call><name>roundtoint</name> <argument_list>(<argument><expr><name>ylogx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ki</name> <operator>=</operator> <call><name>converttoint</name> <argument_list>(<argument><expr><name>ylogx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHIFT</name></cpp:macro> <cpp:value>0x1.8p52</cpp:value></cpp:define>
<expr_stmt><expr><name>kd</name> <operator>=</operator> <call><name>eval_as_double</name> <argument_list>(<argument><expr><name>ylogx</name> <operator>+</operator> <name>SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ki</name> <operator>=</operator> <call><name>asuint64</name> <argument_list>(<argument><expr><name>kd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>kd</name> <operator>-=</operator> <name>SHIFT</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ylogx</name> <operator>-</operator> <name>kd</name></expr>;</expr_stmt>


<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>Texp</name><index>[<expr><name>ki</name> <operator>%</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>SBITS</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>+=</operator> <name>ki</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">52</literal> <operator>-</operator> <name>SBITS</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>as_f64_u64</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>__builtin_fma</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>__builtin_fma</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>__builtin_fma</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name> <operator>*</operator> <name>r</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>v_set_f32</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><name>lane</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name> <argument_list>(<argument><expr><call><name>v_any_u32</name> <argument_list>(<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>specialcase</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<expr><name>VPCS_ALIAS</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
