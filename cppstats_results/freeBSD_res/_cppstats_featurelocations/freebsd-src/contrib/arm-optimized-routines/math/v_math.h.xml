<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/arm-optimized-routines/math/v_math.h">






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_V_MATH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_V_MATH_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WANT_VMATH</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WANT_VMATH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>WANT_VMATH</name></expr></cpp:if>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SCALAR</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V_NAME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__s_##x</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>VPCS</name> <operator>&amp;&amp;</operator> <name>__aarch64__</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V_NAME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__vn_##x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VPCS_ATTR</name></cpp:macro> <cpp:value>__attribute__ ((aarch64_vector_pcs))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V_NAME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__v_##x</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VPCS_ATTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VPCS_ATTR</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VPCS_ALIAS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VPCS_ALIAS</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"math_config.h"</cpp:file></cpp:include>

<typedef>typedef <type><name>float</name></type> <name>f32_t</name>;</typedef>
<typedef>typedef <type><name>uint32_t</name></type> <name>u32_t</name>;</typedef>
<typedef>typedef <type><name>int32_t</name></type> <name>s32_t</name>;</typedef>
<typedef>typedef <type><name>double</name></type> <name>f64_t</name>;</typedef>
<typedef>typedef <type><name>uint64_t</name></type> <name>u64_t</name>;</typedef>
<typedef>typedef <type><name>int64_t</name></type> <name>s64_t</name>;</typedef>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>u32_t</name></type>
<name>as_u32_f32</name> <parameter_list>(<parameter><decl><type><name>f32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<union>union <block>{ <decl_stmt><decl><type><name>f32_t</name></type> <name>f</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>u32_t</name></type> <name>u</name></decl>;</decl_stmt> }</block> <decl><name>r</name> <init>= <expr><block>{<expr><name>x</name></expr>}</block></expr></init></decl>;</union>
<return>return <expr><name><name>r</name><operator>.</operator><name>u</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>f32_t</name></type>
<name>as_f32_u32</name> <parameter_list>(<parameter><decl><type><name>u32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<union>union <block>{ <decl_stmt><decl><type><name>u32_t</name></type> <name>u</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>f32_t</name></type> <name>f</name></decl>;</decl_stmt> }</block> <decl><name>r</name> <init>= <expr><block>{<expr><name>x</name></expr>}</block></expr></init></decl>;</union>
<return>return <expr><name><name>r</name><operator>.</operator><name>f</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>s32_t</name></type>
<name>as_s32_u32</name> <parameter_list>(<parameter><decl><type><name>u32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<union>union <block>{ <decl_stmt><decl><type><name>u32_t</name></type> <name>u</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>s32_t</name></type> <name>i</name></decl>;</decl_stmt> }</block> <decl><name>r</name> <init>= <expr><block>{<expr><name>x</name></expr>}</block></expr></init></decl>;</union>
<return>return <expr><name><name>r</name><operator>.</operator><name>i</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>u32_t</name></type>
<name>as_u32_s32</name> <parameter_list>(<parameter><decl><type><name>s32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<union>union <block>{ <decl_stmt><decl><type><name>s32_t</name></type> <name>i</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>u32_t</name></type> <name>u</name></decl>;</decl_stmt> }</block> <decl><name>r</name> <init>= <expr><block>{<expr><name>x</name></expr>}</block></expr></init></decl>;</union>
<return>return <expr><name><name>r</name><operator>.</operator><name>u</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>u64_t</name></type>
<name>as_u64_f64</name> <parameter_list>(<parameter><decl><type><name>f64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<union>union <block>{ <decl_stmt><decl><type><name>f64_t</name></type> <name>f</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>u64_t</name></type> <name>u</name></decl>;</decl_stmt> }</block> <decl><name>r</name> <init>= <expr><block>{<expr><name>x</name></expr>}</block></expr></init></decl>;</union>
<return>return <expr><name><name>r</name><operator>.</operator><name>u</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>f64_t</name></type>
<name>as_f64_u64</name> <parameter_list>(<parameter><decl><type><name>u64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<union>union <block>{ <decl_stmt><decl><type><name>u64_t</name></type> <name>u</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>f64_t</name></type> <name>f</name></decl>;</decl_stmt> }</block> <decl><name>r</name> <init>= <expr><block>{<expr><name>x</name></expr>}</block></expr></init></decl>;</union>
<return>return <expr><name><name>r</name><operator>.</operator><name>f</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>s64_t</name></type>
<name>as_s64_u64</name> <parameter_list>(<parameter><decl><type><name>u64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<union>union <block>{ <decl_stmt><decl><type><name>u64_t</name></type> <name>u</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>s64_t</name></type> <name>i</name></decl>;</decl_stmt> }</block> <decl><name>r</name> <init>= <expr><block>{<expr><name>x</name></expr>}</block></expr></init></decl>;</union>
<return>return <expr><name><name>r</name><operator>.</operator><name>i</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>u64_t</name></type>
<name>as_u64_s64</name> <parameter_list>(<parameter><decl><type><name>s64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<union>union <block>{ <decl_stmt><decl><type><name>s64_t</name></type> <name>i</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>u64_t</name></type> <name>u</name></decl>;</decl_stmt> }</block> <decl><name>r</name> <init>= <expr><block>{<expr><name>x</name></expr>}</block></expr></init></decl>;</union>
<return>return <expr><name><name>r</name><operator>.</operator><name>u</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SCALAR</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V_SUPPORTED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<typedef>typedef <type><name>f32_t</name></type> <name>v_f32_t</name>;</typedef>
<typedef>typedef <type><name>u32_t</name></type> <name>v_u32_t</name>;</typedef>
<typedef>typedef <type><name>s32_t</name></type> <name>v_s32_t</name>;</typedef>
<typedef>typedef <type><name>f64_t</name></type> <name>v_f64_t</name>;</typedef>
<typedef>typedef <type><name>u64_t</name></type> <name>v_u64_t</name>;</typedef>
<typedef>typedef <type><name>s64_t</name></type> <name>v_s64_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>v_lanes32</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_f32_t</name></type>
<name>v_f32</name> <parameter_list>(<parameter><decl><type><name>f32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_u32_t</name></type>
<name>v_u32</name> <parameter_list>(<parameter><decl><type><name>u32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_s32_t</name></type>
<name>v_s32</name> <parameter_list>(<parameter><decl><type><name>s32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>f32_t</name></type>
<name>v_get_f32</name> <parameter_list>(<parameter><decl><type><name>v_f32_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>u32_t</name></type>
<name>v_get_u32</name> <parameter_list>(<parameter><decl><type><name>v_u32_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>s32_t</name></type>
<name>v_get_s32</name> <parameter_list>(<parameter><decl><type><name>v_s32_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>v_set_f32</name> <parameter_list>(<parameter><decl><type><name>v_f32_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>f32_t</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>v_set_u32</name> <parameter_list>(<parameter><decl><type><name>v_u32_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>u32_t</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>v_set_s32</name> <parameter_list>(<parameter><decl><type><name>v_s32_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>s32_t</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>v_any_u32</name> <parameter_list>(<parameter><decl><type><name>v_u32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>x</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_u32_t</name></type>
<name>v_cond_u32</name> <parameter_list>(<parameter><decl><type><name>v_u32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>x</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_f32_t</name></type>
<name>v_abs_f32</name> <parameter_list>(<parameter><decl><type><name>v_f32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_fabsf</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_f32_t</name></type>
<name>v_fma_f32</name> <parameter_list>(<parameter><decl><type><name>v_f32_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>v_f32_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>v_f32_t</name></type> <name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_fmaf</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_f32_t</name></type>
<name>v_round_f32</name> <parameter_list>(<parameter><decl><type><name>v_f32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_roundf</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_s32_t</name></type>
<name>v_round_s32</name> <parameter_list>(<parameter><decl><type><name>v_f32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_lroundf</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_f32_t</name></type>
<name>v_to_f32_s32</name> <parameter_list>(<parameter><decl><type><name>v_s32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_f32_t</name></type>
<name>v_to_f32_u32</name> <parameter_list>(<parameter><decl><type><name>v_u32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_u32_t</name></type>
<name>v_as_u32_f32</name> <parameter_list>(<parameter><decl><type><name>v_f32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<union>union <block>{ <decl_stmt><decl><type><name>v_f32_t</name></type> <name>f</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>v_u32_t</name></type> <name>u</name></decl>;</decl_stmt> }</block> <decl><name>r</name> <init>= <expr><block>{<expr><name>x</name></expr>}</block></expr></init></decl>;</union>
<return>return <expr><name><name>r</name><operator>.</operator><name>u</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_f32_t</name></type>
<name>v_as_f32_u32</name> <parameter_list>(<parameter><decl><type><name>v_u32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<union>union <block>{ <decl_stmt><decl><type><name>v_u32_t</name></type> <name>u</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>v_f32_t</name></type> <name>f</name></decl>;</decl_stmt> }</block> <decl><name>r</name> <init>= <expr><block>{<expr><name>x</name></expr>}</block></expr></init></decl>;</union>
<return>return <expr><name><name>r</name><operator>.</operator><name>f</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_s32_t</name></type>
<name>v_as_s32_u32</name> <parameter_list>(<parameter><decl><type><name>v_u32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<union>union <block>{ <decl_stmt><decl><type><name>v_u32_t</name></type> <name>u</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>v_s32_t</name></type> <name>i</name></decl>;</decl_stmt> }</block> <decl><name>r</name> <init>= <expr><block>{<expr><name>x</name></expr>}</block></expr></init></decl>;</union>
<return>return <expr><name><name>r</name><operator>.</operator><name>i</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_u32_t</name></type>
<name>v_as_u32_s32</name> <parameter_list>(<parameter><decl><type><name>v_s32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<union>union <block>{ <decl_stmt><decl><type><name>v_s32_t</name></type> <name>i</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>v_u32_t</name></type> <name>u</name></decl>;</decl_stmt> }</block> <decl><name>r</name> <init>= <expr><block>{<expr><name>x</name></expr>}</block></expr></init></decl>;</union>
<return>return <expr><name><name>r</name><operator>.</operator><name>u</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_f32_t</name></type>
<name>v_lookup_f32</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>f32_t</name> <modifier>*</modifier></type><name>tab</name></decl></parameter>, <parameter><decl><type><name>v_u32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>tab</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_u32_t</name></type>
<name>v_lookup_u32</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>u32_t</name> <modifier>*</modifier></type><name>tab</name></decl></parameter>, <parameter><decl><type><name>v_u32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>tab</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_f32_t</name></type>
<name>v_call_f32</name> <parameter_list>(<parameter><function_decl><type><name>f32_t</name></type> (<modifier>*</modifier><name>f</name>) <parameter_list>(<parameter><decl><type><name>f32_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>v_f32_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>v_f32_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>v_u32_t</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>f</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_f32_t</name></type>
<name>v_call2_f32</name> <parameter_list>(<parameter><function_decl><type><name>f32_t</name></type> (<modifier>*</modifier><name>f</name>) <parameter_list>(<parameter><decl><type><name>f32_t</name></type></decl></parameter>, <parameter><decl><type><name>f32_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>v_f32_t</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>v_f32_t</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>v_f32_t</name></type> <name>y</name></decl></parameter>,
<parameter><decl><type><name>v_u32_t</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>f</name> <argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>v_lanes64</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_f64_t</name></type>
<name>v_f64</name> <parameter_list>(<parameter><decl><type><name>f64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_u64_t</name></type>
<name>v_u64</name> <parameter_list>(<parameter><decl><type><name>u64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_s64_t</name></type>
<name>v_s64</name> <parameter_list>(<parameter><decl><type><name>s64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>f64_t</name></type>
<name>v_get_f64</name> <parameter_list>(<parameter><decl><type><name>v_f64_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>v_set_f64</name> <parameter_list>(<parameter><decl><type><name>v_f64_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>f64_t</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>v_any_u64</name> <parameter_list>(<parameter><decl><type><name>v_u64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>x</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_u64_t</name></type>
<name>v_cond_u64</name> <parameter_list>(<parameter><decl><type><name>v_u64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>x</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_f64_t</name></type>
<name>v_abs_f64</name> <parameter_list>(<parameter><decl><type><name>v_f64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_fabs</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_f64_t</name></type>
<name>v_fma_f64</name> <parameter_list>(<parameter><decl><type><name>v_f64_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>v_f64_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>v_f64_t</name></type> <name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_fma</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_f64_t</name></type>
<name>v_round_f64</name> <parameter_list>(<parameter><decl><type><name>v_f64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_round</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_s64_t</name></type>
<name>v_round_s64</name> <parameter_list>(<parameter><decl><type><name>v_f64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_lround</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_f64_t</name></type>
<name>v_to_f64_s64</name> <parameter_list>(<parameter><decl><type><name>v_s64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_f64_t</name></type>
<name>v_to_f64_u64</name> <parameter_list>(<parameter><decl><type><name>v_u64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_u64_t</name></type>
<name>v_as_u64_f64</name> <parameter_list>(<parameter><decl><type><name>v_f64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<union>union <block>{ <decl_stmt><decl><type><name>v_f64_t</name></type> <name>f</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>v_u64_t</name></type> <name>u</name></decl>;</decl_stmt> }</block> <decl><name>r</name> <init>= <expr><block>{<expr><name>x</name></expr>}</block></expr></init></decl>;</union>
<return>return <expr><name><name>r</name><operator>.</operator><name>u</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_f64_t</name></type>
<name>v_as_f64_u64</name> <parameter_list>(<parameter><decl><type><name>v_u64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<union>union <block>{ <decl_stmt><decl><type><name>v_u64_t</name></type> <name>u</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>v_f64_t</name></type> <name>f</name></decl>;</decl_stmt> }</block> <decl><name>r</name> <init>= <expr><block>{<expr><name>x</name></expr>}</block></expr></init></decl>;</union>
<return>return <expr><name><name>r</name><operator>.</operator><name>f</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_s64_t</name></type>
<name>v_as_s64_u64</name> <parameter_list>(<parameter><decl><type><name>v_u64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<union>union <block>{ <decl_stmt><decl><type><name>v_u64_t</name></type> <name>u</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>v_s64_t</name></type> <name>i</name></decl>;</decl_stmt> }</block> <decl><name>r</name> <init>= <expr><block>{<expr><name>x</name></expr>}</block></expr></init></decl>;</union>
<return>return <expr><name><name>r</name><operator>.</operator><name>i</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_u64_t</name></type>
<name>v_as_u64_s64</name> <parameter_list>(<parameter><decl><type><name>v_s64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<union>union <block>{ <decl_stmt><decl><type><name>v_s64_t</name></type> <name>i</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>v_u64_t</name></type> <name>u</name></decl>;</decl_stmt> }</block> <decl><name>r</name> <init>= <expr><block>{<expr><name>x</name></expr>}</block></expr></init></decl>;</union>
<return>return <expr><name><name>r</name><operator>.</operator><name>u</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_f64_t</name></type>
<name>v_lookup_f64</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>f64_t</name> <modifier>*</modifier></type><name>tab</name></decl></parameter>, <parameter><decl><type><name>v_u64_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>tab</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_u64_t</name></type>
<name>v_lookup_u64</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>u64_t</name> <modifier>*</modifier></type><name>tab</name></decl></parameter>, <parameter><decl><type><name>v_u64_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>tab</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_f64_t</name></type>
<name>v_call_f64</name> <parameter_list>(<parameter><function_decl><type><name>f64_t</name></type> (<modifier>*</modifier><name>f</name>) <parameter_list>(<parameter><decl><type><name>f64_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>v_f64_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>v_f64_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>v_u64_t</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>f</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__aarch64__</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V_SUPPORTED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arm_neon.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>float32x4_t</name></type> <name>v_f32_t</name>;</typedef>
<typedef>typedef <type><name>uint32x4_t</name></type> <name>v_u32_t</name>;</typedef>
<typedef>typedef <type><name>int32x4_t</name></type> <name>v_s32_t</name>;</typedef>
<typedef>typedef <type><name>float64x2_t</name></type> <name>v_f64_t</name>;</typedef>
<typedef>typedef <type><name>uint64x2_t</name></type> <name>v_u64_t</name>;</typedef>
<typedef>typedef <type><name>int64x2_t</name></type> <name>v_s64_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>v_lanes32</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_f32_t</name></type>
<name>v_f32</name> <parameter_list>(<parameter><decl><type><name>f32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>v_f32_t</name><operator>)</operator><block>{<expr><name>x</name></expr>, <expr><name>x</name></expr>, <expr><name>x</name></expr>, <expr><name>x</name></expr>}</block></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_u32_t</name></type>
<name>v_u32</name> <parameter_list>(<parameter><decl><type><name>u32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>v_u32_t</name><operator>)</operator><block>{<expr><name>x</name></expr>, <expr><name>x</name></expr>, <expr><name>x</name></expr>, <expr><name>x</name></expr>}</block></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_s32_t</name></type>
<name>v_s32</name> <parameter_list>(<parameter><decl><type><name>s32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>v_s32_t</name><operator>)</operator><block>{<expr><name>x</name></expr>, <expr><name>x</name></expr>, <expr><name>x</name></expr>, <expr><name>x</name></expr>}</block></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>f32_t</name></type>
<name>v_get_f32</name> <parameter_list>(<parameter><decl><type><name>v_f32_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>u32_t</name></type>
<name>v_get_u32</name> <parameter_list>(<parameter><decl><type><name>v_u32_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>s32_t</name></type>
<name>v_get_s32</name> <parameter_list>(<parameter><decl><type><name>v_s32_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>v_set_f32</name> <parameter_list>(<parameter><decl><type><name>v_f32_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>f32_t</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>x</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>v_set_u32</name> <parameter_list>(<parameter><decl><type><name>v_u32_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>u32_t</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>x</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>v_set_s32</name> <parameter_list>(<parameter><decl><type><name>v_s32_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>s32_t</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>x</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>v_any_u32</name> <parameter_list>(<parameter><decl><type><name>v_u32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><call><name>vpaddd_u64</name> <argument_list>(<argument><expr><call><name>vreinterpretq_u64_u32</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_u32_t</name></type>
<name>v_cond_u32</name> <parameter_list>(<parameter><decl><type><name>v_u32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_f32_t</name></type>
<name>v_abs_f32</name> <parameter_list>(<parameter><decl><type><name>v_f32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vabsq_f32</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_f32_t</name></type>
<name>v_fma_f32</name> <parameter_list>(<parameter><decl><type><name>v_f32_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>v_f32_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>v_f32_t</name></type> <name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vfmaq_f32</name> <argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_f32_t</name></type>
<name>v_round_f32</name> <parameter_list>(<parameter><decl><type><name>v_f32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vrndaq_f32</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_s32_t</name></type>
<name>v_round_s32</name> <parameter_list>(<parameter><decl><type><name>v_f32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vcvtaq_s32_f32</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_f32_t</name></type>
<name>v_to_f32_s32</name> <parameter_list>(<parameter><decl><type><name>v_s32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>v_f32_t</name><operator>)</operator><block>{<expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name><name>x</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>}</block></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_f32_t</name></type>
<name>v_to_f32_u32</name> <parameter_list>(<parameter><decl><type><name>v_u32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>v_f32_t</name><operator>)</operator><block>{<expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name><name>x</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>}</block></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_u32_t</name></type>
<name>v_as_u32_f32</name> <parameter_list>(<parameter><decl><type><name>v_f32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<union>union <block>{ <decl_stmt><decl><type><name>v_f32_t</name></type> <name>f</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>v_u32_t</name></type> <name>u</name></decl>;</decl_stmt> }</block> <decl><name>r</name> <init>= <expr><block>{<expr><name>x</name></expr>}</block></expr></init></decl>;</union>
<return>return <expr><name><name>r</name><operator>.</operator><name>u</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_f32_t</name></type>
<name>v_as_f32_u32</name> <parameter_list>(<parameter><decl><type><name>v_u32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<union>union <block>{ <decl_stmt><decl><type><name>v_u32_t</name></type> <name>u</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>v_f32_t</name></type> <name>f</name></decl>;</decl_stmt> }</block> <decl><name>r</name> <init>= <expr><block>{<expr><name>x</name></expr>}</block></expr></init></decl>;</union>
<return>return <expr><name><name>r</name><operator>.</operator><name>f</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_s32_t</name></type>
<name>v_as_s32_u32</name> <parameter_list>(<parameter><decl><type><name>v_u32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<union>union <block>{ <decl_stmt><decl><type><name>v_u32_t</name></type> <name>u</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>v_s32_t</name></type> <name>i</name></decl>;</decl_stmt> }</block> <decl><name>r</name> <init>= <expr><block>{<expr><name>x</name></expr>}</block></expr></init></decl>;</union>
<return>return <expr><name><name>r</name><operator>.</operator><name>i</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_u32_t</name></type>
<name>v_as_u32_s32</name> <parameter_list>(<parameter><decl><type><name>v_s32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<union>union <block>{ <decl_stmt><decl><type><name>v_s32_t</name></type> <name>i</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>v_u32_t</name></type> <name>u</name></decl>;</decl_stmt> }</block> <decl><name>r</name> <init>= <expr><block>{<expr><name>x</name></expr>}</block></expr></init></decl>;</union>
<return>return <expr><name><name>r</name><operator>.</operator><name>u</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_f32_t</name></type>
<name>v_lookup_f32</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>f32_t</name> <modifier>*</modifier></type><name>tab</name></decl></parameter>, <parameter><decl><type><name>v_u32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>v_f32_t</name><operator>)</operator><block>{<expr><name><name>tab</name><index>[<expr><name><name>idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>, <expr><name><name>tab</name><index>[<expr><name><name>idx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>, <expr><name><name>tab</name><index>[<expr><name><name>idx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr>, <expr><name><name>tab</name><index>[<expr><name><name>idx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name></expr>}</block></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_u32_t</name></type>
<name>v_lookup_u32</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>u32_t</name> <modifier>*</modifier></type><name>tab</name></decl></parameter>, <parameter><decl><type><name>v_u32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>v_u32_t</name><operator>)</operator><block>{<expr><name><name>tab</name><index>[<expr><name><name>idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>, <expr><name><name>tab</name><index>[<expr><name><name>idx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>, <expr><name><name>tab</name><index>[<expr><name><name>idx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr>, <expr><name><name>tab</name><index>[<expr><name><name>idx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name></expr>}</block></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_f32_t</name></type>
<name>v_call_f32</name> <parameter_list>(<parameter><function_decl><type><name>f32_t</name></type> (<modifier>*</modifier><name>f</name>) <parameter_list>(<parameter><decl><type><name>f32_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>v_f32_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>v_f32_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>v_u32_t</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>v_f32_t</name><operator>)</operator><block>{<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>?</operator> <call><name>f</name> <argument_list>(<argument><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>:</operator> <name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>?</operator> <call><name>f</name> <argument_list>(<argument><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>:</operator> <name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,
<expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>?</operator> <call><name>f</name> <argument_list>(<argument><expr><name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>:</operator> <name><name>y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>?</operator> <call><name>f</name> <argument_list>(<argument><expr><name><name>x</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>:</operator> <name><name>y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>}</block></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_f32_t</name></type>
<name>v_call2_f32</name> <parameter_list>(<parameter><function_decl><type><name>f32_t</name></type> (<modifier>*</modifier><name>f</name>) <parameter_list>(<parameter><decl><type><name>f32_t</name></type></decl></parameter>, <parameter><decl><type><name>f32_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>v_f32_t</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>v_f32_t</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>v_f32_t</name></type> <name>y</name></decl></parameter>,
<parameter><decl><type><name>v_u32_t</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator>
<name>v_f32_t</name><operator>)</operator><block>{<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>?</operator> <call><name>f</name> <argument_list>(<argument><expr><name><name>x1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>x2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>:</operator> <name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>?</operator> <call><name>f</name> <argument_list>(<argument><expr><name><name>x1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>x2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>:</operator> <name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,
<expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>?</operator> <call><name>f</name> <argument_list>(<argument><expr><name><name>x1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>x2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>:</operator> <name><name>y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>?</operator> <call><name>f</name> <argument_list>(<argument><expr><name><name>x1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>x2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>:</operator> <name><name>y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>}</block></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>v_lanes64</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_f64_t</name></type>
<name>v_f64</name> <parameter_list>(<parameter><decl><type><name>f64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>v_f64_t</name><operator>)</operator><block>{<expr><name>x</name></expr>, <expr><name>x</name></expr>}</block></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_u64_t</name></type>
<name>v_u64</name> <parameter_list>(<parameter><decl><type><name>u64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>v_u64_t</name><operator>)</operator><block>{<expr><name>x</name></expr>, <expr><name>x</name></expr>}</block></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_s64_t</name></type>
<name>v_s64</name> <parameter_list>(<parameter><decl><type><name>s64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>v_s64_t</name><operator>)</operator><block>{<expr><name>x</name></expr>, <expr><name>x</name></expr>}</block></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>f64_t</name></type>
<name>v_get_f64</name> <parameter_list>(<parameter><decl><type><name>v_f64_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>v_set_f64</name> <parameter_list>(<parameter><decl><type><name>v_f64_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>f64_t</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>x</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>v_any_u64</name> <parameter_list>(<parameter><decl><type><name>v_u64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><call><name>vpaddd_u64</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_u64_t</name></type>
<name>v_cond_u64</name> <parameter_list>(<parameter><decl><type><name>v_u64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_f64_t</name></type>
<name>v_abs_f64</name> <parameter_list>(<parameter><decl><type><name>v_f64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vabsq_f64</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_f64_t</name></type>
<name>v_fma_f64</name> <parameter_list>(<parameter><decl><type><name>v_f64_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>v_f64_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>v_f64_t</name></type> <name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vfmaq_f64</name> <argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_f64_t</name></type>
<name>v_round_f64</name> <parameter_list>(<parameter><decl><type><name>v_f64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vrndaq_f64</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_s64_t</name></type>
<name>v_round_s64</name> <parameter_list>(<parameter><decl><type><name>v_f64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vcvtaq_s64_f64</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_f64_t</name></type>
<name>v_to_f64_s64</name> <parameter_list>(<parameter><decl><type><name>v_s64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>v_f64_t</name><operator>)</operator><block>{<expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>}</block></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_f64_t</name></type>
<name>v_to_f64_u64</name> <parameter_list>(<parameter><decl><type><name>v_u64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>v_f64_t</name><operator>)</operator><block>{<expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>}</block></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_u64_t</name></type>
<name>v_as_u64_f64</name> <parameter_list>(<parameter><decl><type><name>v_f64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<union>union <block>{ <decl_stmt><decl><type><name>v_f64_t</name></type> <name>f</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>v_u64_t</name></type> <name>u</name></decl>;</decl_stmt> }</block> <decl><name>r</name> <init>= <expr><block>{<expr><name>x</name></expr>}</block></expr></init></decl>;</union>
<return>return <expr><name><name>r</name><operator>.</operator><name>u</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_f64_t</name></type>
<name>v_as_f64_u64</name> <parameter_list>(<parameter><decl><type><name>v_u64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<union>union <block>{ <decl_stmt><decl><type><name>v_u64_t</name></type> <name>u</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>v_f64_t</name></type> <name>f</name></decl>;</decl_stmt> }</block> <decl><name>r</name> <init>= <expr><block>{<expr><name>x</name></expr>}</block></expr></init></decl>;</union>
<return>return <expr><name><name>r</name><operator>.</operator><name>f</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_s64_t</name></type>
<name>v_as_s64_u64</name> <parameter_list>(<parameter><decl><type><name>v_u64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<union>union <block>{ <decl_stmt><decl><type><name>v_u64_t</name></type> <name>u</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>v_s64_t</name></type> <name>i</name></decl>;</decl_stmt> }</block> <decl><name>r</name> <init>= <expr><block>{<expr><name>x</name></expr>}</block></expr></init></decl>;</union>
<return>return <expr><name><name>r</name><operator>.</operator><name>i</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_u64_t</name></type>
<name>v_as_u64_s64</name> <parameter_list>(<parameter><decl><type><name>v_s64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<union>union <block>{ <decl_stmt><decl><type><name>v_s64_t</name></type> <name>i</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>v_u64_t</name></type> <name>u</name></decl>;</decl_stmt> }</block> <decl><name>r</name> <init>= <expr><block>{<expr><name>x</name></expr>}</block></expr></init></decl>;</union>
<return>return <expr><name><name>r</name><operator>.</operator><name>u</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_f64_t</name></type>
<name>v_lookup_f64</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>f64_t</name> <modifier>*</modifier></type><name>tab</name></decl></parameter>, <parameter><decl><type><name>v_u64_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>v_f64_t</name><operator>)</operator><block>{<expr><name><name>tab</name><index>[<expr><name><name>idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>, <expr><name><name>tab</name><index>[<expr><name><name>idx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>}</block></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_u64_t</name></type>
<name>v_lookup_u64</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>u64_t</name> <modifier>*</modifier></type><name>tab</name></decl></parameter>, <parameter><decl><type><name>v_u64_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>v_u64_t</name><operator>)</operator><block>{<expr><name><name>tab</name><index>[<expr><name><name>idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>, <expr><name><name>tab</name><index>[<expr><name><name>idx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>}</block></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_f64_t</name></type>
<name>v_call_f64</name> <parameter_list>(<parameter><function_decl><type><name>f64_t</name></type> (<modifier>*</modifier><name>f</name>) <parameter_list>(<parameter><decl><type><name>f64_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>v_f64_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>v_f64_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>v_u64_t</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>v_f64_t</name><operator>)</operator><block>{<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>?</operator> <call><name>f</name> <argument_list>(<argument><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>:</operator> <name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>?</operator> <call><name>f</name> <argument_list>(<argument><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>:</operator> <name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>}</block></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
