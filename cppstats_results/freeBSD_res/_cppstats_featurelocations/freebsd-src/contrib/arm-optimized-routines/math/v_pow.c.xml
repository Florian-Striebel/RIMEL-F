<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/arm-optimized-routines/math/v_pow.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v_math.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>V_SUPPORTED</name></expr></cpp:if>

<function><type><name>VPCS_ATTR</name>
<name>v_f64_t</name>
<name>V_NAME</name></type>(<name>pow</name>) <parameter_list>(<parameter><decl><type><name>v_f64_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>v_f64_t</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v_f64_t</name></type> <name>z</name></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>lane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>lane</name> <operator>&lt;</operator> <call><name>v_lanes64</name> <argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>lane</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>f64_t</name></type> <name>sx</name> <init>= <expr><call><name>v_get_f64</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>lane</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>f64_t</name></type> <name>sy</name> <init>= <expr><call><name>v_get_f64</name> <argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>lane</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>f64_t</name></type> <name>sz</name> <init>= <expr><call><name>pow</name> <argument_list>(<argument><expr><name>sx</name></expr></argument>, <argument><expr><name>sy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>v_set_f64</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><name>lane</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>z</name></expr>;</return>
</block_content>}</block></function>
<expr><name>VPCS_ALIAS</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
