<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/arm-optimized-routines/math/pow.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"math_config.h"</cpp:file></cpp:include>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T</name></cpp:macro> <cpp:value>__pow_log_data.tab</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name></cpp:macro> <cpp:value>__pow_log_data.poly</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ln2hi</name></cpp:macro> <cpp:value>__pow_log_data.ln2hi</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ln2lo</name></cpp:macro> <cpp:value>__pow_log_data.ln2lo</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>(1 &lt;&lt; POW_LOG_TABLE_BITS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFF</name></cpp:macro> <cpp:value>0x3fe6955500000000</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>top12</name> <parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>asuint64</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">52</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double_t</name></type>
<name>log_inline</name> <parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>ix</name></decl></parameter>, <parameter><decl><type><name>double_t</name> <modifier>*</modifier></type><name>tail</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>double_t</name></type> <name>z</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>invc</name></decl>, <decl><type ref="prev"/><name>logc</name></decl>, <decl><type ref="prev"/><name>logctail</name></decl>, <decl><type ref="prev"/><name>kd</name></decl>, <decl><type ref="prev"/><name>hi</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>lo</name></decl>, <decl><type ref="prev"/><name>lo1</name></decl>, <decl><type ref="prev"/><name>lo2</name></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>iz</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>




<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>ix</name> <operator>-</operator> <name>OFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">52</literal> <operator>-</operator> <name>POW_LOG_TABLE_BITS</name><operator>)</operator><operator>)</operator> <operator>%</operator> <name>N</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">52</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>iz</name> <operator>=</operator> <name>ix</name> <operator>-</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0xfffULL</literal> <operator>&lt;&lt;</operator> <literal type="number">52</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>asdouble</name> <argument_list>(<argument><expr><name>iz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>kd</name> <operator>=</operator> <operator>(</operator><name>double_t</name><operator>)</operator> <name>k</name></expr>;</expr_stmt>


<expr_stmt><expr><name>invc</name> <operator>=</operator> <name><name>T</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>invc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>logc</name> <operator>=</operator> <name><name>T</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>logc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>logctail</name> <operator>=</operator> <name><name>T</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>logctail</name></expr>;</expr_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_FAST_FMA</name></expr></cpp:if>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>invc</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>double_t</name></type> <name>zhi</name> <init>= <expr><call><name>asdouble</name> <argument_list>(<argument><expr><operator>(</operator><name>iz</name> <operator>+</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>-</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double_t</name></type> <name>zlo</name> <init>= <expr><name>z</name> <operator>-</operator> <name>zhi</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double_t</name></type> <name>rhi</name> <init>= <expr><name>zhi</name> <operator>*</operator> <name>invc</name> <operator>-</operator> <literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double_t</name></type> <name>rlo</name> <init>= <expr><name>zlo</name> <operator>*</operator> <name>invc</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>rhi</name> <operator>+</operator> <name>rlo</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name>t1</name> <operator>=</operator> <name>kd</name> <operator>*</operator> <name>Ln2hi</name> <operator>+</operator> <name>logc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <name>t1</name> <operator>+</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lo1</name> <operator>=</operator> <name>kd</name> <operator>*</operator> <name>Ln2lo</name> <operator>+</operator> <name>logctail</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lo2</name> <operator>=</operator> <name>t1</name> <operator>-</operator> <name>t2</name> <operator>+</operator> <name>r</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>double_t</name></type> <name>ar</name></decl>, <decl><type ref="prev"/><name>ar2</name></decl>, <decl><type ref="prev"/><name>ar3</name></decl>, <decl><type ref="prev"/><name>lo3</name></decl>, <decl><type ref="prev"/><name>lo4</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ar</name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ar2</name> <operator>=</operator> <name>r</name> <operator>*</operator> <name>ar</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ar3</name> <operator>=</operator> <name>r</name> <operator>*</operator> <name>ar2</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_FAST_FMA</name></expr></cpp:if>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <name>t2</name> <operator>+</operator> <name>ar2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lo3</name> <operator>=</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>ar</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><operator>-</operator><name>ar2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lo4</name> <operator>=</operator> <name>t2</name> <operator>-</operator> <name>hi</name> <operator>+</operator> <name>ar2</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>double_t</name></type> <name>arhi</name> <init>= <expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>rhi</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double_t</name></type> <name>arhi2</name> <init>= <expr><name>rhi</name> <operator>*</operator> <name>arhi</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <name>t2</name> <operator>+</operator> <name>arhi2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lo3</name> <operator>=</operator> <name>rlo</name> <operator>*</operator> <operator>(</operator><name>ar</name> <operator>+</operator> <name>arhi</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>lo4</name> <operator>=</operator> <name>t2</name> <operator>-</operator> <name>hi</name> <operator>+</operator> <name>arhi2</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>POW_LOG_POLY_ORDER</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:if>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>ar3</name>
<operator>*</operator> <operator>(</operator><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>r</name> <operator>*</operator> <name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>ar2</name> <operator>*</operator> <operator>(</operator><name><name>A</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>r</name> <operator>*</operator> <name><name>A</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name>ar2</name> <operator>*</operator> <operator>(</operator><name><name>A</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name>r</name> <operator>*</operator> <name><name>A</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>lo</name> <operator>=</operator> <name>lo1</name> <operator>+</operator> <name>lo2</name> <operator>+</operator> <name>lo3</name> <operator>+</operator> <name>lo4</name> <operator>+</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>hi</name> <operator>+</operator> <name>lo</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tail</name> <operator>=</operator> <name>hi</name> <operator>-</operator> <name>y</name> <operator>+</operator> <name>lo</name></expr>;</expr_stmt>
<return>return <expr><name>y</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>N</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>T</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>(1 &lt;&lt; EXP_TABLE_BITS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>InvLn2N</name></cpp:macro> <cpp:value>__exp_data.invln2N</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NegLn2hiN</name></cpp:macro> <cpp:value>__exp_data.negln2hiN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NegLn2loN</name></cpp:macro> <cpp:value>__exp_data.negln2loN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Shift</name></cpp:macro> <cpp:value>__exp_data.shift</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T</name></cpp:macro> <cpp:value>__exp_data.tab</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C2</name></cpp:macro> <cpp:value>__exp_data.poly[5 - EXP_POLY_ORDER]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C3</name></cpp:macro> <cpp:value>__exp_data.poly[6 - EXP_POLY_ORDER]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C4</name></cpp:macro> <cpp:value>__exp_data.poly[7 - EXP_POLY_ORDER]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C5</name></cpp:macro> <cpp:value>__exp_data.poly[8 - EXP_POLY_ORDER]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C6</name></cpp:macro> <cpp:value>__exp_data.poly[9 - EXP_POLY_ORDER]</cpp:value></cpp:define>








<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type>
<name>specialcase</name> <parameter_list>(<parameter><decl><type><name>double_t</name></type> <name>tmp</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>sbits</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>ki</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double_t</name></type> <name>scale</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ki</name> <operator>&amp;</operator> <literal type="number">0x80000000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>sbits</name> <operator>-=</operator> <literal type="number">1009ull</literal> <operator>&lt;&lt;</operator> <literal type="number">52</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>asdouble</name> <argument_list>(<argument><expr><name>sbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">0x1p1009</literal> <operator>*</operator> <operator>(</operator><name>scale</name> <operator>+</operator> <name>scale</name> <operator>*</operator> <name>tmp</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><call><name>check_oflow</name> <argument_list>(<argument><expr><call><name>eval_as_double</name> <argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sbits</name> <operator>+=</operator> <literal type="number">1022ull</literal> <operator>&lt;&lt;</operator> <literal type="number">52</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>asdouble</name> <argument_list>(<argument><expr><name>sbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>scale</name> <operator>+</operator> <name>scale</name> <operator>*</operator> <name>tmp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fabs</name> <argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1.0</literal></expr>)</condition>
<block>{<block_content>




<decl_stmt><decl><type><name>double_t</name></type> <name>hi</name></decl>, <decl><type ref="prev"/><name>lo</name></decl>, <decl><type ref="prev"/><name>one</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>one</name> <operator>=</operator> <operator>-</operator><literal type="number">1.0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>lo</name> <operator>=</operator> <name>scale</name> <operator>-</operator> <name>y</name> <operator>+</operator> <name>scale</name> <operator>*</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <name>one</name> <operator>+</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lo</name> <operator>=</operator> <name>one</name> <operator>-</operator> <name>hi</name> <operator>+</operator> <name>y</name> <operator>+</operator> <name>lo</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>eval_as_double</name> <argument_list>(<argument><expr><name>hi</name> <operator>+</operator> <name>lo</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>one</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>asdouble</name> <argument_list>(<argument><expr><name>sbits</name> <operator>&amp;</operator> <literal type="number">0x8000000000000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>force_eval_double</name> <argument_list>(<argument><expr><call><name>opt_barrier_double</name> <argument_list>(<argument><expr><literal type="number">0x1p</literal><operator>-</operator><literal type="number">1022</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0x1p</literal><operator>-</operator><literal type="number">1022</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">0x1p</literal><operator>-</operator><literal type="number">1022</literal> <operator>*</operator> <name>y</name></expr>;</expr_stmt>
<return>return <expr><call><name>check_uflow</name> <argument_list>(<argument><expr><call><name>eval_as_double</name> <argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGN_BIAS</name></cpp:macro> <cpp:value>(0x800 &lt;&lt; EXP_TABLE_BITS)</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type>
<name>exp_inline</name> <parameter_list>(<parameter><decl><type><name>double_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double_t</name></type> <name>xtail</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>sign_bias</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>abstop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ki</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>, <decl><type ref="prev"/><name>top</name></decl>, <decl><type ref="prev"/><name>sbits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double_t</name></type> <name>kd</name></decl>, <decl><type ref="prev"/><name>z</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>r2</name></decl>, <decl><type ref="prev"/><name>scale</name></decl>, <decl><type ref="prev"/><name>tail</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>abstop</name> <operator>=</operator> <call><name>top12</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x7ff</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name> <argument_list>(<argument><expr><name>abstop</name> <operator>-</operator> <call><name>top12</name> <argument_list>(<argument><expr><literal type="number">0x1p</literal><operator>-</operator><literal type="number">54</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <call><name>top12</name> <argument_list>(<argument><expr><literal type="number">512.0</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>top12</name> <argument_list>(<argument><expr><literal type="number">0x1p</literal><operator>-</operator><literal type="number">54</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>abstop</name> <operator>-</operator> <call><name>top12</name> <argument_list>(<argument><expr><literal type="number">0x1p</literal><operator>-</operator><literal type="number">54</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0x80000000</literal></expr>)</condition>
<block>{<block_content>


<decl_stmt><decl><type><name>double_t</name></type> <name>one</name> <init>= <expr><ternary><condition><expr><name>WANT_ROUNDING</name></expr> ?</condition><then> <expr><literal type="number">1.0</literal> <operator>+</operator> <name>x</name></expr> </then><else>: <expr><literal type="number">1.0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>sign_bias</name></expr> ?</condition><then> <expr><operator>-</operator><name>one</name></expr> </then><else>: <expr><name>one</name></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>abstop</name> <operator>&gt;=</operator> <call><name>top12</name> <argument_list>(<argument><expr><literal type="number">1024.0</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>asuint64</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">63</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>__math_uflow</name> <argument_list>(<argument><expr><name>sign_bias</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>__math_oflow</name> <argument_list>(<argument><expr><name>sign_bias</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>abstop</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>z</name> <operator>=</operator> <name>InvLn2N</name> <operator>*</operator> <name>x</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TOINT_INTRINSICS</name></expr></cpp:if>
<expr_stmt><expr><name>kd</name> <operator>=</operator> <call><name>roundtoint</name> <argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ki</name> <operator>=</operator> <call><name>converttoint</name> <argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>EXP_USE_TOINT_NARROW</name></expr></cpp:elif>

<expr_stmt><expr><name>kd</name> <operator>=</operator> <call><name>eval_as_double</name> <argument_list>(<argument><expr><name>z</name> <operator>+</operator> <name>Shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ki</name> <operator>=</operator> <call><name>asuint64</name> <argument_list>(<argument><expr><name>kd</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>kd</name> <operator>=</operator> <operator>(</operator><name>double_t</name><operator>)</operator> <operator>(</operator><name>int32_t</name><operator>)</operator> <name>ki</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>kd</name> <operator>=</operator> <call><name>eval_as_double</name> <argument_list>(<argument><expr><name>z</name> <operator>+</operator> <name>Shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ki</name> <operator>=</operator> <call><name>asuint64</name> <argument_list>(<argument><expr><name>kd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>kd</name> <operator>-=</operator> <name>Shift</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>x</name> <operator>+</operator> <name>kd</name> <operator>*</operator> <name>NegLn2hiN</name> <operator>+</operator> <name>kd</name> <operator>*</operator> <name>NegLn2loN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>+=</operator> <name>xtail</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>ki</name> <operator>%</operator> <name>N</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>top</name> <operator>=</operator> <operator>(</operator><name>ki</name> <operator>+</operator> <name>sign_bias</name><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">52</literal> <operator>-</operator> <name>EXP_TABLE_BITS</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tail</name> <operator>=</operator> <call><name>asdouble</name> <argument_list>(<argument><expr><name><name>T</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sbits</name> <operator>=</operator> <name><name>T</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>top</name></expr>;</expr_stmt>


<expr_stmt><expr><name>r2</name> <operator>=</operator> <name>r</name> <operator>*</operator> <name>r</name></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EXP_POLY_ORDER</name> <operator>==</operator> <literal type="number">4</literal></expr></cpp:if>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tail</name> <operator>+</operator> <name>r</name> <operator>+</operator> <name>r2</name> <operator>*</operator> <name>C2</name> <operator>+</operator> <name>r</name> <operator>*</operator> <name>r2</name> <operator>*</operator> <operator>(</operator><name>C3</name> <operator>+</operator> <name>r</name> <operator>*</operator> <name>C4</name><operator>)</operator></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>EXP_POLY_ORDER</name> <operator>==</operator> <literal type="number">5</literal></expr></cpp:elif>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tail</name> <operator>+</operator> <name>r</name> <operator>+</operator> <name>r2</name> <operator>*</operator> <operator>(</operator><name>C2</name> <operator>+</operator> <name>r</name> <operator>*</operator> <name>C3</name><operator>)</operator> <operator>+</operator> <name>r2</name> <operator>*</operator> <name>r2</name> <operator>*</operator> <operator>(</operator><name>C4</name> <operator>+</operator> <name>r</name> <operator>*</operator> <name>C5</name><operator>)</operator></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>EXP_POLY_ORDER</name> <operator>==</operator> <literal type="number">6</literal></expr></cpp:elif>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tail</name> <operator>+</operator> <name>r</name> <operator>+</operator> <name>r2</name> <operator>*</operator> <operator>(</operator><literal type="number">0.5</literal> <operator>+</operator> <name>r</name> <operator>*</operator> <name>C3</name><operator>)</operator> <operator>+</operator> <name>r2</name> <operator>*</operator> <name>r2</name> <operator>*</operator> <operator>(</operator><name>C4</name> <operator>+</operator> <name>r</name> <operator>*</operator> <name>C5</name> <operator>+</operator> <name>r2</name> <operator>*</operator> <name>C6</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name> <argument_list>(<argument><expr><name>abstop</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>specialcase</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>sbits</name></expr></argument>, <argument><expr><name>ki</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>asdouble</name> <argument_list>(<argument><expr><name>sbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><call><name>eval_as_double</name> <argument_list>(<argument><expr><name>scale</name> <operator>+</operator> <name>scale</name> <operator>*</operator> <name>tmp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>checkint</name> <parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>iy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><name>iy</name> <operator>&gt;&gt;</operator> <literal type="number">52</literal> <operator>&amp;</operator> <literal type="number">0x7ff</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&lt;</operator> <literal type="number">0x3ff</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&gt;</operator> <literal type="number">0x3ff</literal> <operator>+</operator> <literal type="number">52</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>iy</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">0x3ff</literal> <operator>+</operator> <literal type="number">52</literal> <operator>-</operator> <name>e</name><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>iy</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">0x3ff</literal> <operator>+</operator> <literal type="number">52</literal> <operator>-</operator> <name>e</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>zeroinfnan</name> <parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>asuint64</name> <argument_list>(<argument><expr><name>INFINITY</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>double</name></type>
<name>pow</name> <parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sign_bias</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ix</name></decl>, <decl><type ref="prev"/><name>iy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>topx</name></decl>, <decl><type ref="prev"/><name>topy</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ix</name> <operator>=</operator> <call><name>asuint64</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iy</name> <operator>=</operator> <call><name>asuint64</name> <argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>topx</name> <operator>=</operator> <call><name>top12</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>topy</name> <operator>=</operator> <call><name>top12</name> <argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name> <argument_list>(<argument><expr><name>topx</name> <operator>-</operator> <literal type="number">0x001</literal> <operator>&gt;=</operator> <literal type="number">0x7ff</literal> <operator>-</operator> <literal type="number">0x001</literal>
<operator>||</operator> <operator>(</operator><name>topy</name> <operator>&amp;</operator> <literal type="number">0x7ff</literal><operator>)</operator> <operator>-</operator> <literal type="number">0x3be</literal> <operator>&gt;=</operator> <literal type="number">0x43e</literal> <operator>-</operator> <literal type="number">0x3be</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><call><name>unlikely</name> <argument_list>(<argument><expr><call><name>zeroinfnan</name> <argument_list>(<argument><expr><name>iy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>*</operator> <name>iy</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><call><name>issignaling_inline</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>x</name> <operator>+</operator> <name>y</name></expr> </then><else>: <expr><literal type="number">1.0</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ix</name> <operator>==</operator> <call><name>asuint64</name> <argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><call><name>issignaling_inline</name> <argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>x</name> <operator>+</operator> <name>y</name></expr> </then><else>: <expr><literal type="number">1.0</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>*</operator> <name>ix</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>asuint64</name> <argument_list>(<argument><expr><name>INFINITY</name></expr></argument>)</argument_list></call>
<operator>||</operator> <literal type="number">2</literal> <operator>*</operator> <name>iy</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>asuint64</name> <argument_list>(<argument><expr><name>INFINITY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>x</name> <operator>+</operator> <name>y</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>*</operator> <name>ix</name> <operator>==</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>asuint64</name> <argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1.0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>ix</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>asuint64</name> <argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>!</operator><operator>(</operator><name>iy</name> <operator>&gt;&gt;</operator> <literal type="number">63</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0.0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>y</name> <operator>*</operator> <name>y</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name> <argument_list>(<argument><expr><call><name>zeroinfnan</name> <argument_list>(<argument><expr><name>ix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>double_t</name></type> <name>x2</name> <init>= <expr><name>x</name> <operator>*</operator> <name>x</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ix</name> <operator>&gt;&gt;</operator> <literal type="number">63</literal> <operator>&amp;&amp;</operator> <call><name>checkint</name> <argument_list>(<argument><expr><name>iy</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>x2</name> <operator>=</operator> <operator>-</operator><name>x2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sign_bias</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>WANT_ERRNO</name> <operator>&amp;&amp;</operator> <literal type="number">2</literal> <operator>*</operator> <name>ix</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>iy</name> <operator>&gt;&gt;</operator> <literal type="number">63</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>__math_divzero</name> <argument_list>(<argument><expr><name>sign_bias</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><ternary><condition><expr><name>iy</name> <operator>&gt;&gt;</operator> <literal type="number">63</literal></expr> ?</condition><then> <expr><call><name>opt_barrier_double</name> <argument_list>(<argument><expr><literal type="number">1</literal> <operator>/</operator> <name>x2</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>x2</name></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ix</name> <operator>&gt;&gt;</operator> <literal type="number">63</literal></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>yint</name> <init>= <expr><call><name>checkint</name> <argument_list>(<argument><expr><name>iy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>yint</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>__math_invalid</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>yint</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sign_bias</name> <operator>=</operator> <name>SIGN_BIAS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ix</name> <operator>&amp;=</operator> <literal type="number">0x7fffffffffffffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>topx</name> <operator>&amp;=</operator> <literal type="number">0x7ff</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>topy</name> <operator>&amp;</operator> <literal type="number">0x7ff</literal><operator>)</operator> <operator>-</operator> <literal type="number">0x3be</literal> <operator>&gt;=</operator> <literal type="number">0x43e</literal> <operator>-</operator> <literal type="number">0x3be</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ix</name> <operator>==</operator> <call><name>asuint64</name> <argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1.0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>topy</name> <operator>&amp;</operator> <literal type="number">0x7ff</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">0x3be</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>WANT_ROUNDING</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name>ix</name> <operator>&gt;</operator> <call><name>asuint64</name> <argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1.0</literal> <operator>+</operator> <name>y</name></expr> </then><else>: <expr><literal type="number">1.0</literal> <operator>-</operator> <name>y</name></expr></else></ternary></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">1.0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>ix</name> <operator>&gt;</operator> <call><name>asuint64</name> <argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>(</operator><name>topy</name> <operator>&lt;</operator> <literal type="number">0x800</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>__math_oflow</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>__math_uflow</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>topx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><name>ix</name> <operator>=</operator> <call><name>asuint64</name> <argument_list>(<argument><expr><call><name>opt_barrier_double</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0x1p52</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ix</name> <operator>&amp;=</operator> <literal type="number">0x7fffffffffffffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ix</name> <operator>-=</operator> <literal type="number">52ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">52</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>double_t</name></type> <name>lo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double_t</name></type> <name>hi</name> <init>= <expr><call><name>log_inline</name> <argument_list>(<argument><expr><name>ix</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double_t</name></type> <name>ehi</name></decl>, <decl><type ref="prev"/><name>elo</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_FAST_FMA</name></expr></cpp:if>
<expr_stmt><expr><name>ehi</name> <operator>=</operator> <name>y</name> <operator>*</operator> <name>hi</name></expr>;</expr_stmt>
<expr_stmt><expr><name>elo</name> <operator>=</operator> <name>y</name> <operator>*</operator> <name>lo</name> <operator>+</operator> <call><name>fma</name> <argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>, <argument><expr><operator>-</operator><name>ehi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>double_t</name></type> <name>yhi</name> <init>= <expr><call><name>asdouble</name> <argument_list>(<argument><expr><name>iy</name> <operator>&amp;</operator> <operator>-</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">27</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double_t</name></type> <name>ylo</name> <init>= <expr><name>y</name> <operator>-</operator> <name>yhi</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double_t</name></type> <name>lhi</name> <init>= <expr><call><name>asdouble</name> <argument_list>(<argument><expr><call><name>asuint64</name> <argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>-</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">27</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double_t</name></type> <name>llo</name> <init>= <expr><name>hi</name> <operator>-</operator> <name>lhi</name> <operator>+</operator> <name>lo</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ehi</name> <operator>=</operator> <name>yhi</name> <operator>*</operator> <name>lhi</name></expr>;</expr_stmt>
<expr_stmt><expr><name>elo</name> <operator>=</operator> <name>ylo</name> <operator>*</operator> <name>lhi</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>llo</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>exp_inline</name> <argument_list>(<argument><expr><name>ehi</name></expr></argument>, <argument><expr><name>elo</name></expr></argument>, <argument><expr><name>sign_bias</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_GLIBC_ABI</name></expr></cpp:if>
<macro><name>strong_alias</name> <argument_list>(<argument>pow</argument>, <argument>__pow_finite</argument>)</argument_list></macro>
<macro><name>hidden_alias</name> <argument_list>(<argument>pow</argument>, <argument>__ieee754_pow</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LDBL_MANT_DIG</name> <operator>==</operator> <literal type="number">53</literal></expr></cpp:if>
<function><type><name>long</name> <name>double</name></type> <name>powl</name> <parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>pow</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
