<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/arm-optimized-routines/math/erff.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"math_config.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TwoOverSqrtPiMinusOne</name></cpp:macro> <cpp:value>0x1.06eba8p-3f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name></cpp:macro> <cpp:value>__erff_data.erff_poly_A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B</name></cpp:macro> <cpp:value>__erff_data.erff_poly_B</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>top12</name> <parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>asuint</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">20</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>float</name></type>
<name>erff</name> <parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>, <decl><type ref="prev"/><name>u</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>ix</name> <init>= <expr><call><name>asuint</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sign</name> <init>= <expr><name>ix</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ia12</name> <init>= <expr><call><name>top12</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x7ff</literal></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>ia12</name> <operator>&lt;</operator> <literal type="number">0x3f6</literal></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>unlikely</name> <argument_list>(<argument><expr><name>ia12</name> <operator>&lt;</operator> <literal type="number">0x318</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name> <argument_list>(<argument><expr><name>ia12</name> <operator>&lt;</operator> <literal type="number">0x040</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><call><name>fmaf</name> <argument_list>(<argument><expr><name>TwoOverSqrtPiMinusOne</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>check_uflowf</name> <argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>x</name> <operator>+</operator> <name>TwoOverSqrtPiMinusOne</name> <operator>*</operator> <name>x</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x2</name> <operator>=</operator> <name>x</name> <operator>*</operator> <name>x</name></expr>;</expr_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fmaf</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fmaf</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fmaf</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fmaf</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fmaf</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fmaf</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>ia12</name> <operator>&lt;</operator> <literal type="number">0x408</literal></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>a</name> <init>= <expr><call><name>fabsf</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fmaf</name> <argument_list>(<argument><expr><name><name>B</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>B</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>fmaf</name> <argument_list>(<argument><expr><name><name>B</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>B</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x2</name> <operator>=</operator> <name>x</name> <operator>*</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fmaf</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fmaf</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>B</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fmaf</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fmaf</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fmaf</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>expf</name> <argument_list>(<argument><expr><operator>-</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>-</operator><literal type="number">1.0f</literal> <operator>+</operator> <name>r</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>-</operator> <name>r</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>unlikely</name> <argument_list>(<argument><expr><name>ia12</name> <operator>&gt;=</operator> <literal type="number">0x7f8</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1.f</literal> <operator>-</operator> <operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>ix</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1.f</literal> <operator>/</operator> <name>x</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>-</operator><literal type="number">1.0f</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
</unit>
