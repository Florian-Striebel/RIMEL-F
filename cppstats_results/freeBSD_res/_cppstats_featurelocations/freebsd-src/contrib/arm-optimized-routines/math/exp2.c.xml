<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/arm-optimized-routines/math/exp2.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"math_config.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>(1 &lt;&lt; EXP_TABLE_BITS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Shift</name></cpp:macro> <cpp:value>__exp_data.exp2_shift</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T</name></cpp:macro> <cpp:value>__exp_data.tab</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C1</name></cpp:macro> <cpp:value>__exp_data.exp2_poly[0]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C2</name></cpp:macro> <cpp:value>__exp_data.exp2_poly[1]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C3</name></cpp:macro> <cpp:value>__exp_data.exp2_poly[2]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C4</name></cpp:macro> <cpp:value>__exp_data.exp2_poly[3]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C5</name></cpp:macro> <cpp:value>__exp_data.exp2_poly[4]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C6</name></cpp:macro> <cpp:value>__exp_data.exp2_poly[5]</cpp:value></cpp:define>








<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type>
<name>specialcase</name> <parameter_list>(<parameter><decl><type><name>double_t</name></type> <name>tmp</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>sbits</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>ki</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double_t</name></type> <name>scale</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ki</name> <operator>&amp;</operator> <literal type="number">0x80000000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>sbits</name> <operator>-=</operator> <literal type="number">1ull</literal> <operator>&lt;&lt;</operator> <literal type="number">52</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>asdouble</name> <argument_list>(<argument><expr><name>sbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>scale</name> <operator>+</operator> <name>scale</name> <operator>*</operator> <name>tmp</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><call><name>check_oflow</name> <argument_list>(<argument><expr><call><name>eval_as_double</name> <argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sbits</name> <operator>+=</operator> <literal type="number">1022ull</literal> <operator>&lt;&lt;</operator> <literal type="number">52</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>asdouble</name> <argument_list>(<argument><expr><name>sbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>scale</name> <operator>+</operator> <name>scale</name> <operator>*</operator> <name>tmp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">1.0</literal></expr>)</condition>
<block>{<block_content>




<decl_stmt><decl><type><name>double_t</name></type> <name>hi</name></decl>, <decl><type ref="prev"/><name>lo</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lo</name> <operator>=</operator> <name>scale</name> <operator>-</operator> <name>y</name> <operator>+</operator> <name>scale</name> <operator>*</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>+</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lo</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>-</operator> <name>hi</name> <operator>+</operator> <name>y</name> <operator>+</operator> <name>lo</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>eval_as_double</name> <argument_list>(<argument><expr><name>hi</name> <operator>+</operator> <name>lo</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>WANT_ROUNDING</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>==</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>force_eval_double</name> <argument_list>(<argument><expr><call><name>opt_barrier_double</name> <argument_list>(<argument><expr><literal type="number">0x1p</literal><operator>-</operator><literal type="number">1022</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0x1p</literal><operator>-</operator><literal type="number">1022</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">0x1p</literal><operator>-</operator><literal type="number">1022</literal> <operator>*</operator> <name>y</name></expr>;</expr_stmt>
<return>return <expr><call><name>check_uflow</name> <argument_list>(<argument><expr><call><name>eval_as_double</name> <argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>top12</name> <parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>asuint64</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">52</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>double</name></type>
<name>exp2</name> <parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>abstop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ki</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>, <decl><type ref="prev"/><name>top</name></decl>, <decl><type ref="prev"/><name>sbits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double_t</name></type> <name>kd</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>r2</name></decl>, <decl><type ref="prev"/><name>scale</name></decl>, <decl><type ref="prev"/><name>tail</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>abstop</name> <operator>=</operator> <call><name>top12</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x7ff</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name> <argument_list>(<argument><expr><name>abstop</name> <operator>-</operator> <call><name>top12</name> <argument_list>(<argument><expr><literal type="number">0x1p</literal><operator>-</operator><literal type="number">54</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <call><name>top12</name> <argument_list>(<argument><expr><literal type="number">512.0</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>top12</name> <argument_list>(<argument><expr><literal type="number">0x1p</literal><operator>-</operator><literal type="number">54</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>abstop</name> <operator>-</operator> <call><name>top12</name> <argument_list>(<argument><expr><literal type="number">0x1p</literal><operator>-</operator><literal type="number">54</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0x80000000</literal></expr>)</condition><block type="pseudo"><block_content>


<return>return <expr><ternary><condition><expr><name>WANT_ROUNDING</name></expr> ?</condition><then> <expr><literal type="number">1.0</literal> <operator>+</operator> <name>x</name></expr> </then><else>: <expr><literal type="number">1.0</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>abstop</name> <operator>&gt;=</operator> <call><name>top12</name> <argument_list>(<argument><expr><literal type="number">1024.0</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>asuint64</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>asuint64</name> <argument_list>(<argument><expr><operator>-</operator><name>INFINITY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0.0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>abstop</name> <operator>&gt;=</operator> <call><name>top12</name> <argument_list>(<argument><expr><name>INFINITY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1.0</literal> <operator>+</operator> <name>x</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>asuint64</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">63</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>__math_oflow</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>asuint64</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <call><name>asuint64</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1075.0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>__math_uflow</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>*</operator> <call><name>asuint64</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>asuint64</name> <argument_list>(<argument><expr><literal type="number">928.0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>abstop</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>kd</name> <operator>=</operator> <call><name>eval_as_double</name> <argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>Shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ki</name> <operator>=</operator> <call><name>asuint64</name> <argument_list>(<argument><expr><name>kd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>kd</name> <operator>-=</operator> <name>Shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>x</name> <operator>-</operator> <name>kd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>ki</name> <operator>%</operator> <name>N</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>top</name> <operator>=</operator> <name>ki</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">52</literal> <operator>-</operator> <name>EXP_TABLE_BITS</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tail</name> <operator>=</operator> <call><name>asdouble</name> <argument_list>(<argument><expr><name><name>T</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sbits</name> <operator>=</operator> <name><name>T</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>top</name></expr>;</expr_stmt>


<expr_stmt><expr><name>r2</name> <operator>=</operator> <name>r</name> <operator>*</operator> <name>r</name></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EXP2_POLY_ORDER</name> <operator>==</operator> <literal type="number">4</literal></expr></cpp:if>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tail</name> <operator>+</operator> <name>r</name> <operator>*</operator> <name>C1</name> <operator>+</operator> <name>r2</name> <operator>*</operator> <name>C2</name> <operator>+</operator> <name>r</name> <operator>*</operator> <name>r2</name> <operator>*</operator> <operator>(</operator><name>C3</name> <operator>+</operator> <name>r</name> <operator>*</operator> <name>C4</name><operator>)</operator></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>EXP2_POLY_ORDER</name> <operator>==</operator> <literal type="number">5</literal></expr></cpp:elif>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tail</name> <operator>+</operator> <name>r</name> <operator>*</operator> <name>C1</name> <operator>+</operator> <name>r2</name> <operator>*</operator> <operator>(</operator><name>C2</name> <operator>+</operator> <name>r</name> <operator>*</operator> <name>C3</name><operator>)</operator> <operator>+</operator> <name>r2</name> <operator>*</operator> <name>r2</name> <operator>*</operator> <operator>(</operator><name>C4</name> <operator>+</operator> <name>r</name> <operator>*</operator> <name>C5</name><operator>)</operator></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>EXP2_POLY_ORDER</name> <operator>==</operator> <literal type="number">6</literal></expr></cpp:elif>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tail</name> <operator>+</operator> <name>r</name> <operator>*</operator> <name>C1</name> <operator>+</operator> <name>r2</name> <operator>*</operator> <operator>(</operator><literal type="number">0.5</literal> <operator>+</operator> <name>r</name> <operator>*</operator> <name>C3</name><operator>)</operator> <operator>+</operator> <name>r2</name> <operator>*</operator> <name>r2</name> <operator>*</operator> <operator>(</operator><name>C4</name> <operator>+</operator> <name>r</name> <operator>*</operator> <name>C5</name> <operator>+</operator> <name>r2</name> <operator>*</operator> <name>C6</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name> <argument_list>(<argument><expr><name>abstop</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>specialcase</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>sbits</name></expr></argument>, <argument><expr><name>ki</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>asdouble</name> <argument_list>(<argument><expr><name>sbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><call><name>eval_as_double</name> <argument_list>(<argument><expr><name>scale</name> <operator>+</operator> <name>scale</name> <operator>*</operator> <name>tmp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_GLIBC_ABI</name></expr></cpp:if>
<macro><name>strong_alias</name> <argument_list>(<argument>exp2</argument>, <argument>__exp2_finite</argument>)</argument_list></macro>
<macro><name>hidden_alias</name> <argument_list>(<argument>exp2</argument>, <argument>__ieee754_exp2</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LDBL_MANT_DIG</name> <operator>==</operator> <literal type="number">53</literal></expr></cpp:if>
<function><type><name>long</name> <name>double</name></type> <name>exp2l</name> <parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>exp2</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
