<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/arm-optimized-routines/math/test/rtest/intern.h">






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>mathtest_intern_h</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mathtest_intern_h</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mpfr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mpc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wrappers.h"</cpp:file></cpp:include>


<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>funcptr</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>


<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>testfunc1</name>)<parameter_list>(<parameter><decl><type><name>mpfr_t</name></type></decl></parameter>, <parameter><decl><type><name>mpfr_t</name></type></decl></parameter>, <parameter><decl><type><name>mpfr_rnd_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>testfunc2</name>)<parameter_list>(<parameter><decl><type><name>mpfr_t</name></type></decl></parameter>, <parameter><decl><type><name>mpfr_t</name></type></decl></parameter>, <parameter><decl><type><name>mpfr_t</name></type></decl></parameter>, <parameter><decl><type><name>mpfr_rnd_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>testrred</name>)<parameter_list>(<parameter><decl><type><name>mpfr_t</name></type></decl></parameter>, <parameter><decl><type><name>mpfr_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>char</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>testsemi1</name>)<parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>char</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>testsemi2</name>)<parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>char</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>testsemi2f</name>)<parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>char</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>testldexp</name>)<parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>char</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>testfrexp</name>)<parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>char</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>testmodf</name>)<parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>char</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>testclassify</name>)<parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>char</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>testclassifyf</name>)<parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>testfunc1c</name>)<parameter_list>(<parameter><decl><type><name>mpc_t</name></type></decl></parameter>, <parameter><decl><type><name>mpc_t</name></type></decl></parameter>, <parameter><decl><type><name>mpc_rnd_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>testfunc2c</name>)<parameter_list>(<parameter><decl><type><name>mpc_t</name></type></decl></parameter>, <parameter><decl><type><name>mpc_t</name></type></decl></parameter>, <parameter><decl><type><name>mpc_t</name></type></decl></parameter>, <parameter><decl><type><name>mpc_rnd_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>testfunc1cr</name>)<parameter_list>(<parameter><decl><type><name>mpfr_t</name></type></decl></parameter>, <parameter><decl><type><name>mpc_t</name></type></decl></parameter>, <parameter><decl><type><name>mpfr_rnd_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>


<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>casegen</name>)<parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>




<enum>enum <block>{
<decl><name>args1</name></decl>,
<decl><name>args1f</name></decl>,
<decl><name>args2</name></decl>,
<decl><name>args2f</name></decl>,
<decl><name>rred</name></decl>,
<decl><name>rredf</name></decl>,
<decl><name>semi1</name></decl>,
<decl><name>semi1f</name></decl>,
<decl><name>semi2</name></decl>,
<decl><name>semi2f</name></decl>,
<decl><name>t_ldexp</name></decl>,
<decl><name>t_ldexpf</name></decl>,
<decl><name>t_frexp</name></decl>,
<decl><name>t_frexpf</name></decl>,
<decl><name>t_modf</name></decl>,
<decl><name>t_modff</name></decl>,
<decl><name>classify</name></decl>,
<decl><name>classifyf</name></decl>,
<decl><name>compare</name></decl>,
<decl><name>comparef</name></decl>,

<decl><name>args1c</name></decl>,
<decl><name>args2c</name></decl>,
<decl><name>args1fc</name></decl>,
<decl><name>args2fc</name></decl>,
<decl><name>args1cr</name></decl>,
<decl><name>args1fcr</name></decl>
}</block>;</enum>

<typedef>typedef <type><name><name>struct</name> <name>__testable</name></name></type> <name>Testable</name>;</typedef>
<struct>struct <name>__testable</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>funcptr</name></type> <name>func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wrapperfunc</name></type> <name><name>wrappers</name><index>[<expr><name>MAXWRAPPERS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>casegen</name></type> <name>cases</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>caseparam1</name></decl>, <decl><type ref="prev"/><name>caseparam2</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <name>Testable</name></type> <name><name>functions</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>int</name></type> <name>nfunctions</name></decl>;</decl_stmt>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>init_pi</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>nargs_</name><parameter_list>(<parameter><decl><type><name>Testable</name><modifier>*</modifier></type> <name>f</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
