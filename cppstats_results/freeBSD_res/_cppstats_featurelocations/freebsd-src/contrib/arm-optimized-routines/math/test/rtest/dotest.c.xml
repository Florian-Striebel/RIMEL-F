<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/arm-optimized-routines/math/test/rtest/dotest.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"semi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"intern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"random.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MPFR_PREC</name></cpp:macro> <cpp:value>96</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>lib_fo</name></decl>, <decl><type ref="prev"/><name>lib_no_arith</name></decl>, <decl><type ref="prev"/><name>ntests</name></decl>;</decl_stmt>




<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cases_biased</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cases_biased_positive</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cases_biased_float</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cases_uniform</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cases_uniform_positive</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cases_uniform_float</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cases_uniform_float_positive</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>log_cases</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>log_cases_float</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>log1p_cases</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>log1p_cases_float</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>minmax_cases</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>minmax_cases_float</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>atan2_cases</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>atan2_cases_float</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pow_cases</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pow_cases_float</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>rred_cases</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>rred_cases_float</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cases_semi1</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cases_semi1_float</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cases_semi2</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cases_semi2_float</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cases_ldexp</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cases_ldexp_float</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>complex_cases_uniform</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>complex_cases_uniform_float</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>complex_cases_biased</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>complex_cases_biased_float</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>complex_log_cases</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>complex_log_cases_float</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>complex_pow_cases</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>complex_pow_cases_float</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>complex_arithmetic_cases</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>complex_arithmetic_cases_float</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>, <parameter><decl><type><name>uint32</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>uint32</name></type> <name>doubletop</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint32</name></type> <name>floatval</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale</name></decl></parameter>)</parameter_list>;</function_decl>





<function><type><specifier>static</specifier> <name>void</name></type> <name>set_mpfr_d</name><parameter_list>(<parameter><decl><type><name>mpfr_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>hl</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>h</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <name>l</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>exp</name> <init>= <expr><operator>(</operator><name>hl</name> <operator>&gt;&gt;</operator> <literal type="number">52</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7ff</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>mantissa</name> <init>= <expr><name>hl</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">52</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>hl</name> <operator>&gt;&gt;</operator> <literal type="number">63</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>==</operator> <literal type="number">0x7ff</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mantissa</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mpfr_set_inf</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mpfr_set_nan</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>exp</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mantissa</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mpfr_set_ui</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GMP_RNDN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_setsign</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>sign</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>GMP_RNDN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mantissa</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">52</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>exp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>mpfr_set_sj_2exp</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>mantissa</name> <operator>*</operator> <name>sign</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>exp</name> <operator>-</operator> <literal type="number">0x3ff</literal> <operator>-</operator> <literal type="number">52</literal></expr></argument>, <argument><expr><name>GMP_RNDN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>set_mpfr_f</name><parameter_list>(<parameter><decl><type><name>mpfr_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32</name></type> <name>exp</name> <init>= <expr><operator>(</operator><name>f</name> <operator>&gt;&gt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32</name></type> <name>mantissa</name> <init>= <expr><name>f</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>f</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mantissa</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mpfr_set_inf</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mpfr_set_nan</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>exp</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mantissa</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mpfr_set_ui</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GMP_RNDN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_setsign</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>sign</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>GMP_RNDN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mantissa</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>exp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>mpfr_set_sj_2exp</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>mantissa</name> <operator>*</operator> <name>sign</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>exp</name> <operator>-</operator> <literal type="number">0x7f</literal> <operator>-</operator> <literal type="number">23</literal></expr></argument>, <argument><expr><name>GMP_RNDN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>set_mpc_d</name><parameter_list>(<parameter><decl><type><name>mpc_t</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>rh</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>rl</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>ih</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>il</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mpfr_t</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mpfr_init2</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>MPFR_PREC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_init2</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>MPFR_PREC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_mpfr_d</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>rh</name></expr></argument>, <argument><expr><name>rl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_mpfr_d</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>ih</name></expr></argument>, <argument><expr><name>il</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpc_set_fr_fr</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>MPC_RNDNN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_clear</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_clear</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>set_mpc_f</name><parameter_list>(<parameter><decl><type><name>mpc_t</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mpfr_t</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mpfr_init2</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>MPFR_PREC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_init2</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>MPFR_PREC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_mpfr_f</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_mpfr_f</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpc_set_fr_fr</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>MPC_RNDNN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_clear</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_clear</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>get_mpfr_d</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mpfr_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sign</name></decl>, <decl><type ref="prev"/><name>expfield</name></decl>, <decl><type ref="prev"/><name>mantfield</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mpfr_t</name></type> <name>significand</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>exp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mpfr_nan_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <literal type="number">0x7ff80000</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>extra</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <ternary><condition><expr><call><name>mpfr_signbit</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0x80000000U</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mpfr_inf_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <literal type="number">0x7ff00000</literal> <operator>|</operator> <name>sign</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>extra</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mpfr_zero_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <literal type="number">0x00000000</literal> <operator>|</operator> <name>sign</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>extra</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mpfr_init2</name><argument_list>(<argument><expr><name>significand</name></expr></argument>, <argument><expr><name>MPFR_PREC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_set</name><argument_list>(<argument><expr><name>significand</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>GMP_RNDN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>exp</name> <operator>=</operator> <call><name>mpfr_get_exp</name><argument_list>(<argument><expr><name>significand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_set_exp</name><argument_list>(<argument><expr><name>significand</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>&gt;</operator> <literal type="number">0x400</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <literal type="number">0x7ff00000</literal> <operator>|</operator> <name>sign</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>extra</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_clear</name><argument_list>(<argument><expr><name>significand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">0x3fe</literal> <operator>||</operator> <call><name>mpfr_zero_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>exp</name> <operator>=</operator> <operator>-</operator><literal type="number">0x3fd</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>expfield</name> <operator>=</operator> <name>exp</name> <operator>+</operator> <literal type="number">0x3fd</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpfr_div_2si</name><argument_list>(<argument><expr><name>significand</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>exp</name> <operator>-</operator> <literal type="number">21</literal></expr></argument>, <argument><expr><name>GMP_RNDN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_abs</name><argument_list>(<argument><expr><name>significand</name></expr></argument>, <argument><expr><name>significand</name></expr></argument>, <argument><expr><name>GMP_RNDN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mantfield</name> <operator>=</operator> <call><name>mpfr_get_ui</name><argument_list>(<argument><expr><name>significand</name></expr></argument>, <argument><expr><name>GMP_RNDZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <name>sign</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>expfield</name> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>+</operator> <name>mantfield</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_sub_ui</name><argument_list>(<argument><expr><name>significand</name></expr></argument>, <argument><expr><name>significand</name></expr></argument>, <argument><expr><name>mantfield</name></expr></argument>, <argument><expr><name>GMP_RNDN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_mul_2ui</name><argument_list>(<argument><expr><name>significand</name></expr></argument>, <argument><expr><name>significand</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>GMP_RNDN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mantfield</name> <operator>=</operator> <call><name>mpfr_get_ui</name><argument_list>(<argument><expr><name>significand</name></expr></argument>, <argument><expr><name>GMP_RNDZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>l</name> <operator>=</operator> <name>mantfield</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_sub_ui</name><argument_list>(<argument><expr><name>significand</name></expr></argument>, <argument><expr><name>significand</name></expr></argument>, <argument><expr><name>mantfield</name></expr></argument>, <argument><expr><name>GMP_RNDN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_mul_2ui</name><argument_list>(<argument><expr><name>significand</name></expr></argument>, <argument><expr><name>significand</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>GMP_RNDN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mantfield</name> <operator>=</operator> <call><name>mpfr_get_ui</name><argument_list>(<argument><expr><name>significand</name></expr></argument>, <argument><expr><name>GMP_RNDZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>extra</name> <operator>=</operator> <name>mantfield</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpfr_clear</name><argument_list>(<argument><expr><name>significand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>get_mpfr_f</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mpfr_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sign</name></decl>, <decl><type ref="prev"/><name>expfield</name></decl>, <decl><type ref="prev"/><name>mantfield</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mpfr_t</name></type> <name>significand</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>exp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mpfr_nan_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>f</name> <operator>=</operator> <literal type="number">0x7fc00000</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>extra</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <ternary><condition><expr><call><name>mpfr_signbit</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0x80000000U</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mpfr_inf_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>f</name> <operator>=</operator> <literal type="number">0x7f800000</literal> <operator>|</operator> <name>sign</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>extra</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mpfr_zero_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>f</name> <operator>=</operator> <literal type="number">0x00000000</literal> <operator>|</operator> <name>sign</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>extra</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mpfr_init2</name><argument_list>(<argument><expr><name>significand</name></expr></argument>, <argument><expr><name>MPFR_PREC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_set</name><argument_list>(<argument><expr><name>significand</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>GMP_RNDN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>exp</name> <operator>=</operator> <call><name>mpfr_get_exp</name><argument_list>(<argument><expr><name>significand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_set_exp</name><argument_list>(<argument><expr><name>significand</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>&gt;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>f</name> <operator>=</operator> <literal type="number">0x7f800000</literal> <operator>|</operator> <name>sign</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>extra</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_clear</name><argument_list>(<argument><expr><name>significand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">0x7e</literal> <operator>||</operator> <call><name>mpfr_zero_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>exp</name> <operator>=</operator> <operator>-</operator><literal type="number">0x7d</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>expfield</name> <operator>=</operator> <name>exp</name> <operator>+</operator> <literal type="number">0x7d</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpfr_div_2si</name><argument_list>(<argument><expr><name>significand</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>exp</name> <operator>-</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><name>GMP_RNDN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_abs</name><argument_list>(<argument><expr><name>significand</name></expr></argument>, <argument><expr><name>significand</name></expr></argument>, <argument><expr><name>GMP_RNDN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mantfield</name> <operator>=</operator> <call><name>mpfr_get_ui</name><argument_list>(<argument><expr><name>significand</name></expr></argument>, <argument><expr><name>GMP_RNDZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>f</name> <operator>=</operator> <name>sign</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>expfield</name> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>+</operator> <name>mantfield</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_sub_ui</name><argument_list>(<argument><expr><name>significand</name></expr></argument>, <argument><expr><name>significand</name></expr></argument>, <argument><expr><name>mantfield</name></expr></argument>, <argument><expr><name>GMP_RNDN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_mul_2ui</name><argument_list>(<argument><expr><name>significand</name></expr></argument>, <argument><expr><name>significand</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>GMP_RNDN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mantfield</name> <operator>=</operator> <call><name>mpfr_get_ui</name><argument_list>(<argument><expr><name>significand</name></expr></argument>, <argument><expr><name>GMP_RNDZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>extra</name> <operator>=</operator> <name>mantfield</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpfr_clear</name><argument_list>(<argument><expr><name>significand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>get_mpc_d</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mpc_t</name></type> <name>z</name></decl></parameter>,
<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>rh</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>rl</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>rextra</name></decl></parameter>,
<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>ih</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>il</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>iextra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mpfr_t</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mpfr_init2</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>MPFR_PREC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_init2</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>MPFR_PREC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpc_real</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>GMP_RNDN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpc_imag</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>GMP_RNDN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_mpfr_d</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>rh</name></expr></argument>, <argument><expr><name>rl</name></expr></argument>, <argument><expr><name>rextra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_mpfr_d</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>ih</name></expr></argument>, <argument><expr><name>il</name></expr></argument>, <argument><expr><name>iextra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_clear</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_clear</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>get_mpc_f</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mpc_t</name></type> <name>z</name></decl></parameter>,
<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>rextra</name></decl></parameter>,
<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>iextra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mpfr_t</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mpfr_init2</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>MPFR_PREC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_init2</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>MPFR_PREC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpc_real</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>GMP_RNDN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpc_imag</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>GMP_RNDN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_mpfr_f</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>rextra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_mpfr_f</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>iextra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_clear</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_clear</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>test_rred</name><parameter_list>(<parameter><decl><type><name>mpfr_t</name></type> <name>ret</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mpfr_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>quadrant</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mpfr_t</name></type> <name>halfpi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>quo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>




















<expr_stmt><expr><call><name>mpfr_init2</name><argument_list>(<argument><expr><name>halfpi</name></expr></argument>, <argument><expr><name>MPFR_PREC</name> <operator>+</operator> <literal type="number">1024</literal> <operator>+</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_const_pi</name><argument_list>(<argument><expr><name>halfpi</name></expr></argument>, <argument><expr><name>GMP_RNDN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_div_ui</name><argument_list>(<argument><expr><name>halfpi</name></expr></argument>, <argument><expr><name>halfpi</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>GMP_RNDN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>mpfr_remquo</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>quo</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>halfpi</name></expr></argument>, <argument><expr><name>GMP_RNDN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>quadrant</name> <operator>=</operator> <name>quo</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpfr_clear</name><argument_list>(<argument><expr><name>halfpi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>test_lgamma</name><parameter_list>(<parameter><decl><type><name>mpfr_t</name></type> <name>ret</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mpfr_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>mpfr_rnd_t</name></type> <name>rnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>










<decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>;</decl_stmt>
<return>return <expr><call><name>mpfr_lgamma</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sign</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>rnd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>test_cpow</name><parameter_list>(<parameter><decl><type><name>mpc_t</name></type> <name>ret</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mpc_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mpc_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>mpc_rnd_t</name></type> <name>rnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>

















<decl_stmt><decl><type><name>mpc_t</name></type> <name>xbig</name></decl>, <decl><type ref="prev"/><name>ybig</name></decl>, <decl><type ref="prev"/><name>retbig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mpc_init2</name><argument_list>(<argument><expr><name>xbig</name></expr></argument>, <argument><expr><literal type="number">1034</literal> <operator>+</operator> <literal type="number">53</literal> <operator>+</operator> <literal type="number">60</literal> <operator>+</operator> <name>MPFR_PREC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpc_init2</name><argument_list>(<argument><expr><name>ybig</name></expr></argument>, <argument><expr><literal type="number">1034</literal> <operator>+</operator> <literal type="number">53</literal> <operator>+</operator> <literal type="number">60</literal> <operator>+</operator> <name>MPFR_PREC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpc_init2</name><argument_list>(<argument><expr><name>retbig</name></expr></argument>, <argument><expr><literal type="number">1034</literal> <operator>+</operator> <literal type="number">53</literal> <operator>+</operator> <literal type="number">60</literal> <operator>+</operator> <name>MPFR_PREC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_set</name><argument_list>(<argument><expr><name>xbig</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>MPC_RNDNN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpc_set</name><argument_list>(<argument><expr><name>ybig</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>MPC_RNDNN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>mpc_pow</name><argument_list>(<argument><expr><name>retbig</name></expr></argument>, <argument><expr><name>xbig</name></expr></argument>, <argument><expr><name>ybig</name></expr></argument>, <argument><expr><name>rnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpc_set</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>retbig</name></expr></argument>, <argument><expr><name>rnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_clear</name><argument_list>(<argument><expr><name>xbig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpc_clear</name><argument_list>(<argument><expr><name>ybig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpc_clear</name><argument_list>(<argument><expr><name>retbig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_shard</name><parameter_list>(<parameter><type><name>in</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (((in)[0] &amp; 0x7F800000) == 0x7F800000 || (((in)[0] &amp; 0x7F800000) == 0 &amp;&amp; ((in)[0]&amp;0x7FFFFFFF) != 0)))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_dhard</name><parameter_list>(<parameter><type><name>in</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (((in)[0] &amp; 0x7FF00000) == 0x7FF00000 || (((in)[0] &amp; 0x7FF00000) == 0 &amp;&amp; (((in)[0] &amp; 0xFFFFF) | (in)[1]) != 0)))</cpp:value></cpp:define>






<function><type><name>int</name></type> <name>is_dinteger</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32</name></type> <name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0x7FF00000</literal> <operator>&amp;</operator> <operator>~</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>test_ceil</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>is_sinteger</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32</name></type> <name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0x7F800000</literal> <operator>&amp;</operator> <operator>~</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>test_ceilf</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>is_dsnan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint32</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7FF00000</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x7FF00000</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00080000</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>is_ssnan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint32</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7F800000</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x7F800000</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00400000</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>is_snan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint32</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>size</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><call><name>is_dsnan</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>is_ssnan</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>universal_wrapper</name><parameter_list>(<parameter><decl><type><name>wrapperctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<decl_stmt><decl><type><name>int</name></type> <name>op</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>op</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>op</name> <operator>&lt;</operator> <call><name>wrapper_get_nops</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>op</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>wrapper_get_size</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>wrapper_is_complex</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>is_snan</name><argument_list>(<argument><expr><call><name>wrapper_get_ieee</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>wrapper_set_nan</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<decl_stmt><decl><type><name>Testable</name></type> <name><name>functions</name><index>[]</index></name> <init>= <expr><block>{








<expr><block>{<expr><literal type="string">"sin"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_sin</name></expr>, <expr><name>args1</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>,
<expr><name>cases_uniform</name></expr>, <expr><literal type="number">0x3e400000</literal></expr>, <expr><literal type="number">0x40300000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"sinf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_sin</name></expr>, <expr><name>args1f</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>,
<expr><name>cases_uniform_float</name></expr>, <expr><literal type="number">0x39800000</literal></expr>, <expr><literal type="number">0x41800000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"cos"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_cos</name></expr>, <expr><name>args1</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>,
<expr><name>cases_uniform</name></expr>, <expr><literal type="number">0x3e400000</literal></expr>, <expr><literal type="number">0x40300000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"cosf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_cos</name></expr>, <expr><name>args1f</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>,
<expr><name>cases_uniform_float</name></expr>, <expr><literal type="number">0x39800000</literal></expr>, <expr><literal type="number">0x41800000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"tan"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_tan</name></expr>, <expr><name>args1</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>,
<expr><name>cases_uniform</name></expr>, <expr><literal type="number">0x3e400000</literal></expr>, <expr><literal type="number">0x40300000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"tanf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_tan</name></expr>, <expr><name>args1f</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>,
<expr><name>cases_uniform_float</name></expr>, <expr><literal type="number">0x39800000</literal></expr>, <expr><literal type="number">0x41800000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"sincosf_sinf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_sin</name></expr>, <expr><name>args1f</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>,
<expr><name>cases_uniform_float</name></expr>, <expr><literal type="number">0x39800000</literal></expr>, <expr><literal type="number">0x41800000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"sincosf_cosf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_cos</name></expr>, <expr><name>args1f</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>,
<expr><name>cases_uniform_float</name></expr>, <expr><literal type="number">0x39800000</literal></expr>, <expr><literal type="number">0x41800000</literal></expr>}</block></expr>,




<expr><block>{<expr><literal type="string">"asin"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_asin</name></expr>, <expr><name>args1</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>,
<expr><name>cases_uniform</name></expr>, <expr><literal type="number">0x3e400000</literal></expr>, <expr><literal type="number">0x3fefffff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"asinf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_asin</name></expr>, <expr><name>args1f</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>,
<expr><name>cases_uniform_float</name></expr>, <expr><literal type="number">0x39800000</literal></expr>, <expr><literal type="number">0x3f7fffff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"acos"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_acos</name></expr>, <expr><name>args1</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>,
<expr><name>cases_uniform</name></expr>, <expr><literal type="number">0x3c900000</literal></expr>, <expr><literal type="number">0x3fefffff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"acosf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_acos</name></expr>, <expr><name>args1f</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>,
<expr><name>cases_uniform_float</name></expr>, <expr><literal type="number">0x33800000</literal></expr>, <expr><literal type="number">0x3f7fffff</literal></expr>}</block></expr>,





<expr><block>{<expr><literal type="string">"atan"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_atan</name></expr>, <expr><name>args1</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>,
<expr><name>cases_uniform</name></expr>, <expr><literal type="number">0x3e400000</literal></expr>, <expr><literal type="number">0x43400000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"atanf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_atan</name></expr>, <expr><name>args1f</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>,
<expr><name>cases_uniform_float</name></expr>, <expr><literal type="number">0x39800000</literal></expr>, <expr><literal type="number">0x4b800000</literal></expr>}</block></expr>,




<expr><block>{<expr><literal type="string">"atan2"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_atan2</name></expr>, <expr><name>args2</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>,
<expr><name>atan2_cases</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"atan2f"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_atan2</name></expr>, <expr><name>args2f</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>,
<expr><name>atan2_cases_float</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,




<expr><block>{<expr><literal type="string">"exp"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_exp</name></expr>, <expr><name>args1</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>,
<expr><name>cases_uniform</name></expr>, <expr><literal type="number">0x3c900000</literal></expr>, <expr><literal type="number">0x40878000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"expf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_exp</name></expr>, <expr><name>args1f</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>,
<expr><name>cases_uniform_float</name></expr>, <expr><literal type="number">0x33800000</literal></expr>, <expr><literal type="number">0x42dc0000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"sinh"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_sinh</name></expr>, <expr><name>args1</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>,
<expr><name>cases_uniform</name></expr>, <expr><literal type="number">0x3c900000</literal></expr>, <expr><literal type="number">0x40878000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"sinhf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_sinh</name></expr>, <expr><name>args1f</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>,
<expr><name>cases_uniform_float</name></expr>, <expr><literal type="number">0x33800000</literal></expr>, <expr><literal type="number">0x42dc0000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"cosh"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_cosh</name></expr>, <expr><name>args1</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>,
<expr><name>cases_uniform</name></expr>, <expr><literal type="number">0x3e400000</literal></expr>, <expr><literal type="number">0x40878000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"coshf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_cosh</name></expr>, <expr><name>args1f</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>,
<expr><name>cases_uniform_float</name></expr>, <expr><literal type="number">0x39800000</literal></expr>, <expr><literal type="number">0x42dc0000</literal></expr>}</block></expr>,



<expr><block>{<expr><literal type="string">"tanh"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_tanh</name></expr>, <expr><name>args1</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>,
<expr><name>cases_uniform</name></expr>, <expr><literal type="number">0x3e400000</literal></expr>, <expr><literal type="number">0x40340000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"tanhf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_tanh</name></expr>, <expr><name>args1f</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>,
<expr><name>cases_uniform</name></expr>, <expr><literal type="number">0x39800000</literal></expr>, <expr><literal type="number">0x41100000</literal></expr>}</block></expr>,





<expr><block>{<expr><literal type="string">"log"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_log</name></expr>, <expr><name>args1</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>log_cases</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"logf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_log</name></expr>, <expr><name>args1f</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>log_cases_float</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"log10"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_log10</name></expr>, <expr><name>args1</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>log_cases</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"log10f"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_log10</name></expr>, <expr><name>args1f</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>log_cases_float</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,



<expr><block>{<expr><literal type="string">"pow"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_pow</name></expr>, <expr><name>args2</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>pow_cases</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"powf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_pow</name></expr>, <expr><name>args2f</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>pow_cases_float</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,





<expr><block>{<expr><literal type="string">"rred"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_rred</name></expr>, <expr><name>rred</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>rred_cases</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"rredf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_rred</name></expr>, <expr><name>rredf</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>rred_cases_float</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,



<expr><block>{<expr><literal type="string">"sqrt"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_sqrt</name></expr>, <expr><name>args1</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>log_cases</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"sqrtf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_sqrt</name></expr>, <expr><name>args1f</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>log_cases_float</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"cbrt"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_cbrt</name></expr>, <expr><name>args1</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>log_cases</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"cbrtf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_cbrt</name></expr>, <expr><name>args1f</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>log_cases_float</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"hypot"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_hypot</name></expr>, <expr><name>args2</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>atan2_cases</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"hypotf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_hypot</name></expr>, <expr><name>args2f</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>atan2_cases_float</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,



<expr><block>{<expr><literal type="string">"ceil"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_ceil</name></expr>, <expr><name>semi1</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_semi1</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ceilf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_ceilf</name></expr>, <expr><name>semi1f</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_semi1_float</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"floor"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_floor</name></expr>, <expr><name>semi1</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_semi1</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"floorf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_floorf</name></expr>, <expr><name>semi1f</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_semi1_float</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"fmod"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_fmod</name></expr>, <expr><name>semi2</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_semi2</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"fmodf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_fmodf</name></expr>, <expr><name>semi2f</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_semi2_float</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ldexp"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_ldexp</name></expr>, <expr><name>t_ldexp</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_ldexp</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ldexpf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_ldexpf</name></expr>, <expr><name>t_ldexpf</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_ldexp_float</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"frexp"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_frexp</name></expr>, <expr><name>t_frexp</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_semi1</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"frexpf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_frexpf</name></expr>, <expr><name>t_frexpf</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_semi1_float</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"modf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_modf</name></expr>, <expr><name>t_modf</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_semi1</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"modff"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_modff</name></expr>, <expr><name>t_modff</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_semi1_float</name></expr>}</block></expr>,




<expr><block>{<expr><literal type="string">"copysign"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_copysign</name></expr>, <expr><name>semi2</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_semi2</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"copysignf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_copysignf</name></expr>, <expr><name>semi2f</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_semi2_float</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"isfinite"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_isfinite</name></expr>, <expr><name>classify</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_uniform</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x7fffffff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"isfinitef"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_isfinitef</name></expr>, <expr><name>classifyf</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_uniform_float</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x7fffffff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"isinf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_isinf</name></expr>, <expr><name>classify</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_uniform</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x7fffffff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"isinff"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_isinff</name></expr>, <expr><name>classifyf</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_uniform_float</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x7fffffff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"isnan"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_isnan</name></expr>, <expr><name>classify</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_uniform</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x7fffffff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"isnanf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_isnanf</name></expr>, <expr><name>classifyf</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_uniform_float</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x7fffffff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"isnormal"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_isnormal</name></expr>, <expr><name>classify</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_uniform</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x7fffffff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"isnormalf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_isnormalf</name></expr>, <expr><name>classifyf</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_uniform_float</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x7fffffff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"signbit"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_signbit</name></expr>, <expr><name>classify</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_uniform</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x7fffffff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"signbitf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_signbitf</name></expr>, <expr><name>classifyf</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_uniform_float</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x7fffffff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"fpclassify"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_fpclassify</name></expr>, <expr><name>classify</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_uniform</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x7fffffff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"fpclassifyf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_fpclassifyf</name></expr>, <expr><name>classifyf</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_uniform_float</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x7fffffff</literal></expr>}</block></expr>,



<expr><block>{<expr><literal type="string">"isgreater"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_isgreater</name></expr>, <expr><name>compare</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_uniform</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x7fffffff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"isgreaterequal"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_isgreaterequal</name></expr>, <expr><name>compare</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_uniform</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x7fffffff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"isless"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_isless</name></expr>, <expr><name>compare</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_uniform</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x7fffffff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"islessequal"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_islessequal</name></expr>, <expr><name>compare</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_uniform</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x7fffffff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"islessgreater"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_islessgreater</name></expr>, <expr><name>compare</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_uniform</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x7fffffff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"isunordered"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_isunordered</name></expr>, <expr><name>compare</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_uniform</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x7fffffff</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"isgreaterf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_isgreaterf</name></expr>, <expr><name>comparef</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_uniform_float</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x7fffffff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"isgreaterequalf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_isgreaterequalf</name></expr>, <expr><name>comparef</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_uniform_float</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x7fffffff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"islessf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_islessf</name></expr>, <expr><name>comparef</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_uniform_float</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x7fffffff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"islessequalf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_islessequalf</name></expr>, <expr><name>comparef</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_uniform_float</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x7fffffff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"islessgreaterf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_islessgreaterf</name></expr>, <expr><name>comparef</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_uniform_float</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x7fffffff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"isunorderedf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_isunorderedf</name></expr>, <expr><name>comparef</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_uniform_float</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x7fffffff</literal></expr>}</block></expr>,




<expr><block>{<expr><literal type="string">"atanh"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_atanh</name></expr>, <expr><name>args1</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_uniform</name></expr>, <expr><literal type="number">0x3e400000</literal></expr>, <expr><literal type="number">0x3fefffff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"asinh"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_asinh</name></expr>, <expr><name>args1</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_uniform</name></expr>, <expr><literal type="number">0x3e400000</literal></expr>, <expr><literal type="number">0x3fefffff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"acosh"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_acosh</name></expr>, <expr><name>args1</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_uniform_positive</name></expr>, <expr><literal type="number">0x3ff00000</literal></expr>, <expr><literal type="number">0x7fefffff</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"atanhf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_atanh</name></expr>, <expr><name>args1f</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_uniform_float</name></expr>, <expr><literal type="number">0x32000000</literal></expr>, <expr><literal type="number">0x3f7fffff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"asinhf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_asinh</name></expr>, <expr><name>args1f</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_uniform_float</name></expr>, <expr><literal type="number">0x32000000</literal></expr>, <expr><literal type="number">0x3f7fffff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"acoshf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_acosh</name></expr>, <expr><name>args1f</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_uniform_float_positive</name></expr>, <expr><literal type="number">0x3f800000</literal></expr>, <expr><literal type="number">0x7f800000</literal></expr>}</block></expr>,






<expr><block>{<expr><literal type="string">"csin"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_sin</name></expr>, <expr><name>args1c</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_cases_uniform</name></expr>, <expr><literal type="number">0x3f000000</literal></expr>, <expr><literal type="number">0x40300000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"csinf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_sin</name></expr>, <expr><name>args1fc</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_cases_uniform_float</name></expr>, <expr><literal type="number">0x38000000</literal></expr>, <expr><literal type="number">0x41800000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ccos"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_cos</name></expr>, <expr><name>args1c</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_cases_uniform</name></expr>, <expr><literal type="number">0x3f000000</literal></expr>, <expr><literal type="number">0x40300000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ccosf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_cos</name></expr>, <expr><name>args1fc</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_cases_uniform_float</name></expr>, <expr><literal type="number">0x38000000</literal></expr>, <expr><literal type="number">0x41800000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ctan"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_tan</name></expr>, <expr><name>args1c</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_cases_uniform</name></expr>, <expr><literal type="number">0x3f000000</literal></expr>, <expr><literal type="number">0x40300000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ctanf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_tan</name></expr>, <expr><name>args1fc</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_cases_uniform_float</name></expr>, <expr><literal type="number">0x38000000</literal></expr>, <expr><literal type="number">0x41800000</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"casin"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_asin</name></expr>, <expr><name>args1c</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_cases_uniform</name></expr>, <expr><literal type="number">0x3f000000</literal></expr>, <expr><literal type="number">0x40300000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"casinf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_asin</name></expr>, <expr><name>args1fc</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_cases_uniform_float</name></expr>, <expr><literal type="number">0x38000000</literal></expr>, <expr><literal type="number">0x41800000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"cacos"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_acos</name></expr>, <expr><name>args1c</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_cases_uniform</name></expr>, <expr><literal type="number">0x3f000000</literal></expr>, <expr><literal type="number">0x40300000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"cacosf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_acos</name></expr>, <expr><name>args1fc</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_cases_uniform_float</name></expr>, <expr><literal type="number">0x38000000</literal></expr>, <expr><literal type="number">0x41800000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"catan"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_atan</name></expr>, <expr><name>args1c</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_cases_uniform</name></expr>, <expr><literal type="number">0x3f000000</literal></expr>, <expr><literal type="number">0x40300000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"catanf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_atan</name></expr>, <expr><name>args1fc</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_cases_uniform_float</name></expr>, <expr><literal type="number">0x38000000</literal></expr>, <expr><literal type="number">0x41800000</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"csinh"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_sinh</name></expr>, <expr><name>args1c</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_cases_uniform</name></expr>, <expr><literal type="number">0x3f000000</literal></expr>, <expr><literal type="number">0x40300000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"csinhf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_sinh</name></expr>, <expr><name>args1fc</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_cases_uniform_float</name></expr>, <expr><literal type="number">0x38000000</literal></expr>, <expr><literal type="number">0x41800000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ccosh"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_cosh</name></expr>, <expr><name>args1c</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_cases_uniform</name></expr>, <expr><literal type="number">0x3f000000</literal></expr>, <expr><literal type="number">0x40300000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ccoshf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_cosh</name></expr>, <expr><name>args1fc</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_cases_uniform_float</name></expr>, <expr><literal type="number">0x38000000</literal></expr>, <expr><literal type="number">0x41800000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ctanh"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_tanh</name></expr>, <expr><name>args1c</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_cases_uniform</name></expr>, <expr><literal type="number">0x3f000000</literal></expr>, <expr><literal type="number">0x40300000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ctanhf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_tanh</name></expr>, <expr><name>args1fc</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_cases_uniform_float</name></expr>, <expr><literal type="number">0x38000000</literal></expr>, <expr><literal type="number">0x41800000</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"casinh"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_asinh</name></expr>, <expr><name>args1c</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_cases_uniform</name></expr>, <expr><literal type="number">0x3f000000</literal></expr>, <expr><literal type="number">0x40300000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"casinhf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_asinh</name></expr>, <expr><name>args1fc</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_cases_uniform_float</name></expr>, <expr><literal type="number">0x38000000</literal></expr>, <expr><literal type="number">0x41800000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"cacosh"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_acosh</name></expr>, <expr><name>args1c</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_cases_uniform</name></expr>, <expr><literal type="number">0x3f000000</literal></expr>, <expr><literal type="number">0x40300000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"cacoshf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_acosh</name></expr>, <expr><name>args1fc</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_cases_uniform_float</name></expr>, <expr><literal type="number">0x38000000</literal></expr>, <expr><literal type="number">0x41800000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"catanh"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_atanh</name></expr>, <expr><name>args1c</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_cases_uniform</name></expr>, <expr><literal type="number">0x3f000000</literal></expr>, <expr><literal type="number">0x40300000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"catanhf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_atanh</name></expr>, <expr><name>args1fc</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_cases_uniform_float</name></expr>, <expr><literal type="number">0x38000000</literal></expr>, <expr><literal type="number">0x41800000</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cexp"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_exp</name></expr>, <expr><name>args1c</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_cases_uniform</name></expr>, <expr><literal type="number">0x3c900000</literal></expr>, <expr><literal type="number">0x40862000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"cpow"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_cpow</name></expr>, <expr><name>args2c</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_pow_cases</name></expr>, <expr><literal type="number">0x3fc00000</literal></expr>, <expr><literal type="number">0x40000000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"clog"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_log</name></expr>, <expr><name>args1c</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_log_cases</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"csqrt"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_sqrt</name></expr>, <expr><name>args1c</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_log_cases</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cexpf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_exp</name></expr>, <expr><name>args1fc</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_cases_uniform_float</name></expr>, <expr><literal type="number">0x24800000</literal></expr>, <expr><literal type="number">0x42b00000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"cpowf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_cpow</name></expr>, <expr><name>args2fc</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_pow_cases_float</name></expr>, <expr><literal type="number">0x3e000000</literal></expr>, <expr><literal type="number">0x41000000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"clogf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_log</name></expr>, <expr><name>args1fc</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_log_cases_float</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"csqrtf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_sqrt</name></expr>, <expr><name>args1fc</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_log_cases_float</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cdiv"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_div</name></expr>, <expr><name>args2c</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_arithmetic_cases</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"cmul"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_mul</name></expr>, <expr><name>args2c</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_arithmetic_cases</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"cadd"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_add</name></expr>, <expr><name>args2c</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_arithmetic_cases</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"csub"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_sub</name></expr>, <expr><name>args2c</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_arithmetic_cases</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cdivf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_div</name></expr>, <expr><name>args2fc</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_arithmetic_cases_float</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"cmulf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_mul</name></expr>, <expr><name>args2fc</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_arithmetic_cases_float</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"caddf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_add</name></expr>, <expr><name>args2fc</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_arithmetic_cases_float</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"csubf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_sub</name></expr>, <expr><name>args2fc</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_arithmetic_cases_float</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cabsf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_abs</name></expr>, <expr><name>args1fcr</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_arithmetic_cases_float</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"cabs"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_abs</name></expr>, <expr><name>args1cr</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_arithmetic_cases</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"cargf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_arg</name></expr>, <expr><name>args1fcr</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_arithmetic_cases_float</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"carg"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_arg</name></expr>, <expr><name>args1cr</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_arithmetic_cases</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"cimagf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_imag</name></expr>, <expr><name>args1fcr</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_arithmetic_cases_float</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"cimag"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_imag</name></expr>, <expr><name>args1cr</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_arithmetic_cases</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"conjf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_conj</name></expr>, <expr><name>args1fc</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_arithmetic_cases_float</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"conj"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_conj</name></expr>, <expr><name>args1c</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_arithmetic_cases</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"cprojf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_proj</name></expr>, <expr><name>args1fc</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_arithmetic_cases_float</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"cproj"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_proj</name></expr>, <expr><name>args1c</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_arithmetic_cases</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"crealf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_real</name></expr>, <expr><name>args1fcr</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_arithmetic_cases_float</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"creal"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_real</name></expr>, <expr><name>args1cr</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>complex_arithmetic_cases</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"erfcf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_erfc</name></expr>, <expr><name>args1f</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_biased_float</name></expr>, <expr><literal type="number">0x1e800000</literal></expr>, <expr><literal type="number">0x41000000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"erfc"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_erfc</name></expr>, <expr><name>args1</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_biased</name></expr>, <expr><literal type="number">0x3bd00000</literal></expr>, <expr><literal type="number">0x403c0000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"erff"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_erf</name></expr>, <expr><name>args1f</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_biased_float</name></expr>, <expr><literal type="number">0x03800000</literal></expr>, <expr><literal type="number">0x40700000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"erf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_erf</name></expr>, <expr><name>args1</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_biased</name></expr>, <expr><literal type="number">0x00800000</literal></expr>, <expr><literal type="number">0x40200000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"exp2f"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_exp2</name></expr>, <expr><name>args1f</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_uniform_float</name></expr>, <expr><literal type="number">0x33800000</literal></expr>, <expr><literal type="number">0x43c00000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"exp2"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_exp2</name></expr>, <expr><name>args1</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_uniform</name></expr>, <expr><literal type="number">0x3ca00000</literal></expr>, <expr><literal type="number">0x40a00000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"expm1f"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_expm1</name></expr>, <expr><name>args1f</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_uniform_float</name></expr>, <expr><literal type="number">0x33000000</literal></expr>, <expr><literal type="number">0x43800000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"expm1"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_expm1</name></expr>, <expr><name>args1</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_uniform</name></expr>, <expr><literal type="number">0x3c900000</literal></expr>, <expr><literal type="number">0x409c0000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"fmaxf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_max</name></expr>, <expr><name>args2f</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>minmax_cases_float</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x7f7fffff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"fmax"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_max</name></expr>, <expr><name>args2</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>minmax_cases</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x7fefffff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"fminf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_min</name></expr>, <expr><name>args2f</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>minmax_cases_float</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x7f7fffff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"fmin"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_min</name></expr>, <expr><name>args2</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>minmax_cases</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x7fefffff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"lgammaf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_lgamma</name></expr>, <expr><name>args1f</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_uniform_float</name></expr>, <expr><literal type="number">0x01800000</literal></expr>, <expr><literal type="number">0x7f800000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"lgamma"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>test_lgamma</name></expr>, <expr><name>args1</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_uniform</name></expr>, <expr><literal type="number">0x00100000</literal></expr>, <expr><literal type="number">0x7ff00000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"log1pf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_log1p</name></expr>, <expr><name>args1f</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>log1p_cases_float</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"log1p"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_log1p</name></expr>, <expr><name>args1</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>log1p_cases</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"log2f"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_log2</name></expr>, <expr><name>args1f</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>log_cases_float</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"log2"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_log2</name></expr>, <expr><name>args1</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>log_cases</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"tgammaf"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_gamma</name></expr>, <expr><name>args1f</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_uniform_float</name></expr>, <expr><literal type="number">0x2f800000</literal></expr>, <expr><literal type="number">0x43000000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"tgamma"</literal></expr>, <expr><operator>(</operator><name>funcptr</name><operator>)</operator><name>mpfr_gamma</name></expr>, <expr><name>args1</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>cases_uniform</name></expr>, <expr><literal type="number">0x3c000000</literal></expr>, <expr><literal type="number">0x40800000</literal></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nfunctions</name> <init>= <expr><operator>(</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>functions</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>functions</name></expr></argument>)</argument_list></sizeof> <operator>)</operator></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>random_sign</name></cpp:macro> <cpp:value>( random_upto(1) ? 0x80000000 : 0 )</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>iszero</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>!</operator><operator>(</operator><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal><operator>)</operator> <operator>||</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>complex_log_cases</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>param1</name></decl></parameter>,
<parameter><decl><type><name>uint32</name></type> <name>param2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>cases_uniform</name><argument_list>(<argument><expr><name>out</name></expr></argument>,<argument><expr><literal type="number">0x00100000</literal></expr></argument>,<argument><expr><literal type="number">0x7fefffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cases_uniform</name><argument_list>(<argument><expr><name>out</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0x00100000</literal></expr></argument>,<argument><expr><literal type="number">0x7fefffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>complex_log_cases_float</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>param1</name></decl></parameter>,
<parameter><decl><type><name>uint32</name></type> <name>param2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>cases_uniform_float</name><argument_list>(<argument><expr><name>out</name></expr></argument>,<argument><expr><literal type="number">0x00800000</literal></expr></argument>,<argument><expr><literal type="number">0x7f7fffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cases_uniform_float</name><argument_list>(<argument><expr><name>out</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0x00800000</literal></expr></argument>,<argument><expr><literal type="number">0x7f7fffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>complex_cases_biased</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>lowbound</name></decl></parameter>,
<parameter><decl><type><name>uint32</name></type> <name>highbound</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>cases_biased</name><argument_list>(<argument><expr><name>out</name></expr></argument>,<argument><expr><name>lowbound</name></expr></argument>,<argument><expr><name>highbound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cases_biased</name><argument_list>(<argument><expr><name>out</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>lowbound</name></expr></argument>,<argument><expr><name>highbound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>complex_cases_biased_float</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>lowbound</name></decl></parameter>,
<parameter><decl><type><name>uint32</name></type> <name>highbound</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>cases_biased_float</name><argument_list>(<argument><expr><name>out</name></expr></argument>,<argument><expr><name>lowbound</name></expr></argument>,<argument><expr><name>highbound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cases_biased_float</name><argument_list>(<argument><expr><name>out</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>lowbound</name></expr></argument>,<argument><expr><name>highbound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>complex_cases_uniform</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>lowbound</name></decl></parameter>,
<parameter><decl><type><name>uint32</name></type> <name>highbound</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>cases_uniform</name><argument_list>(<argument><expr><name>out</name></expr></argument>,<argument><expr><name>lowbound</name></expr></argument>,<argument><expr><name>highbound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cases_uniform</name><argument_list>(<argument><expr><name>out</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>lowbound</name></expr></argument>,<argument><expr><name>highbound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>complex_cases_uniform_float</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>lowbound</name></decl></parameter>,
<parameter><decl><type><name>uint32</name></type> <name>highbound</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>cases_uniform_float</name><argument_list>(<argument><expr><name>out</name></expr></argument>,<argument><expr><name>lowbound</name></expr></argument>,<argument><expr><name>highbound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cases_uniform</name><argument_list>(<argument><expr><name>out</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>lowbound</name></expr></argument>,<argument><expr><name>highbound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>complex_pow_cases</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>lowbound</name></decl></parameter>,
<parameter><decl><type><name>uint32</name></type> <name>highbound</name></decl></parameter>)</parameter_list> <block>{<block_content>

















<expr_stmt><expr><call><name>cases_uniform</name><argument_list>(<argument><expr><name>out</name></expr></argument>,<argument><expr><literal type="number">0x3fe00000</literal></expr></argument>, <argument><expr><literal type="number">0x40000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cases_uniform</name><argument_list>(<argument><expr><name>out</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0x3fe00000</literal></expr></argument>, <argument><expr><literal type="number">0x40000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cases_uniform</name><argument_list>(<argument><expr><name>out</name><operator>+</operator><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">0x3f800000</literal></expr></argument>, <argument><expr><literal type="number">0x40600000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cases_uniform</name><argument_list>(<argument><expr><name>out</name><operator>+</operator><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">0x3f800000</literal></expr></argument>, <argument><expr><literal type="number">0x40600000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>complex_pow_cases_float</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>lowbound</name></decl></parameter>,
<parameter><decl><type><name>uint32</name></type> <name>highbound</name></decl></parameter>)</parameter_list> <block>{<block_content>




<expr_stmt><expr><call><name>cases_uniform_float</name><argument_list>(<argument><expr><name>out</name></expr></argument>,<argument><expr><literal type="number">0x3f000000</literal></expr></argument>, <argument><expr><literal type="number">0x40000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cases_uniform_float</name><argument_list>(<argument><expr><name>out</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0x3f000000</literal></expr></argument>, <argument><expr><literal type="number">0x40000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cases_uniform_float</name><argument_list>(<argument><expr><name>out</name><operator>+</operator><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">0x3d600000</literal></expr></argument>, <argument><expr><literal type="number">0x41900000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cases_uniform_float</name><argument_list>(<argument><expr><name>out</name><operator>+</operator><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">0x3d600000</literal></expr></argument>, <argument><expr><literal type="number">0x41900000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>complex_arithmetic_cases</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>lowbound</name></decl></parameter>,
<parameter><decl><type><name>uint32</name></type> <name>highbound</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>cases_uniform</name><argument_list>(<argument><expr><name>out</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0x7fefffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cases_uniform</name><argument_list>(<argument><expr><name>out</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0x7fefffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cases_uniform</name><argument_list>(<argument><expr><name>out</name><operator>+</operator><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0x7fefffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cases_uniform</name><argument_list>(<argument><expr><name>out</name><operator>+</operator><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0x7fefffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>complex_arithmetic_cases_float</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>lowbound</name></decl></parameter>,
<parameter><decl><type><name>uint32</name></type> <name>highbound</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>cases_uniform_float</name><argument_list>(<argument><expr><name>out</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0x7f7fffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cases_uniform_float</name><argument_list>(<argument><expr><name>out</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0x7f7fffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cases_uniform_float</name><argument_list>(<argument><expr><name>out</name><operator>+</operator><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0x7f7fffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cases_uniform_float</name><argument_list>(<argument><expr><name>out</name><operator>+</operator><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0x7f7fffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>float32_case</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>premax</name></decl>, <decl><type ref="prev"/><name>preptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32</name> <modifier>*</modifier></type><name>specifics</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>specifics</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>specifics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>specifics</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>premax</name> <operator>=</operator> <name>preptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>specifics</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>exps</name><index>[]</index></name> <init>= <expr><block>{
<expr><operator>-</operator><literal type="number">127</literal></expr>, <expr><operator>-</operator><literal type="number">126</literal></expr>, <expr><operator>-</operator><literal type="number">125</literal></expr>, <expr><operator>-</operator><literal type="number">24</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">24</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">126</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">128</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>, <decl><type ref="prev"/><name>eptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>se</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>














<expr_stmt><expr><name>specifics</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">4400</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>specifics</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>preptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>sign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sign</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>sign</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>eptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>eptr</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>exps</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>exps</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>eptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>se</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>sign</name></expr> ?</condition><then> <expr><literal type="number">0x80000000</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>exps</name><index>[<expr><name>eptr</name></expr>]</index></name><operator>+</operator><literal type="number">127</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator></expr>;</expr_stmt>



<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>se</name> <operator>|</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>se</name> <operator>|</operator> <literal type="number">0x7FFFFF</literal></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;=</operator> <literal type="number">0x400000</literal></expr>;</condition> <incr><expr><name>j</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>se</name> <operator>|</operator> <name>j</name></expr>;</expr_stmt></block_content></block></for>



<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;=</operator> <literal type="number">0x400000</literal></expr>;</condition> <incr><expr><name>j</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>se</name> <operator>|</operator> <operator>(</operator><literal type="number">0x7FFFFF</literal> <operator>^</operator> <name>j</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>



<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>j</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;=</operator> <literal type="number">0x100000</literal></expr>;</condition> <incr><expr><name>j</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>se</name> <operator>|</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name>j</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>



<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>j</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;=</operator> <literal type="number">0x200000</literal></expr>;</condition> <incr><expr><name>j</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>se</name> <operator>|</operator> <operator>(</operator><literal type="number">0x7FFFFF</literal> <operator>^</operator> <operator>(</operator><name>j</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>



</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>preptr</name> <operator>==</operator> <literal type="number">4400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>premax</name> <operator>=</operator> <name>preptr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>random32</name><argument_list>()</argument_list></call> <operator>%</operator> <operator>(</operator><name>premax</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>preptr</name></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>uint32</name></type> <name>t</name></decl>;</decl_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>specifics</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>specifics</name><index>[<expr><name>preptr</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>preptr</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>











<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>random32</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>random32</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>random32</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">22</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>f</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>bits</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>f</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>bits</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>f</name> <operator>|=</operator> <operator>~</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>bits</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name>f</name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>bits</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>f</name> <operator>&amp;=</operator> <literal type="number">0x7FFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>|=</operator> <operator>(</operator><call><name>random32</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFF800000</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>float64_case</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>f</name></decl>, <decl><type ref="prev"/><name>g</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>premax</name></decl>, <decl><type ref="prev"/><name>preptr</name></decl>;</decl_stmt>
<expr_stmt><expr><specifier>static</specifier> <call><name>uint32</name> <argument_list>(<argument><expr><operator>*</operator><name>specifics</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>specifics</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>specifics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>specifics</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>premax</name> <operator>=</operator> <name>preptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>specifics</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>exps</name><index>[]</index></name> <init>= <expr><block>{
<expr><operator>-</operator><literal type="number">1023</literal></expr>, <expr><operator>-</operator><literal type="number">1022</literal></expr>, <expr><operator>-</operator><literal type="number">1021</literal></expr>, <expr><operator>-</operator><literal type="number">129</literal></expr>, <expr><operator>-</operator><literal type="number">128</literal></expr>, <expr><operator>-</operator><literal type="number">127</literal></expr>, <expr><operator>-</operator><literal type="number">126</literal></expr>, <expr><operator>-</operator><literal type="number">53</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">127</literal></expr>,
<expr><literal type="number">128</literal></expr>, <expr><literal type="number">129</literal></expr>, <expr><literal type="number">1022</literal></expr>, <expr><literal type="number">1023</literal></expr>, <expr><literal type="number">1024</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>, <decl><type ref="prev"/><name>eptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>se</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>














<expr_stmt><expr><name>specifics</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">13056</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>specifics</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>preptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>sign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sign</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>sign</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>eptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>eptr</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>exps</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>exps</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>eptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>se</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>sign</name></expr> ?</condition><then> <expr><literal type="number">0x80000000</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>exps</name><index>[<expr><name>eptr</name></expr>]</index></name><operator>+</operator><literal type="number">1023</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator></expr>;</expr_stmt>



<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name><operator>++</operator></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name>se</name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>~</operator><literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name><operator>++</operator></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name>se</name></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;=</operator> <literal type="number">0x80000000</literal></expr>;</condition> <incr><expr><name>j</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name><operator>++</operator></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name>se</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&amp;</operator> <literal type="number">0xFFFFF</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name><operator>++</operator></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name>se</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>



<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;=</operator> <literal type="number">0x80000000</literal></expr>;</condition> <incr><expr><name>j</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>~</operator><name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name><operator>++</operator></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name>se</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&amp;</operator> <literal type="number">0xFFFFF</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xFFFFF</literal> <operator>^</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>~</operator><literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name><operator>++</operator></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name>se</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>



<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>j</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;=</operator> <literal type="number">0x80000000</literal></expr>;</condition> <incr><expr><name>j</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>j</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name><operator>++</operator></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name>se</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;=</operator> <literal type="number">0x20000</literal></expr>;</condition> <incr><expr><name>j</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>j</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>~</operator><literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name><operator>++</operator></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name>se</name></expr>;</expr_stmt>
</block_content>}</block></for>



<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>j</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;=</operator> <literal type="number">0x80000000</literal></expr>;</condition> <incr><expr><name>j</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>~</operator><operator>(</operator><name>j</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name><operator>++</operator></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name>se</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;=</operator> <literal type="number">0x40000</literal></expr>;</condition> <incr><expr><name>j</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xFFFFF</literal> <operator>^</operator> <operator>(</operator><name>j</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name><operator>++</operator></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name>se</name></expr>;</expr_stmt>
</block_content>}</block></for>



</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>preptr</name> <operator>==</operator> <literal type="number">13056</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>premax</name> <operator>=</operator> <name>preptr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>uint32</name><operator>)</operator> <call><name>random32</name><argument_list>()</argument_list></call> <operator>%</operator> <operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>premax</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>preptr</name></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>uint32</name></type> <name>t</name></decl>;</decl_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>specifics</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>specifics</name><index>[<expr><name>preptr</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>specifics</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>specifics</name><index>[<expr><name>preptr</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>specifics</name><index>[<expr><name>preptr</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>preptr</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>











<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>random32</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>random32</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>random32</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>random32</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">51</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>f</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>bits</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>bits</name> <operator>-=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>bits</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>~</operator><literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>f</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>bits</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>bits</name> <operator>-=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>bits</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>g</name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>bits</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>bits</name> <operator>-=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>bits</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>g</name> <operator>|=</operator> <operator>~</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>bits</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>bits</name> <operator>-=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>|=</operator> <operator>~</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>bits</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>~</operator><literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>g</name> <operator>&amp;=</operator> <literal type="number">0xFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>|=</operator> <operator>(</operator><call><name>random32</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFF00000</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cases_biased</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>lowbound</name></decl></parameter>,
<parameter><decl><type><name>uint32</name></type> <name>highbound</name></decl></parameter>)</parameter_list> <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>highbound</name> <operator>-</operator> <call><name>random_upto_biased</name><argument_list>(<argument><expr><name>highbound</name><operator>-</operator><name>lowbound</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>random_upto</name><argument_list>(<argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name>random_sign</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>iszero</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cases_biased_positive</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>lowbound</name></decl></parameter>,
<parameter><decl><type><name>uint32</name></type> <name>highbound</name></decl></parameter>)</parameter_list> <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>highbound</name> <operator>-</operator> <call><name>random_upto_biased</name><argument_list>(<argument><expr><name>highbound</name><operator>-</operator><name>lowbound</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>random_upto</name><argument_list>(<argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>iszero</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cases_biased_float</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>lowbound</name></decl></parameter>,
<parameter><decl><type><name>uint32</name></type> <name>highbound</name></decl></parameter>)</parameter_list> <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>highbound</name> <operator>-</operator> <call><name>random_upto_biased</name><argument_list>(<argument><expr><name>highbound</name><operator>-</operator><name>lowbound</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name>random_sign</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>iszero</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cases_semi1</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>param1</name></decl></parameter>,
<parameter><decl><type><name>uint32</name></type> <name>param2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>float64_case</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cases_semi1_float</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>param1</name></decl></parameter>,
<parameter><decl><type><name>uint32</name></type> <name>param2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>float32_case</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cases_semi2</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>param1</name></decl></parameter>,
<parameter><decl><type><name>uint32</name></type> <name>param2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>float64_case</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>float64_case</name><argument_list>(<argument><expr><name>out</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cases_semi2_float</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>param1</name></decl></parameter>,
<parameter><decl><type><name>uint32</name></type> <name>param2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>float32_case</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>float32_case</name><argument_list>(<argument><expr><name>out</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cases_ldexp</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>param1</name></decl></parameter>,
<parameter><decl><type><name>uint32</name></type> <name>param2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>float64_case</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>random_upto</name><argument_list>(<argument><expr><literal type="number">2048</literal></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1024</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cases_ldexp_float</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>param1</name></decl></parameter>,
<parameter><decl><type><name>uint32</name></type> <name>param2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>float32_case</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>random_upto</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">128</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cases_uniform</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>lowbound</name></decl></parameter>,
<parameter><decl><type><name>uint32</name></type> <name>highbound</name></decl></parameter>)</parameter_list> <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>highbound</name> <operator>-</operator> <call><name>random_upto</name><argument_list>(<argument><expr><name>highbound</name><operator>-</operator><name>lowbound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>random_upto</name><argument_list>(<argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name>random_sign</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>iszero</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cases_uniform_float</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>lowbound</name></decl></parameter>,
<parameter><decl><type><name>uint32</name></type> <name>highbound</name></decl></parameter>)</parameter_list> <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>highbound</name> <operator>-</operator> <call><name>random_upto</name><argument_list>(<argument><expr><name>highbound</name><operator>-</operator><name>lowbound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name>random_sign</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>iszero</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cases_uniform_positive</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>lowbound</name></decl></parameter>,
<parameter><decl><type><name>uint32</name></type> <name>highbound</name></decl></parameter>)</parameter_list> <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>highbound</name> <operator>-</operator> <call><name>random_upto</name><argument_list>(<argument><expr><name>highbound</name><operator>-</operator><name>lowbound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>random_upto</name><argument_list>(<argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>iszero</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cases_uniform_float_positive</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>lowbound</name></decl></parameter>,
<parameter><decl><type><name>uint32</name></type> <name>highbound</name></decl></parameter>)</parameter_list> <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>highbound</name> <operator>-</operator> <call><name>random_upto</name><argument_list>(<argument><expr><name>highbound</name><operator>-</operator><name>lowbound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>iszero</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>log_cases</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>param1</name></decl></parameter>,
<parameter><decl><type><name>uint32</name></type> <name>param2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>random_upto</name><argument_list>(<argument><expr><literal type="number">0x7FEFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>random_upto</name><argument_list>(<argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>iszero</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log_cases_float</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>param1</name></decl></parameter>,
<parameter><decl><type><name>uint32</name></type> <name>param2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>random_upto</name><argument_list>(<argument><expr><literal type="number">0x7F7FFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>iszero</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log1p_cases</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>param1</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>param2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32</name></type> <name>sign</name> <init>= <expr><name>random_sign</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sign</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cases_uniform_positive</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0x3c700000</literal></expr></argument>, <argument><expr><literal type="number">0x43400000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>cases_uniform_positive</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0x3c000000</literal></expr></argument>, <argument><expr><literal type="number">0x3ff00000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name>sign</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log1p_cases_float</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>param1</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>param2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32</name></type> <name>sign</name> <init>= <expr><name>random_sign</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sign</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cases_uniform_float_positive</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0x32000000</literal></expr></argument>, <argument><expr><literal type="number">0x4c000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>cases_uniform_float_positive</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0x30000000</literal></expr></argument>, <argument><expr><literal type="number">0x3f800000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name>sign</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>minmax_cases</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>param1</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>param2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>random_upto</name><argument_list>(<argument><expr><literal type="number">0x7FEFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>random_upto</name><argument_list>(<argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name>random_sign</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>random_upto</name><argument_list>(<argument><expr><literal type="number">0x7FEFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>random_upto</name><argument_list>(<argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|=</operator> <name>random_sign</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>iszero</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>minmax_cases_float</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>param1</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>param2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>random_upto</name><argument_list>(<argument><expr><literal type="number">0x7F7FFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name>random_sign</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>random_upto</name><argument_list>(<argument><expr><literal type="number">0x7F7FFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|=</operator> <name>random_sign</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>iszero</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rred_cases</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>param1</name></decl></parameter>,
<parameter><decl><type><name>uint32</name></type> <name>param2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><literal type="number">0x3fc00000</literal> <operator>+</operator> <call><name>random_upto</name><argument_list>(<argument><expr><literal type="number">0x036fffff</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>|</operator>
<operator>(</operator><call><name>random_upto</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>random_upto</name><argument_list>(<argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>iszero</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rred_cases_float</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>param1</name></decl></parameter>,
<parameter><decl><type><name>uint32</name></type> <name>param2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><literal type="number">0x3e000000</literal> <operator>+</operator> <call><name>random_upto</name><argument_list>(<argument><expr><literal type="number">0x0cffffff</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>|</operator>
<operator>(</operator><call><name>random_upto</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>iszero</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>atan2_cases</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>param1</name></decl></parameter>,
<parameter><decl><type><name>uint32</name></type> <name>param2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>expdiff</name> <init>= <expr><call><name>random_upto</name><argument_list>(<argument><expr><literal type="number">101</literal></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">51</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>swap</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>expdiff</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>expdiff</name> <operator>=</operator> <operator>-</operator><name>expdiff</name></expr>;</expr_stmt>
<expr_stmt><expr><name>swap</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>swap</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>swap</name> <operator>^</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>random_upto</name><argument_list>(<argument><expr><literal type="number">0x7FEFFFFF</literal><operator>-</operator><operator>(</operator><operator>(</operator><name>expdiff</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">20</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>swap</name> <operator>^</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>random_upto</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>expdiff</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">20</literal><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>out</name><index>[<expr><name>swap</name> <operator>^</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>random_upto</name><argument_list>(<argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>random_upto</name><argument_list>(<argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name>random_sign</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|=</operator> <name>random_sign</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>iszero</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>iszero</name><argument_list>(<argument><expr><name>out</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>atan2_cases_float</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>param1</name></decl></parameter>,
<parameter><decl><type><name>uint32</name></type> <name>param2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>expdiff</name> <init>= <expr><call><name>random_upto</name><argument_list>(<argument><expr><literal type="number">44</literal></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">22</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>swap</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>expdiff</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>expdiff</name> <operator>=</operator> <operator>-</operator><name>expdiff</name></expr>;</expr_stmt>
<expr_stmt><expr><name>swap</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>swap</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>swap</name> <operator>^</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>random_upto</name><argument_list>(<argument><expr><literal type="number">0x7F7FFFFF</literal><operator>-</operator><operator>(</operator><operator>(</operator><name>expdiff</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">23</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>swap</name> <operator>^</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>random_upto</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>expdiff</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">23</literal><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>out</name><index>[<expr><name>swap</name> <operator>^</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name>random_sign</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|=</operator> <name>random_sign</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>iszero</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>iszero</name><argument_list>(<argument><expr><name>out</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pow_cases</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>param1</name></decl></parameter>,
<parameter><decl><type><name>uint32</name></type> <name>param2</name></decl></parameter>)</parameter_list> <block>{<block_content>
























<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>dmin</name></decl>, <decl><type ref="prev"/><name>dmax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>pmin</name> <init>= <expr><literal type="number">0x3e100000</literal></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><call><name>random_upto</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ?</condition><then>
<expr><literal type="number">0x3FE</literal> <operator>-</operator> <call><name>random_upto_biased</name><argument_list>(<argument><expr><literal type="number">0x431</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><literal type="number">0x3FF</literal> <operator>+</operator> <call><name>random_upto_biased</name><argument_list>(<argument><expr><literal type="number">0x3FF</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>e</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0x3FE</literal> <operator>||</operator> <name>e</name></expr></argument> &gt;</argument_list></name> <literal type="number">0x3FF</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32</name></type> <name>imin</name></decl>, <decl><type ref="prev"/><name>imax</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&lt;</operator> <literal type="number">0x3FE</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>imin</name> <operator>=</operator> <literal type="number">0x40000</literal> <operator>/</operator> <operator>(</operator><literal type="number">0x3FE</literal> <operator>-</operator> <name>e</name><operator>)</operator></expr><operator>,</operator> <expr><name>imax</name> <operator>=</operator> <literal type="number">0x43200</literal> <operator>/</operator> <operator>(</operator><literal type="number">0x3FE</literal> <operator>-</operator> <name>e</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>imin</name> <operator>=</operator> <literal type="number">0x43200</literal> <operator>/</operator> <operator>(</operator><name>e</name> <operator>-</operator> <literal type="number">0x3FF</literal><operator>)</operator></expr><operator>,</operator> <expr><name>imax</name> <operator>=</operator> <literal type="number">0x40000</literal> <operator>/</operator> <operator>(</operator><name>e</name> <operator>-</operator> <literal type="number">0x3FF</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>dmin</name> <operator>=</operator> <call><name>doubletop</name><argument_list>(<argument><expr><name>imin</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dmax</name> <operator>=</operator> <call><name>doubletop</name><argument_list>(<argument><expr><name>imax</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>e</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">53</literal></expr> </then><else>: <expr><literal type="number">52</literal><operator>+</operator><name>e</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">52</literal> <operator>-</operator> <call><name>random_upto_biased</name><argument_list>(<argument><expr><literal type="number">51</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <literal type="number">0x3FE</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dmax</name> <operator>=</operator> <literal type="number">63</literal> <operator>-</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dmax</name> <operator>=</operator> <literal type="number">62</literal> <operator>-</operator> <name>n</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>dmax</name> <operator>=</operator> <operator>(</operator><name>dmax</name> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>+</operator> <literal type="number">0x3FF00000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dmin</name> <operator>=</operator> <name>dmax</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>random_upto</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>n</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>n</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">33</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>random_upto</name><argument_list>(<argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">33</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>random_upto</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>n</name><operator>-</operator><literal type="number">33</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>n</name><operator>-</operator><literal type="number">33</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>random_upto</name><argument_list>(<argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <literal type="number">0x3FE</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><ternary><condition><expr><name>e</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>e</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>random_upto</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dmax</name> <operator>-</operator> <call><name>random_upto_biased</name><argument_list>(<argument><expr><name>dmax</name><operator>-</operator><name>pmin</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>dmin</name> <operator>-</operator> <call><name>random_upto_biased</name><argument_list>(<argument><expr><name>dmin</name><operator>-</operator><name>pmin</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>|</operator> <literal type="number">0x80000000</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>random_upto</name><argument_list>(<argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>pow_cases_float</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>param1</name></decl></parameter>,
<parameter><decl><type><name>uint32</name></type> <name>param2</name></decl></parameter>)</parameter_list> <block>{<block_content>























<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>dmin</name></decl>, <decl><type ref="prev"/><name>dmax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>pmin</name> <init>= <expr><literal type="number">0x38000000</literal></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><call><name>random_upto</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ?</condition><then>
<expr><literal type="number">0x7E</literal> <operator>-</operator> <call><name>random_upto_biased</name><argument_list>(<argument><expr><literal type="number">0x94</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><literal type="number">0x7F</literal> <operator>+</operator> <call><name>random_upto_biased</name><argument_list>(<argument><expr><literal type="number">0x7f</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>e</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0x7E</literal> <operator>||</operator> <name>e</name></expr></argument> &gt;</argument_list></name> <literal type="number">0x7F</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32</name></type> <name>imin</name></decl>, <decl><type ref="prev"/><name>imax</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&lt;</operator> <literal type="number">0x7E</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>imin</name> <operator>=</operator> <literal type="number">0x8000</literal> <operator>/</operator> <operator>(</operator><literal type="number">0x7e</literal> <operator>-</operator> <name>e</name><operator>)</operator></expr><operator>,</operator> <expr><name>imax</name> <operator>=</operator> <literal type="number">0x9500</literal> <operator>/</operator> <operator>(</operator><literal type="number">0x7e</literal> <operator>-</operator> <name>e</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>imin</name> <operator>=</operator> <literal type="number">0x9500</literal> <operator>/</operator> <operator>(</operator><name>e</name> <operator>-</operator> <literal type="number">0x7f</literal><operator>)</operator></expr><operator>,</operator> <expr><name>imax</name> <operator>=</operator> <literal type="number">0x8000</literal> <operator>/</operator> <operator>(</operator><name>e</name> <operator>-</operator> <literal type="number">0x7f</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>dmin</name> <operator>=</operator> <call><name>floatval</name><argument_list>(<argument><expr><name>imin</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dmax</name> <operator>=</operator> <call><name>floatval</name><argument_list>(<argument><expr><name>imax</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>e</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">24</literal></expr> </then><else>: <expr><literal type="number">23</literal><operator>+</operator><name>e</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">23</literal> <operator>-</operator> <call><name>random_upto_biased</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <literal type="number">0x7E</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dmax</name> <operator>=</operator> <literal type="number">31</literal> <operator>-</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dmax</name> <operator>=</operator> <literal type="number">30</literal> <operator>-</operator> <name>n</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>dmax</name> <operator>=</operator> <operator>(</operator><name>dmax</name> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>+</operator> <literal type="number">0x3F800000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dmin</name> <operator>=</operator> <name>dmax</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>random_upto</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>n</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>n</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <literal type="number">0x7E</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0x7FFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><ternary><condition><expr><name>e</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>e</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>random_upto</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dmax</name> <operator>-</operator> <call><name>random_upto_biased</name><argument_list>(<argument><expr><name>dmax</name><operator>-</operator><name>pmin</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>dmin</name> <operator>-</operator> <call><name>random_upto_biased</name><argument_list>(<argument><expr><name>dmin</name><operator>-</operator><name>pmin</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>|</operator> <literal type="number">0x80000000</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vet_for_decline</name><parameter_list>(<parameter><decl><type><name>Testable</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>got_errno_in</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>declined</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>fn</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>args1</name></expr>:</case>
<case>case <expr><name>rred</name></expr>:</case>
<case>case <expr><name>semi1</name></expr>:</case>
<case>case <expr><name>t_frexp</name></expr>:</case>
<case>case <expr><name>t_modf</name></expr>:</case>
<case>case <expr><name>classify</name></expr>:</case>
<case>case <expr><name>t_ldexp</name></expr>:</case>
<expr_stmt><expr><name>declined</name> <operator>|=</operator> <name>lib_fo</name> <operator>&amp;&amp;</operator> <call><name>is_dhard</name><argument_list>(<argument><expr><name>args</name><operator>+</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>args1f</name></expr>:</case>
<case>case <expr><name>rredf</name></expr>:</case>
<case>case <expr><name>semi1f</name></expr>:</case>
<case>case <expr><name>t_frexpf</name></expr>:</case>
<case>case <expr><name>t_modff</name></expr>:</case>
<case>case <expr><name>classifyf</name></expr>:</case>
<expr_stmt><expr><name>declined</name> <operator>|=</operator> <name>lib_fo</name> <operator>&amp;&amp;</operator> <call><name>is_shard</name><argument_list>(<argument><expr><name>args</name><operator>+</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>args2</name></expr>:</case>
<case>case <expr><name>semi2</name></expr>:</case>
<case>case <expr><name>args1c</name></expr>:</case>
<case>case <expr><name>args1cr</name></expr>:</case>
<case>case <expr><name>compare</name></expr>:</case>
<expr_stmt><expr><name>declined</name> <operator>|=</operator> <name>lib_fo</name> <operator>&amp;&amp;</operator> <call><name>is_dhard</name><argument_list>(<argument><expr><name>args</name><operator>+</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>declined</name> <operator>|=</operator> <name>lib_fo</name> <operator>&amp;&amp;</operator> <call><name>is_dhard</name><argument_list>(<argument><expr><name>args</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>args2f</name></expr>:</case>
<case>case <expr><name>semi2f</name></expr>:</case>
<case>case <expr><name>t_ldexpf</name></expr>:</case>
<case>case <expr><name>comparef</name></expr>:</case>
<case>case <expr><name>args1fc</name></expr>:</case>
<case>case <expr><name>args1fcr</name></expr>:</case>
<expr_stmt><expr><name>declined</name> <operator>|=</operator> <name>lib_fo</name> <operator>&amp;&amp;</operator> <call><name>is_shard</name><argument_list>(<argument><expr><name>args</name><operator>+</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>declined</name> <operator>|=</operator> <name>lib_fo</name> <operator>&amp;&amp;</operator> <call><name>is_shard</name><argument_list>(<argument><expr><name>args</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>args2c</name></expr>:</case>
<expr_stmt><expr><name>declined</name> <operator>|=</operator> <name>lib_fo</name> <operator>&amp;&amp;</operator> <call><name>is_dhard</name><argument_list>(<argument><expr><name>args</name><operator>+</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>declined</name> <operator>|=</operator> <name>lib_fo</name> <operator>&amp;&amp;</operator> <call><name>is_dhard</name><argument_list>(<argument><expr><name>args</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>declined</name> <operator>|=</operator> <name>lib_fo</name> <operator>&amp;&amp;</operator> <call><name>is_dhard</name><argument_list>(<argument><expr><name>args</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>declined</name> <operator>|=</operator> <name>lib_fo</name> <operator>&amp;&amp;</operator> <call><name>is_dhard</name><argument_list>(<argument><expr><name>args</name><operator>+</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>args2fc</name></expr>:</case>
<expr_stmt><expr><name>declined</name> <operator>|=</operator> <name>lib_fo</name> <operator>&amp;&amp;</operator> <call><name>is_shard</name><argument_list>(<argument><expr><name>args</name><operator>+</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>declined</name> <operator>|=</operator> <name>lib_fo</name> <operator>&amp;&amp;</operator> <call><name>is_shard</name><argument_list>(<argument><expr><name>args</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>declined</name> <operator>|=</operator> <name>lib_fo</name> <operator>&amp;&amp;</operator> <call><name>is_shard</name><argument_list>(<argument><expr><name>args</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>declined</name> <operator>|=</operator> <name>lib_fo</name> <operator>&amp;&amp;</operator> <call><name>is_shard</name><argument_list>(<argument><expr><name>args</name><operator>+</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>fn</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>args1</name></expr>:</case>
<case>case <expr><name>args2</name></expr>:</case>
<case>case <expr><name>rred</name></expr>:</case>
<case>case <expr><name>semi1</name></expr>:</case>
<case>case <expr><name>semi2</name></expr>:</case>
<case>case <expr><name>t_ldexp</name></expr>:</case>
<case>case <expr><name>t_frexp</name></expr>:</case>
<case>case <expr><name>args1cr</name></expr>:</case>
<expr_stmt><expr><name>declined</name> <operator>|=</operator> <name>lib_fo</name> <operator>&amp;&amp;</operator> <call><name>is_dhard</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>args1f</name></expr>:</case>
<case>case <expr><name>args2f</name></expr>:</case>
<case>case <expr><name>rredf</name></expr>:</case>
<case>case <expr><name>semi1f</name></expr>:</case>
<case>case <expr><name>semi2f</name></expr>:</case>
<case>case <expr><name>t_ldexpf</name></expr>:</case>
<case>case <expr><name>args1fcr</name></expr>:</case>
<expr_stmt><expr><name>declined</name> <operator>|=</operator> <name>lib_fo</name> <operator>&amp;&amp;</operator> <call><name>is_shard</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>t_modf</name></expr>:</case>
<expr_stmt><expr><name>declined</name> <operator>|=</operator> <name>lib_fo</name> <operator>&amp;&amp;</operator> <call><name>is_dhard</name><argument_list>(<argument><expr><name>result</name><operator>+</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>declined</name> <operator>|=</operator> <name>lib_fo</name> <operator>&amp;&amp;</operator> <call><name>is_dhard</name><argument_list>(<argument><expr><name>result</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>t_modff</name></expr>:</case>
<expr_stmt><expr><name>declined</name> <operator>|=</operator> <name>lib_fo</name> <operator>&amp;&amp;</operator> <call><name>is_shard</name><argument_list>(<argument><expr><name>result</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>t_frexpf</name></expr>:</case>
<expr_stmt><expr><name>declined</name> <operator>|=</operator> <name>lib_fo</name> <operator>&amp;&amp;</operator> <call><name>is_shard</name><argument_list>(<argument><expr><name>result</name><operator>+</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>args1c</name></expr>:</case>
<case>case <expr><name>args2c</name></expr>:</case>
<expr_stmt><expr><name>declined</name> <operator>|=</operator> <name>lib_fo</name> <operator>&amp;&amp;</operator> <call><name>is_dhard</name><argument_list>(<argument><expr><name>result</name><operator>+</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>declined</name> <operator>|=</operator> <name>lib_fo</name> <operator>&amp;&amp;</operator> <call><name>is_dhard</name><argument_list>(<argument><expr><name>result</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>args1fc</name></expr>:</case>
<case>case <expr><name>args2fc</name></expr>:</case>
<expr_stmt><expr><name>declined</name> <operator>|=</operator> <name>lib_fo</name> <operator>&amp;&amp;</operator> <call><name>is_shard</name><argument_list>(<argument><expr><name>result</name><operator>+</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>declined</name> <operator>|=</operator> <name>lib_fo</name> <operator>&amp;&amp;</operator> <call><name>is_shard</name><argument_list>(<argument><expr><name>result</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>



<expr_stmt><expr><name>declined</name> <operator>|=</operator> <operator>(</operator><name>lib_no_arith</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fn</name><operator>-&gt;</operator><name>func</name></name> <operator>==</operator> <operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_add</name> <operator>||</operator>
<name><name>fn</name><operator>-&gt;</operator><name>func</name></name> <operator>==</operator> <operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_sub</name> <operator>||</operator>
<name><name>fn</name><operator>-&gt;</operator><name>func</name></name> <operator>==</operator> <operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_mul</name> <operator>||</operator>
<name><name>fn</name><operator>-&gt;</operator><name>func</name></name> <operator>==</operator> <operator>(</operator><name>funcptr</name><operator>)</operator><name>mpc_div</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>declined</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>got_errno_in</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ntests</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ntests</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>docase</name><parameter_list>(<parameter><decl><type><name>Testable</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint32</name></type> <name><name>result</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errstr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mpfr_t</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mpc_t</name></type> <name>ac</name></decl>, <decl><type ref="prev"/><name>bc</name></decl>, <decl><type ref="prev"/><name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rejected</name></decl>, <decl><type ref="prev"/><name>printextra</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wrapperctx</name></type> <name>ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mpfr_init2</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>MPFR_PREC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_init2</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>MPFR_PREC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_init2</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>MPFR_PREC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpc_init2</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>MPFR_PREC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpc_init2</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>MPFR_PREC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpc_init2</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>MPFR_PREC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"func=%s"</literal></expr></argument>, <argument><expr><name><name>fn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rejected</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>fn</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>args1</name></expr>:</case>
<case>case <expr><name>rred</name></expr>:</case>
<case>case <expr><name>semi1</name></expr>:</case>
<case>case <expr><name>t_frexp</name></expr>:</case>
<case>case <expr><name>t_modf</name></expr>:</case>
<case>case <expr><name>classify</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" op1=%08x.%08x"</literal></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>args1f</name></expr>:</case>
<case>case <expr><name>rredf</name></expr>:</case>
<case>case <expr><name>semi1f</name></expr>:</case>
<case>case <expr><name>t_frexpf</name></expr>:</case>
<case>case <expr><name>t_modff</name></expr>:</case>
<case>case <expr><name>classifyf</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" op1=%08x"</literal></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>args2</name></expr>:</case>
<case>case <expr><name>semi2</name></expr>:</case>
<case>case <expr><name>compare</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" op1=%08x.%08x"</literal></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" op2=%08x.%08x"</literal></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>args2f</name></expr>:</case>
<case>case <expr><name>semi2f</name></expr>:</case>
<case>case <expr><name>t_ldexpf</name></expr>:</case>
<case>case <expr><name>comparef</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" op1=%08x"</literal></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" op2=%08x"</literal></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>t_ldexp</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" op1=%08x.%08x"</literal></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" op2=%08x"</literal></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>args1c</name></expr>:</case>
<case>case <expr><name>args1cr</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" op1r=%08x.%08x"</literal></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" op1i=%08x.%08x"</literal></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>args2c</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" op1r=%08x.%08x"</literal></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" op1i=%08x.%08x"</literal></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" op2r=%08x.%08x"</literal></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" op2i=%08x.%08x"</literal></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>args1fc</name></expr>:</case>
<case>case <expr><name>args1fcr</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" op1r=%08x"</literal></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" op1i=%08x"</literal></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>args2fc</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" op1r=%08x"</literal></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" op1i=%08x"</literal></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" op2r=%08x"</literal></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" op2i=%08x"</literal></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"internal inconsistency?!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>rejected</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" - test case rejected\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrapper_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rejected</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>fn</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>args1</name></expr>:</case>
<expr_stmt><expr><call><name>set_mpfr_d</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrapper_op_real</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>testfunc1</name><operator>)</operator><operator>(</operator><name><name>fn</name><operator>-&gt;</operator><name>func</name></name><operator>)</operator><operator>)</operator><operator>(</operator><name>r</name><operator>,</operator> <name>a</name><operator>,</operator> <name>GMP_RNDN</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_mpfr_d</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrapper_result_real</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>wrapper_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>fn</name><operator>-&gt;</operator><name>wrappers</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>get_mpfr_d</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>args1cr</name></expr>:</case>
<expr_stmt><expr><call><name>set_mpc_d</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrapper_op_complex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>ac</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>testfunc1cr</name><operator>)</operator><operator>(</operator><name><name>fn</name><operator>-&gt;</operator><name>func</name></name><operator>)</operator><operator>)</operator><operator>(</operator><name>r</name><operator>,</operator> <name>ac</name><operator>,</operator> <name>GMP_RNDN</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_mpfr_d</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrapper_result_real</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>wrapper_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>fn</name><operator>-&gt;</operator><name>wrappers</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>get_mpfr_d</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>args1f</name></expr>:</case>
<expr_stmt><expr><call><name>set_mpfr_f</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrapper_op_real</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>testfunc1</name><operator>)</operator><operator>(</operator><name><name>fn</name><operator>-&gt;</operator><name>func</name></name><operator>)</operator><operator>)</operator><operator>(</operator><name>r</name><operator>,</operator> <name>a</name><operator>,</operator> <name>GMP_RNDN</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_mpfr_f</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrapper_result_real</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>wrapper_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>fn</name><operator>-&gt;</operator><name>wrappers</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>get_mpfr_f</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>args1fcr</name></expr>:</case>
<expr_stmt><expr><call><name>set_mpc_f</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrapper_op_complex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>ac</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>testfunc1cr</name><operator>)</operator><operator>(</operator><name><name>fn</name><operator>-&gt;</operator><name>func</name></name><operator>)</operator><operator>)</operator><operator>(</operator><name>r</name><operator>,</operator> <name>ac</name><operator>,</operator> <name>GMP_RNDN</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_mpfr_f</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrapper_result_real</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>wrapper_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>fn</name><operator>-&gt;</operator><name>wrappers</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>get_mpfr_f</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>args2</name></expr>:</case>
<expr_stmt><expr><call><name>set_mpfr_d</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrapper_op_real</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_mpfr_d</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrapper_op_real</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>args</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>testfunc2</name><operator>)</operator><operator>(</operator><name><name>fn</name><operator>-&gt;</operator><name>func</name></name><operator>)</operator><operator>)</operator><operator>(</operator><name>r</name><operator>,</operator> <name>a</name><operator>,</operator> <name>b</name><operator>,</operator> <name>GMP_RNDN</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_mpfr_d</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrapper_result_real</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>wrapper_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>fn</name><operator>-&gt;</operator><name>wrappers</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>get_mpfr_d</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>args2f</name></expr>:</case>
<expr_stmt><expr><call><name>set_mpfr_f</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrapper_op_real</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_mpfr_f</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrapper_op_real</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>args</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>testfunc2</name><operator>)</operator><operator>(</operator><name><name>fn</name><operator>-&gt;</operator><name>func</name></name><operator>)</operator><operator>)</operator><operator>(</operator><name>r</name><operator>,</operator> <name>a</name><operator>,</operator> <name>b</name><operator>,</operator> <name>GMP_RNDN</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_mpfr_f</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrapper_result_real</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>wrapper_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>fn</name><operator>-&gt;</operator><name>wrappers</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>get_mpfr_f</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>rred</name></expr>:</case>
<expr_stmt><expr><call><name>set_mpfr_d</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrapper_op_real</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>testrred</name><operator>)</operator><operator>(</operator><name><name>fn</name><operator>-&gt;</operator><name>func</name></name><operator>)</operator><operator>)</operator><operator>(</operator><name>r</name><operator>,</operator> <name>a</name><operator>,</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_mpfr_d</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrapper_result_real</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>wrapper_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>fn</name><operator>-&gt;</operator><name>wrappers</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>get_mpfr_d</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>rredf</name></expr>:</case>
<expr_stmt><expr><call><name>set_mpfr_f</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrapper_op_real</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>testrred</name><operator>)</operator><operator>(</operator><name><name>fn</name><operator>-&gt;</operator><name>func</name></name><operator>)</operator><operator>)</operator><operator>(</operator><name>r</name><operator>,</operator> <name>a</name><operator>,</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_mpfr_f</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrapper_result_real</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>wrapper_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>fn</name><operator>-&gt;</operator><name>wrappers</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>get_mpfr_f</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>semi1</name></expr>:</case>
<case>case <expr><name>semi1f</name></expr>:</case>
<expr_stmt><expr><name>errstr</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>testsemi1</name><operator>)</operator><operator>(</operator><name><name>fn</name><operator>-&gt;</operator><name>func</name></name><operator>)</operator><operator>)</operator><operator>(</operator><name>args</name><operator>,</operator> <name>result</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>semi2</name></expr>:</case>
<case>case <expr><name>compare</name></expr>:</case>
<expr_stmt><expr><name>errstr</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>testsemi2</name><operator>)</operator><operator>(</operator><name><name>fn</name><operator>-&gt;</operator><name>func</name></name><operator>)</operator><operator>)</operator><operator>(</operator><name>args</name><operator>,</operator> <name>args</name><operator>+</operator><literal type="number">2</literal><operator>,</operator> <name>result</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>semi2f</name></expr>:</case>
<case>case <expr><name>comparef</name></expr>:</case>
<case>case <expr><name>t_ldexpf</name></expr>:</case>
<expr_stmt><expr><name>errstr</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>testsemi2f</name><operator>)</operator><operator>(</operator><name><name>fn</name><operator>-&gt;</operator><name>func</name></name><operator>)</operator><operator>)</operator><operator>(</operator><name>args</name><operator>,</operator> <name>args</name><operator>+</operator><literal type="number">2</literal><operator>,</operator> <name>result</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>t_ldexp</name></expr>:</case>
<expr_stmt><expr><name>errstr</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>testldexp</name><operator>)</operator><operator>(</operator><name><name>fn</name><operator>-&gt;</operator><name>func</name></name><operator>)</operator><operator>)</operator><operator>(</operator><name>args</name><operator>,</operator> <name>args</name><operator>+</operator><literal type="number">2</literal><operator>,</operator> <name>result</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>t_frexp</name></expr>:</case>
<expr_stmt><expr><name>errstr</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>testfrexp</name><operator>)</operator><operator>(</operator><name><name>fn</name><operator>-&gt;</operator><name>func</name></name><operator>)</operator><operator>)</operator><operator>(</operator><name>args</name><operator>,</operator> <name>result</name><operator>,</operator> <name>result</name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>t_frexpf</name></expr>:</case>
<expr_stmt><expr><name>errstr</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>testfrexp</name><operator>)</operator><operator>(</operator><name><name>fn</name><operator>-&gt;</operator><name>func</name></name><operator>)</operator><operator>)</operator><operator>(</operator><name>args</name><operator>,</operator> <name>result</name><operator>,</operator> <name>result</name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>t_modf</name></expr>:</case>
<expr_stmt><expr><name>errstr</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>testmodf</name><operator>)</operator><operator>(</operator><name><name>fn</name><operator>-&gt;</operator><name>func</name></name><operator>)</operator><operator>)</operator><operator>(</operator><name>args</name><operator>,</operator> <name>result</name><operator>,</operator> <name>result</name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>t_modff</name></expr>:</case>
<expr_stmt><expr><name>errstr</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>testmodf</name><operator>)</operator><operator>(</operator><name><name>fn</name><operator>-&gt;</operator><name>func</name></name><operator>)</operator><operator>)</operator><operator>(</operator><name>args</name><operator>,</operator> <name>result</name><operator>,</operator> <name>result</name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>classify</name></expr>:</case>
<expr_stmt><expr><name>errstr</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>testclassify</name><operator>)</operator><operator>(</operator><name><name>fn</name><operator>-&gt;</operator><name>func</name></name><operator>)</operator><operator>)</operator><operator>(</operator><name>args</name><operator>,</operator> <operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>classifyf</name></expr>:</case>
<expr_stmt><expr><name>errstr</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>testclassifyf</name><operator>)</operator><operator>(</operator><name><name>fn</name><operator>-&gt;</operator><name>func</name></name><operator>)</operator><operator>)</operator><operator>(</operator><name>args</name><operator>,</operator> <operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>args1c</name></expr>:</case>
<expr_stmt><expr><call><name>set_mpc_d</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrapper_op_complex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>ac</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>testfunc1c</name><operator>)</operator><operator>(</operator><name><name>fn</name><operator>-&gt;</operator><name>func</name></name><operator>)</operator><operator>)</operator><operator>(</operator><name>rc</name><operator>,</operator> <name>ac</name><operator>,</operator> <name>MPC_RNDNN</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_mpc_d</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrapper_result_complex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>wrapper_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>fn</name><operator>-&gt;</operator><name>wrappers</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>get_mpc_d</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>args2c</name></expr>:</case>
<expr_stmt><expr><call><name>set_mpc_d</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrapper_op_complex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>ac</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_mpc_d</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrapper_op_complex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>args</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>testfunc2c</name><operator>)</operator><operator>(</operator><name><name>fn</name><operator>-&gt;</operator><name>func</name></name><operator>)</operator><operator>)</operator><operator>(</operator><name>rc</name><operator>,</operator> <name>ac</name><operator>,</operator> <name>bc</name><operator>,</operator> <name>MPC_RNDNN</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_mpc_d</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrapper_result_complex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>wrapper_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>fn</name><operator>-&gt;</operator><name>wrappers</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>get_mpc_d</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>args1fc</name></expr>:</case>
<expr_stmt><expr><call><name>set_mpc_f</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrapper_op_complex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>ac</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>testfunc1c</name><operator>)</operator><operator>(</operator><name><name>fn</name><operator>-&gt;</operator><name>func</name></name><operator>)</operator><operator>)</operator><operator>(</operator><name>rc</name><operator>,</operator> <name>ac</name><operator>,</operator> <name>MPC_RNDNN</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_mpc_f</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrapper_result_complex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>wrapper_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>fn</name><operator>-&gt;</operator><name>wrappers</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>get_mpc_f</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>args2fc</name></expr>:</case>
<expr_stmt><expr><call><name>set_mpc_f</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrapper_op_complex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>ac</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_mpc_f</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrapper_op_complex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>args</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>testfunc2c</name><operator>)</operator><operator>(</operator><name><name>fn</name><operator>-&gt;</operator><name>func</name></name><operator>)</operator><operator>)</operator><operator>(</operator><name>rc</name><operator>,</operator> <name>ac</name><operator>,</operator> <name>bc</name><operator>,</operator> <name>MPC_RNDNN</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_mpc_f</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrapper_result_complex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>wrapper_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>fn</name><operator>-&gt;</operator><name>wrappers</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>get_mpc_f</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"internal inconsistency?!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>fn</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>args1</name></expr>:</case>
<case>case <expr><name>args2</name></expr>:</case>
<case>case <expr><name>args1cr</name></expr>:</case>
<case>case <expr><name>rred</name></expr>:</case>
<expr_stmt><expr><name>printextra</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rejected</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errstr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mpfr_zero_p</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
































<if_stmt><if>if <condition>(<expr><name><name>result</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0x40000000</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>errstr</name> <operator>=</operator> <literal type="string">"underflow"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>printextra</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><name>errstr</name> <operator>=</operator> <literal type="string">"?underflow"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7ff00000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>









<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>fn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"fmax"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>fn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"fmin"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>fn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"creal"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>fn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"cimag"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>errstr</name> <operator>=</operator> <literal type="string">"u"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">0x7FEFFFFF</literal></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>fn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"lgamma"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80000000</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>is_dinteger</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errstr</name> <operator>=</operator> <literal type="string">"ERANGE status=z"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>errstr</name> <operator>=</operator> <literal type="string">"overflow"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>printextra</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>fn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"lgamma"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errstr</name> <operator>=</operator> <literal type="string">"ERANGE status=z"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>printextra</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>printextra</name> <operator>||</operator> <operator>(</operator><name>rejected</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>rejected</name><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>result</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>!=</operator><literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" result=%08x.%08x"</literal></expr></argument>,
<argument><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" result=%08x.%08x.%03x"</literal></expr></argument>,
<argument><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name><name>result</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>rred</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" res2=%08x"</literal></expr></argument>, <argument><expr><name><name>result</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>args1f</name></expr>:</case>
<case>case <expr><name>args2f</name></expr>:</case>
<case>case <expr><name>args1fcr</name></expr>:</case>
<case>case <expr><name>rredf</name></expr>:</case>
<expr_stmt><expr><name>printextra</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rejected</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errstr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mpfr_zero_p</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0x40000000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errstr</name> <operator>=</operator> <literal type="string">"underflow"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>printextra</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>errstr</name> <operator>=</operator> <literal type="string">"?underflow"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7f800000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>fn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"fmaxf"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>fn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"fminf"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>fn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"crealf"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>fn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"cimagf"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>errstr</name> <operator>=</operator> <literal type="string">"u"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">0x7F7FFFFF</literal></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>fn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"lgammaf"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80000000</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>is_sinteger</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errstr</name> <operator>=</operator> <literal type="string">"ERANGE status=z"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>errstr</name> <operator>=</operator> <literal type="string">"overflow"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>printextra</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>fn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"lgammaf"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errstr</name> <operator>=</operator> <literal type="string">"ERANGE status=z"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>printextra</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>printextra</name> <operator>||</operator> <operator>(</operator><name>rejected</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>rejected</name><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" result=%08x"</literal></expr></argument>,
<argument><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" result=%08x.%03x"</literal></expr></argument>,
<argument><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>rredf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" res2=%08x"</literal></expr></argument>, <argument><expr><name><name>result</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>semi1</name></expr>:</case>
<case>case <expr><name>semi2</name></expr>:</case>
<case>case <expr><name>t_ldexp</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" result=%08x.%08x"</literal></expr></argument>, <argument><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>semi1f</name></expr>:</case>
<case>case <expr><name>semi2f</name></expr>:</case>
<case>case <expr><name>t_ldexpf</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" result=%08x"</literal></expr></argument>, <argument><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>t_frexp</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" result=%08x.%08x res2=%08x"</literal></expr></argument>, <argument><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>result</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>t_modf</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" result=%08x.%08x res2=%08x.%08x"</literal></expr></argument>,
<argument><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>result</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>result</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>t_modff</name></expr>:</case>

<case>case <expr><name>t_frexpf</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" result=%08x res2=%08x"</literal></expr></argument>, <argument><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>result</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>classify</name></expr>:</case>
<case>case <expr><name>classifyf</name></expr>:</case>
<case>case <expr><name>compare</name></expr>:</case>
<case>case <expr><name>comparef</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" result=%x"</literal></expr></argument>, <argument><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>args1c</name></expr>:</case>
<case>case <expr><name>args2c</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" resultr=%08x.%08x"</literal></expr></argument>, <argument><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" resulti=%08x.%08x"</literal></expr></argument>, <argument><expr><name><name>result</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>result</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" resultr=%08x.%08x.%03x"</literal></expr></argument>,
<argument><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name><name>result</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" resulti=%08x.%08x.%03x"</literal></expr></argument>,
<argument><expr><name><name>result</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>result</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name><name>result</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>errstr</name> <operator>=</operator> <literal type="string">"?underflow"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>args1fc</name></expr>:</case>
<case>case <expr><name>args2fc</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" resultr=%08x"</literal></expr></argument>, <argument><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" resulti=%08x"</literal></expr></argument>, <argument><expr><name><name>result</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" resultr=%08x.%03x"</literal></expr></argument>,
<argument><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" resulti=%08x.%03x"</literal></expr></argument>,
<argument><expr><name><name>result</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name><name>result</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>errstr</name> <operator>=</operator> <literal type="string">"?underflow"</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>errstr</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>errstr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" errno=0 status=%c"</literal></expr></argument>,<argument><expr><operator>*</operator><name>errstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>errstr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>errstr</name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" maybeerror=%s"</literal></expr></argument>, <argument><expr><name>errstr</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>errstr</name> <operator>&amp;&amp;</operator> <name><name>errstr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'E'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" errno=%s"</literal></expr></argument>, <argument><expr><name>errstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" error=%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>errstr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>errstr</name></expr> ?</condition><then> <expr><name>errstr</name></expr> </then><else>: <expr><literal type="string">"0"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vet_for_decline</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
<expr_stmt><expr><call><name>mpfr_clear</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_clear</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_clear</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpc_clear</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpc_clear</name><argument_list>(<argument><expr><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpc_clear</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gencases</name><parameter_list>(<parameter><decl><type><name>Testable</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>number</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name><name>args</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>float32_case</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>float64_case</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"random=on\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>number</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>fn</name><operator>-&gt;</operator><name>cases</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name><name>fn</name><operator>-&gt;</operator><name>caseparam1</name></name></expr></argument>, <argument><expr><name><name>fn</name><operator>-&gt;</operator><name>caseparam2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>docase</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"random=off\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32</name></type> <name>doubletop</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><literal type="number">0x412</literal> <operator>+</operator> <name>scale</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>!</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x100000</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>e</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><operator>(</operator><name>e</name> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>+</operator> <name>x</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32</name></type> <name>floatval</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><literal type="number">0x95</literal> <operator>+</operator> <name>scale</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>!</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x800000</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>e</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><operator>(</operator><name>e</name> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>+</operator> <name>x</name></expr>;</return>
</block_content>}</block></function>
</unit>
