<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/arm-optimized-routines/math/test/ulp.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NEW_RT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NEW_RT</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_MPFR</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name> <name>RT</name></type>(<name>ulpscale_mpfr</name>) <parameter_list>(<parameter><decl><type><name>mpfr_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>mpfr_regular_p</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>mpfr_exp_t</name></type> <name>e</name> <init>= <expr><call><name>mpfr_get_exp</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>RT</name><argument_list>(<argument><expr><name>prec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&lt;</operator> <call><name>RT</name><argument_list>(<argument><expr><name>emin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>RT</name><argument_list>(<argument><expr><name>emin</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&gt;</operator> <call><name>RT</name><argument_list>(<argument><expr><name>emax</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>RT</name><argument_list>(<argument><expr><name>prec</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>RT</name><argument_list>(<argument><expr><name>emax</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>RT</name><argument_list>(<argument><expr><name>prec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>e</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mpfr_zero_p</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>RT</name><argument_list>(<argument><expr><name>emin</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mpfr_inf_p</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>RT</name><argument_list>(<argument><expr><name>emax</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>RT</name><argument_list>(<argument><expr><name>prec</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<decl_stmt><decl><type><specifier>static</specifier> <name>double</name> <name>RT</name></type><argument_list>(<argument><expr><name>ulperr</name></expr></argument>)</argument_list> <argument_list>(<argument><expr><macro><name>RT</name><argument_list>(<argument>float</argument>)</argument_list></macro> <name>got</name></expr></argument>, <argument><expr><specifier>const</specifier> struct <call><name>RT</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>p</name></expr></argument>, <argument><expr><name>int</name> <name>r</name></expr></argument>)</argument_list>
<block>{<block_content>
<macro><name>RT</name><argument_list>(<argument>float</argument>)</argument_list></macro> <expr_stmt><expr><name>want</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>
<macro><name>RT</name><argument_list>(<argument>float</argument>)</argument_list></macro> <expr_stmt><expr><name>d</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>e</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><call><name>RT</name><argument_list>(<argument><expr><name>asuint</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>got</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><call><name>RT</name><argument_list>(<argument><expr><name>asuint</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>want</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0.0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>signbit</name> <argument_list>(<argument><expr><name>got</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>signbit</name> <argument_list>(<argument><expr><name>want</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>


<return>return <expr><name>INFINITY</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isfinite</name> <argument_list>(<argument><expr><name>want</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>isfinite</name> <argument_list>(<argument><expr><name>got</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isnan</name> <argument_list>(<argument><expr><name>got</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>isnan</name> <argument_list>(<argument><expr><name>want</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>INFINITY</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isnan</name> <argument_list>(<argument><expr><name>want</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isinf</name> <argument_list>(<argument><expr><name>got</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>got</name> <operator>=</operator> <call><call><name>RT</name><argument_list>(<argument><expr><name>copysign</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><call><name>RT</name><argument_list>(<argument><expr><name>halfinf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>got</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>want</name> <operator>*=</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isinf</name> <argument_list>(<argument><expr><name>want</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>want</name> <operator>=</operator> <call><call><name>RT</name><argument_list>(<argument><expr><name>copysign</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><call><name>RT</name><argument_list>(<argument><expr><name>halfinf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>want</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>got</name> <operator>*=</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>FE_TONEAREST</name></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name>d</name> <operator>=</operator> <name>got</name> <operator>-</operator> <name>want</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <ternary><condition><expr><name>d</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><name><name>p</name><operator>-&gt;</operator><name>tail</name></name> <operator>-</operator> <literal type="number">0.5</literal></expr> </then><else>: <expr><operator>-</operator><name><name>p</name><operator>-&gt;</operator><name>tail</name></name> <operator>+</operator> <literal type="number">0.5</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>==</operator> <name>FE_DOWNWARD</name> <operator>&amp;&amp;</operator> <name>got</name> <operator>&lt;</operator> <name>want</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>r</name> <operator>==</operator> <name>FE_UPWARD</name> <operator>&amp;&amp;</operator> <name>got</name> <operator>&gt;</operator> <name>want</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>r</name> <operator>==</operator> <name>FE_TOWARDZERO</name> <operator>&amp;&amp;</operator> <call><name>fabs</name> <argument_list>(<argument><expr><name>got</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>fabs</name> <argument_list>(<argument><expr><name>want</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>got</name> <operator>=</operator> <call><call><name>RT</name><argument_list>(<argument><expr><name>nextafter</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>got</name></expr></argument>, <argument><expr><name>want</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>got</name> <operator>-</operator> <name>want</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>-</operator><name><name>p</name><operator>-&gt;</operator><name>tail</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><call><name>RT</name><argument_list>(<argument><expr><name>scalbn</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>-</operator><name><name>p</name><operator>-&gt;</operator><name>ulpexp</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>e</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <name>RT</name></type><argument_list>(<argument><expr><name>isok</name></expr></argument>)</argument_list> <argument_list>(<argument><expr><macro><name>RT</name><argument_list>(<argument>float</argument>)</argument_list></macro> <name>ygot</name></expr></argument>, <argument><expr><name>int</name> <name>exgot</name></expr></argument>, <argument><expr><macro><name>RT</name><argument_list>(<argument>float</argument>)</argument_list></macro> <name>ywant</name></expr></argument>, <argument><expr><name>int</name> <name>exwant</name></expr></argument>,
<argument><expr><name>int</name> <name>exmay</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><call><name>RT</name><argument_list>(<argument><expr><name>asuint</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>ygot</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><call><name>RT</name><argument_list>(<argument><expr><name>asuint</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>ywant</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>exgot</name> <operator>^</operator> <name>exwant</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>exmay</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <name>RT</name></type><argument_list>(<argument><expr><name>isok_nofenv</name></expr></argument>)</argument_list> <argument_list>(<argument><expr><macro><name>RT</name><argument_list>(<argument>float</argument>)</argument_list></macro> <name>ygot</name></expr></argument>, <argument><expr><macro><name>RT</name><argument_list>(<argument>float</argument>)</argument_list></macro> <name>ywant</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><call><name>RT</name><argument_list>(<argument><expr><name>asuint</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>ygot</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><call><name>RT</name><argument_list>(<argument><expr><name>asuint</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>ywant</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>T</name></type><argument_list>(<argument><expr><name>call_fenv</name></expr></argument>)</argument_list> <argument_list>(<argument><expr><specifier>const</specifier> struct <name>fun</name> <operator>*</operator><name>f</name></expr></argument>, <argument><expr>struct <macro><name>T</name><argument_list>(<argument>args</argument>)</argument_list></macro> <name>a</name></expr></argument>, <argument><expr><name>int</name> <name>r</name></expr></argument>,
<argument><expr><call><name>RT</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>y</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator><name>ex</name></expr></argument>)</argument_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>FE_TONEAREST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fesetround</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>feclearexcept</name> <argument_list>(<argument><expr><name>FE_ALL_EXCEPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <call><call><name>T</name><argument_list>(<argument><expr><name>call</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ex</name> <operator>=</operator> <call><name>fetestexcept</name> <argument_list>(<argument><expr><name>FE_ALL_EXCEPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>FE_TONEAREST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fesetround</name> <argument_list>(<argument><expr><name>FE_TONEAREST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>T</name></type><argument_list>(<argument><expr><name>call_nofenv</name></expr></argument>)</argument_list> <argument_list>(<argument><expr><specifier>const</specifier> struct <name>fun</name> <operator>*</operator><name>f</name></expr></argument>, <argument><expr>struct <macro><name>T</name><argument_list>(<argument>args</argument>)</argument_list></macro> <name>a</name></expr></argument>,
<argument><expr><name>int</name> <name>r</name></expr></argument>, <argument><expr><call><name>RT</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>y</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator><name>ex</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <call><call><name>T</name><argument_list>(<argument><expr><name>call</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name> <name>T</name></type><argument_list>(<argument><expr><name>call_long_fenv</name></expr></argument>)</argument_list> <argument_list>(<argument><expr><specifier>const</specifier> struct <name>fun</name> <operator>*</operator><name>f</name></expr></argument>, <argument><expr>struct <macro><name>T</name><argument_list>(<argument>args</argument>)</argument_list></macro> <name>a</name></expr></argument>,
<argument><expr><name>int</name> <name>r</name></expr></argument>, <argument><expr>struct <call><name>RT</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>p</name></expr></argument>,
<argument><expr><macro><name>RT</name><argument_list>(<argument>float</argument>)</argument_list></macro> <name>ygot</name></expr></argument>, <argument><expr><name>int</name> <name>exgot</name></expr></argument>)</argument_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>FE_TONEAREST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fesetround</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>feclearexcept</name> <argument_list>(<argument><expr><name>FE_ALL_EXCEPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name><name>struct</name> <name>T</name></name></type><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list> <name>va</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>va</name></expr>;</expr_stmt>
<macro><name>RT</name><argument_list>(<argument>double</argument>)</argument_list></macro> <expr_stmt><expr><name>yl</name> <operator>=</operator> <call><call><name>T</name><argument_list>(<argument><expr><name>call_long</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><call><name>RT</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></call><operator>)</operator> <name>yl</name></expr>;</expr_stmt>
<expr_stmt><expr><specifier>volatile</specifier> <macro><name>RT</name><argument_list>(<argument>float</argument>)</argument_list></macro> <name>vy</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>vy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ex</name></name> <operator>=</operator> <call><name>fetestexcept</name> <argument_list>(<argument><expr><name>FE_ALL_EXCEPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>FE_TONEAREST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fesetround</name> <argument_list>(<argument><expr><name>FE_TONEAREST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ex_may</name></name> <operator>=</operator> <name>FE_INEXACT</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><call><name>RT</name><argument_list>(<argument><expr><name>isok</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>ygot</name></expr></argument>, <argument><expr><name>exgot</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ex</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ex_may</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ulpexp</name></name> <operator>=</operator> <call><call><name>RT</name><argument_list>(<argument><expr><name>ulpscale</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isinf</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <call><call><name>RT</name><argument_list>(<argument><expr><name>lscalbn</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>yl</name> <operator>-</operator> <operator>(</operator><call><name>RT</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></call><operator>)</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>RT</name><argument_list>(<argument><expr><name>halfinf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><name><name>p</name><operator>-&gt;</operator><name>ulpexp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <call><call><name>RT</name><argument_list>(<argument><expr><name>lscalbn</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>yl</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>-</operator><name><name>p</name><operator>-&gt;</operator><name>ulpexp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><call><name>RT</name><argument_list>(<argument><expr><name>fabs</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>RT</name><argument_list>(<argument><expr><name>min_normal</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>y</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>ex</name></name> <operator>&amp;</operator> <name>FE_INEXACT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ex</name></name> <operator>|=</operator> <name>FE_UNDERFLOW</name> <operator>|</operator> <name>FE_INEXACT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name> <name>T</name></type><argument_list>(<argument><expr><name>call_long_nofenv</name></expr></argument>)</argument_list> <argument_list>(<argument><expr><specifier>const</specifier> struct <name>fun</name> <operator>*</operator><name>f</name></expr></argument>, <argument><expr>struct <macro><name>T</name><argument_list>(<argument>args</argument>)</argument_list></macro> <name>a</name></expr></argument>,
<argument><expr><name>int</name> <name>r</name></expr></argument>, <argument><expr>struct <call><name>RT</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>p</name></expr></argument>,
<argument><expr><macro><name>RT</name><argument_list>(<argument>float</argument>)</argument_list></macro> <name>ygot</name></expr></argument>, <argument><expr><name>int</name> <name>exgot</name></expr></argument>)</argument_list>
<block>{<block_content>
<macro><name>RT</name><argument_list>(<argument>double</argument>)</argument_list></macro> <expr_stmt><expr><name>yl</name> <operator>=</operator> <call><call><name>T</name><argument_list>(<argument><expr><name>call_long</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><call><name>RT</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></call><operator>)</operator> <name>yl</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><call><name>RT</name><argument_list>(<argument><expr><name>isok_nofenv</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>ygot</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ulpexp</name></name> <operator>=</operator> <call><call><name>RT</name><argument_list>(<argument><expr><name>ulpscale</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isinf</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <call><call><name>RT</name><argument_list>(<argument><expr><name>lscalbn</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>yl</name> <operator>-</operator> <operator>(</operator><call><name>RT</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></call><operator>)</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>RT</name><argument_list>(<argument><expr><name>halfinf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><name><name>p</name><operator>-&gt;</operator><name>ulpexp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <call><call><name>RT</name><argument_list>(<argument><expr><name>lscalbn</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>yl</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>-</operator><name><name>p</name><operator>-&gt;</operator><name>ulpexp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name> <name>T</name></type><argument_list>(<argument><expr><name>qnanpropagation</name></expr></argument>)</argument_list> <argument_list>(<argument><expr>struct <macro><name>T</name><argument_list>(<argument>args</argument>)</argument_list></macro> <name>a</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><call><name>T</name><argument_list>(<argument><expr><name>reduce</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>isnan</name></expr></argument>, <argument><expr><operator>||</operator></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><call><name>T</name><argument_list>(<argument><expr><name>reduce</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>RT</name><argument_list>(<argument><expr><name>issignaling</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>||</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<expr_stmt><expr><specifier>static</specifier> <specifier>inline</specifier> <macro><name>RT</name><argument_list>(<argument>float</argument>)</argument_list></macro> <macro><name>T</name><argument_list>(<argument>sum</argument>)</argument_list></macro> <operator>(</operator>struct <macro><name>T</name><argument_list>(<argument>args</argument>)</argument_list></macro> <name>a</name><operator>)</operator>
<block>{
<return>return <expr><call><call><name>T</name><argument_list>(<argument><expr><name>reduce</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>a</name></expr></argument>, , <argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name> <name>T</name></type><argument_list>(<argument><expr><name>call_mpfr_fix</name></expr></argument>)</argument_list> <argument_list>(<argument><expr><specifier>const</specifier> struct <name>fun</name> <operator>*</operator><name>f</name></expr></argument>, <argument><expr>struct <macro><name>T</name><argument_list>(<argument>args</argument>)</argument_list></macro> <name>a</name></expr></argument>,
<argument><expr><name>int</name> <name>r_fenv</name></expr></argument>, <argument><expr>struct <call><name>RT</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>p</name></expr></argument>,
<argument><expr><macro><name>RT</name><argument_list>(<argument>float</argument>)</argument_list></macro> <name>ygot</name></expr></argument>, <argument><expr><name>int</name> <name>exgot</name></expr></argument>)</argument_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_MPFR</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mpfr_rnd_t</name></type> <name>r</name> <init>= <expr><call><name>rmap</name> <argument_list>(<argument><expr><name>r_fenv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>MPFR_DECL_INIT</name><argument_list>(<argument><expr><name>my</name></expr></argument>, <argument><expr><call><name>RT</name><argument_list>(<argument><expr><name>prec_mpfr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MPFR_DECL_INIT</name><argument_list>(<argument><expr><name>mr</name></expr></argument>, <argument><expr><call><name>RT</name><argument_list>(<argument><expr><name>prec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MPFR_DECL_INIT</name><argument_list>(<argument><expr><name>me</name></expr></argument>, <argument><expr><call><name>RT</name><argument_list>(<argument><expr><name>prec_mpfr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_clear_flags</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><call><name>T</name><argument_list>(<argument><expr><name>call_mpfr</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>my</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>mpfr_set</name> <argument_list>(<argument><expr><name>mr</name></expr></argument>, <argument><expr><name>my</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mpfr_set_emin</name> <argument_list>(<argument><expr><call><name>RT</name><argument_list>(<argument><expr><name>emin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_set_emax</name> <argument_list>(<argument><expr><call><name>RT</name><argument_list>(<argument><expr><name>emax</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>mpfr_check_range</name> <argument_list>(<argument><expr><name>mr</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>mpfr_subnormalize</name> <argument_list>(<argument><expr><name>mr</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_set_emax</name> <argument_list>(<argument><expr><name>MPFR_EMAX_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_set_emin</name> <argument_list>(<argument><expr><name>MPFR_EMIN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <call><name>mpfr_get_d</name> <argument_list>(<argument><expr><name>mr</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ex</name></name> <operator>=</operator> <ternary><condition><expr><name>t</name></expr> ?</condition><then> <expr><name>FE_INEXACT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ex_may</name></name> <operator>=</operator> <name>FE_INEXACT</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mpfr_underflow_p</name> <argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>ex</name></name> <operator>&amp;</operator> <name>FE_INEXACT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ex</name></name> <operator>|=</operator> <name>FE_UNDERFLOW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mpfr_overflow_p</name> <argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ex</name></name> <operator>|=</operator> <name>FE_OVERFLOW</name> <operator>|</operator> <name>FE_INEXACT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mpfr_divby0_p</name> <argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ex</name></name> <operator>|=</operator> <name>FE_DIVBYZERO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mpfr_nanflag_p</name> <argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><call><name>RT</name><argument_list>(<argument><expr><name>isok</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>ygot</name></expr></argument>, <argument><expr><name>exgot</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ex</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ex_may</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mpfr_nanflag_p</name> <argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><call><name>T</name><argument_list>(<argument><expr><name>qnanpropagation</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ex</name></name> <operator>|=</operator> <name>FE_INVALID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ulpexp</name></name> <operator>=</operator> <call><call><name>RT</name><argument_list>(<argument><expr><name>ulpscale_mpfr</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>my</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isfinite</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isnan</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <call><call><name>T</name><argument_list>(<argument><expr><name>sum</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isnan</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>y</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>y</name></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>y</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>y</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><call><name>RT</name><argument_list>(<argument><expr><name>isok</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>ygot</name></expr></argument>, <argument><expr><name>exgot</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ex</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ex_may</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>mpfr_set_si_2exp</name> <argument_list>(<argument><expr><name>mr</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>signbit</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>MPFR_RNDN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mpfr_cmpabs</name> <argument_list>(<argument><expr><name>my</name></expr></argument>, <argument><expr><name>mr</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><call><name>RT</name><argument_list>(<argument><expr><name>isok</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>ygot</name></expr></argument>, <argument><expr><name>exgot</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ex</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ex_may</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>mpfr_sub</name> <argument_list>(<argument><expr><name>me</name></expr></argument>, <argument><expr><name>my</name></expr></argument>, <argument><expr><name>mr</name></expr></argument>, <argument><expr><name>MPFR_RNDN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_mul_2si</name> <argument_list>(<argument><expr><name>me</name></expr></argument>, <argument><expr><name>me</name></expr></argument>, <argument><expr><operator>-</operator><name><name>p</name><operator>-&gt;</operator><name>ulpexp</name></name></expr></argument>, <argument><expr><name>MPFR_RNDN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <call><name>mpfr_get_d</name> <argument_list>(<argument><expr><name>me</name></expr></argument>, <argument><expr><name>MPFR_RNDN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>abort</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>int</name> <name>T</name></type>(<name>cmp</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fun</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>gen</name></name> <modifier>*</modifier></type><name>gen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>maxerr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>cnt1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>cnt2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>cntfail</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>conf</name><operator>-&gt;</operator><name>r</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_mpfr</name> <init>= <expr><name><name>conf</name><operator>-&gt;</operator><name>mpfr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fenv</name> <init>= <expr><name><name>conf</name><operator>-&gt;</operator><name>fenv</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>RT</name></name></type><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list> <name>want</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>T</name></name></type><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list> <name>a</name> <init>= <expr><call><call><name>T</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>gen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>exgot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>exgot2</name></decl>;</decl_stmt>
<macro><name>RT</name><argument_list>(<argument>float</argument>)</argument_list></macro> <expr_stmt><expr><name>ygot</name></expr>;</expr_stmt>
<macro><name>RT</name><argument_list>(<argument>float</argument>)</argument_list></macro> <expr_stmt><expr><name>ygot2</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fail</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fenv</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><call><name>T</name><argument_list>(<argument><expr><name>call_fenv</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ygot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exgot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><call><name>T</name><argument_list>(<argument><expr><name>call_nofenv</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ygot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exgot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>twice</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>secondcall</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fenv</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><call><name>T</name><argument_list>(<argument><expr><name>call_fenv</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ygot2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exgot2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><call><name>T</name><argument_list>(<argument><expr><name>call_nofenv</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ygot2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exgot2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>secondcall</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><call><name>RT</name><argument_list>(<argument><expr><name>asuint</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>ygot</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><call><name>RT</name><argument_list>(<argument><expr><name>asuint</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>ygot2</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>fail</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cntfail</name><operator>++</operator></expr>;</expr_stmt>
<function_decl><type><name>T</name></type>(<name>printcall</name>) <parameter_list>(<parameter><decl><type><name>f</name></type></decl></parameter>, <parameter><decl><type><name>a</name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">" got %a then %a for same input\n"</literal></expr></argument>, <argument><expr><name>ygot</name></expr></argument>, <argument><expr><name>ygot2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><ternary><condition><expr><name>use_mpfr</name></expr>
?</condition><then> <expr><call><call><name>T</name><argument_list>(<argument><expr><name>call_mpfr_fix</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>want</name></expr></argument>, <argument><expr><name>ygot</name></expr></argument>, <argument><expr><name>exgot</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><operator>(</operator><ternary><condition><expr><name>fenv</name></expr> ?</condition><then> <expr><call><call><name>T</name><argument_list>(<argument><expr><name>call_long_fenv</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>want</name></expr></argument>, <argument><expr><name>ygot</name></expr></argument>, <argument><expr><name>exgot</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><call><name>T</name><argument_list>(<argument><expr><name>call_long_nofenv</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>want</name></expr></argument>, <argument><expr><name>ygot</name></expr></argument>, <argument><expr><name>exgot</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>print</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>err</name> <init>= <expr><call><call><name>RT</name><argument_list>(<argument><expr><name>ulperr</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>ygot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>want</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>abserr</name> <init>= <expr><call><name>fabs</name> <argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>abserr</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cnt1</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>abserr</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cnt2</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>abserr</name> <operator>&gt;</operator> <name><name>conf</name><operator>-&gt;</operator><name>errlim</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>print</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fail</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>fail</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cntfail</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>abserr</name> <operator>&gt;</operator> <name>maxerr</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>maxerr</name> <operator>=</operator> <name>abserr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>conf</name><operator>-&gt;</operator><name>quiet</name></name> <operator>&amp;&amp;</operator> <name>abserr</name> <operator>&gt;</operator> <name><name>conf</name><operator>-&gt;</operator><name>softlim</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>print</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>print</name></expr>)</condition>
<block>{<block_content>
<function_decl><type><name>T</name></type>(<name>printcall</name>) <parameter_list>(<parameter><decl><type><name>f</name></type></decl></parameter>, <parameter><decl><type><name>a</name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">" got %a want %a %+g ulp err %g\n"</literal></expr></argument>, <argument><expr><name>ygot</name></expr></argument>, <argument><expr><name><name>want</name><operator>.</operator><name>y</name></name></expr></argument>,
<argument><expr><name><name>want</name><operator>.</operator><name>tail</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><ternary><condition><expr><name>fenv</name></expr> ?</condition><then> <expr><name>exgot</name> <operator>^</operator> <name><name>want</name><operator>.</operator><name>ex</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fenv</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>diff</name> <operator>&amp;</operator> <operator>~</operator><name><name>want</name><operator>.</operator><name>ex_may</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fail</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>fail</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cntfail</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<function_decl><type><name>T</name></type>(<name>printcall</name>) <parameter_list>(<parameter><decl><type><name>f</name></type></decl></parameter>, <parameter><decl><type><name>a</name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">" is %a %+g ulp, got except 0x%0x"</literal></expr></argument>, <argument><expr><name><name>want</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>want</name><operator>.</operator><name>tail</name></name></expr></argument>,
<argument><expr><name>exgot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&amp;</operator> <name>exgot</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">" wrongly set: 0x%x"</literal></expr></argument>, <argument><expr><name>diff</name> <operator>&amp;</operator> <name>exgot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&amp;</operator> <operator>~</operator><name>exgot</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">" wrongly clear: 0x%x"</literal></expr></argument>, <argument><expr><name>diff</name> <operator>&amp;</operator> <operator>~</operator><name>exgot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>putchar</name> <argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&gt;=</operator> <name><name>conf</name><operator>-&gt;</operator><name>n</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>conf</name><operator>-&gt;</operator><name>quiet</name></name> <operator>&amp;&amp;</operator> <name>cnt</name> <operator>%</operator> <literal type="number">0x100000</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"progress: %6.3f%% cnt %llu cnt1 %llu cnt2 %llu cntfail %llu "</literal>
<literal type="string">"maxerr %g\n"</literal></expr></argument>,
<argument><expr><literal type="number">100.0</literal> <operator>*</operator> <name>cnt</name> <operator>/</operator> <name><name>conf</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name>cnt</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name>cnt1</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name>cnt2</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name>cntfail</name></expr></argument>, <argument><expr><name>maxerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<decl_stmt><decl><type><name>double</name></type> <name>cc</name> <init>= <expr><name>cnt</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cntfail</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"FAIL "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"PASS "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<function_decl><type><name>T</name></type>(<name>printgen</name>) <parameter_list>(<parameter><decl><type><name>f</name></type></decl></parameter>, <parameter><decl><type><name>gen</name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">" round %c errlim %g maxerr %g %s cnt %llu cnt1 %llu %g%% cnt2 %llu "</literal>
<literal type="string">"%g%% cntfail %llu %g%%\n"</literal></expr></argument>,
<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>errlim</name></name></expr></argument>,
<argument><expr><name>maxerr</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>conf</name><operator>-&gt;</operator><name>r</name></name> <operator>==</operator> <name>FE_TONEAREST</name></expr> ?</condition><then> <expr><literal type="string">"+0.5"</literal></expr> </then><else>: <expr><literal type="string">"+1.0"</literal></expr></else></ternary></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name>cnt</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name>cnt1</name></expr></argument>, <argument><expr><literal type="number">100.0</literal> <operator>*</operator> <name>cnt1</name> <operator>/</operator> <name>cc</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name>cnt2</name></expr></argument>, <argument><expr><literal type="number">100.0</literal> <operator>*</operator> <name>cnt2</name> <operator>/</operator> <name>cc</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name>cntfail</name></expr></argument>, <argument><expr><literal type="number">100.0</literal> <operator>*</operator> <name>cntfail</name> <operator>/</operator> <name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>!</operator><operator>!</operator><name>cntfail</name></expr>;</return>
</block_content>}</block></function>
</unit>
