<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/arm-optimized-routines/math/test/rtest/semi.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"semi.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_rint</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>isfloor</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>isceil</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>roundup</name> <init>= <expr><operator>(</operator><name>isfloor</name> <operator>&amp;&amp;</operator> <name>sign</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>isceil</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>sign</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>xh</name></decl>, <decl><type ref="prev"/><name>xl</name></decl>, <decl><type ref="prev"/><name>roundword</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ex</name> <init>= <expr><operator>(</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7FF</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ex</name> <operator>&gt;</operator> <literal type="number">0x3ff</literal> <operator>+</operator> <literal type="number">52</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>ex</name> <operator>&lt;</operator> <literal type="number">0x3ff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sign</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>roundup</name></expr> ?</condition><then> <expr><literal type="number">0x3FF00000</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><name>xh</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>xl</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>roundword</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>ex</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">0x3ff</literal> <operator>+</operator> <literal type="number">52</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>roundword</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>roundword</name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>roundword</name> <operator>=</operator> <operator>(</operator><name>roundword</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>xl</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>xl</name> <operator>=</operator> <operator>(</operator><name>xl</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>xh</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>xh</name> <operator>=</operator> <name>xh</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>roundword</name> <operator>&amp;&amp;</operator> <name>roundup</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>xl</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>xh</name> <operator>+=</operator> <operator>(</operator><name>xl</name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>ex</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">0x3ff</literal> <operator>+</operator> <literal type="number">52</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>xh</name> <operator>=</operator> <operator>(</operator><name>xh</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>xl</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>xl</name> <operator>=</operator> <operator>(</operator><name>xl</name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>xh</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>xl</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>test_ceil</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>test_rint</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>test_floor</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>test_rint</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_rintf</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>isfloor</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>isceil</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><operator>*</operator><name>in</name> <operator>&amp;</operator> <literal type="number">0x80000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>roundup</name> <init>= <expr><operator>(</operator><name>isfloor</name> <operator>&amp;&amp;</operator> <name>sign</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>isceil</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>sign</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>roundword</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ex</name> <init>= <expr><operator>(</operator><operator>*</operator><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ex</name> <operator>&gt;</operator> <literal type="number">0x7f</literal> <operator>+</operator> <literal type="number">23</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>*</operator><name>in</name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <operator>*</operator><name>in</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>ex</name> <operator>&lt;</operator> <literal type="number">0x7f</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>sign</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>roundup</name></expr> ?</condition><then> <expr><literal type="number">0x3F800000</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>*</operator><name>in</name></expr>;</expr_stmt>
<expr_stmt><expr><name>roundword</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>ex</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">0x7F</literal> <operator>+</operator> <literal type="number">23</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>roundword</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>roundword</name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>roundword</name> <operator>=</operator> <operator>(</operator><name>roundword</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>roundword</name> <operator>&amp;&amp;</operator> <name>roundup</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>ex</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">0x7F</literal> <operator>+</operator> <literal type="number">23</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>test_ceilf</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>test_rintf</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>test_floorf</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>test_rintf</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>test_fmod</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32</name></type> <name>aex</name></decl>, <decl><type ref="prev"/><name>bex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name><name>am</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>bm</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>!</operator><operator>!</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0xFFE00000</literal> <operator>||</operator>
<operator>(</operator><operator>(</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>!</operator><operator>!</operator><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0xFFE00000</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32</name></type> <name>an</name></decl>, <decl><type ref="prev"/><name>bn</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x7ff80000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>an</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>!</operator><operator>!</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bn</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>!</operator><operator>!</operator><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>an</name> <operator>&gt;</operator> <literal type="number">0xFFE00000</literal> <operator>&amp;&amp;</operator> <name>an</name> <operator>&lt;</operator> <literal type="number">0xFFF00000</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>bn</name> <operator>&gt;</operator> <literal type="number">0xFFE00000</literal> <operator>&amp;&amp;</operator> <name>bn</name> <operator>&lt;</operator> <literal type="number">0xFFF00000</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"i"</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x7ff80000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="string">"EDOM status=i"</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7FF00000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x7FF00000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x7ff80000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="string">"EDOM status=i"</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7FF00000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x7FF00000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>sign</name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_frexp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>am</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>aex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_frexp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>bm</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>bex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>am</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xFFFFF</literal></expr><operator>,</operator> <expr><name><name>am</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">0x100000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xFFFFF</literal></expr><operator>,</operator> <expr><name><name>bm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">0x100000</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>aex</name> <operator>&gt;=</operator> <name>bex</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>am</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>bm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <operator>(</operator><name><name>am</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>bm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>am</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <name><name>bm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>am</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-=</operator> <name><name>bm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>am</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>am</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>bm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>am</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <operator>~</operator><name><name>bm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>aex</name> <operator>&gt;</operator> <name>bex</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>am</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>am</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>am</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>am</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>aex</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></while>





<expr_stmt><expr><name>aex</name> <operator>+=</operator> <literal type="number">0x3fd</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>am</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name>sign</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_ldexp</name><argument_list>(<argument><expr><name>am</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>aex</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>test_fmodf</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32</name></type> <name>aex</name></decl>, <decl><type ref="prev"/><name>bex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>am</name></decl>, <decl><type ref="prev"/><name>bm</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">0x7F800000</literal> <operator>||</operator>
<operator>(</operator><operator>*</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">0x7F800000</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32</name></type> <name>an</name></decl>, <decl><type ref="prev"/><name>bn</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <literal type="number">0x7fc00001</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>an</name> <operator>=</operator> <operator>*</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bn</name> <operator>=</operator> <operator>*</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>an</name> <operator>&gt;</operator> <literal type="number">0x7f800000</literal> <operator>&amp;&amp;</operator> <name>an</name> <operator>&lt;</operator> <literal type="number">0x7fc00000</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>bn</name> <operator>&gt;</operator> <literal type="number">0x7f800000</literal> <operator>&amp;&amp;</operator> <name>bn</name> <operator>&lt;</operator> <literal type="number">0x7fc00000</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"i"</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <literal type="number">0x7fc00001</literal></expr>;</expr_stmt>
<return>return <expr><literal type="string">"EDOM status=i"</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0x7F800000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x7F800000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <literal type="number">0x7fc00001</literal></expr>;</expr_stmt>
<return>return <expr><literal type="string">"EDOM status=i"</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0x7F800000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x7F800000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>sign</name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_frexpf</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>am</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>aex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_frexpf</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bm</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>bex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>am</name> <operator>&amp;=</operator> <literal type="number">0x7FFFFF</literal></expr><operator>,</operator> <expr><name>am</name> <operator>|=</operator> <literal type="number">0x800000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bm</name> <operator>&amp;=</operator> <literal type="number">0x7FFFFF</literal></expr><operator>,</operator> <expr><name>bm</name> <operator>|=</operator> <literal type="number">0x800000</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>aex</name> <operator>&gt;=</operator> <name>bex</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>am</name> <operator>&gt;=</operator> <name>bm</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>am</name> <operator>-=</operator> <name>bm</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>aex</name> <operator>&gt;</operator> <name>bex</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>am</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>aex</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></while>





<expr_stmt><expr><name>aex</name> <operator>+=</operator> <literal type="number">0x7d</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>am</name> <operator>|=</operator> <name>sign</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_ldexpf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>am</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>aex</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>test_ldexp</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>np</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>*</operator><name>np</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32</name></type> <name>n2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name><name>y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ex</name> <init>= <expr><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7FF</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80000000</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ex</name> <operator>==</operator> <literal type="number">0x7FF</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>test_frexp</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ex</name> <operator>=</operator> <name>n</name> <operator>+</operator> <name>n2</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ex</name> <operator>&gt;</operator> <literal type="number">0x400</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sign</name> <operator>|</operator> <literal type="number">0x7FF00000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="string">"overflow"</literal></expr>;</return>
</block_content>}</block></if></if_stmt>










<if_stmt><if>if <condition>(<expr><name>ex</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1074</literal> <operator>||</operator> <operator>(</operator><name>ex</name> <operator>==</operator> <operator>-</operator><literal type="number">1074</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFFFFF</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sign</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="string">"underflow"</literal></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>ex</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1021</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32</name></type> <name>roundword</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0x000FFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">0x00100000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>roundword</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ex</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1021</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>roundword</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>roundword</name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>roundword</name> <operator>=</operator> <operator>(</operator><name>roundword</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ex</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>roundword</name> <operator>&gt;</operator> <literal type="number">0x80000000</literal> <operator>||</operator>
<operator>(</operator><name>roundword</name> <operator>==</operator> <literal type="number">0x80000000</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sign</name> <operator>|</operator> <name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>roundword</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"u"</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>ex</name> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>test_ldexpf</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>np</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>*</operator><name>np</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32</name></type> <name>n2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ex</name> <init>= <expr><operator>(</operator><operator>*</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><operator>*</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x80000000</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ex</name> <operator>==</operator> <literal type="number">0xFF</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <operator>*</operator><name>x</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <operator>*</operator><name>x</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>test_frexpf</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ex</name> <operator>=</operator> <name>n</name> <operator>+</operator> <name>n2</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ex</name> <operator>&gt;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>sign</name> <operator>|</operator> <literal type="number">0x7F800000</literal></expr>;</expr_stmt>
<return>return <expr><literal type="string">"overflow"</literal></expr>;</return>
</block_content>}</block></if></if_stmt>










<if_stmt><if>if <condition>(<expr><name>ex</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">149</literal> <operator>||</operator> <operator>(</operator><name>ex</name> <operator>==</operator> <operator>-</operator><literal type="number">149</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">0x7FFFFF</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>sign</name></expr>;</expr_stmt>
<return>return <expr><literal type="string">"underflow"</literal></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>ex</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">125</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32</name></type> <name>roundword</name></decl>;</decl_stmt>
<expr_stmt><expr><name>y</name> <operator>&amp;=</operator> <literal type="number">0x007FFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>|=</operator> <literal type="number">0x00800000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>roundword</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ex</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">125</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>roundword</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>roundword</name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>roundword</name> <operator>=</operator> <operator>(</operator><name>roundword</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>y</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ex</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>roundword</name> <operator>&gt;</operator> <literal type="number">0x80000000</literal> <operator>||</operator>
<operator>(</operator><name>roundword</name> <operator>==</operator> <literal type="number">0x80000000</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>sign</name> <operator>|</operator> <name>y</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>roundword</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"u"</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>y</name> <operator>+</operator> <operator>(</operator><name>ex</name> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>test_frexp</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>nout</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ex</name> <init>= <expr><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7FF</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ex</name> <operator>==</operator> <literal type="number">0x7FF</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ex</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>xh</name></decl>, <decl><type ref="prev"/><name>xl</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>xh</name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>xl</name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ex</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><operator>(</operator><name>xh</name> <operator>&amp;</operator> <literal type="number">0x100000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ex</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>xh</name> <operator>=</operator> <operator>(</operator><name>xh</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>xl</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>xl</name> <operator>=</operator> <operator>(</operator><name>xl</name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sign</name> <operator>|</operator> <literal type="number">0x3FE00000</literal> <operator>|</operator> <operator>(</operator><name>xh</name> <operator>&amp;</operator> <literal type="number">0xFFFFF</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>xl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ex</name> <operator>-</operator> <literal type="number">0x3FE</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x3FE00000</literal> <operator>|</operator> <operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x800FFFFF</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ex</name> <operator>-</operator> <literal type="number">0x3FE</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>test_frexpf</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>nout</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ex</name> <init>= <expr><operator>(</operator><operator>*</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ex</name> <operator>==</operator> <literal type="number">0xFF</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <operator>*</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ex</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>xv</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <operator>*</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>*</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x80000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>xv</name> <operator>=</operator> <operator>*</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ex</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><operator>(</operator><name>xv</name> <operator>&amp;</operator> <literal type="number">0x800000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ex</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>xv</name> <operator>=</operator> <name>xv</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>sign</name> <operator>|</operator> <literal type="number">0x3F000000</literal> <operator>|</operator> <operator>(</operator><name>xv</name> <operator>&amp;</operator> <literal type="number">0x7FFFFF</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ex</name> <operator>-</operator> <literal type="number">0x7E</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <literal type="number">0x3F000000</literal> <operator>|</operator> <operator>(</operator><operator>*</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x807FFFFF</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ex</name> <operator>-</operator> <literal type="number">0x7E</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>test_modf</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>fout</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>iout</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ex</name> <init>= <expr><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7FF</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>fh</name></decl>, <decl><type ref="prev"/><name>fl</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>!</operator><operator>!</operator><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&gt;</operator> <literal type="number">0x7FF00000</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>fout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>iout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>iout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>test_rint</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>iout</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fh</name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>iout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>fl</name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>iout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fh</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>fl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sign</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>iout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>iout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><operator>!</operator><operator>(</operator><name>fh</name> <operator>&amp;</operator> <literal type="number">0x100000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ex</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>fh</name> <operator>=</operator> <operator>(</operator><name>fh</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>fl</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>fl</name> <operator>=</operator> <operator>(</operator><name>fl</name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>fout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sign</name> <operator>|</operator> <operator>(</operator><name>ex</name> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>fh</name> <operator>&amp;</operator> <literal type="number">0xFFFFF</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>fl</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>test_modff</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>fout</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>iout</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ex</name> <init>= <expr><operator>(</operator><operator>*</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><operator>*</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x80000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>f</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">0x7F800000</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><operator>*</operator><name>fout</name> <operator>=</operator> <operator>*</operator><name>iout</name> <operator>=</operator> <operator>*</operator><name>x</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>test_rintf</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>iout</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>*</operator><name>x</name> <operator>-</operator> <operator>*</operator><name>iout</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>fout</name> <operator>=</operator> <name>sign</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>iout</name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>fout</name> <operator>=</operator> <operator>*</operator><name>x</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><operator>!</operator><operator>(</operator><name>f</name> <operator>&amp;</operator> <literal type="number">0x800000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ex</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name>f</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>fout</name> <operator>=</operator> <name>sign</name> <operator>|</operator> <operator>(</operator><name>ex</name> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>f</name> <operator>&amp;</operator> <literal type="number">0x7FFFFF</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>test_copysign</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ysign</name> <init>= <expr><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xhigh</name> <init>= <expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ysign</name> <operator>|</operator> <name>xhigh</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>


<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>test_copysignf</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ysign</name> <init>= <expr><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xhigh</name> <init>= <expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ysign</name> <operator>|</operator> <name>xhigh</name></expr>;</expr_stmt>


<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>test_isfinite</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>xhigh</name> <init>= <expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>xhigh</name> <operator>&amp;</operator> <literal type="number">0x7ff00000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x7ff00000</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>test_isfinitef</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7f800000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x7f800000</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>test_isinff</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x7f800000</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>test_isinf</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>xhigh</name> <init>= <expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xlow</name> <init>= <expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>xhigh</name> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x7ff00000</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>xlow</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>test_isnanf</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>exponent</name> <init>= <expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7f800000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fraction</name> <init>= <expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x007fffff</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>exponent</name> <operator>==</operator> <literal type="number">0x7f800000</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>fraction</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>test_isnan</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>exponent</name> <init>= <expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7ff00000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fractionhigh</name> <init>= <expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x000fffff</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>exponent</name> <operator>==</operator> <literal type="number">0x7ff00000</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>fractionhigh</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>test_isnormalf</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>exponent</name> <init>= <expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7f800000</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>exponent</name> <operator>==</operator> <literal type="number">0x7f800000</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>exponent</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>test_isnormal</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>exponent</name> <init>= <expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7ff00000</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>exponent</name> <operator>==</operator> <literal type="number">0x7ff00000</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>exponent</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>test_signbitf</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>test_signbit</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>test_fpclassify</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>exponent</name> <init>= <expr><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7ff00000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fraction</name> <init>= <expr><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x000fffff</literal><operator>)</operator> <operator>|</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>exponent</name> <operator>==</operator> <literal type="number">0x00</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>fraction</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>exponent</name> <operator>==</operator> <literal type="number">0x00</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>fraction</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>exponent</name> <operator>==</operator> <literal type="number">0x7ff</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>fraction</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>exponent</name> <operator>==</operator> <literal type="number">0x7ff</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>fraction</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>test_fpclassifyf</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>exponent</name> <init>= <expr><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7f800000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">23</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fraction</name> <init>= <expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x007fffff</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>exponent</name> <operator>==</operator> <literal type="number">0x000</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>fraction</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>exponent</name> <operator>==</operator> <literal type="number">0x000</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>fraction</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>exponent</name> <operator>==</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>fraction</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>exponent</name> <operator>==</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>fraction</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>fpcmp4</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0x7ff80000</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">0x7ff00000</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x7ff00000</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0x7ff80000</literal> <operator>&amp;&amp;</operator> <name>result</name> <operator>!=</operator> <operator>-</operator><literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">0x7ff00000</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x7ff00000</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>!=</operator> <operator>(</operator><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>











<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>result</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><operator>-</operator><name>result</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>fpcmp4f</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0x7fc00000</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">0x7f800000</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0x7fc00000</literal> <operator>&amp;&amp;</operator> <name>result</name> <operator>!=</operator> <operator>-</operator><literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">0x7f800000</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>!=</operator> <operator>(</operator><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>











<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>result</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><operator>-</operator><name>result</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>test_isgreater</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>fpcmp4</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <operator>(</operator><name>result</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="string">"i"</literal></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>test_isgreaterequal</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>fpcmp4</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <operator>(</operator><name>result</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="string">"i"</literal></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>test_isless</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>fpcmp4</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <operator>(</operator><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="string">"i"</literal></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>test_islessequal</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>fpcmp4</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <operator>(</operator><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>result</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="string">"i"</literal></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>test_islessgreater</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>fpcmp4</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <operator>(</operator><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>result</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="string">"i"</literal></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>test_isunordered</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>normal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>fpcmp4</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>test_isnormal</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>normal</name> <operator>|=</operator> <operator>*</operator><name>out</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_isnormal</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>normal</name> <operator>|=</operator> <operator>*</operator><name>out</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <operator>(</operator><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="string">"i"</literal></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>test_isgreaterf</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>fpcmp4f</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <operator>(</operator><name>result</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="string">"i"</literal></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>test_isgreaterequalf</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>fpcmp4f</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <operator>(</operator><name>result</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="string">"i"</literal></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>test_islessf</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>fpcmp4f</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <operator>(</operator><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="string">"i"</literal></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>test_islessequalf</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>fpcmp4f</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <operator>(</operator><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>result</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="string">"i"</literal></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>test_islessgreaterf</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>fpcmp4f</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <operator>(</operator><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>result</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="string">"i"</literal></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>test_isunorderedf</name><parameter_list>(<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>normal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>fpcmp4f</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>test_isnormalf</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>normal</name> <operator>|=</operator> <operator>*</operator><name>out</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_isnormalf</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>normal</name> <operator>|=</operator> <operator>*</operator><name>out</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <operator>(</operator><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="string">"i"</literal></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
