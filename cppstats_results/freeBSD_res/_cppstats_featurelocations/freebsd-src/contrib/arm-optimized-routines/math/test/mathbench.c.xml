<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/arm-optimized-routines/math/test/mathbench.c">






<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_GNU_SOURCE</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathlib.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WANT_VMATH</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WANT_VMATH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEASURE</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>8000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITER</name></cpp:macro> <cpp:value>125</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>double</name> <modifier>*</modifier></type><name>Trace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>trace_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name><name>A</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name><name>Af</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>measurecount</name> <init>= <expr><name>MEASURE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>itercount</name> <init>= <expr><name>ITER</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__aarch64__</name> <operator>&amp;&amp;</operator> <name>WANT_VMATH</name></expr></cpp:if>
<typedef>typedef <type><name>__f64x2_t</name></type> <name>v_double</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>v_double_len</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_double</name></type>
<name>v_double_load</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>v_double</name><operator>)</operator><block>{<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>}</block></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_double</name></type>
<name>v_double_dup</name> <parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>v_double</name><operator>)</operator><block>{<expr><name>x</name></expr>, <expr><name>x</name></expr>}</block></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><name>__f32x4_t</name></type> <name>v_float</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>v_float_len</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_float</name></type>
<name>v_float_load</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>v_float</name><operator>)</operator><block>{<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>}</block></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_float</name></type>
<name>v_float_dup</name> <parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>v_float</name><operator>)</operator><block>{<expr><name>x</name></expr>, <expr><name>x</name></expr>, <expr><name>x</name></expr>, <expr><name>x</name></expr>}</block></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>double</name></type> <name>v_double</name>;</typedef>
<typedef>typedef <type><name>float</name></type> <name>v_float</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>v_double_len</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>v_double_load</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)[0]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>v_double_dup</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>v_float_len</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>v_float_load</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)[0]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>v_float_dup</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>double</name></type>
<name>dummy</name> <parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type>
<name>dummyf</name> <parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>WANT_VMATH</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__aarch64__</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>v_double</name></type>
<name>__v_dummy</name> <parameter_list>(<parameter><decl><type><name>v_double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>v_float</name></type>
<name>__v_dummyf</name> <parameter_list>(<parameter><decl><type><name>v_float</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__vpcs</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>__vpcs</name> <specifier>static</specifier> <name>v_double</name></type>
<name>__vn_dummy</name> <parameter_list>(<parameter><decl><type><name>v_double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>__vpcs</name> <specifier>static</specifier> <name>v_float</name></type>
<name>__vn_dummyf</name> <parameter_list>(<parameter><decl><type><name>v_float</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>__vpcs</name> <specifier>static</specifier> <name>v_float</name></type>
<name>xy__vn_powf</name> <parameter_list>(<parameter><decl><type><name>v_float</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__vn_powf</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>__vpcs</name> <specifier>static</specifier> <name>v_float</name></type>
<name>xy_Z_powf</name> <parameter_list>(<parameter><decl><type><name>v_float</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_ZGVnN4vv_powf</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>__vpcs</name> <specifier>static</specifier> <name>v_double</name></type>
<name>xy__vn_pow</name> <parameter_list>(<parameter><decl><type><name>v_double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__vn_pow</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>__vpcs</name> <specifier>static</specifier> <name>v_double</name></type>
<name>xy_Z_pow</name> <parameter_list>(<parameter><decl><type><name>v_double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_ZGVnN2vv_pow</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>v_float</name></type>
<name>xy__v_powf</name> <parameter_list>(<parameter><decl><type><name>v_float</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__v_powf</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>v_double</name></type>
<name>xy__v_pow</name> <parameter_list>(<parameter><decl><type><name>v_double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__v_pow</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>float</name></type>
<name>xy__s_powf</name> <parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__s_powf</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type>
<name>xy__s_pow</name> <parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__s_pow</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>double</name></type>
<name>xypow</name> <parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>pow</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type>
<name>xypowf</name> <parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>powf</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type>
<name>xpow</name> <parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>pow</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">23.4</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type>
<name>xpowf</name> <parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>powf</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">23.4f</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type>
<name>ypow</name> <parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>pow</name> <argument_list>(<argument><expr><literal type="number">2.34</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type>
<name>ypowf</name> <parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>powf</name> <argument_list>(<argument><expr><literal type="number">2.34f</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type>
<name>sincosf_wrap</name> <parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sincosf</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>s</name> <operator>+</operator> <name>c</name></expr>;</return>
</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>fun</name>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>lo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>hi</name></decl>;</decl_stmt>
<union>union
<block>{
<function_decl><type><name>double</name></type> (<modifier>*</modifier><name>d</name>) <parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>float</name></type> (<modifier>*</modifier><name>f</name>) <parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>v_double</name></type> (<modifier>*</modifier><name>vd</name>) <parameter_list>(<parameter><decl><type><name>v_double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>v_float</name></type> (<modifier>*</modifier><name>vf</name>) <parameter_list>(<parameter><decl><type><name>v_float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__vpcs</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>__vpcs</name> <name>v_double</name></type> (<modifier>*</modifier><name>vnd</name>) <parameter_list>(<parameter><decl><type><name>v_double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__vpcs</name> <name>v_float</name></type> (<modifier>*</modifier><name>vnf</name>) <parameter_list>(<parameter><decl><type><name>v_float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block> <decl><name>fun</name></decl>;</union>
}</block> <decl><name><name>funtab</name><index>[]</index></name> <init>= <expr><block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><name>lo</name></type></parameter>, <parameter><type><name>hi</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{#func, 'd', 0, lo, hi, {.d = func}},</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><name>lo</name></type></parameter>, <parameter><type><name>hi</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{#func, 'f', 0, lo, hi, {.f = func}},</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VD</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><name>lo</name></type></parameter>, <parameter><type><name>hi</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{#func, 'd', 'v', lo, hi, {.vd = func}},</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VF</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><name>lo</name></type></parameter>, <parameter><type><name>hi</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{#func, 'f', 'v', lo, hi, {.vf = func}},</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VND</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><name>lo</name></type></parameter>, <parameter><type><name>hi</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{#func, 'd', 'n', lo, hi, {.vnd = func}},</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VNF</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><name>lo</name></type></parameter>, <parameter><type><name>hi</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{#func, 'f', 'n', lo, hi, {.vnf = func}},</cpp:value></cpp:define>
<macro><name>D</name> <argument_list>(<argument>dummy</argument>, <argument><literal type="number">1.0</literal></argument>, <argument><literal type="number">2.0</literal></argument>)</argument_list></macro>
<macro><name>D</name> <argument_list>(<argument>exp</argument>, <argument>-<literal type="number">9.9</literal></argument>, <argument><literal type="number">9.9</literal></argument>)</argument_list></macro>
<macro><name>D</name> <argument_list>(<argument>exp</argument>, <argument><literal type="number">0.5</literal></argument>, <argument><literal type="number">1.0</literal></argument>)</argument_list></macro>
<macro><name>D</name> <argument_list>(<argument>exp2</argument>, <argument>-<literal type="number">9.9</literal></argument>, <argument><literal type="number">9.9</literal></argument>)</argument_list></macro>
<macro><name>D</name> <argument_list>(<argument>log</argument>, <argument><literal type="number">0.01</literal></argument>, <argument><literal type="number">11.1</literal></argument>)</argument_list></macro>
<macro><name>D</name> <argument_list>(<argument>log</argument>, <argument><literal type="number">0.999</literal></argument>, <argument><literal type="number">1.001</literal></argument>)</argument_list></macro>
<macro><name>D</name> <argument_list>(<argument>log2</argument>, <argument><literal type="number">0.01</literal></argument>, <argument><literal type="number">11.1</literal></argument>)</argument_list></macro>
<macro><name>D</name> <argument_list>(<argument>log2</argument>, <argument><literal type="number">0.999</literal></argument>, <argument><literal type="number">1.001</literal></argument>)</argument_list></macro>
<expr><block>{<expr><literal type="string">"pow"</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0.01</literal></expr>, <expr><literal type="number">11.1</literal></expr>, <expr><block>{<expr><operator>.</operator><name>d</name> <operator>=</operator> <name>xypow</name></expr>}</block></expr>}</block></expr>,
<macro><name>D</name> <argument_list>(<argument>xpow</argument>, <argument><literal type="number">0.01</literal></argument>, <argument><literal type="number">11.1</literal></argument>)</argument_list></macro>
<macro><name>D</name> <argument_list>(<argument>ypow</argument>, <argument>-<literal type="number">9.9</literal></argument>, <argument><literal type="number">9.9</literal></argument>)</argument_list></macro>
<macro><name>D</name> <argument_list>(<argument>erf</argument>, <argument>-<literal type="number">6.0</literal></argument>, <argument><literal type="number">6.0</literal></argument>)</argument_list></macro>

<macro><name>F</name> <argument_list>(<argument>dummyf</argument>, <argument><literal type="number">1.0</literal></argument>, <argument><literal type="number">2.0</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>expf</argument>, <argument>-<literal type="number">9.9</literal></argument>, <argument><literal type="number">9.9</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>exp2f</argument>, <argument>-<literal type="number">9.9</literal></argument>, <argument><literal type="number">9.9</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>logf</argument>, <argument><literal type="number">0.01</literal></argument>, <argument><literal type="number">11.1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>log2f</argument>, <argument><literal type="number">0.01</literal></argument>, <argument><literal type="number">11.1</literal></argument>)</argument_list></macro>
<expr><block>{<expr><literal type="string">"powf"</literal></expr>, <expr><literal type="char">'f'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0.01</literal></expr>, <expr><literal type="number">11.1</literal></expr>, <expr><block>{<expr><operator>.</operator><name>f</name> <operator>=</operator> <name>xypowf</name></expr>}</block></expr>}</block></expr>,
<macro><name>F</name> <argument_list>(<argument>xpowf</argument>, <argument><literal type="number">0.01</literal></argument>, <argument><literal type="number">11.1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>ypowf</argument>, <argument>-<literal type="number">9.9</literal></argument>, <argument><literal type="number">9.9</literal></argument>)</argument_list></macro>
<expr><block>{<expr><literal type="string">"sincosf"</literal></expr>, <expr><literal type="char">'f'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0.1</literal></expr>, <expr><literal type="number">0.7</literal></expr>, <expr><block>{<expr><operator>.</operator><name>f</name> <operator>=</operator> <name>sincosf_wrap</name></expr>}</block></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"sincosf"</literal></expr>, <expr><literal type="char">'f'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0.8</literal></expr>, <expr><literal type="number">3.1</literal></expr>, <expr><block>{<expr><operator>.</operator><name>f</name> <operator>=</operator> <name>sincosf_wrap</name></expr>}</block></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"sincosf"</literal></expr>, <expr><literal type="char">'f'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">3.1</literal></expr>, <expr><literal type="number">3.1</literal></expr>, <expr><block>{<expr><operator>.</operator><name>f</name> <operator>=</operator> <name>sincosf_wrap</name></expr>}</block></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"sincosf"</literal></expr>, <expr><literal type="char">'f'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3.3</literal></expr>, <expr><literal type="number">33.3</literal></expr>, <expr><block>{<expr><operator>.</operator><name>f</name> <operator>=</operator> <name>sincosf_wrap</name></expr>}</block></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"sincosf"</literal></expr>, <expr><literal type="char">'f'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">1000</literal></expr>, <expr><block>{<expr><operator>.</operator><name>f</name> <operator>=</operator> <name>sincosf_wrap</name></expr>}</block></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"sincosf"</literal></expr>, <expr><literal type="char">'f'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1e6</literal></expr>, <expr><literal type="number">1e32</literal></expr>, <expr><block>{<expr><operator>.</operator><name>f</name> <operator>=</operator> <name>sincosf_wrap</name></expr>}</block></expr>}</block></expr>,
<macro><name>F</name> <argument_list>(<argument>sinf</argument>, <argument><literal type="number">0.1</literal></argument>, <argument><literal type="number">0.7</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>sinf</argument>, <argument><literal type="number">0.8</literal></argument>, <argument><literal type="number">3.1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>sinf</argument>, <argument>-<literal type="number">3.1</literal></argument>, <argument><literal type="number">3.1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>sinf</argument>, <argument><literal type="number">3.3</literal></argument>, <argument><literal type="number">33.3</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>sinf</argument>, <argument><literal type="number">100</literal></argument>, <argument><literal type="number">1000</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>sinf</argument>, <argument><literal type="number">1e6</literal></argument>, <argument><literal type="number">1e32</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>cosf</argument>, <argument><literal type="number">0.1</literal></argument>, <argument><literal type="number">0.7</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>cosf</argument>, <argument><literal type="number">0.8</literal></argument>, <argument><literal type="number">3.1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>cosf</argument>, <argument>-<literal type="number">3.1</literal></argument>, <argument><literal type="number">3.1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>cosf</argument>, <argument><literal type="number">3.3</literal></argument>, <argument><literal type="number">33.3</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>cosf</argument>, <argument><literal type="number">100</literal></argument>, <argument><literal type="number">1000</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>cosf</argument>, <argument><literal type="number">1e6</literal></argument>, <argument><literal type="number">1e32</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>erff</argument>, <argument>-<literal type="number">4.0</literal></argument>, <argument><literal type="number">4.0</literal></argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>WANT_VMATH</name></expr></cpp:if>
<macro><name>D</name> <argument_list>(<argument>__s_sin</argument>, <argument>-<literal type="number">3.1</literal></argument>, <argument><literal type="number">3.1</literal></argument>)</argument_list></macro>
<macro><name>D</name> <argument_list>(<argument>__s_cos</argument>, <argument>-<literal type="number">3.1</literal></argument>, <argument><literal type="number">3.1</literal></argument>)</argument_list></macro>
<macro><name>D</name> <argument_list>(<argument>__s_exp</argument>, <argument>-<literal type="number">9.9</literal></argument>, <argument><literal type="number">9.9</literal></argument>)</argument_list></macro>
<macro><name>D</name> <argument_list>(<argument>__s_log</argument>, <argument><literal type="number">0.01</literal></argument>, <argument><literal type="number">11.1</literal></argument>)</argument_list></macro>
<expr><block>{<expr><literal type="string">"__s_pow"</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0.01</literal></expr>, <expr><literal type="number">11.1</literal></expr>, <expr><block>{<expr><operator>.</operator><name>d</name> <operator>=</operator> <name>xy__s_pow</name></expr>}</block></expr>}</block></expr>,
<macro><name>F</name> <argument_list>(<argument>__s_expf</argument>, <argument>-<literal type="number">9.9</literal></argument>, <argument><literal type="number">9.9</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__s_expf_1u</argument>, <argument>-<literal type="number">9.9</literal></argument>, <argument><literal type="number">9.9</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__s_exp2f</argument>, <argument>-<literal type="number">9.9</literal></argument>, <argument><literal type="number">9.9</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__s_exp2f_1u</argument>, <argument>-<literal type="number">9.9</literal></argument>, <argument><literal type="number">9.9</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__s_logf</argument>, <argument><literal type="number">0.01</literal></argument>, <argument><literal type="number">11.1</literal></argument>)</argument_list></macro>
<expr><block>{<expr><literal type="string">"__s_powf"</literal></expr>, <expr><literal type="char">'f'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0.01</literal></expr>, <expr><literal type="number">11.1</literal></expr>, <expr><block>{<expr><operator>.</operator><name>f</name> <operator>=</operator> <name>xy__s_powf</name></expr>}</block></expr>}</block></expr>,
<macro><name>F</name> <argument_list>(<argument>__s_sinf</argument>, <argument>-<literal type="number">3.1</literal></argument>, <argument><literal type="number">3.1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__s_cosf</argument>, <argument>-<literal type="number">3.1</literal></argument>, <argument><literal type="number">3.1</literal></argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__aarch64__</name></expr></cpp:if>
<macro><name>VD</name> <argument_list>(<argument>__v_dummy</argument>, <argument><literal type="number">1.0</literal></argument>, <argument><literal type="number">2.0</literal></argument>)</argument_list></macro>
<macro><name>VD</name> <argument_list>(<argument>__v_sin</argument>, <argument>-<literal type="number">3.1</literal></argument>, <argument><literal type="number">3.1</literal></argument>)</argument_list></macro>
<macro><name>VD</name> <argument_list>(<argument>__v_cos</argument>, <argument>-<literal type="number">3.1</literal></argument>, <argument><literal type="number">3.1</literal></argument>)</argument_list></macro>
<macro><name>VD</name> <argument_list>(<argument>__v_exp</argument>, <argument>-<literal type="number">9.9</literal></argument>, <argument><literal type="number">9.9</literal></argument>)</argument_list></macro>
<macro><name>VD</name> <argument_list>(<argument>__v_log</argument>, <argument><literal type="number">0.01</literal></argument>, <argument><literal type="number">11.1</literal></argument>)</argument_list></macro>
<expr><block>{<expr><literal type="string">"__v_pow"</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'v'</literal></expr>, <expr><literal type="number">0.01</literal></expr>, <expr><literal type="number">11.1</literal></expr>, <expr><block>{<expr><operator>.</operator><name>vd</name> <operator>=</operator> <name>xy__v_pow</name></expr>}</block></expr>}</block></expr>,
<macro><name>VF</name> <argument_list>(<argument>__v_dummyf</argument>, <argument><literal type="number">1.0</literal></argument>, <argument><literal type="number">2.0</literal></argument>)</argument_list></macro>
<macro><name>VF</name> <argument_list>(<argument>__v_expf</argument>, <argument>-<literal type="number">9.9</literal></argument>, <argument><literal type="number">9.9</literal></argument>)</argument_list></macro>
<macro><name>VF</name> <argument_list>(<argument>__v_expf_1u</argument>, <argument>-<literal type="number">9.9</literal></argument>, <argument><literal type="number">9.9</literal></argument>)</argument_list></macro>
<macro><name>VF</name> <argument_list>(<argument>__v_exp2f</argument>, <argument>-<literal type="number">9.9</literal></argument>, <argument><literal type="number">9.9</literal></argument>)</argument_list></macro>
<macro><name>VF</name> <argument_list>(<argument>__v_exp2f_1u</argument>, <argument>-<literal type="number">9.9</literal></argument>, <argument><literal type="number">9.9</literal></argument>)</argument_list></macro>
<macro><name>VF</name> <argument_list>(<argument>__v_logf</argument>, <argument><literal type="number">0.01</literal></argument>, <argument><literal type="number">11.1</literal></argument>)</argument_list></macro>
<expr><block>{<expr><literal type="string">"__v_powf"</literal></expr>, <expr><literal type="char">'f'</literal></expr>, <expr><literal type="char">'v'</literal></expr>, <expr><literal type="number">0.01</literal></expr>, <expr><literal type="number">11.1</literal></expr>, <expr><block>{<expr><operator>.</operator><name>vf</name> <operator>=</operator> <name>xy__v_powf</name></expr>}</block></expr>}</block></expr>,
<macro><name>VF</name> <argument_list>(<argument>__v_sinf</argument>, <argument>-<literal type="number">3.1</literal></argument>, <argument><literal type="number">3.1</literal></argument>)</argument_list></macro>
<macro><name>VF</name> <argument_list>(<argument>__v_cosf</argument>, <argument>-<literal type="number">3.1</literal></argument>, <argument><literal type="number">3.1</literal></argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__vpcs</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>VND</name> <argument_list>(<argument>__vn_dummy</argument>, <argument><literal type="number">1.0</literal></argument>, <argument><literal type="number">2.0</literal></argument>)</argument_list></macro>
<macro><name>VND</name> <argument_list>(<argument>__vn_exp</argument>, <argument>-<literal type="number">9.9</literal></argument>, <argument><literal type="number">9.9</literal></argument>)</argument_list></macro>
<macro><name>VND</name> <argument_list>(<argument>_ZGVnN2v_exp</argument>, <argument>-<literal type="number">9.9</literal></argument>, <argument><literal type="number">9.9</literal></argument>)</argument_list></macro>
<macro><name>VND</name> <argument_list>(<argument>__vn_log</argument>, <argument><literal type="number">0.01</literal></argument>, <argument><literal type="number">11.1</literal></argument>)</argument_list></macro>
<macro><name>VND</name> <argument_list>(<argument>_ZGVnN2v_log</argument>, <argument><literal type="number">0.01</literal></argument>, <argument><literal type="number">11.1</literal></argument>)</argument_list></macro>
<expr><block>{<expr><literal type="string">"__vn_pow"</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="number">0.01</literal></expr>, <expr><literal type="number">11.1</literal></expr>, <expr><block>{<expr><operator>.</operator><name>vnd</name> <operator>=</operator> <name>xy__vn_pow</name></expr>}</block></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"_ZGVnN2vv_pow"</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="number">0.01</literal></expr>, <expr><literal type="number">11.1</literal></expr>, <expr><block>{<expr><operator>.</operator><name>vnd</name> <operator>=</operator> <name>xy_Z_pow</name></expr>}</block></expr>}</block></expr>,
<macro><name>VND</name> <argument_list>(<argument>__vn_sin</argument>, <argument>-<literal type="number">3.1</literal></argument>, <argument><literal type="number">3.1</literal></argument>)</argument_list></macro>
<macro><name>VND</name> <argument_list>(<argument>_ZGVnN2v_sin</argument>, <argument>-<literal type="number">3.1</literal></argument>, <argument><literal type="number">3.1</literal></argument>)</argument_list></macro>
<macro><name>VND</name> <argument_list>(<argument>__vn_cos</argument>, <argument>-<literal type="number">3.1</literal></argument>, <argument><literal type="number">3.1</literal></argument>)</argument_list></macro>
<macro><name>VND</name> <argument_list>(<argument>_ZGVnN2v_cos</argument>, <argument>-<literal type="number">3.1</literal></argument>, <argument><literal type="number">3.1</literal></argument>)</argument_list></macro>
<macro><name>VNF</name> <argument_list>(<argument>__vn_dummyf</argument>, <argument><literal type="number">1.0</literal></argument>, <argument><literal type="number">2.0</literal></argument>)</argument_list></macro>
<macro><name>VNF</name> <argument_list>(<argument>__vn_expf</argument>, <argument>-<literal type="number">9.9</literal></argument>, <argument><literal type="number">9.9</literal></argument>)</argument_list></macro>
<macro><name>VNF</name> <argument_list>(<argument>_ZGVnN4v_expf</argument>, <argument>-<literal type="number">9.9</literal></argument>, <argument><literal type="number">9.9</literal></argument>)</argument_list></macro>
<macro><name>VNF</name> <argument_list>(<argument>__vn_expf_1u</argument>, <argument>-<literal type="number">9.9</literal></argument>, <argument><literal type="number">9.9</literal></argument>)</argument_list></macro>
<macro><name>VNF</name> <argument_list>(<argument>__vn_exp2f</argument>, <argument>-<literal type="number">9.9</literal></argument>, <argument><literal type="number">9.9</literal></argument>)</argument_list></macro>
<macro><name>VNF</name> <argument_list>(<argument>_ZGVnN4v_exp2f</argument>, <argument>-<literal type="number">9.9</literal></argument>, <argument><literal type="number">9.9</literal></argument>)</argument_list></macro>
<macro><name>VNF</name> <argument_list>(<argument>__vn_exp2f_1u</argument>, <argument>-<literal type="number">9.9</literal></argument>, <argument><literal type="number">9.9</literal></argument>)</argument_list></macro>
<macro><name>VNF</name> <argument_list>(<argument>__vn_logf</argument>, <argument><literal type="number">0.01</literal></argument>, <argument><literal type="number">11.1</literal></argument>)</argument_list></macro>
<macro><name>VNF</name> <argument_list>(<argument>_ZGVnN4v_logf</argument>, <argument><literal type="number">0.01</literal></argument>, <argument><literal type="number">11.1</literal></argument>)</argument_list></macro>
<expr><block>{<expr><literal type="string">"__vn_powf"</literal></expr>, <expr><literal type="char">'f'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="number">0.01</literal></expr>, <expr><literal type="number">11.1</literal></expr>, <expr><block>{<expr><operator>.</operator><name>vnf</name> <operator>=</operator> <name>xy__vn_powf</name></expr>}</block></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"_ZGVnN4vv_powf"</literal></expr>, <expr><literal type="char">'f'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="number">0.01</literal></expr>, <expr><literal type="number">11.1</literal></expr>, <expr><block>{<expr><operator>.</operator><name>vnf</name> <operator>=</operator> <name>xy_Z_powf</name></expr>}</block></expr>}</block></expr>,
<macro><name>VNF</name> <argument_list>(<argument>__vn_sinf</argument>, <argument>-<literal type="number">3.1</literal></argument>, <argument><literal type="number">3.1</literal></argument>)</argument_list></macro>
<macro><name>VNF</name> <argument_list>(<argument>_ZGVnN4v_sinf</argument>, <argument>-<literal type="number">3.1</literal></argument>, <argument><literal type="number">3.1</literal></argument>)</argument_list></macro>
<macro><name>VNF</name> <argument_list>(<argument>__vn_cosf</argument>, <argument>-<literal type="number">3.1</literal></argument>, <argument><literal type="number">3.1</literal></argument>)</argument_list></macro>
<macro><name>VNF</name> <argument_list>(<argument>_ZGVnN4v_cosf</argument>, <argument>-<literal type="number">3.1</literal></argument>, <argument><literal type="number">3.1</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>F</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>D</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>VF</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>VD</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>VNF</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>VND</name></cpp:undef>
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gen_linear</name> <parameter_list>(<parameter><decl><type><name>double</name></type> <name>lo</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>hi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>lo</name> <operator>*</operator> <operator>(</operator><name>N</name> <operator>-</operator> <name>i</name><operator>)</operator> <operator>+</operator> <name>hi</name> <operator>*</operator> <name>i</name><operator>)</operator> <operator>/</operator> <name>N</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>genf_linear</name> <parameter_list>(<parameter><decl><type><name>double</name></type> <name>lo</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>hi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>Af</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>lo</name> <operator>*</operator> <operator>(</operator><name>N</name> <operator>-</operator> <name>i</name><operator>)</operator> <operator>+</operator> <name>hi</name> <operator>*</operator> <name>i</name><operator>)</operator> <operator>/</operator> <name>N</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type>
<name>asdouble</name> <parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<union>union
<block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>f</name></decl>;</decl_stmt>
}</block> <decl><name>u</name> <init>= <expr><block>{<expr><name>i</name></expr>}</block></expr></init></decl>;</union>
<return>return <expr><name><name>u</name><operator>.</operator><name>f</name></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>seed</name> <init>= <expr><literal type="number">0x0123456789abcdef</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>double</name></type>
<name>frand</name> <parameter_list>(<parameter><decl><type><name>double</name></type> <name>lo</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>hi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>seed</name> <operator>=</operator> <literal type="number">6364136223846793005ULL</literal> <operator>*</operator> <name>seed</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>lo</name> <operator>+</operator> <operator>(</operator><name>hi</name> <operator>-</operator> <name>lo</name><operator>)</operator> <operator>*</operator> <operator>(</operator><call><name>asdouble</name> <argument_list>(<argument><expr><name>seed</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal> <operator>|</operator> <literal type="number">0x3ffULL</literal> <operator>&lt;&lt;</operator> <literal type="number">52</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1.0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gen_rand</name> <parameter_list>(<parameter><decl><type><name>double</name></type> <name>lo</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>hi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>frand</name> <argument_list>(<argument><expr><name>lo</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>genf_rand</name> <parameter_list>(<parameter><decl><type><name>double</name></type> <name>lo</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>hi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>Af</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>frand</name> <argument_list>(<argument><expr><name>lo</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gen_trace</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>Trace</name><index>[<expr><name>index</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>genf_trace</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>Af</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>Trace</name><index>[<expr><name>index</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>run_thruput</name> <parameter_list>(<parameter><function_decl><type><name>double</name></type> <name>f</name> <parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>f</name> <argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>runf_thruput</name> <parameter_list>(<parameter><function_decl><type><name>float</name></type> <name>f</name> <parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>f</name> <argument_list>(<argument><expr><name><name>Af</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>double</name></type> <name>zero</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>run_latency</name> <parameter_list>(<parameter><function_decl><type><name>double</name></type> <name>f</name> <parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>z</name> <init>= <expr><name>zero</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>prev</name> <init>= <expr><name>z</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>f</name> <argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>prev</name> <operator>*</operator> <name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>runf_latency</name> <parameter_list>(<parameter><function_decl><type><name>float</name></type> <name>f</name> <parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>z</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name>zero</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>prev</name> <init>= <expr><name>z</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>f</name> <argument_list>(<argument><expr><name><name>Af</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>prev</name> <operator>*</operator> <name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>run_v_thruput</name> <parameter_list>(<parameter><function_decl><type><name>v_double</name></type> <name>f</name> <parameter_list>(<parameter><decl><type><name>v_double</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <call><name>v_double_len</name> <argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>f</name> <argument_list>(<argument><expr><call><name>v_double_load</name> <argument_list>(<argument><expr><name>A</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>runf_v_thruput</name> <parameter_list>(<parameter><function_decl><type><name>v_float</name></type> <name>f</name> <parameter_list>(<parameter><decl><type><name>v_float</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <call><name>v_float_len</name> <argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>f</name> <argument_list>(<argument><expr><call><name>v_float_load</name> <argument_list>(<argument><expr><name>Af</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>run_v_latency</name> <parameter_list>(<parameter><function_decl><type><name>v_double</name></type> <name>f</name> <parameter_list>(<parameter><decl><type><name>v_double</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v_double</name></type> <name>z</name> <init>= <expr><call><name>v_double_dup</name> <argument_list>(<argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v_double</name></type> <name>prev</name> <init>= <expr><name>z</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <call><name>v_double_len</name> <argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>f</name> <argument_list>(<argument><expr><call><name>v_double_load</name> <argument_list>(<argument><expr><name>A</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>prev</name> <operator>*</operator> <name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>runf_v_latency</name> <parameter_list>(<parameter><function_decl><type><name>v_float</name></type> <name>f</name> <parameter_list>(<parameter><decl><type><name>v_float</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v_float</name></type> <name>z</name> <init>= <expr><call><name>v_float_dup</name> <argument_list>(<argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v_float</name></type> <name>prev</name> <init>= <expr><name>z</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <call><name>v_float_len</name> <argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>f</name> <argument_list>(<argument><expr><call><name>v_float_load</name> <argument_list>(<argument><expr><name>Af</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>prev</name> <operator>*</operator> <name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__vpcs</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type>
<name>run_vn_thruput</name> <argument_list>(<argument><expr><name>__vpcs</name> <name>v_double</name> <call><name>f</name> <argument_list>(<argument><expr><name>v_double</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <call><name>v_double_len</name> <argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>f</name> <argument_list>(<argument><expr><call><name>v_double_load</name> <argument_list>(<argument><expr><name>A</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type>
<name>runf_vn_thruput</name> <argument_list>(<argument><expr><name>__vpcs</name> <name>v_float</name> <call><name>f</name> <argument_list>(<argument><expr><name>v_float</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <call><name>v_float_len</name> <argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>f</name> <argument_list>(<argument><expr><call><name>v_float_load</name> <argument_list>(<argument><expr><name>Af</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type>
<name>run_vn_latency</name> <argument_list>(<argument><expr><name>__vpcs</name> <name>v_double</name> <call><name>f</name> <argument_list>(<argument><expr><name>v_double</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v_double</name></type> <name>z</name> <init>= <expr><call><name>v_double_dup</name> <argument_list>(<argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v_double</name></type> <name>prev</name> <init>= <expr><name>z</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <call><name>v_double_len</name> <argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>f</name> <argument_list>(<argument><expr><call><name>v_double_load</name> <argument_list>(<argument><expr><name>A</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>prev</name> <operator>*</operator> <name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type>
<name>runf_vn_latency</name> <argument_list>(<argument><expr><name>__vpcs</name> <name>v_float</name> <call><name>f</name> <argument_list>(<argument><expr><name>v_float</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v_float</name></type> <name>z</name> <init>= <expr><call><name>v_float_dup</name> <argument_list>(<argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v_float</name></type> <name>prev</name> <init>= <expr><name>z</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <call><name>v_float_len</name> <argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>f</name> <argument_list>(<argument><expr><call><name>v_float_load</name> <argument_list>(<argument><expr><name>Af</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>prev</name> <operator>*</operator> <name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>uint64_t</name></type>
<name>tic</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>clock_gettime</name> <argument_list>(<argument><expr><name>CLOCK_REALTIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name><name>ts</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000000000ULL</literal> <operator>+</operator> <name><name>ts</name><operator>.</operator><name>tv_nsec</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMEIT</name><parameter_list>(<parameter><type><name>run</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { dt = -1; run (f); for (int j = 0; j &lt; measurecount; j++) { uint64_t t0 = tic (); for (int i = 0; i &lt; itercount; i++) run (f); uint64_t t1 = tic (); if (t1 - t0 &lt; dt) dt = t1 - t0; } } while (0)</cpp:value></cpp:define>













<function><type><specifier>static</specifier> <name>void</name></type>
<name>bench1</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fun</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>lo</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>hi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>dt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ns100</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><ternary><condition><expr><name>type</name> <operator>==</operator> <literal type="char">'t'</literal></expr> ?</condition><then> <expr><literal type="string">"rthruput"</literal></expr> </then><else>: <expr><literal type="string">"latency"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vlen</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>vec</name></name> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>prec</name></name> <operator>==</operator> <literal type="char">'d'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vlen</name> <operator>=</operator> <call><name>v_double_len</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>vec</name></name> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>prec</name></name> <operator>==</operator> <literal type="char">'f'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vlen</name> <operator>=</operator> <call><name>v_float_len</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>prec</name></name> <operator>==</operator> <literal type="char">'d'</literal> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>vec</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TIMEIT</name> <argument_list>(<argument><expr><name>run_thruput</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>fun</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>prec</name></name> <operator>==</operator> <literal type="char">'d'</literal> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <literal type="char">'l'</literal> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>vec</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TIMEIT</name> <argument_list>(<argument><expr><name>run_latency</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>fun</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>prec</name></name> <operator>==</operator> <literal type="char">'f'</literal> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>vec</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TIMEIT</name> <argument_list>(<argument><expr><name>runf_thruput</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>fun</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>prec</name></name> <operator>==</operator> <literal type="char">'f'</literal> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <literal type="char">'l'</literal> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>vec</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TIMEIT</name> <argument_list>(<argument><expr><name>runf_latency</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>fun</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>prec</name></name> <operator>==</operator> <literal type="char">'d'</literal> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>vec</name></name> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TIMEIT</name> <argument_list>(<argument><expr><name>run_v_thruput</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>fun</name><operator>.</operator><name>vd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>prec</name></name> <operator>==</operator> <literal type="char">'d'</literal> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <literal type="char">'l'</literal> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>vec</name></name> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TIMEIT</name> <argument_list>(<argument><expr><name>run_v_latency</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>fun</name><operator>.</operator><name>vd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>prec</name></name> <operator>==</operator> <literal type="char">'f'</literal> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>vec</name></name> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TIMEIT</name> <argument_list>(<argument><expr><name>runf_v_thruput</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>fun</name><operator>.</operator><name>vf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>prec</name></name> <operator>==</operator> <literal type="char">'f'</literal> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <literal type="char">'l'</literal> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>vec</name></name> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TIMEIT</name> <argument_list>(<argument><expr><name>runf_v_latency</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>fun</name><operator>.</operator><name>vf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__vpcs</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>prec</name></name> <operator>==</operator> <literal type="char">'d'</literal> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>vec</name></name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TIMEIT</name> <argument_list>(<argument><expr><name>run_vn_thruput</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>fun</name><operator>.</operator><name>vnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>prec</name></name> <operator>==</operator> <literal type="char">'d'</literal> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <literal type="char">'l'</literal> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>vec</name></name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TIMEIT</name> <argument_list>(<argument><expr><name>run_vn_latency</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>fun</name><operator>.</operator><name>vnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>prec</name></name> <operator>==</operator> <literal type="char">'f'</literal> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>vec</name></name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TIMEIT</name> <argument_list>(<argument><expr><name>runf_vn_thruput</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>fun</name><operator>.</operator><name>vnf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>prec</name></name> <operator>==</operator> <literal type="char">'f'</literal> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <literal type="char">'l'</literal> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>vec</name></name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TIMEIT</name> <argument_list>(<argument><expr><name>runf_vn_latency</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>fun</name><operator>.</operator><name>vnf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="char">'t'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ns100</name> <operator>=</operator> <operator>(</operator><literal type="number">100</literal> <operator>*</operator> <name>dt</name> <operator>+</operator> <name>itercount</name> <operator>*</operator> <name>N</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>itercount</name> <operator>*</operator> <name>N</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%9s %8s: %4u.%02u ns/elem %10llu ns in [%g %g]\n"</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><name>ns100</name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><name>ns100</name> <operator>%</operator> <literal type="number">100</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name>dt</name></expr></argument>, <argument><expr><name>lo</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ns100</name> <operator>=</operator> <operator>(</operator><literal type="number">100</literal> <operator>*</operator> <name>dt</name> <operator>+</operator> <name>itercount</name> <operator>*</operator> <name>N</name> <operator>/</operator> <name>vlen</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>itercount</name> <operator>*</operator> <name>N</name> <operator>/</operator> <name>vlen</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%9s %8s: %4u.%02u ns/call %10llu ns in [%g %g]\n"</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><name>ns100</name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><name>ns100</name> <operator>%</operator> <literal type="number">100</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name>dt</name></expr></argument>, <argument><expr><name>lo</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fflush</name> <argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>bench</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fun</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>lo</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>hi</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>prec</name></name> <operator>==</operator> <literal type="char">'d'</literal> <operator>&amp;&amp;</operator> <name>gen</name> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gen_rand</name> <argument_list>(<argument><expr><name>lo</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>prec</name></name> <operator>==</operator> <literal type="char">'d'</literal> <operator>&amp;&amp;</operator> <name>gen</name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gen_linear</name> <argument_list>(<argument><expr><name>lo</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>prec</name></name> <operator>==</operator> <literal type="char">'d'</literal> <operator>&amp;&amp;</operator> <name>gen</name> <operator>==</operator> <literal type="char">'t'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gen_trace</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>prec</name></name> <operator>==</operator> <literal type="char">'f'</literal> <operator>&amp;&amp;</operator> <name>gen</name> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>genf_rand</name> <argument_list>(<argument><expr><name>lo</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>prec</name></name> <operator>==</operator> <literal type="char">'f'</literal> <operator>&amp;&amp;</operator> <name>gen</name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>genf_linear</name> <argument_list>(<argument><expr><name>lo</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>prec</name></name> <operator>==</operator> <literal type="char">'f'</literal> <operator>&amp;&amp;</operator> <name>gen</name> <operator>==</operator> <literal type="char">'t'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>genf_trace</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>gen</name> <operator>==</operator> <literal type="char">'t'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <name>trace_size</name> <operator>/</operator> <name>N</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="char">'b'</literal> <operator>||</operator> <name>type</name> <operator>==</operator> <literal type="char">'t'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bench1</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>, <argument><expr><name>lo</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="char">'b'</literal> <operator>||</operator> <name>type</name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bench1</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><name>lo</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>N</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>trace_size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>N</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>prec</name></name> <operator>==</operator> <literal type="char">'d'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gen_trace</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>genf_trace</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>lo</name> <operator>=</operator> <name>i</name> <operator>/</operator> <name>N</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="char">'b'</literal> <operator>||</operator> <name>type</name> <operator>==</operator> <literal type="char">'t'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bench1</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>, <argument><expr><name>lo</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="char">'b'</literal> <operator>||</operator> <name>type</name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bench1</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><name>lo</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>readtrace</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><ternary><condition><expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>stdin</name></expr> </then><else>: <expr><call><name>fopen</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"openning \"%s\" failed: %m\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <name>trace_size</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>trace_size</name> <operator>+=</operator> <name>N</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Trace</name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name>Trace</name></expr></argument>, <argument><expr><name>trace_size</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>Trace</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Trace</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"out of memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fscanf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%lf"</literal></expr></argument>, <argument><expr><name>Trace</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>ferror</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"reading \"%s\" failed: %m\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fclose</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>%</operator> <name>N</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>trace_size</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>trace_size</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>Trace</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>Trace</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>usage</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"usage: ./mathbench [-g rand|linear|trace] [-t latency|thruput|both] "</literal>
<literal type="string">"[-i low high] [-f tracefile] [-m measurements] [-c iterations] func "</literal>
<literal type="string">"[func2 ..]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"func:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%7s [run all benchmarks]\n"</literal></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fun</name></name> <modifier>*</modifier><name>f</name></type> <init>= <expr><name>funtab</name></expr></init></decl>;</init> <condition><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition> <incr><expr><name>f</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%7s [low: %g high: %g]\n"</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>lo</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>hi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>usergen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>gen</name> <init>= <expr><literal type="char">'r'</literal></expr></init></decl>, <decl><type ref="prev"/><name>type</name> <init>= <expr><literal type="char">'b'</literal></expr></init></decl>, <decl><type ref="prev"/><name>all</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>lo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>hi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tracefile</name> <init>= <expr><literal type="string">"-"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usage</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-i"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>usergen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lo</name> <operator>=</operator> <call><name>strtod</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <call><name>strtod</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-m"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>measurecount</name> <operator>=</operator> <call><name>strtol</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-c"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>itercount</name> <operator>=</operator> <call><name>strtol</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-g"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>gen</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strchr</name> <argument_list>(<argument><expr><literal type="string">"rlt"</literal></expr></argument>, <argument><expr><name>gen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usage</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>argv</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-f"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>gen</name> <operator>=</operator> <literal type="char">'t'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tracefile</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-t"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strchr</name> <argument_list>(<argument><expr><literal type="string">"ltb"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usage</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>argv</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usage</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>gen</name> <operator>==</operator> <literal type="char">'t'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>readtrace</name> <argument_list>(<argument><expr><name>tracefile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lo</name> <operator>=</operator> <name>hi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>usergen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>all</name> <operator>=</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fun</name></name> <modifier>*</modifier><name>f</name></type> <init>= <expr><name>funtab</name></expr></init></decl>;</init> <condition><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition> <incr><expr><name>f</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>all</name> <operator>||</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>usergen</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>lo</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>lo</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>hi</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>bench</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>lo</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>gen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>usergen</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>all</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"unknown function: %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
