<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/arm-optimized-routines/math/test/rtest/main.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"intern.h"</cpp:file></cpp:include>

<function_decl><type><name>void</name></type> <name>gencases</name><parameter_list>(<parameter><decl><type><name>Testable</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>number</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>docase</name><parameter_list>(<parameter><decl><type><name>Testable</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>vet_for_decline</name><parameter_list>(<parameter><decl><type><name>Testable</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>got_errno_in</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>seed_random</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>seed</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>int</name></type> <name>check_declines</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lib_fo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lib_no_arith</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ntests</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>nargs_</name><parameter_list>(<parameter><decl><type><name>Testable</name><modifier>*</modifier></type> <name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch<condition>(<expr><operator>(</operator><name>f</name><operator>)</operator><operator>-&gt;</operator><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>args2</name></expr>:</case>
<case>case <expr><name>args2f</name></expr>:</case>
<case>case <expr><name>semi2</name></expr>:</case>
<case>case <expr><name>semi2f</name></expr>:</case>
<case>case <expr><name>t_ldexp</name></expr>:</case>
<case>case <expr><name>t_ldexpf</name></expr>:</case>
<case>case <expr><name>args1c</name></expr>:</case>
<case>case <expr><name>args1fc</name></expr>:</case>
<case>case <expr><name>args1cr</name></expr>:</case>
<case>case <expr><name>args1fcr</name></expr>:</case>
<case>case <expr><name>compare</name></expr>:</case>
<case>case <expr><name>comparef</name></expr>:</case>
<return>return <expr><literal type="number">2</literal></expr>;</return>
<case>case <expr><name>args2c</name></expr>:</case>
<case>case <expr><name>args2fc</name></expr>:</case>
<return>return <expr><literal type="number">4</literal></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>isdouble</name><parameter_list>(<parameter><decl><type><name>Testable</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>args1</name></expr>:</case>
<case>case <expr><name>rred</name></expr>:</case>
<case>case <expr><name>semi1</name></expr>:</case>
<case>case <expr><name>t_frexp</name></expr>:</case>
<case>case <expr><name>t_modf</name></expr>:</case>
<case>case <expr><name>classify</name></expr>:</case>
<case>case <expr><name>t_ldexp</name></expr>:</case>
<case>case <expr><name>args2</name></expr>:</case>
<case>case <expr><name>semi2</name></expr>:</case>
<case>case <expr><name>args1c</name></expr>:</case>
<case>case <expr><name>args1cr</name></expr>:</case>
<case>case <expr><name>compare</name></expr>:</case>
<case>case <expr><name>args2c</name></expr>:</case>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>args1f</name></expr>:</case>
<case>case <expr><name>rredf</name></expr>:</case>
<case>case <expr><name>semi1f</name></expr>:</case>
<case>case <expr><name>t_frexpf</name></expr>:</case>
<case>case <expr><name>t_modff</name></expr>:</case>
<case>case <expr><name>classifyf</name></expr>:</case>
<case>case <expr><name>args2f</name></expr>:</case>
<case>case <expr><name>semi2f</name></expr>:</case>
<case>case <expr><name>t_ldexpf</name></expr>:</case>
<case>case <expr><name>comparef</name></expr>:</case>
<case>case <expr><name>args1fc</name></expr>:</case>
<case>case <expr><name>args1fcr</name></expr>:</case>
<case>case <expr><name>args2fc</name></expr>:</case>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="string">"Bad function type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>Testable</name> <modifier>*</modifier></type><name>find_function</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nfunctions</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>func</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name><name>functions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>functions</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>get_operand</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>Testable</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>word0</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>word1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<struct>struct <name>special</name> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>dblword0</name></decl>, <decl><type ref="prev"/><name>dblword1</name></decl>, <decl><type ref="prev"/><name>sglword</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block> <decl><name><name>specials</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="number">0x00000000</literal></expr>,<expr><literal type="number">0x00000000</literal></expr>,<expr><literal type="number">0x00000000</literal></expr>,<expr><literal type="string">"0"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3FF00000</literal></expr>,<expr><literal type="number">0x00000000</literal></expr>,<expr><literal type="number">0x3f800000</literal></expr>,<expr><literal type="string">"1"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x7FF00000</literal></expr>,<expr><literal type="number">0x00000000</literal></expr>,<expr><literal type="number">0x7f800000</literal></expr>,<expr><literal type="string">"inf"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x7FF80000</literal></expr>,<expr><literal type="number">0x00000001</literal></expr>,<expr><literal type="number">0x7fc00000</literal></expr>,<expr><literal type="string">"qnan"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x7FF00000</literal></expr>,<expr><literal type="number">0x00000001</literal></expr>,<expr><literal type="number">0x7f800001</literal></expr>,<expr><literal type="string">"snan"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3ff921fb</literal></expr>,<expr><literal type="number">0x54442d18</literal></expr>,<expr><literal type="number">0x3fc90fdb</literal></expr>,<expr><literal type="string">"pi2"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x400921fb</literal></expr>,<expr><literal type="number">0x54442d18</literal></expr>,<expr><literal type="number">0x40490fdb</literal></expr>,<expr><literal type="string">"pi"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3fe921fb</literal></expr>,<expr><literal type="number">0x54442d18</literal></expr>,<expr><literal type="number">0x3f490fdb</literal></expr>,<expr><literal type="string">"pi4"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x4002d97c</literal></expr>,<expr><literal type="number">0x7f3321d2</literal></expr>,<expr><literal type="number">0x4016cbe4</literal></expr>,<expr><literal type="string">"3pi4"</literal></expr>}</block></expr>,
}</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>specials</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>specials</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>specials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>(</operator><operator>(</operator><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>specials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isdouble</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>word0</name> <operator>=</operator> <name><name>specials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dblword0</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>word1</name> <operator>=</operator> <name><name>specials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dblword1</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>word0</name> <operator>=</operator> <name><name>specials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sglword</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>word1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>word0</name> <operator>|=</operator> <literal type="number">0x80000000U</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>I32</name><literal type="string">"x.%"</literal><name>I32</name><literal type="string">"x"</literal></expr></argument>, <argument><expr><name>word0</name></expr></argument>, <argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dofile</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>translating</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>sparebuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>














<while>while <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><call><name>strcspn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>sparebuf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>p</name> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>translating</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"seed "</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seed_random</name><argument_list>(<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>buf</name><operator>+</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"random="</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>







<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"test "</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ntests</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ntests</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ntests</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nfunctions</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name><name>functions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gencases</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>functions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>ntests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>nfunctions</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"unknown test `%s'\n"</literal></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<decl_stmt><decl><type><name>uint32</name></type> <name><name>ops</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>result</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>got_op</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Testable</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>got_result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>got_errno_in</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>q</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">" \t"</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>q</name></expr>;</condition> <incr><expr><name>q</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" \t"</literal></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>find_function</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>r</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="string">"func"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>find_function</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="string">"op1"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="string">"op1r"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_operand</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ops</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ops</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>got_op</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="string">"op2"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="string">"op1i"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_operand</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ops</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ops</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>got_op</name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="string">"op2r"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_operand</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ops</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ops</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>got_op</name> <operator>|=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="string">"op2i"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_operand</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ops</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ops</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>got_op</name> <operator>|=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="string">"result"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="string">"resultr"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_operand</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>got_result</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="string">"resulti"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_operand</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>got_result</name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="string">"res2"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_operand</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>got_result</name> <operator>|=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="string">"errno_in"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>got_errno_in</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>













<if_stmt><if>if <condition>(<expr><name>got_result</name> <operator>&amp;&amp;</operator> <name>translating</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vet_for_decline</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>ops</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>got_errno_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><name>sparebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>&amp;&amp;</operator> <name>got_op</name><operator>==</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><call><name>nargs_</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>docase</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>errs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>opts</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>files</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>translating</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>seed</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>seed_random</name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setvbuf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>_IOLBF</name></expr></argument>, <argument><expr><name>BUFSIZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>--</operator><name>argc</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><operator>++</operator><name>argv</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>opts</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"-t"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>translating</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"-T"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>translating</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"-c"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>check_declines</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>opts</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="string">"--seed"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <literal type="number">1</literal><operator>==</operator><call><name>sscanf</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>argv</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>,<argument><expr><literal type="string">"%u"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>seed</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seed_random</name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>argc</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"-fo"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lib_fo</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"-noarith"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lib_no_arith</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"rtest: ignoring unrecognised option '%s'\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errs</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>files</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>errs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dofile</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>translating</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errs</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>files</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>errs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dofile</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>, <argument><expr><name>translating</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>check_declines</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Tests expected to run: %d\n"</literal></expr></argument>, <argument><expr><name>ntests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>errs</name></expr>;</return>
</block_content>}</block></function>
</unit>
