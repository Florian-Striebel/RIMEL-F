<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/arm-optimized-routines/math/test/ulp.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fenv.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathlib.h"</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_MPFR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_MPFR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_MPFR</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mpfr.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WANT_VMATH</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WANT_VMATH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type>
<name>asuint64</name> <parameter_list>(<parameter><decl><type><name>double</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<union>union
<block>{
<decl_stmt><decl><type><name>double</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name></decl>;</decl_stmt>
}</block> <decl><name>u</name> <init>= <expr><block>{<expr><name>f</name></expr>}</block></expr></init></decl>;</union>
<return>return <expr><name><name>u</name><operator>.</operator><name>i</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type>
<name>asdouble</name> <parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<union>union
<block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>f</name></decl>;</decl_stmt>
}</block> <decl><name>u</name> <init>= <expr><block>{<expr><name>i</name></expr>}</block></expr></init></decl>;</union>
<return>return <expr><name><name>u</name><operator>.</operator><name>f</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>asuint</name> <parameter_list>(<parameter><decl><type><name>float</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<union>union
<block>{
<decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
}</block> <decl><name>u</name> <init>= <expr><block>{<expr><name>f</name></expr>}</block></expr></init></decl>;</union>
<return>return <expr><name><name>u</name><operator>.</operator><name>i</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type>
<name>asfloat</name> <parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<union>union
<block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt>
}</block> <decl><name>u</name> <init>= <expr><block>{<expr><name>i</name></expr>}</block></expr></init></decl>;</union>
<return>return <expr><name><name>u</name><operator>.</operator><name>f</name></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>seed</name> <init>= <expr><literal type="number">0x0123456789abcdef</literal></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>uint64_t</name></type>
<name>rand64</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>seed</name> <operator>=</operator> <literal type="number">6364136223846793005ull</literal> <operator>*</operator> <name>seed</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>seed</name> <operator>^</operator> <operator>(</operator><name>seed</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>uint64_t</name></type>
<name>randn</name> <parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rand64</name> <argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>rand64</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>r</name> <operator>%</operator> <name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>-</operator> <name>m</name> <operator>&lt;=</operator> <operator>-</operator><name>n</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>m</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<struct>struct <name>gen</name>
<block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>start2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>len2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>step</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>cnt</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>args_f1</name>
<block>{
<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>args_f2</name>
<block>{
<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>x2</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>args_d1</name>
<block>{
<decl_stmt><decl><type><name>double</name></type> <name>x</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>args_d2</name>
<block>{
<decl_stmt><decl><type><name>double</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>x2</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>ret_f</name>
<block>{
<decl_stmt><decl><type><name>float</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>tail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ulpexp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ex_may</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>ret_d</name>
<block>{
<decl_stmt><decl><type><name>double</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>tail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ulpexp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ex_may</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type>
<name>next1</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gen</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<decl_stmt><decl><type><name>uint64_t</name></type> <name>r</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <name><name>g</name><operator>-&gt;</operator><name>off</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>off</name></name> <operator>+=</operator> <name><name>g</name><operator>-&gt;</operator><name>step</name></name> <operator>+</operator> <call><name>randn</name> <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>step</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>off</name></name> <operator>&gt;</operator> <name><name>g</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>off</name></name> <operator>-=</operator> <name><name>g</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type>
<name>next2</name> <parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>x2</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>gen</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>r</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <call><name>randn</name> <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>x2</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>start2</name></name> <operator>+</operator> <call><name>randn</name> <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>len2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>args_f1</name></name></type>
<name>next_f1</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator>struct <name>args_f1</name><operator>)</operator><block>{<macro><name>asfloat</name> <argument_list>(<argument>next1 (g)</argument>)</argument_list></macro>}</block></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>args_f2</name></name></type>
<name>next_f2</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>x2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>x</name> <init>= <expr><call><name>next2</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>x2</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator>struct <name>args_f2</name><operator>)</operator><block>{<expr><call><name>asfloat</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>, <macro><name>asfloat</name> <argument_list>(<argument>x2</argument>)</argument_list></macro>}</block></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>args_d1</name></name></type>
<name>next_d1</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator>struct <name>args_d1</name><operator>)</operator><block>{<macro><name>asdouble</name> <argument_list>(<argument>next1 (g)</argument>)</argument_list></macro>}</block></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>args_d2</name></name></type>
<name>next_d2</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>x2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>x</name> <init>= <expr><call><name>next2</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>x2</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator>struct <name>args_d2</name><operator>)</operator><block>{<expr><call><name>asdouble</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>, <macro><name>asdouble</name> <argument_list>(<argument>x2</argument>)</argument_list></macro>}</block></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>conf</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quiet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mpfr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fenv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>softlim</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>errlim</name></decl>;</decl_stmt>
}</block>;</struct>


<function><type><specifier>static</specifier> <name>float</name></type> <name>sincosf_sinf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content><expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>cosf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><call><name>sinf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>static</specifier> <name>float</name></type> <name>sincosf_cosf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content><expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sinf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><call><name>cosf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>static</specifier> <name>double</name></type> <name>sincos_sin</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content><expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>cos</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><call><name>sin</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>static</specifier> <name>double</name></type> <name>sincos_cos</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content><expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sin</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><call><name>cos</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_MPFR</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sincos_mpfr_sin</name><parameter_list>(<parameter><decl><type><name>mpfr_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mpfr_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>mpfr_rnd_t</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>mpfr_cos</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><call><name>mpfr_sin</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sincos_mpfr_cos</name><parameter_list>(<parameter><decl><type><name>mpfr_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mpfr_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>mpfr_rnd_t</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>mpfr_sin</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><call><name>mpfr_cos</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>secondcall</name></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__aarch64__</name> <operator>&amp;&amp;</operator> <name>WANT_VMATH</name></expr></cpp:if>
<typedef>typedef <type><name>__f32x4_t</name></type> <name>v_float</name>;</typedef>
<typedef>typedef <type><name>__f64x2_t</name></type> <name>v_double</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>fv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><name>INFINITY</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>dv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><name>INFINITY</name></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_float</name></type> <name>argf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>v_float</name><operator>)</operator><block>{<expr><name>x</name></expr>,<expr><name>x</name></expr>,<expr><name>x</name></expr>,<expr><name><name>fv</name><index>[<expr><name>secondcall</name></expr>]</index></name></expr>}</block></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>v_double</name></type> <name>argd</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>v_double</name><operator>)</operator><block>{<expr><name>x</name></expr>,<expr><name><name>dv</name><index>[<expr><name>secondcall</name></expr>]</index></name></expr>}</block></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>v_sinf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__v_sinf</name><argument_list>(<argument><expr><call><name>argf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>float</name></type> <name>v_cosf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__v_cosf</name><argument_list>(<argument><expr><call><name>argf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>float</name></type> <name>v_expf_1u</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__v_expf_1u</name><argument_list>(<argument><expr><call><name>argf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>float</name></type> <name>v_expf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__v_expf</name><argument_list>(<argument><expr><call><name>argf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>float</name></type> <name>v_exp2f_1u</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__v_exp2f_1u</name><argument_list>(<argument><expr><call><name>argf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>float</name></type> <name>v_exp2f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__v_exp2f</name><argument_list>(<argument><expr><call><name>argf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>float</name></type> <name>v_logf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__v_logf</name><argument_list>(<argument><expr><call><name>argf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>float</name></type> <name>v_powf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__v_powf</name><argument_list>(<argument><expr><call><name>argf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>argf</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>double</name></type> <name>v_sin</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__v_sin</name><argument_list>(<argument><expr><call><name>argd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>double</name></type> <name>v_cos</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__v_cos</name><argument_list>(<argument><expr><call><name>argd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>double</name></type> <name>v_exp</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__v_exp</name><argument_list>(<argument><expr><call><name>argd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>double</name></type> <name>v_log</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__v_log</name><argument_list>(<argument><expr><call><name>argd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>double</name></type> <name>v_pow</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__v_pow</name><argument_list>(<argument><expr><call><name>argd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>argd</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> </block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__vpcs</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>float</name></type> <name>vn_sinf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__vn_sinf</name><argument_list>(<argument><expr><call><name>argf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>float</name></type> <name>vn_cosf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__vn_cosf</name><argument_list>(<argument><expr><call><name>argf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>float</name></type> <name>vn_expf_1u</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__vn_expf_1u</name><argument_list>(<argument><expr><call><name>argf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>float</name></type> <name>vn_expf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__vn_expf</name><argument_list>(<argument><expr><call><name>argf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>float</name></type> <name>vn_exp2f_1u</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__vn_exp2f_1u</name><argument_list>(<argument><expr><call><name>argf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>float</name></type> <name>vn_exp2f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__vn_exp2f</name><argument_list>(<argument><expr><call><name>argf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>float</name></type> <name>vn_logf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__vn_logf</name><argument_list>(<argument><expr><call><name>argf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>float</name></type> <name>vn_powf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__vn_powf</name><argument_list>(<argument><expr><call><name>argf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>argf</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>double</name></type> <name>vn_sin</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__vn_sin</name><argument_list>(<argument><expr><call><name>argd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>double</name></type> <name>vn_cos</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__vn_cos</name><argument_list>(<argument><expr><call><name>argd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>double</name></type> <name>vn_exp</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__vn_exp</name><argument_list>(<argument><expr><call><name>argd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>double</name></type> <name>vn_log</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__vn_log</name><argument_list>(<argument><expr><call><name>argd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>double</name></type> <name>vn_pow</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__vn_pow</name><argument_list>(<argument><expr><call><name>argd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>argd</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>float</name></type> <name>Z_sinf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>_ZGVnN4v_sinf</name><argument_list>(<argument><expr><call><name>argf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>float</name></type> <name>Z_cosf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>_ZGVnN4v_cosf</name><argument_list>(<argument><expr><call><name>argf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>float</name></type> <name>Z_expf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>_ZGVnN4v_expf</name><argument_list>(<argument><expr><call><name>argf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>float</name></type> <name>Z_exp2f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>_ZGVnN4v_exp2f</name><argument_list>(<argument><expr><call><name>argf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>float</name></type> <name>Z_logf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>_ZGVnN4v_logf</name><argument_list>(<argument><expr><call><name>argf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>float</name></type> <name>Z_powf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>_ZGVnN4vv_powf</name><argument_list>(<argument><expr><call><name>argf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>argf</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>double</name></type> <name>Z_sin</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>_ZGVnN2v_sin</name><argument_list>(<argument><expr><call><name>argd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>double</name></type> <name>Z_cos</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>_ZGVnN2v_cos</name><argument_list>(<argument><expr><call><name>argd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>double</name></type> <name>Z_exp</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>_ZGVnN2v_exp</name><argument_list>(<argument><expr><call><name>argd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>double</name></type> <name>Z_log</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>_ZGVnN2v_log</name><argument_list>(<argument><expr><call><name>argd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>double</name></type> <name>Z_pow</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>_ZGVnN2vv_pow</name><argument_list>(<argument><expr><call><name>argd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>argd</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>fun</name>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>arity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>singleprec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>twice</name></decl>;</decl_stmt>
<union>union
<block>{
<function_decl><type><name>float</name></type> (<modifier>*</modifier><name>f1</name>) <parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>float</name></type> (<modifier>*</modifier><name>f2</name>) <parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>double</name></type> (<modifier>*</modifier><name>d1</name>) <parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>double</name></type> (<modifier>*</modifier><name>d2</name>) <parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
}</block> <decl><name>fun</name></decl>;</union>
<union>union
<block>{
<function_decl><type><name>double</name></type> (<modifier>*</modifier><name>f1</name>) <parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>double</name></type> (<modifier>*</modifier><name>f2</name>) <parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name> <name>double</name></type> (<modifier>*</modifier><name>d1</name>) <parameter_list>(<parameter><decl><type><name>long</name></type> <name>double</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name> <name>double</name></type> (<modifier>*</modifier><name>d2</name>) <parameter_list>(<parameter><decl><type><name>long</name></type> <name>double</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>double</name></decl></parameter>)</parameter_list>;</function_decl>
}</block> <decl><name>fun_long</name></decl>;</union>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_MPFR</name></expr></cpp:if>
<union>union
<block>{
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f1</name>) <parameter_list>(<parameter><decl><type><name>mpfr_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mpfr_t</name></type></decl></parameter>, <parameter><decl><type><name>mpfr_rnd_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f2</name>) <parameter_list>(<parameter><decl><type><name>mpfr_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mpfr_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mpfr_t</name></type></decl></parameter>, <parameter><decl><type><name>mpfr_rnd_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>d1</name>) <parameter_list>(<parameter><decl><type><name>mpfr_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mpfr_t</name></type></decl></parameter>, <parameter><decl><type><name>mpfr_rnd_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>d2</name>) <parameter_list>(<parameter><decl><type><name>mpfr_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mpfr_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mpfr_t</name></type></decl></parameter>, <parameter><decl><type><name>mpfr_rnd_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
}</block> <decl><name>fun_mpfr</name></decl>;</union>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>fun</name></name></type> <name><name>fun</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_MPFR</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>x_wrap</name></type></parameter>, <parameter><type><name>x_long</name></type></parameter>, <parameter><type><name>x_mpfr</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>t</name></type></parameter>, <parameter><type><name>twice</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{#x, a, s, twice, {.t = x_wrap}, {.t = x_long}, {.t = x_mpfr}},</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>x_wrap</name></type></parameter>, <parameter><type><name>x_long</name></type></parameter>, <parameter><type><name>x_mpfr</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>t</name></type></parameter>, <parameter><type><name>twice</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{#x, a, s, twice, {.t = x_wrap}, {.t = x_long}},</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>F (x##f, x##f, x, mpfr_##x, 1, 1, f1, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>F (x##f, x##f, x, mpfr_##x, 2, 1, f2, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>F (x, x, x##l, mpfr_##x, 1, 0, d1, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>F (x, x, x##l, mpfr_##x, 2, 0, d2, 0)</cpp:value></cpp:define>
<macro><name>F1</name> <argument_list>(<argument>sin</argument>)</argument_list></macro>
<macro><name>F1</name> <argument_list>(<argument>cos</argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>sincosf_sinf</argument>, <argument>sincosf_sinf</argument>, <argument>sincos_sin</argument>, <argument>sincos_mpfr_sin</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>f1</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>sincosf_cosf</argument>, <argument>sincosf_cosf</argument>, <argument>sincos_cos</argument>, <argument>sincos_mpfr_cos</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>f1</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>F1</name> <argument_list>(<argument>exp</argument>)</argument_list></macro>
<macro><name>F1</name> <argument_list>(<argument>exp2</argument>)</argument_list></macro>
<macro><name>F1</name> <argument_list>(<argument>log</argument>)</argument_list></macro>
<macro><name>F1</name> <argument_list>(<argument>log2</argument>)</argument_list></macro>
<macro><name>F2</name> <argument_list>(<argument>pow</argument>)</argument_list></macro>
<macro><name>F1</name> <argument_list>(<argument>erf</argument>)</argument_list></macro>
<macro><name>D1</name> <argument_list>(<argument>exp</argument>)</argument_list></macro>
<macro><name>D1</name> <argument_list>(<argument>exp2</argument>)</argument_list></macro>
<macro><name>D1</name> <argument_list>(<argument>log</argument>)</argument_list></macro>
<macro><name>D1</name> <argument_list>(<argument>log2</argument>)</argument_list></macro>
<macro><name>D2</name> <argument_list>(<argument>pow</argument>)</argument_list></macro>
<macro><name>D1</name> <argument_list>(<argument>erf</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>WANT_VMATH</name></expr></cpp:if>
<macro><name>F</name> <argument_list>(<argument>__s_sinf</argument>, <argument>__s_sinf</argument>, <argument>sin</argument>, <argument>mpfr_sin</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>f1</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__s_cosf</argument>, <argument>__s_cosf</argument>, <argument>cos</argument>, <argument>mpfr_cos</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>f1</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__s_expf_1u</argument>, <argument>__s_expf_1u</argument>, <argument>exp</argument>, <argument>mpfr_exp</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>f1</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__s_expf</argument>, <argument>__s_expf</argument>, <argument>exp</argument>, <argument>mpfr_exp</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>f1</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__s_exp2f_1u</argument>, <argument>__s_exp2f_1u</argument>, <argument>exp2</argument>, <argument>mpfr_exp2</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>f1</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__s_exp2f</argument>, <argument>__s_exp2f</argument>, <argument>exp2</argument>, <argument>mpfr_exp2</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>f1</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__s_powf</argument>, <argument>__s_powf</argument>, <argument>pow</argument>, <argument>mpfr_pow</argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>f2</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__s_logf</argument>, <argument>__s_logf</argument>, <argument>log</argument>, <argument>mpfr_log</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>f1</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__s_sin</argument>, <argument>__s_sin</argument>, <argument>sinl</argument>, <argument>mpfr_sin</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>d1</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__s_cos</argument>, <argument>__s_cos</argument>, <argument>cosl</argument>, <argument>mpfr_cos</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>d1</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__s_exp</argument>, <argument>__s_exp</argument>, <argument>expl</argument>, <argument>mpfr_exp</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>d1</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__s_log</argument>, <argument>__s_log</argument>, <argument>logl</argument>, <argument>mpfr_log</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>d1</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__s_pow</argument>, <argument>__s_pow</argument>, <argument>powl</argument>, <argument>mpfr_pow</argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>d2</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__aarch64__</name></expr></cpp:if>
<macro><name>F</name> <argument_list>(<argument>__v_sinf</argument>, <argument>v_sinf</argument>, <argument>sin</argument>, <argument>mpfr_sin</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>f1</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__v_cosf</argument>, <argument>v_cosf</argument>, <argument>cos</argument>, <argument>mpfr_cos</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>f1</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__v_expf_1u</argument>, <argument>v_expf_1u</argument>, <argument>exp</argument>, <argument>mpfr_exp</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>f1</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__v_expf</argument>, <argument>v_expf</argument>, <argument>exp</argument>, <argument>mpfr_exp</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>f1</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__v_exp2f_1u</argument>, <argument>v_exp2f_1u</argument>, <argument>exp2</argument>, <argument>mpfr_exp2</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>f1</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__v_exp2f</argument>, <argument>v_exp2f</argument>, <argument>exp2</argument>, <argument>mpfr_exp2</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>f1</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__v_logf</argument>, <argument>v_logf</argument>, <argument>log</argument>, <argument>mpfr_log</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>f1</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__v_powf</argument>, <argument>v_powf</argument>, <argument>pow</argument>, <argument>mpfr_pow</argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>f2</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__v_sin</argument>, <argument>v_sin</argument>, <argument>sinl</argument>, <argument>mpfr_sin</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>d1</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__v_cos</argument>, <argument>v_cos</argument>, <argument>cosl</argument>, <argument>mpfr_cos</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>d1</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__v_exp</argument>, <argument>v_exp</argument>, <argument>expl</argument>, <argument>mpfr_exp</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>d1</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__v_log</argument>, <argument>v_log</argument>, <argument>logl</argument>, <argument>mpfr_log</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>d1</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__v_pow</argument>, <argument>v_pow</argument>, <argument>powl</argument>, <argument>mpfr_pow</argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>d2</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__vpcs</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>F</name> <argument_list>(<argument>__vn_sinf</argument>, <argument>vn_sinf</argument>, <argument>sin</argument>, <argument>mpfr_sin</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>f1</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__vn_cosf</argument>, <argument>vn_cosf</argument>, <argument>cos</argument>, <argument>mpfr_cos</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>f1</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__vn_expf_1u</argument>, <argument>vn_expf_1u</argument>, <argument>exp</argument>, <argument>mpfr_exp</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>f1</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__vn_expf</argument>, <argument>vn_expf</argument>, <argument>exp</argument>, <argument>mpfr_exp</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>f1</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__vn_exp2f_1u</argument>, <argument>vn_exp2f_1u</argument>, <argument>exp2</argument>, <argument>mpfr_exp2</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>f1</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__vn_exp2f</argument>, <argument>vn_exp2f</argument>, <argument>exp2</argument>, <argument>mpfr_exp2</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>f1</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__vn_logf</argument>, <argument>vn_logf</argument>, <argument>log</argument>, <argument>mpfr_log</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>f1</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__vn_powf</argument>, <argument>vn_powf</argument>, <argument>pow</argument>, <argument>mpfr_pow</argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>f2</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__vn_sin</argument>, <argument>vn_sin</argument>, <argument>sinl</argument>, <argument>mpfr_sin</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>d1</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__vn_cos</argument>, <argument>vn_cos</argument>, <argument>cosl</argument>, <argument>mpfr_cos</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>d1</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__vn_exp</argument>, <argument>vn_exp</argument>, <argument>expl</argument>, <argument>mpfr_exp</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>d1</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__vn_log</argument>, <argument>vn_log</argument>, <argument>logl</argument>, <argument>mpfr_log</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>d1</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>__vn_pow</argument>, <argument>vn_pow</argument>, <argument>powl</argument>, <argument>mpfr_pow</argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>d2</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>_ZGVnN4v_sinf</argument>, <argument>Z_sinf</argument>, <argument>sin</argument>, <argument>mpfr_sin</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>f1</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>_ZGVnN4v_cosf</argument>, <argument>Z_cosf</argument>, <argument>cos</argument>, <argument>mpfr_cos</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>f1</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>_ZGVnN4v_expf</argument>, <argument>Z_expf</argument>, <argument>exp</argument>, <argument>mpfr_exp</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>f1</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>_ZGVnN4v_exp2f</argument>, <argument>Z_exp2f</argument>, <argument>exp2</argument>, <argument>mpfr_exp2</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>f1</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>_ZGVnN4v_logf</argument>, <argument>Z_logf</argument>, <argument>log</argument>, <argument>mpfr_log</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>f1</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>_ZGVnN4vv_powf</argument>, <argument>Z_powf</argument>, <argument>pow</argument>, <argument>mpfr_pow</argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>f2</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>_ZGVnN2v_sin</argument>, <argument>Z_sin</argument>, <argument>sinl</argument>, <argument>mpfr_sin</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>d1</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>_ZGVnN2v_cos</argument>, <argument>Z_cos</argument>, <argument>cosl</argument>, <argument>mpfr_cos</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>d1</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>_ZGVnN2v_exp</argument>, <argument>Z_exp</argument>, <argument>expl</argument>, <argument>mpfr_exp</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>d1</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>_ZGVnN2v_log</argument>, <argument>Z_log</argument>, <argument>logl</argument>, <argument>mpfr_log</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>d1</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>F</name> <argument_list>(<argument>_ZGVnN2vv_pow</argument>, <argument>Z_pow</argument>, <argument>powl</argument>, <argument>mpfr_pow</argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>d2</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>F</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>F1</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>F2</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>D1</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>D2</name></cpp:undef>
<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>ulpscale_f</name> <parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><call><name>asuint</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">23</literal> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>e</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>e</name> <operator>-</operator> <literal type="number">0x7f</literal> <operator>-</operator> <literal type="number">23</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>ulpscale_d</name> <parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><call><name>asuint64</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">52</literal> <operator>&amp;</operator> <literal type="number">0x7ff</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>e</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>e</name> <operator>-</operator> <literal type="number">0x3ff</literal> <operator>-</operator> <literal type="number">52</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type>
<name>call_f1</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fun</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>args_f1</name></name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>fun</name><operator>.</operator><name>f1</name></name> <argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type>
<name>call_f2</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fun</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>args_f2</name></name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>fun</name><operator>.</operator><name>f2</name></name> <argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>x2</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type>
<name>call_d1</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fun</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>args_d1</name></name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>fun</name><operator>.</operator><name>d1</name></name> <argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type>
<name>call_d2</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fun</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>args_d2</name></name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>fun</name><operator>.</operator><name>d2</name></name> <argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>x2</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type>
<name>call_long_f1</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fun</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>args_f1</name></name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>fun_long</name><operator>.</operator><name>f1</name></name> <argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type>
<name>call_long_f2</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fun</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>args_f2</name></name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>fun_long</name><operator>.</operator><name>f2</name></name> <argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>x2</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>long</name> <name>double</name></type>
<name>call_long_d1</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fun</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>args_d1</name></name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>fun_long</name><operator>.</operator><name>d1</name></name> <argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>long</name> <name>double</name></type>
<name>call_long_d2</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fun</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>args_d2</name></name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>fun_long</name><operator>.</operator><name>d2</name></name> <argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>x2</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>printcall_f1</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fun</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>args_f1</name></name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s(%a)"</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>printcall_f2</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fun</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>args_f2</name></name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s(%a, %a)"</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>x2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>printcall_d1</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fun</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>args_d1</name></name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s(%a)"</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>printcall_d2</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fun</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>args_d2</name></name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s(%a, %a)"</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>x2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>printgen_f1</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fun</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>gen</name></name> <modifier>*</modifier></type><name>gen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s in [%a;%a]"</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>asfloat</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>asfloat</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <name><name>gen</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>printgen_f2</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fun</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>gen</name></name> <modifier>*</modifier></type><name>gen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s in [%a;%a] x [%a;%a]"</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>asfloat</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>asfloat</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <name><name>gen</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>asfloat</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>start2</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>asfloat</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>start2</name></name> <operator>+</operator> <name><name>gen</name><operator>-&gt;</operator><name>len2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>printgen_d1</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fun</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>gen</name></name> <modifier>*</modifier></type><name>gen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s in [%a;%a]"</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>asdouble</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>asdouble</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <name><name>gen</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>printgen_d2</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fun</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>gen</name></name> <modifier>*</modifier></type><name>gen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s in [%a;%a] x [%a;%a]"</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>asdouble</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>asdouble</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <name><name>gen</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>asdouble</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>start2</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>asdouble</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>start2</name></name> <operator>+</operator> <name><name>gen</name><operator>-&gt;</operator><name>len2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>reduce_f1</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>f</name></type></parameter>, <parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(f (a.x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>reduce_f2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>f</name></type></parameter>, <parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(f (a.x) op f (a.x2))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>reduce_d1</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>f</name></type></parameter>, <parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(f (a.x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>reduce_d2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>f</name></type></parameter>, <parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(f (a.x) op f (a.x2))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>IEEE_754_2008_SNAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE_754_2008_SNAN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>issignaling_f</name> <parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ix</name> <init>= <expr><call><name>asuint</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>IEEE_754_2008_SNAN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ix</name> <operator>&amp;</operator> <literal type="number">0x7fc00000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x7fc00000</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>ix</name> <operator>^</operator> <literal type="number">0x00400000</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">2u</literal> <operator>*</operator> <literal type="number">0x7fc00000</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>issignaling_d</name> <parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ix</name> <init>= <expr><call><name>asuint64</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>IEEE_754_2008_SNAN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ix</name> <operator>&amp;</operator> <literal type="number">0x7ff8000000000000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x7ff8000000000000</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>ix</name> <operator>^</operator> <literal type="number">0x0008000000000000</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">0x7ff8000000000000ULL</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_MPFR</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>mpfr_rnd_t</name></type>
<name>rmap</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>r</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>FE_TONEAREST</name></expr>:</case>
<return>return <expr><name>MPFR_RNDN</name></expr>;</return>
<case>case <expr><name>FE_TOWARDZERO</name></expr>:</case>
<return>return <expr><name>MPFR_RNDZ</name></expr>;</return>
<case>case <expr><name>FE_UPWARD</name></expr>:</case>
<return>return <expr><name>MPFR_RNDU</name></expr>;</return>
<case>case <expr><name>FE_DOWNWARD</name></expr>:</case>
<return>return <expr><name>MPFR_RNDD</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>prec_mpfr_f</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>prec_mpfr_d</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>prec_f</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>prec_d</name></cpp:macro> <cpp:value>53</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>emin_f</name></cpp:macro> <cpp:value>-148</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>emin_d</name></cpp:macro> <cpp:value>-1073</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>emax_f</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>emax_d</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>call_mpfr_f1</name> <parameter_list>(<parameter><decl><type><name>mpfr_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fun</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>args_f1</name></name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>mpfr_rnd_t</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>MPFR_DECL_INIT</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>prec_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_set_flt</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>MPFR_RNDN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>fun_mpfr</name><operator>.</operator><name>f1</name></name> <argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>call_mpfr_f2</name> <parameter_list>(<parameter><decl><type><name>mpfr_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fun</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>args_f2</name></name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>mpfr_rnd_t</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>MPFR_DECL_INIT</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>prec_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MPFR_DECL_INIT</name> <argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>prec_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_set_flt</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>MPFR_RNDN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_set_flt</name> <argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>x2</name></name></expr></argument>, <argument><expr><name>MPFR_RNDN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>fun_mpfr</name><operator>.</operator><name>f2</name></name> <argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>call_mpfr_d1</name> <parameter_list>(<parameter><decl><type><name>mpfr_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fun</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>args_d1</name></name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>mpfr_rnd_t</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>MPFR_DECL_INIT</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>prec_d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_set_d</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>MPFR_RNDN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>fun_mpfr</name><operator>.</operator><name>d1</name></name> <argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>call_mpfr_d2</name> <parameter_list>(<parameter><decl><type><name>mpfr_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fun</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>args_d2</name></name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>mpfr_rnd_t</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>MPFR_DECL_INIT</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>prec_d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MPFR_DECL_INIT</name> <argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>prec_d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_set_d</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>MPFR_RNDN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpfr_set_d</name> <argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>x2</name></name></expr></argument>, <argument><expr><name>MPFR_RNDN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>fun_mpfr</name><operator>.</operator><name>d2</name></name> <argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>float_f</name></cpp:macro> <cpp:value>float</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>double_f</name></cpp:macro> <cpp:value>double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>copysign_f</name></cpp:macro> <cpp:value>copysignf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nextafter_f</name></cpp:macro> <cpp:value>nextafterf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fabs_f</name></cpp:macro> <cpp:value>fabsf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>asuint_f</name></cpp:macro> <cpp:value>asuint</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>asfloat_f</name></cpp:macro> <cpp:value>asfloat</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scalbn_f</name></cpp:macro> <cpp:value>scalbnf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lscalbn_f</name></cpp:macro> <cpp:value>scalbn</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>halfinf_f</name></cpp:macro> <cpp:value>0x1p127f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min_normal_f</name></cpp:macro> <cpp:value>0x1p-126f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>float_d</name></cpp:macro> <cpp:value>double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>double_d</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>copysign_d</name></cpp:macro> <cpp:value>copysign</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nextafter_d</name></cpp:macro> <cpp:value>nextafter</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fabs_d</name></cpp:macro> <cpp:value>fabs</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>asuint_d</name></cpp:macro> <cpp:value>asuint64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>asfloat_d</name></cpp:macro> <cpp:value>asdouble</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scalbn_d</name></cpp:macro> <cpp:value>scalbn</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lscalbn_d</name></cpp:macro> <cpp:value>scalbnl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>halfinf_d</name></cpp:macro> <cpp:value>0x1p1023</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min_normal_d</name></cpp:macro> <cpp:value>0x1p-1022</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_RT</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x##_f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x##_f1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ulp.h"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>T</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x##_f2</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ulp.h"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>T</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RT</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_RT</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x##_d</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x##_d1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ulp.h"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>T</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x##_d2</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ulp.h"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>T</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RT</name></cpp:undef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>usage</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>puts</name> <argument_list>(<argument><expr><literal type="string">"./ulp [-q] [-m] [-f] [-r nudz] [-l soft-ulplimit] [-e ulplimit] func "</literal>
<literal type="string">"lo [hi [x lo2 hi2] [count]]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>puts</name> <argument_list>(<argument><expr><literal type="string">"Compares func against a higher precision implementation in [lo; hi]."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>puts</name> <argument_list>(<argument><expr><literal type="string">"-q: quiet."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>puts</name> <argument_list>(<argument><expr><literal type="string">"-m: use mpfr even if faster method is available."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>puts</name> <argument_list>(<argument><expr><literal type="string">"-f: disable fenv testing (rounding modes and exceptions)."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>puts</name> <argument_list>(<argument><expr><literal type="string">"Supported func:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fun</name></name> <modifier>*</modifier><name>f</name></type> <init>= <expr><name>fun</name></expr></init></decl>;</init> <condition><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition> <incr><expr><name>f</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\t%s\n"</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cmp</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fun</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>gen</name></name> <modifier>*</modifier></type><name>gen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>arity</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>singleprec</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>cmp_f1</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>gen</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>arity</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>singleprec</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>cmp_f2</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>gen</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>arity</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>singleprec</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>cmp_d1</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>gen</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>arity</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>singleprec</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>cmp_d2</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>gen</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usage</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type>
<name>getnum</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>singleprec</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>sign</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <ternary><condition><expr><name>singleprec</name></expr> ?</condition><then> <expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal></expr> </then><else>: <expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">63</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <call><name>tolower</name> <argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'x'</literal> <operator>&amp;&amp;</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>sign</name> <operator>^</operator> <call><name>strtoull</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>











<return>return <expr><name>sign</name>
<operator>|</operator> <operator>(</operator><ternary><condition><expr><name>singleprec</name></expr> ?</condition><then> <expr><call><name>asuint</name> <argument_list>(<argument><expr><call><name>strtof</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>asuint64</name> <argument_list>(<argument><expr><call><name>strtod</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>parsegen</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gen</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fun</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>singleprec</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>singleprec</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>arity</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>arity</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usage</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name> <operator>=</operator> <call><name>getnum</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>singleprec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>argc</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>getnum</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>singleprec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>argc</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>b2</name> <operator>=</operator> <name>a2</name> <operator>=</operator> <call><name>getnum</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>singleprec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b2</name> <operator>=</operator> <call><name>getnum</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>singleprec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>strtoull</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usage</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>arity</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>b</name> <operator>-</operator> <name>a</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>b</name> <operator>-</operator> <name>a</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>b</name> <operator>-</operator> <name>a</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <ternary><condition><expr><name>n</name></expr> ?</condition><then> <expr><operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>n</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>start2</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>len2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>cnt</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>arity</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>b</name> <operator>-</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>start2</name></name> <operator>=</operator> <name>a2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>len2</name></name> <operator>=</operator> <name>b2</name> <operator>-</operator> <name>a2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>cnt</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usage</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fun</name></name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>gen</name></name></type> <name>gen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>conf</name></name></type> <name>conf</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>rc</name></name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>quiet</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>mpfr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>fenv</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>softlim</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>errlim</name></name> <operator>=</operator> <name>INFINITY</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usage</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'e'</literal></expr>:</case>
<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usage</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>errlim</name></name> <operator>=</operator> <call><name>strtod</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>fenv</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usage</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>softlim</name></name> <operator>=</operator> <call><name>strtod</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'m'</literal></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>mpfr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'q'</literal></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>quiet</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>rc</name></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>conf</name><operator>.</operator><name>rc</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usage</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>rc</name></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>usage</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></for>
<switch>switch <condition>(<expr><name><name>conf</name><operator>.</operator><name>rc</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>r</name></name> <operator>=</operator> <name>FE_TONEAREST</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'u'</literal></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>r</name></name> <operator>=</operator> <name>FE_UPWARD</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>r</name></name> <operator>=</operator> <name>FE_DOWNWARD</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'z'</literal></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>r</name></name> <operator>=</operator> <name>FE_TOWARDZERO</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>usage</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<for>for <control>(<init><expr><name>f</name> <operator>=</operator> <name>fun</name></expr>;</init> <condition><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition> <incr><expr><name>f</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usage</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>singleprec</name></name> <operator>&amp;&amp;</operator> <name>LDBL_MANT_DIG</name> <operator>==</operator> <name>DBL_MANT_DIG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>mpfr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>USE_MPFR</name> <operator>&amp;&amp;</operator> <name><name>conf</name><operator>.</operator><name>mpfr</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>puts</name> <argument_list>(<argument><expr><literal type="string">"mpfr is not available."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parsegen</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gen</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name><name>gen</name><operator>.</operator><name>cnt</name></name></expr>;</expr_stmt>
<return>return <expr><call><name>cmp</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
