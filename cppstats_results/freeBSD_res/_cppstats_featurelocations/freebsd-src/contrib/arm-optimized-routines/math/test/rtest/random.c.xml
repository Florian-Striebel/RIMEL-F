<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/arm-optimized-routines/math/test/rtest/random.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"random.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint32</name></type> <name><name>seedbuf</name><index>[<expr><literal type="number">55</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>seedptr</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>seed_random</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>seed</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>seedptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">55</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>seed</name> <operator>=</operator> <name>seed</name> <operator>%</operator> <literal type="number">44488</literal> <operator>*</operator> <literal type="number">48271</literal> <operator>-</operator> <name>seed</name> <operator>/</operator> <literal type="number">44488</literal> <operator>*</operator> <literal type="number">3399</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seedbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>seed</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>uint32</name></type> <name>base_random</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>seedptr</name> <operator>%=</operator> <literal type="number">55</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seedbuf</name><index>[<expr><name>seedptr</name></expr>]</index></name> <operator>+=</operator> <name><name>seedbuf</name><index>[<expr><operator>(</operator><name>seedptr</name><operator>+</operator><literal type="number">31</literal><operator>)</operator><operator>%</operator><literal type="number">55</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name><name>seedbuf</name><index>[<expr><name>seedptr</name><operator>++</operator></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32</name></type> <name>random32</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint32</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>base_random</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>base_random</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>b1</name> <operator>=</operator> <literal type="number">0x80000000</literal></expr><operator>,</operator> <expr><name>b2</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>b1</name> <operator>&gt;</operator> <name>b2</name></expr>;</condition> <incr><expr><name>b1</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>b2</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32</name></type> <name>b3</name> <init>= <expr><name>b1</name> <operator>|</operator> <name>b2</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>b</name> <operator>&amp;</operator> <name>b3</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>b</name> <operator>&amp;</operator> <name>b3</name><operator>)</operator> <operator>!=</operator> <name>b3</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b</name> <operator>^=</operator> <name>b3</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>a</name> <operator>^</operator> <name>b</name></expr>;</return>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>uint32</name></type> <name>random_upto_makemask</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>limit</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint32</name></type> <name>mask</name> <init>= <expr><literal type="number">0xFFFFFFFF</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">16</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>limit</name> <operator>&amp;</operator> <operator>(</operator><name>mask</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>limit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>&gt;&gt;=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>mask</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32</name></type> <name>random_upto_internal</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>limit</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint32</name></type> <name>ret</name></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>random32</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>mask</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>ret</name> <operator>&gt;</operator> <name>limit</name></expr>)</condition>;</do>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32</name></type> <name>random_upto</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>limit</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint32</name></type> <name>mask</name> <init>= <expr><call><name>random_upto_makemask</name><argument_list>(<argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>random_upto_internal</name><argument_list>(<argument><expr><name>limit</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32</name></type> <name>random_upto_biased</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>limit</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bias</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint32</name></type> <name>mask</name> <init>= <expr><call><name>random_upto_makemask</name><argument_list>(<argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32</name></type> <name>ret</name> <init>= <expr><call><name>random_upto_internal</name><argument_list>(<argument><expr><name>limit</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>bias</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32</name></type> <name>tmp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>random_upto_internal</name><argument_list>(<argument><expr><name>limit</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&lt;</operator> <name>ret</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>random_upto_internal</name><argument_list>(<argument><expr><name>limit</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&lt;</operator> <name>ret</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>random_upto_internal</name><argument_list>(<argument><expr><name>limit</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&lt;</operator> <name>ret</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>random_upto_internal</name><argument_list>(<argument><expr><name>limit</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&lt;</operator> <name>ret</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>random_upto_internal</name><argument_list>(<argument><expr><name>limit</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&lt;</operator> <name>ret</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>random_upto_internal</name><argument_list>(<argument><expr><name>limit</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&lt;</operator> <name>ret</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>random_upto_internal</name><argument_list>(<argument><expr><name>limit</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&lt;</operator> <name>ret</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>random_upto_internal</name><argument_list>(<argument><expr><name>limit</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&lt;</operator> <name>ret</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
