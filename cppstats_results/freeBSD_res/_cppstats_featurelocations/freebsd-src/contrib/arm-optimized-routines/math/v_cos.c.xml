<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/arm-optimized-routines/math/v_cos.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v_math.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>V_SUPPORTED</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>Poly</name><index>[]</index></name> <init>= <expr><block>{


<expr><operator>-</operator><literal type="number">0x1</literal><literal type="number">.9f4a9c8b21dc9p</literal><operator>-</operator><literal type="number">41</literal></expr>,
<expr><literal type="number">0x1</literal><literal type="number">.60e88a10163f2p</literal><operator>-</operator><literal type="number">33</literal></expr>,
<expr><operator>-</operator><literal type="number">0x1</literal><operator>.</operator><name>ae6361b7254e7p</name><operator>-</operator><literal type="number">26</literal></expr>,
<expr><literal type="number">0x1</literal><literal type="number">.71de382e8d62bp</literal><operator>-</operator><literal type="number">19</literal></expr>,
<expr><operator>-</operator><literal type="number">0x1</literal><operator>.</operator><name>a01a019aeb4ffp</name><operator>-</operator><literal type="number">13</literal></expr>,
<expr><literal type="number">0x1</literal><literal type="number">.111111110b25ep</literal><operator>-</operator><literal type="number">7</literal></expr>,
<expr><operator>-</operator><literal type="number">0x1</literal><literal type="number">.55555555554c3p</literal><operator>-</operator><literal type="number">3</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C7</name></cpp:macro> <cpp:value>v_f64 (Poly[0])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C6</name></cpp:macro> <cpp:value>v_f64 (Poly[1])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C5</name></cpp:macro> <cpp:value>v_f64 (Poly[2])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C4</name></cpp:macro> <cpp:value>v_f64 (Poly[3])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C3</name></cpp:macro> <cpp:value>v_f64 (Poly[4])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C2</name></cpp:macro> <cpp:value>v_f64 (Poly[5])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C1</name></cpp:macro> <cpp:value>v_f64 (Poly[6])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>InvPi</name></cpp:macro> <cpp:value>v_f64 (0x1.45f306dc9c883p-2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HalfPi</name></cpp:macro> <cpp:value>v_f64 (0x1.921fb54442d18p+0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Pi1</name></cpp:macro> <cpp:value>v_f64 (0x1.921fb54442d18p+1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Pi2</name></cpp:macro> <cpp:value>v_f64 (0x1.1a62633145c06p-53)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Pi3</name></cpp:macro> <cpp:value>v_f64 (0x1.c1cd129024e09p-106)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Shift</name></cpp:macro> <cpp:value>v_f64 (0x1.8p52)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RangeVal</name></cpp:macro> <cpp:value>v_f64 (0x1p23)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AbsMask</name></cpp:macro> <cpp:value>v_u64 (0x7fffffffffffffff)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>VPCS_ATTR</name></type>
<name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>noinline</name><operator>)</operator></expr></argument>)</argument_list> static <name>v_f64_t</name>
<name>specialcase</name> <argument_list>(<argument><expr><name>v_f64_t</name> <name>x</name></expr></argument>, <argument><expr><name>v_f64_t</name> <name>y</name></expr></argument>, <argument><expr><name>v_u64_t</name> <name>cmp</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>v_call_f64</name> <argument_list>(<argument><expr><name>cos</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>VPCS_ATTR</name>
<name>v_f64_t</name>
<name>V_NAME</name></type>(<name>cos</name>) <parameter_list>(<parameter><decl><type><name>v_f64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v_f64_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>r2</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v_u64_t</name></type> <name>odd</name></decl>, <decl><type ref="prev"/><name>cmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>v_as_f64_u64</name> <argument_list>(<argument><expr><call><name>v_as_u64_f64</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>AbsMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>v_cond_u64</name> <argument_list>(<argument><expr><call><name>v_as_u64_f64</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <call><name>v_as_u64_f64</name> <argument_list>(<argument><expr><name>RangeVal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>v_fma_f64</name> <argument_list>(<argument><expr><name>InvPi</name></expr></argument>, <argument><expr><name>r</name> <operator>+</operator> <name>HalfPi</name></expr></argument>, <argument><expr><name>Shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>odd</name> <operator>=</operator> <call><name>v_as_u64_f64</name> <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">63</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>-=</operator> <name>Shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>-=</operator> <call><name>v_f64</name> <argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>v_fma_f64</name> <argument_list>(<argument><expr><operator>-</operator><name>Pi1</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>v_fma_f64</name> <argument_list>(<argument><expr><operator>-</operator><name>Pi2</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>v_fma_f64</name> <argument_list>(<argument><expr><operator>-</operator><name>Pi3</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>r2</name> <operator>=</operator> <name>r</name> <operator>*</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>v_fma_f64</name> <argument_list>(<argument><expr><name>C7</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>C6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>v_fma_f64</name> <argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>C5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>v_fma_f64</name> <argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>C4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>v_fma_f64</name> <argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>C3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>v_fma_f64</name> <argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>C2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>v_fma_f64</name> <argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>C1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>v_fma_f64</name> <argument_list>(<argument><expr><name>y</name> <operator>*</operator> <name>r2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>v_as_f64_u64</name> <argument_list>(<argument><expr><call><name>v_as_u64_f64</name> <argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>^</operator> <name>odd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name> <argument_list>(<argument><expr><call><name>v_any_u64</name> <argument_list>(<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>specialcase</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>y</name></expr>;</return>
</block_content>}</block></function>
<expr><name>VPCS_ALIAS</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
