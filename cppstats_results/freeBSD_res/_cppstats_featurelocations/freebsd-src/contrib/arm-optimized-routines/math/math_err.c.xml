<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/arm-optimized-routines/math/math_err.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"math_config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>WANT_ERRNO</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>


<function><type><name>NOINLINE</name> <specifier>static</specifier> <name>double</name></type>
<name>with_errno</name> <parameter_list>(<parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
<return>return <expr><name>y</name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>with_errno</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><name>NOINLINE</name> <specifier>static</specifier> <name>double</name></type>
<name>xflow</name> <parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>eval_as_double</name> <argument_list>(<argument><expr><call><name>opt_barrier_double</name> <argument_list>(<argument><expr><ternary><condition><expr><name>sign</name></expr> ?</condition><then> <expr><operator>-</operator><name>y</name></expr> </then><else>: <expr><name>y</name></expr></else></ternary></expr></argument>)</argument_list></call> <operator>*</operator> <name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>with_errno</name> <argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>ERANGE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>HIDDEN</name> <name>double</name></type>
<name>__math_uflow</name> <parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>sign</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xflow</name> <argument_list>(<argument><expr><name>sign</name></expr></argument>, <argument><expr><literal type="number">0x1p</literal><operator>-</operator><literal type="number">767</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>WANT_ERRNO_UFLOW</name></expr></cpp:if>


<function><type><name>HIDDEN</name> <name>double</name></type>
<name>__math_may_uflow</name> <parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>sign</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xflow</name> <argument_list>(<argument><expr><name>sign</name></expr></argument>, <argument><expr><literal type="number">0x1</literal><literal type="number">.8p</literal><operator>-</operator><literal type="number">538</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>HIDDEN</name> <name>double</name></type>
<name>__math_oflow</name> <parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>sign</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xflow</name> <argument_list>(<argument><expr><name>sign</name></expr></argument>, <argument><expr><literal type="number">0x1p769</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>HIDDEN</name> <name>double</name></type>
<name>__math_divzero</name> <parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>sign</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>y</name> <init>= <expr><call><name>opt_barrier_double</name> <argument_list>(<argument><expr><ternary><condition><expr><name>sign</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1.0</literal></expr> </then><else>: <expr><literal type="number">1.0</literal></expr></else></ternary></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>with_errno</name> <argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>ERANGE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>HIDDEN</name> <name>double</name></type>
<name>__math_invalid</name> <parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>y</name> <init>= <expr><operator>(</operator><name>x</name> <operator>-</operator> <name>x</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>x</name> <operator>-</operator> <name>x</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><call><name>isnan</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>y</name></expr> </then><else>: <expr><call><name>with_errno</name> <argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>EDOM</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>



<function><type><name>HIDDEN</name> <name>double</name></type>
<name>__math_check_uflow</name> <parameter_list>(<parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>y</name> <operator>==</operator> <literal type="number">0.0</literal></expr> ?</condition><then> <expr><call><name>with_errno</name> <argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>ERANGE</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>y</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>HIDDEN</name> <name>double</name></type>
<name>__math_check_oflow</name> <parameter_list>(<parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>isinf</name> <argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>with_errno</name> <argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>ERANGE</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>y</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
