<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/arm-optimized-routines/math/sincosf.h">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"math_config.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name>pi63</name> <init>= <expr><literal type="number">0x1</literal><literal type="number">.921FB54442D18p</literal><operator>-</operator><literal type="number">62</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name>pio4</name> <init>= <expr><literal type="number">0x1</literal><literal type="number">.921FB54442D18p</literal><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>double</name></type> <name><name>sign</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>hpi_inv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>hpi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>c0</name></decl>, <name>c1</name>, <name>c2</name>, <name>c3</name>, <name>c4</name>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>s1</name></decl>, <name>s2</name>, <name>s3</name>;</decl_stmt>
}</block></struct></type> <name>sincos_t</name>;</typedef>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>sincos_t</name> <name><name>__sincosf_table</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></type> <name>HIDDEN</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint32_t</name> <name><name>__inv_pio4</name><index>[]</index></name></type> <name>HIDDEN</name></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>abstop12</name> <parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>asuint</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7ff</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>sincosf_poly</name> <parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>sincos_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>sinp</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>cosp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>x3</name></decl>, <decl><type ref="prev"/><name>x4</name></decl>, <decl><type ref="prev"/><name>x5</name></decl>, <decl><type ref="prev"/><name>x6</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x4</name> <operator>=</operator> <name>x2</name> <operator>*</operator> <name>x2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x3</name> <operator>=</operator> <name>x2</name> <operator>*</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>c3</name></name> <operator>+</operator> <name>x2</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>c4</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>s2</name></name> <operator>+</operator> <name>x2</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>s3</name></name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>cosp</name></expr> </then><else>: <expr><name>sinp</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cosp</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>sinp</name></expr> </then><else>: <expr><name>cosp</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>sinp</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>c0</name></name> <operator>+</operator> <name>x2</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>c1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x5</name> <operator>=</operator> <name>x3</name> <operator>*</operator> <name>x2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x6</name> <operator>=</operator> <name>x4</name> <operator>*</operator> <name>x2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>x</name> <operator>+</operator> <name>x3</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>s1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>c1</name> <operator>+</operator> <name>x4</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>c2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>sinp</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>x5</name> <operator>*</operator> <name>s1</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cosp</name> <operator>=</operator> <name>c</name> <operator>+</operator> <name>x6</name> <operator>*</operator> <name>c2</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type>
<name>sinf_poly</name> <parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>sincos_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>x3</name></decl>, <decl><type ref="prev"/><name>x4</name></decl>, <decl><type ref="prev"/><name>x6</name></decl>, <decl><type ref="prev"/><name>x7</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>x3</name> <operator>=</operator> <name>x</name> <operator>*</operator> <name>x2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>s2</name></name> <operator>+</operator> <name>x2</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>s3</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>x7</name> <operator>=</operator> <name>x3</name> <operator>*</operator> <name>x2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>x</name> <operator>+</operator> <name>x3</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>s1</name></name></expr>;</expr_stmt>

<return>return <expr><name>s</name> <operator>+</operator> <name>x7</name> <operator>*</operator> <name>s1</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>x4</name> <operator>=</operator> <name>x2</name> <operator>*</operator> <name>x2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>c3</name></name> <operator>+</operator> <name>x2</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>c4</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>c0</name></name> <operator>+</operator> <name>x2</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>c1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>x6</name> <operator>=</operator> <name>x4</name> <operator>*</operator> <name>x2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>c1</name> <operator>+</operator> <name>x4</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>c2</name></name></expr>;</expr_stmt>

<return>return <expr><name>c</name> <operator>+</operator> <name>x6</name> <operator>*</operator> <name>c2</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type>
<name>reduce_fast</name> <parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>sincos_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>np</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>r</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TOINT_INTRINSICS</name></expr></cpp:if>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>x</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>hpi_inv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>np</name> <operator>=</operator> <call><name>converttoint</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>x</name> <operator>-</operator> <call><name>roundtoint</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>hpi</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>



<expr_stmt><expr><name>r</name> <operator>=</operator> <name>x</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>hpi_inv</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name>r</name> <operator>+</operator> <literal type="number">0x800000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>np</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<return>return <expr><name>x</name> <operator>-</operator> <name>n</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>hpi</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type>
<name>reduce_large</name> <parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>xi</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>np</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>arr</name> <init>= <expr><operator>&amp;</operator><name><name>__inv_pio4</name><index>[<expr><operator>(</operator><name>xi</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">15</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><operator>(</operator><name>xi</name> <operator>&gt;&gt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>res2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xi</name> <operator>=</operator> <operator>(</operator><name>xi</name> <operator>&amp;</operator> <literal type="number">0xffffff</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x800000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>xi</name> <operator>&lt;&lt;=</operator> <name>shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <name>xi</name> <operator>*</operator> <name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>xi</name> <operator>*</operator> <name><name>arr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>res2</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>xi</name> <operator>*</operator> <name><name>arr</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <operator>(</operator><name>res2</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>res0</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>+=</operator> <name>res1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>res0</name> <operator>+</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">61</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">62</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>-=</operator> <name>n</name> <operator>&lt;&lt;</operator> <literal type="number">62</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>res0</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>np</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<return>return <expr><name>x</name> <operator>*</operator> <name>pi63</name></expr>;</return>
</block_content>}</block></function>
</unit>
