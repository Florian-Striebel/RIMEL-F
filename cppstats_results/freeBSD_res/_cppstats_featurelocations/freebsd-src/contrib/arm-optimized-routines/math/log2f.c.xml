<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/arm-optimized-routines/math/log2f.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"math_config.h"</cpp:file></cpp:include>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>(1 &lt;&lt; LOG2F_TABLE_BITS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T</name></cpp:macro> <cpp:value>__log2f_data.tab</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name></cpp:macro> <cpp:value>__log2f_data.poly</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFF</name></cpp:macro> <cpp:value>0x3f330000</cpp:value></cpp:define>

<function><type><name>float</name></type>
<name>log2f</name> <parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>double_t</name></type> <name>z</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>r2</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>y0</name></decl>, <decl><type ref="prev"/><name>invc</name></decl>, <decl><type ref="prev"/><name>logc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ix</name></decl>, <decl><type ref="prev"/><name>iz</name></decl>, <decl><type ref="prev"/><name>top</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ix</name> <operator>=</operator> <call><name>asuint</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>WANT_ROUNDING</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name> <argument_list>(<argument><expr><name>ix</name> <operator>==</operator> <literal type="number">0x3f800000</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name> <argument_list>(<argument><expr><name>ix</name> <operator>-</operator> <literal type="number">0x00800000</literal> <operator>&gt;=</operator> <literal type="number">0x7f800000</literal> <operator>-</operator> <literal type="number">0x00800000</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ix</name> <operator>*</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>__math_divzerof</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ix</name> <operator>==</operator> <literal type="number">0x7f800000</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>x</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ix</name> <operator>&amp;</operator> <literal type="number">0x80000000</literal><operator>)</operator> <operator>||</operator> <name>ix</name> <operator>*</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <literal type="number">0xff000000</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>__math_invalidf</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ix</name> <operator>=</operator> <call><name>asuint</name> <argument_list>(<argument><expr><name>x</name> <operator>*</operator> <literal type="number">0x1p23f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ix</name> <operator>-=</operator> <literal type="number">23</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>ix</name> <operator>-</operator> <name>OFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">23</literal> <operator>-</operator> <name>LOG2F_TABLE_BITS</name><operator>)</operator><operator>)</operator> <operator>%</operator> <name>N</name></expr>;</expr_stmt>
<expr_stmt><expr><name>top</name> <operator>=</operator> <name>tmp</name> <operator>&amp;</operator> <literal type="number">0xff800000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>iz</name> <operator>=</operator> <name>ix</name> <operator>-</operator> <name>top</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator> <name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">23</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>invc</name> <operator>=</operator> <name><name>T</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>invc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>logc</name> <operator>=</operator> <name><name>T</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>logc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>double_t</name><operator>)</operator> <call><name>asfloat</name> <argument_list>(<argument><expr><name>iz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <name>z</name> <operator>*</operator> <name>invc</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y0</name> <operator>=</operator> <name>logc</name> <operator>+</operator> <operator>(</operator><name>double_t</name><operator>)</operator> <name>k</name></expr>;</expr_stmt>


<expr_stmt><expr><name>r2</name> <operator>=</operator> <name>r</name> <operator>*</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>r</name> <operator>+</operator> <name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>r2</name> <operator>+</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>r</name> <operator>+</operator> <name>y0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>y</name> <operator>*</operator> <name>r2</name> <operator>+</operator> <name>p</name></expr>;</expr_stmt>
<return>return <expr><call><name>eval_as_float</name> <argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_GLIBC_ABI</name></expr></cpp:if>
<macro><name>strong_alias</name> <argument_list>(<argument>log2f</argument>, <argument>__log2f_finite</argument>)</argument_list></macro>
<macro><name>hidden_alias</name> <argument_list>(<argument>log2f</argument>, <argument>__ieee754_log2f</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
