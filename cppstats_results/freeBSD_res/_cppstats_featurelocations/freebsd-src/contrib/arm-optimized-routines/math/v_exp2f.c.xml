<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/arm-optimized-routines/math/v_exp2f.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v_math.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>V_SUPPORTED</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>Poly</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x1</literal><literal type="number">.59977ap</literal><operator>-</operator><literal type="number">10f</literal></expr>,
<expr><literal type="number">0x1</literal><literal type="number">.3ce9e4p</literal><operator>-</operator><literal type="number">7f</literal></expr>,
<expr><literal type="number">0x1</literal><operator>.</operator><name>c6bd32p</name><operator>-</operator><literal type="number">5f</literal></expr>,
<expr><literal type="number">0x1</literal><operator>.</operator><name>ebf9bcp</name><operator>-</operator><literal type="number">3f</literal></expr>,
<expr><literal type="number">0x1</literal><literal type="number">.62e422p</literal><operator>-</operator><literal type="number">1f</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C0</name></cpp:macro> <cpp:value>v_f32 (Poly[0])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C1</name></cpp:macro> <cpp:value>v_f32 (Poly[1])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C2</name></cpp:macro> <cpp:value>v_f32 (Poly[2])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C3</name></cpp:macro> <cpp:value>v_f32 (Poly[3])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C4</name></cpp:macro> <cpp:value>v_f32 (Poly[4])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Shift</name></cpp:macro> <cpp:value>v_f32 (0x1.8p23f)</cpp:value></cpp:define>

<function><type><name>VPCS_ATTR</name>
<specifier>static</specifier> <name>v_f32_t</name></type>
<name>specialcase</name> <parameter_list>(<parameter><decl><type><name>v_f32_t</name></type> <name>poly</name></decl></parameter>, <parameter><decl><type><name>v_f32_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>v_u32_t</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>v_f32_t</name></type> <name>absn</name></decl></parameter>, <parameter><decl><type><name>v_u32_t</name></type> <name>cmp1</name></decl></parameter>, <parameter><decl><type><name>v_f32_t</name></type> <name>scale</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>v_u32_t</name></type> <name>b</name> <init>= <expr><call><name>v_cond_u32</name> <argument_list>(<argument><expr><name>n</name> <operator>&lt;=</operator> <call><name>v_f32</name> <argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;</operator> <call><name>v_u32</name> <argument_list>(<argument><expr><literal type="number">0x82000000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v_f32_t</name></type> <name>s1</name> <init>= <expr><call><name>v_as_f32_u32</name> <argument_list>(<argument><expr><call><name>v_u32</name> <argument_list>(<argument><expr><literal type="number">0x7f000000</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v_f32_t</name></type> <name>s2</name> <init>= <expr><call><name>v_as_f32_u32</name> <argument_list>(<argument><expr><name>e</name> <operator>-</operator> <name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v_u32_t</name></type> <name>cmp2</name> <init>= <expr><call><name>v_cond_u32</name> <argument_list>(<argument><expr><name>absn</name> <operator>&gt;</operator> <call><name>v_f32</name> <argument_list>(<argument><expr><literal type="number">192.0f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v_u32_t</name></type> <name>r2</name> <init>= <expr><call><name>v_as_u32_f32</name> <argument_list>(<argument><expr><name>s1</name> <operator>*</operator> <name>s1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v_u32_t</name></type> <name>r1</name> <init>= <expr><call><name>v_as_u32_f32</name> <argument_list>(<argument><expr><call><name>v_fma_f32</name> <argument_list>(<argument><expr><name>poly</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>s1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v_u32_t</name></type> <name>r0</name> <init>= <expr><call><name>v_as_u32_f32</name> <argument_list>(<argument><expr><call><name>v_fma_f32</name> <argument_list>(<argument><expr><name>poly</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>v_as_f32_u32</name> <argument_list>(<argument><expr><operator>(</operator><name>cmp2</name> <operator>&amp;</operator> <name>r2</name><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>~</operator><name>cmp2</name> <operator>&amp;</operator> <name>cmp1</name> <operator>&amp;</operator> <name>r1</name><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>~</operator><name>cmp1</name> <operator>&amp;</operator> <name>r0</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VPCS_ATTR</name>
<name>v_f32_t</name>
<name>V_NAME</name></type>(<name>exp2f</name>) <parameter_list>(<parameter><decl><type><name>v_f32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v_f32_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>r2</name></decl>, <decl><type ref="prev"/><name>scale</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name>poly</name></decl>, <decl><type ref="prev"/><name>absn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v_u32_t</name></type> <name>cmp</name></decl>, <decl><type ref="prev"/><name>e</name></decl>;</decl_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
v_f32_t z;
z = x + Shift;
n = z - Shift;
r = x - n;
e = v_as_u32_f32 (z) &lt;&lt; 23;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>v_round_f32</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>x</name> <operator>-</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>v_as_u32_s32</name> <argument_list>(<argument><expr><call><name>v_round_s32</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">23</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>v_as_f32_u32</name> <argument_list>(<argument><expr><name>e</name> <operator>+</operator> <call><name>v_u32</name> <argument_list>(<argument><expr><literal type="number">0x3f800000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>absn</name> <operator>=</operator> <call><name>v_abs_f32</name> <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>v_cond_u32</name> <argument_list>(<argument><expr><name>absn</name> <operator>&gt;</operator> <call><name>v_f32</name> <argument_list>(<argument><expr><literal type="number">126.0f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <name>r</name> <operator>*</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>v_fma_f32</name> <argument_list>(<argument><expr><name>C0</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>C1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>v_fma_f32</name> <argument_list>(<argument><expr><name>C2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>C3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>v_fma_f32</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>C4</name> <operator>*</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>poly</name> <operator>=</operator> <call><name>v_fma_f32</name> <argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name> <argument_list>(<argument><expr><call><name>v_any_u32</name> <argument_list>(<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>specialcase</name> <argument_list>(<argument><expr><name>poly</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>absn</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>v_fma_f32</name> <argument_list>(<argument><expr><name>poly</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<expr><name>VPCS_ALIAS</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
