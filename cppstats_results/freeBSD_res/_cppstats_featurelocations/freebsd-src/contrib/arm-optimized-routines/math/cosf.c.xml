<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/arm-optimized-routines/math/cosf.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"math_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sincosf.h"</cpp:file></cpp:include>





<function><type><name>float</name></type>
<name>cosf</name> <parameter_list>(<parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><name>y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>sincos_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>__sincosf_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>abstop12</name> <argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>abstop12</name> <argument_list>(<argument><expr><name>pio4</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>x2</name> <init>= <expr><name>x</name> <operator>*</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name> <argument_list>(<argument><expr><call><name>abstop12</name> <argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>abstop12</name> <argument_list>(<argument><expr><literal type="number">0x1p</literal><operator>-</operator><literal type="number">12f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1.0f</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>sinf_poly</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>likely</name> <argument_list>(<argument><expr><call><name>abstop12</name> <argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>abstop12</name> <argument_list>(<argument><expr><literal type="number">120.0f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>reduce_fast</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>sign</name><index>[<expr><name>n</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>__sincosf_table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>sinf_poly</name> <argument_list>(<argument><expr><name>x</name> <operator>*</operator> <name>s</name></expr></argument>, <argument><expr><name>x</name> <operator>*</operator> <name>x</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name> <operator>^</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>abstop12</name> <argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>abstop12</name> <argument_list>(<argument><expr><name>INFINITY</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>xi</name> <init>= <expr><call><name>asuint</name> <argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><name>xi</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>reduce_large</name> <argument_list>(<argument><expr><name>xi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>sign</name><index>[<expr><operator>(</operator><name>n</name> <operator>+</operator> <name>sign</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>+</operator> <name>sign</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>__sincosf_table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>sinf_poly</name> <argument_list>(<argument><expr><name>x</name> <operator>*</operator> <name>s</name></expr></argument>, <argument><expr><name>x</name> <operator>*</operator> <name>x</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name> <operator>^</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>__math_invalidf</name> <argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
</unit>
