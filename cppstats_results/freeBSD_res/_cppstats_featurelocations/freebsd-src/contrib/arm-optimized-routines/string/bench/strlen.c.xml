<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/arm-optimized-routines/string/bench/strlen.c">






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stringlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"benchlib.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITERS</name></cpp:macro> <cpp:value>2000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITERS2</name></cpp:macro> <cpp:value>20000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITERS3</name></cpp:macro> <cpp:value>2000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_STRLEN</name></cpp:macro> <cpp:value>16384</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ALIGN</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_STRLEN</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <name><name>a</name><index>[<expr><operator>(</operator><name>MAX_STRLEN</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>MAX_ALIGN</name></expr>]</index></name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__aligned__</name><argument_list>(<argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>mte</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{#x, x, mte},</cpp:value></cpp:define>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>fun</name>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>fun</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>int</name></type> <name>test_mte</name></decl>;</decl_stmt>
}</block> <decl><name><name>funtab</name><index>[]</index></name> <init>= <expr><block>{

<macro><name>F</name><argument_list>(<argument>strlen</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__aarch64__</name></expr></cpp:if>
<macro><name>F</name><argument_list>(<argument>__strlen_aarch64</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>F</name><argument_list>(<argument>__strlen_aarch64_mte</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ARM_FEATURE_SVE</name></expr></cpp:if>
<macro><name>F</name><argument_list>(<argument>__strlen_aarch64_sve</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__arm__</name></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ARM_ARCH</name> <operator>&gt;=</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <name>__ARM_ARCH_ISA_THUMB</name> <operator>==</operator> <literal type="number">2</literal></expr></cpp:if>
<macro><name>F</name><argument_list>(<argument>__strlen_armv6t2</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>

}</block></expr></init></decl>;</struct>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>F</name></cpp:undef>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint16_t</name></type> <name><name>strlen_tests</name><index>[<expr><name>NUM_STRLEN</name></expr>]</index></name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{ <decl_stmt><decl><type><name>uint16_t</name></type> <name>size</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>uint16_t</name></type> <name>freq</name></decl>;</decl_stmt> }</block></struct></type> <name>freq_data_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{ <decl_stmt><decl><type><name>uint8_t</name></type> <name>align</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>uint16_t</name></type> <name>freq</name></decl>;</decl_stmt> }</block></struct></type> <name>align_data_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_NUM</name></cpp:macro> <cpp:value>65536</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_MASK</name></cpp:macro> <cpp:value>(SIZE_NUM - 1)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name><name>strlen_len_arr</name><index>[<expr><name>SIZE_NUM</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>freq_data_t</name></type> <name><name>strlen_len_freq</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><literal type="number">12</literal></expr>,<expr><literal type="number">22671</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">18</literal></expr>,<expr><literal type="number">12834</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">13</literal></expr>, <expr><literal type="number">9555</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6348</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">17</literal></expr>, <expr><literal type="number">6095</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">11</literal></expr>, <expr><literal type="number">2115</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">1335</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">814</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">646</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">483</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">471</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">418</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">390</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">388</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">233</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">204</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">79</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">14</literal></expr>, <expr><literal type="number">79</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">69</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">26</literal></expr>, <expr><literal type="number">36</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">22</literal></expr>, <expr><literal type="number">35</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">31</literal></expr>, <expr><literal type="number">24</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">24</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">19</literal></expr>, <expr><literal type="number">21</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">25</literal></expr>, <expr><literal type="number">17</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">28</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">21</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">33</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">29</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">30</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">23</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">34</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">27</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">44</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">42</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">45</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">47</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">40</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">41</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">43</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">58</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">78</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">36</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">48</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">52</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">60</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">64</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">56</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">76</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">68</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">80</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">84</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">72</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">86</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">35</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">39</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">50</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">38</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">37</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">46</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">98</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">102</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">128</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">51</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">107</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGN_NUM</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGN_MASK</name></cpp:macro> <cpp:value>(ALIGN_NUM - 1)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name><name>strlen_align_arr</name><index>[<expr><name>ALIGN_NUM</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>align_data_t</name></type> <name><name>string_align_freq</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{<expr><literal type="number">8</literal></expr>, <expr><literal type="number">470</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">32</literal></expr>, <expr><literal type="number">427</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">16</literal></expr>, <expr><literal type="number">99</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">19</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_strlen_distribution</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>freq</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>freq</name> <operator>=</operator> <name><name>strlen_len_freq</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>freq</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>size</name> <operator>=</operator> <name><name>strlen_len_freq</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>freq</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>strlen_len_arr</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>n</name> <operator>==</operator> <name>SIZE_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>freq</name> <operator>=</operator> <name><name>string_align_freq</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>freq</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>size</name> <operator>=</operator> <name><name>string_align_freq</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>align</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>freq</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>strlen_align_arr</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>n</name> <operator>==</operator> <name>ALIGN_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_strlen_tests</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>index</name><index>[<expr><name>MAX_ALIGN</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_ALIGN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>*</operator> <operator>(</operator><name>MAX_STRLEN</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><index>[<expr><name><name>index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>MAX_STRLEN</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>



<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>NUM_STRLEN</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>align</name> <init>= <expr><name><name>strlen_align_arr</name><index>[<expr><call><name>rand32</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ALIGN_MASK</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>exp_len</name> <init>= <expr><name><name>strlen_len_arr</name><index>[<expr><call><name>rand32</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>SIZE_MASK</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>strlen_tests</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator>
<name><name>index</name><index>[<expr><operator>(</operator><name>align</name> <operator>+</operator> <name>exp_len</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>MAX_ALIGN</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>+</operator> <name>MAX_STRLEN</name> <operator>-</operator> <name>exp_len</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>size_t</name></type> <name>maskv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rand32</name> <argument_list>(<argument><expr><literal type="number">0x12345678</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_strlen_distribution</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_strlen_tests</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nRandom strlen (bytes/ns):\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>funtab</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>f</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>strlen_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>mask</name> <init>= <expr><name>maskv</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%22s "</literal></expr></argument>, <argument><expr><name><name>funtab</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>NUM_STRLEN</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>strlen_size</name> <operator>+=</operator> <name><name>funtab</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><call><name>fun</name> <argument_list>(<argument><expr><name>a</name> <operator>+</operator> <name><name>strlen_tests</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>strlen_size</name> <operator>*=</operator> <name>ITERS</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>t</name> <init>= <expr><call><name>clock_get_ns</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ITERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>NUM_STRLEN</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name><name>funtab</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><call><name>fun</name> <argument_list>(<argument><expr><name>a</name> <operator>+</operator> <name><name>strlen_tests</name><index>[<expr><name>c</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>res</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>clock_get_ns</name> <argument_list>()</argument_list></call> <operator>-</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%.2f\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>strlen_size</name> <operator>/</operator> <name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nSmall aligned strlen (bytes/ns):\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>funtab</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>f</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%22s "</literal></expr></argument>, <argument><expr><name><name>funtab</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>size</name> <operator>&lt;=</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>size</name> <operator>*=</operator> <literal type="number">2</literal></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>t</name> <init>= <expr><call><name>clock_get_ns</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ITERS2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>funtab</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><call><name>fun</name> <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>clock_get_ns</name> <argument_list>()</argument_list></call> <operator>-</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d%c: %.2f "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>size</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr> ?</condition><then> <expr><name>size</name></expr> </then><else>: <expr><name>size</name> <operator>/</operator> <literal type="number">1024</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>size</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr> ?</condition><then> <expr><literal type="char">'B'</literal></expr> </then><else>: <expr><literal type="char">'K'</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>size</name> <operator>*</operator> <name>ITERS2</name> <operator>/</operator> <name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nSmall unaligned strlen (bytes/ns):\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>funtab</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>f</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%22s "</literal></expr></argument>, <argument><expr><name><name>funtab</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>align</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>size</name> <operator>&lt;=</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>size</name> <operator>*=</operator> <literal type="number">2</literal></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>a</name> <operator>+</operator> <name>align</name></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><index>[<expr><name>align</name> <operator>+</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>t</name> <init>= <expr><call><name>clock_get_ns</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ITERS2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>funtab</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><call><name>fun</name> <argument_list>(<argument><expr><name>a</name> <operator>+</operator> <name>align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>clock_get_ns</name> <argument_list>()</argument_list></call> <operator>-</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d%c: %.2f "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>size</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr> ?</condition><then> <expr><name>size</name></expr> </then><else>: <expr><name>size</name> <operator>/</operator> <literal type="number">1024</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>size</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr> ?</condition><then> <expr><literal type="char">'B'</literal></expr> </then><else>: <expr><literal type="char">'K'</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>size</name> <operator>*</operator> <name>ITERS2</name> <operator>/</operator> <name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nMedium strlen (bytes/ns):\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>funtab</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>f</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%22s "</literal></expr></argument>, <argument><expr><name><name>funtab</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</init> <condition><expr><name>size</name> <operator>&lt;=</operator> <literal type="number">4096</literal></expr>;</condition> <incr><expr><name>size</name> <operator>*=</operator> <literal type="number">2</literal></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>t</name> <init>= <expr><call><name>clock_get_ns</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ITERS3</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>funtab</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><call><name>fun</name> <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>clock_get_ns</name> <argument_list>()</argument_list></call> <operator>-</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d%c: %.2f "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>size</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr> ?</condition><then> <expr><name>size</name></expr> </then><else>: <expr><name>size</name> <operator>/</operator> <literal type="number">1024</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>size</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr> ?</condition><then> <expr><literal type="char">'B'</literal></expr> </then><else>: <expr><literal type="char">'K'</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>size</name> <operator>*</operator> <name>ITERS3</name> <operator>/</operator> <name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
