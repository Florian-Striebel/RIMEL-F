<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/arm-optimized-routines/string/bench/memcpy.c">






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stringlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"benchlib.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITERS</name></cpp:macro> <cpp:value>5000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITERS2</name></cpp:macro> <cpp:value>20000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITERS3</name></cpp:macro> <cpp:value>500000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_COPIES</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE</name></cpp:macro> <cpp:value>(256*1024)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name> <name><name>a</name><index>[<expr><name>SIZE</name> <operator>+</operator> <literal type="number">4096</literal></expr>]</index></name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__aligned__</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name> <name><name>b</name><index>[<expr><name>SIZE</name> <operator>+</operator> <literal type="number">4096</literal></expr>]</index></name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__aligned__</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{#x, x},</cpp:value></cpp:define>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>fun</name>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>fun</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
}</block> <decl><name><name>funtab</name><index>[]</index></name> <init>=
<expr><block>{
<macro><name>F</name><argument_list>(<argument>memcpy</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__aarch64__</name></expr></cpp:if>
<macro><name>F</name><argument_list>(<argument>__memcpy_aarch64</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ARM_NEON</name></expr></cpp:if>
<macro><name>F</name><argument_list>(<argument>__memcpy_aarch64_simd</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__arm__</name></expr></cpp:elif>
<macro><name>F</name><argument_list>(<argument>__memcpy_arm</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>F</name></cpp:undef>
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</struct>

<typedef>typedef <type><struct>struct <block>{ <decl_stmt><decl><type><name>uint16_t</name></type> <name>size</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>uint16_t</name></type> <name>freq</name></decl>;</decl_stmt> }</block></struct></type> <name>freq_data_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{ <decl_stmt><decl><type><name>uint8_t</name></type> <name>align</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>uint16_t</name></type> <name>freq</name></decl>;</decl_stmt> }</block></struct></type> <name>align_data_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_NUM</name></cpp:macro> <cpp:value>65536</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_MASK</name></cpp:macro> <cpp:value>(SIZE_NUM-1)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name><name>size_arr</name><index>[<expr><name>SIZE_NUM</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>freq_data_t</name></type> <name><name>size_freq</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{<expr><literal type="number">32</literal></expr>,<expr><literal type="number">22320</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">16</literal></expr>,<expr><literal type="number">9554</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>,<expr><literal type="number">8915</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">152</literal></expr>,<expr><literal type="number">5327</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>,<expr><literal type="number">2159</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">292</literal></expr>,<expr><literal type="number">2035</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">12</literal></expr>,<expr><literal type="number">1608</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">24</literal></expr>,<expr><literal type="number">1343</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1152</literal></expr>,<expr><literal type="number">895</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">144</literal></expr>, <expr><literal type="number">813</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">884</literal></expr>, <expr><literal type="number">733</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">284</literal></expr>, <expr><literal type="number">721</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">120</literal></expr>, <expr><literal type="number">661</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">649</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">882</literal></expr>, <expr><literal type="number">550</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">475</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">461</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">108</literal></expr>, <expr><literal type="number">460</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">361</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">361</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">334</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">326</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">464</literal></expr>, <expr><literal type="number">308</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2048</literal></expr>,<expr><literal type="number">303</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">298</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">64</literal></expr>, <expr><literal type="number">250</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">11</literal></expr>, <expr><literal type="number">197</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">296</literal></expr>, <expr><literal type="number">194</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">68</literal></expr>, <expr><literal type="number">187</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">185</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">192</literal></expr>, <expr><literal type="number">184</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1764</literal></expr>,<expr><literal type="number">183</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">13</literal></expr>, <expr><literal type="number">173</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">560</literal></expr>, <expr><literal type="number">126</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">160</literal></expr>, <expr><literal type="number">115</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">288</literal></expr>, <expr><literal type="number">96</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">104</literal></expr>, <expr><literal type="number">96</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1144</literal></expr>, <expr><literal type="number">83</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">18</literal></expr>, <expr><literal type="number">80</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">23</literal></expr>, <expr><literal type="number">78</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">40</literal></expr>, <expr><literal type="number">77</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">19</literal></expr>, <expr><literal type="number">68</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">48</literal></expr>, <expr><literal type="number">63</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">17</literal></expr>, <expr><literal type="number">57</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">72</literal></expr>, <expr><literal type="number">54</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1280</literal></expr>, <expr><literal type="number">51</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">49</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">28</literal></expr>, <expr><literal type="number">47</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">22</literal></expr>, <expr><literal type="number">46</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">640</literal></expr>, <expr><literal type="number">45</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">25</literal></expr>, <expr><literal type="number">41</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">14</literal></expr>, <expr><literal type="number">40</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">56</literal></expr>, <expr><literal type="number">37</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">27</literal></expr>, <expr><literal type="number">35</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">35</literal></expr>, <expr><literal type="number">33</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">384</literal></expr>, <expr><literal type="number">33</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">29</literal></expr>, <expr><literal type="number">32</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">80</literal></expr>, <expr><literal type="number">30</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">4095</literal></expr>, <expr><literal type="number">22</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">232</literal></expr>, <expr><literal type="number">22</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">36</literal></expr>, <expr><literal type="number">19</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">184</literal></expr>, <expr><literal type="number">17</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">21</literal></expr>, <expr><literal type="number">17</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">256</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">44</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">26</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">31</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">88</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">176</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">33</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1024</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">208</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">62</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">128</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">704</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">324</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">96</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">60</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">136</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">124</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">34</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">30</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">480</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1344</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">273</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">520</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">112</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">52</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">344</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">336</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">504</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">168</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">424</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">76</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">200</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">512</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">312</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">240</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">960</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">264</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">672</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">38</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">328</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">84</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">39</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">216</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">42</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">37</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1608</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">70</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">46</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">536</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">280</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">248</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">47</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1088</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1288</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">224</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">41</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">50</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">49</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">808</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">360</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">440</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">43</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">45</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">78</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">968</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">392</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">54</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">53</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">59</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">376</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">664</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">58</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">272</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">66</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">2688</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">472</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">568</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">720</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">51</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">63</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">86</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">496</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">776</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">57</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">680</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">792</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">122</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">760</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">824</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">552</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">67</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">456</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">984</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">74</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">408</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">75</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">92</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">576</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">116</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">65</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">117</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">82</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">352</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">55</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">100</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">90</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">696</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">111</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">880</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">79</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">488</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">61</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">114</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">94</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1032</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">98</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">87</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">584</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">85</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">648</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGN_NUM</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGN_MASK</name></cpp:macro> <cpp:value>(ALIGN_NUM-1)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name><name>src_align_arr</name><index>[<expr><name>ALIGN_NUM</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name><name>dst_align_arr</name><index>[<expr><name>ALIGN_NUM</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>align_data_t</name></type> <name><name>src_align_freq</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{<expr><literal type="number">8</literal></expr>, <expr><literal type="number">300</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">16</literal></expr>, <expr><literal type="number">292</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">32</literal></expr>, <expr><literal type="number">168</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">64</literal></expr>, <expr><literal type="number">153</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">4</literal></expr>, <expr><literal type="number">79</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">18</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>align_data_t</name></type> <name><name>dst_align_freq</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{<expr><literal type="number">8</literal></expr>, <expr><literal type="number">265</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">16</literal></expr>, <expr><literal type="number">263</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">64</literal></expr>, <expr><literal type="number">209</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">32</literal></expr>, <expr><literal type="number">174</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">4</literal></expr>, <expr><literal type="number">90</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>src</name> <range>: <expr><literal type="number">24</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>dst</name> <range>: <expr><literal type="number">24</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>len</name> <range>: <expr><literal type="number">16</literal></expr></range></decl>;</decl_stmt>
}</block></struct></type> <name>copy_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>copy_t</name></type> <name><name>copy</name><index>[<expr><name>MAX_COPIES</name></expr>]</index></name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>proto_t</name>) <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_copy_distribution</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>freq</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>freq</name> <operator>=</operator> <name><name>size_freq</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>freq</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>size</name> <operator>=</operator> <name><name>size_freq</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>freq</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>size_arr</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>n</name> <operator>==</operator> <name>SIZE_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>freq</name> <operator>=</operator> <name><name>src_align_freq</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>freq</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>size</name> <operator>=</operator> <name><name>src_align_freq</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>align</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>freq</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>src_align_arr</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>n</name> <operator>==</operator> <name>ALIGN_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>freq</name> <operator>=</operator> <name><name>dst_align_freq</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>freq</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>size</name> <operator>=</operator> <name><name>dst_align_freq</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>align</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>freq</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst_align_arr</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>n</name> <operator>==</operator> <name>ALIGN_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>init_copies</name> <parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>max_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_COPIES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>copy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dst</name> <operator>=</operator> <operator>(</operator><call><name>rand32</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>max_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>copy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dst</name> <operator>&amp;=</operator> <operator>~</operator><name><name>dst_align_arr</name><index>[<expr><call><name>rand32</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ALIGN_MASK</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>copy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>src</name> <operator>=</operator> <operator>(</operator><call><name>rand32</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>max_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>copy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>src</name> <operator>&amp;=</operator> <operator>~</operator><name><name>src_align_arr</name><index>[<expr><call><name>rand32</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ALIGN_MASK</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>copy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name><name>size_arr</name><index>[<expr><call><name>rand32</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>SIZE_MASK</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>total</name> <operator>+=</operator> <name><name>copy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>total</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>init_copy_distribution</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Random memcpy:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>funtab</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>f</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>tsum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%22s (B/ns) "</literal></expr></argument>, <argument><expr><name><name>funtab</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rand32</name> <argument_list>(<argument><expr><literal type="number">0x12345678</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">16384</literal></expr></init></decl>;</init> <condition><expr><name>size</name> <operator>&lt;=</operator> <name>SIZE</name></expr>;</condition> <incr><expr><name>size</name> <operator>*=</operator> <literal type="number">2</literal></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>copy_size</name> <init>= <expr><call><name>init_copies</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>ITERS</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>MAX_COPIES</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>funtab</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><call><name>fun</name> <argument_list>(<argument><expr><name>b</name> <operator>+</operator> <name><name>copy</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>dst</name></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name><name>copy</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>src</name></expr></argument>, <argument><expr><name><name>copy</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>t</name> <init>= <expr><call><name>clock_get_ns</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ITERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>MAX_COPIES</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>funtab</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><call><name>fun</name> <argument_list>(<argument><expr><name>b</name> <operator>+</operator> <name><name>copy</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>dst</name></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name><name>copy</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>src</name></expr></argument>, <argument><expr><name><name>copy</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>clock_get_ns</name> <argument_list>()</argument_list></call> <operator>-</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>total</name> <operator>+=</operator> <name>copy_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tsum</name> <operator>+=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%dK: %.2f "</literal></expr></argument>, <argument><expr><name>size</name> <operator>/</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>copy_size</name> <operator>/</operator> <name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"avg %.2f\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>total</name> <operator>/</operator> <name>tsum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nMedium memcpy:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>funtab</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>f</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%22s (B/ns) "</literal></expr></argument>, <argument><expr><name><name>funtab</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</init> <condition><expr><name>size</name> <operator>&lt;=</operator> <literal type="number">512</literal></expr>;</condition> <incr><expr><name>size</name> <operator>*=</operator> <literal type="number">2</literal></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>t</name> <init>= <expr><call><name>clock_get_ns</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ITERS2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>funtab</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><call><name>fun</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>clock_get_ns</name> <argument_list>()</argument_list></call> <operator>-</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d%c: %.2f "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>size</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr> ?</condition><then> <expr><name>size</name></expr> </then><else>: <expr><name>size</name> <operator>/</operator> <literal type="number">1024</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>size</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr> ?</condition><then> <expr><literal type="char">'B'</literal></expr> </then><else>: <expr><literal type="char">'K'</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>size</name> <operator>*</operator> <name>ITERS2</name> <operator>/</operator> <name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nLarge memcpy:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>funtab</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>f</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%22s (B/ns) "</literal></expr></argument>, <argument><expr><name><name>funtab</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</init> <condition><expr><name>size</name> <operator>&lt;=</operator> <literal type="number">32768</literal></expr>;</condition> <incr><expr><name>size</name> <operator>*=</operator> <literal type="number">2</literal></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>t</name> <init>= <expr><call><name>clock_get_ns</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ITERS3</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>funtab</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><call><name>fun</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>clock_get_ns</name> <argument_list>()</argument_list></call> <operator>-</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d%c: %.2f "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>size</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr> ?</condition><then> <expr><name>size</name></expr> </then><else>: <expr><name>size</name> <operator>/</operator> <literal type="number">1024</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>size</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr> ?</condition><then> <expr><literal type="char">'B'</literal></expr> </then><else>: <expr><literal type="char">'K'</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>size</name> <operator>*</operator> <name>ITERS3</name> <operator>/</operator> <name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nUnaligned forwards memmove:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>funtab</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>f</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%22s (B/ns) "</literal></expr></argument>, <argument><expr><name><name>funtab</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</init> <condition><expr><name>size</name> <operator>&lt;=</operator> <literal type="number">32768</literal></expr>;</condition> <incr><expr><name>size</name> <operator>*=</operator> <literal type="number">2</literal></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>t</name> <init>= <expr><call><name>clock_get_ns</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ITERS3</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>funtab</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><call><name>fun</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <literal type="number">256</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">31</literal><operator>)</operator></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>clock_get_ns</name> <argument_list>()</argument_list></call> <operator>-</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d%c: %.2f "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>size</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr> ?</condition><then> <expr><name>size</name></expr> </then><else>: <expr><name>size</name> <operator>/</operator> <literal type="number">1024</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>size</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr> ?</condition><then> <expr><literal type="char">'B'</literal></expr> </then><else>: <expr><literal type="char">'K'</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>size</name> <operator>*</operator> <name>ITERS3</name> <operator>/</operator> <name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nUnaligned backwards memmove:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>funtab</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>f</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%22s (B/ns) "</literal></expr></argument>, <argument><expr><name><name>funtab</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</init> <condition><expr><name>size</name> <operator>&lt;=</operator> <literal type="number">32768</literal></expr>;</condition> <incr><expr><name>size</name> <operator>*=</operator> <literal type="number">2</literal></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>t</name> <init>= <expr><call><name>clock_get_ns</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ITERS3</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>funtab</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><call><name>fun</name> <argument_list>(<argument><expr><name>a</name> <operator>+</operator> <literal type="number">256</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">31</literal><operator>)</operator></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>clock_get_ns</name> <argument_list>()</argument_list></call> <operator>-</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d%c: %.2f "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>size</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr> ?</condition><then> <expr><name>size</name></expr> </then><else>: <expr><name>size</name> <operator>/</operator> <literal type="number">1024</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>size</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr> ?</condition><then> <expr><literal type="char">'B'</literal></expr> </then><else>: <expr><literal type="char">'K'</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>size</name> <operator>*</operator> <name>ITERS3</name> <operator>/</operator> <name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
