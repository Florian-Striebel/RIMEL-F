<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/arm-optimized-routines/string/arm/strcpy.c">






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__thumb2__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name> <argument_list>(<argument><expr><name>__thumb__</name></expr></argument>)</argument_list></call></expr></cpp:if>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__thumb2__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>magic1</name><parameter_list>(<parameter><type><name>REG</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"#0x01010101"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>magic2</name><parameter_list>(<parameter><type><name>REG</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"#0x80808080"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>magic1</name><parameter_list>(<parameter><type><name>REG</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#REG</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>magic2</name><parameter_list>(<parameter><type><name>REG</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#REG ", lsl #7"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>naked</name><operator>)</operator></expr></argument>)</argument_list>
<name>__strcpy_arm</name> <argument_list>(<argument><expr><name>char</name><operator>*</operator> <name>dst</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>src</name></expr></argument>)</argument_list>
<block>{<block_content>
<asm>__asm__ (
"pld [r1, #0]\n\t"
"eor r2, r0, r1\n\t"
"mov ip, r0\n\t"
"tst r2, #3\n\t"
"bne 4f\n\t"
"tst r1, #3\n\t"
"bne 3f\n"
"5:\n\t"
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__thumb2__</name></expr></argument>)</argument_list></call></expr></cpp:if>
"str r5, [sp, #-4]!\n\t"
"mov r5, #0x01\n\t"
"orr r5, r5, r5, lsl #8\n\t"
"orr r5, r5, r5, lsl #16\n\t"
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

"str r4, [sp, #-4]!\n\t"
"tst r1, #4\n\t"
"ldr r3, [r1], #4\n\t"
"beq 2f\n\t"
"sub r2, r3, "magic1(r5)"\n\t"
"bics r2, r2, r3\n\t"
"tst r2, "magic2(r5)"\n\t"
"itt eq\n\t"
"streq r3, [ip], #4\n\t"
"ldreq r3, [r1], #4\n"
"bne 1f\n\t"



".p2align 2\n"
"2:\n\t"
"pld [r1, #8]\n\t"
"ldr r4, [r1], #4\n\t"
"sub r2, r3, "magic1(r5)"\n\t"
"bics r2, r2, r3\n\t"
"tst r2, "magic2(r5)"\n\t"
"sub r2, r4, "magic1(r5)"\n\t"
"bne 1f\n\t"
"str r3, [ip], #4\n\t"
"bics r2, r2, r4\n\t"
"tst r2, "magic2(r5)"\n\t"
"itt eq\n\t"
"ldreq r3, [r1], #4\n\t"
"streq r4, [ip], #4\n\t"
"beq 2b\n\t"
"mov r3, r4\n"
"1:\n\t"
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ARMEB__</name></expr></argument>)</argument_list></call></expr></cpp:if>
"rors r3, r3, #24\n\t"
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
"strb r3, [ip], #1\n\t"
"tst r3, #0xff\n\t"
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ARMEL__</name></expr></argument>)</argument_list></call></expr></cpp:if>
"ror r3, r3, #8\n\t"
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
"bne 1b\n\t"
"ldr r4, [sp], #4\n\t"
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__thumb2__</name></expr></argument>)</argument_list></call></expr></cpp:if>
"ldr r5, [sp], #4\n\t"
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
"BX LR\n"



"3:\n\t"
"tst r1, #1\n\t"
"beq 1f\n\t"
"ldrb r2, [r1], #1\n\t"
"strb r2, [ip], #1\n\t"
"cmp r2, #0\n\t"
"it eq\n"
"BXEQ LR\n"
"1:\n\t"
"tst r1, #2\n\t"
"beq 5b\n\t"
"ldrh r2, [r1], #2\n\t"
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ARMEB__</name></expr></argument>)</argument_list></call></expr></cpp:if>
"tst r2, #0xff00\n\t"
"iteet ne\n\t"
"strneh r2, [ip], #2\n\t"
"lsreq r2, r2, #8\n\t"
"streqb r2, [ip]\n\t"
"tstne r2, #0xff\n\t"
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
"tst r2, #0xff\n\t"
"itet ne\n\t"
"strneh r2, [ip], #2\n\t"
"streqb r2, [ip]\n\t"
"tstne r2, #0xff00\n\t"
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
"bne 5b\n\t"
"BX LR\n"



"4:\n\t"
"ldrb r2, [r1], #1\n\t"
"strb r2, [ip], #1\n\t"
"cmp r2, #0\n\t"
"bne 4b\n\t"
"BX LR");</asm>
</block_content>}</block></decl></decl_stmt>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
