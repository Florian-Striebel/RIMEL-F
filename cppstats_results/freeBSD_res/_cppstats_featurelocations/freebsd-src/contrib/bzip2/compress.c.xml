<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bzip2/compress.c">



























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bzlib_private.h"</cpp:file></cpp:include>







<function><type><name>void</name></type> <name>BZ2_bsInitWrite</name> <parameter_list>( <parameter><decl><type><name>EState</name><modifier>*</modifier></type> <name>s</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bsLive</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bsBuff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier>
<name>void</name></type> <name>bsFinishWrite</name> <parameter_list>( <parameter><decl><type><name>EState</name><modifier>*</modifier></type> <name>s</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bsLive</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>zbits</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>numZ</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>bsBuff</name></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>numZ</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bsBuff</name></name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bsLive</name></name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bsNEEDW</name><parameter_list>(<parameter><type><name>nz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ while (s-&gt;bsLive &gt;= 8) { s-&gt;zbits[s-&gt;numZ] = (UChar)(s-&gt;bsBuff &gt;&gt; 24); s-&gt;numZ++; s-&gt;bsBuff &lt;&lt;= 8; s-&gt;bsLive -= 8; } }</cpp:value></cpp:define>












<function><type><specifier>static</specifier>
<name>__inline__</name>
<name>void</name></type> <name>bsW</name> <parameter_list>( <parameter><decl><type><name>EState</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>Int32</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>UInt32</name></type> <name>v</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>bsNEEDW</name> <argument_list>( <argument><expr><name>n</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bsBuff</name></name> <operator>|=</operator> <operator>(</operator><name>v</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>bsLive</name></name> <operator>-</operator> <name>n</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bsLive</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier>
<name>void</name></type> <name>bsPutUInt32</name> <parameter_list>( <parameter><decl><type><name>EState</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>UInt32</name></type> <name>u</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>bsW</name> <argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name>u</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffL</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bsW</name> <argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name>u</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffL</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bsW</name> <argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name>u</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffL</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bsW</name> <argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>u</name> <operator>&amp;</operator> <literal type="number">0xffL</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier>
<name>void</name></type> <name>bsPutUChar</name> <parameter_list>( <parameter><decl><type><name>EState</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>UChar</name></type> <name>c</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>bsW</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name>UInt32</name><operator>)</operator><name>c</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier>
<name>void</name></type> <name>makeMaps_e</name> <parameter_list>( <parameter><decl><type><name>EState</name><modifier>*</modifier></type> <name>s</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Int32</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nInUse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>inUse</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>unseqToSeq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nInUse</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nInUse</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>



<function><type><specifier>static</specifier>
<name>void</name></type> <name>generateMTFValues</name> <parameter_list>( <parameter><decl><type><name>EState</name><modifier>*</modifier></type> <name>s</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UChar</name></type> <name><name>yy</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>zPend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>wr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>EOB</name></decl>;</decl_stmt>























<decl_stmt><decl><type><name>UInt32</name><modifier>*</modifier></type> <name>ptr</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UChar</name><modifier>*</modifier></type> <name>block</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>block</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt16</name><modifier>*</modifier></type> <name>mtfv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mtfv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>makeMaps_e</name> <argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>EOB</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nInUse</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>EOB</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mtfFreq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>wr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>zPend</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nInUse</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>yy</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>)</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nblock</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>UChar</name></type> <name>ll_i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AssertD</name> <argument_list>( <argument><expr><name>wr</name> <operator>&lt;=</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"generateMTFValues(1)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>j</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>nblock</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ll_i</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>unseqToSeq</name><index>[<expr><name><name>block</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AssertD</name> <argument_list>( <argument><expr><name>ll_i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nInUse</name></name></expr></argument>, <argument><expr><literal type="string">"generateMTFValues(2a)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>yy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>ll_i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>zPend</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>zPend</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>zPend</name><operator>--</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><name>True</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>zPend</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mtfv</name><index>[<expr><name>wr</name></expr>]</index></name> <operator>=</operator> <name>BZ_RUNB</name></expr>;</expr_stmt> <expr_stmt><expr><name>wr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mtfFreq</name><index>[<expr><name>BZ_RUNB</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>mtfv</name><index>[<expr><name>wr</name></expr>]</index></name> <operator>=</operator> <name>BZ_RUNA</name></expr>;</expr_stmt> <expr_stmt><expr><name>wr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mtfFreq</name><index>[<expr><name>BZ_RUNA</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>zPend</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>zPend</name> <operator>=</operator> <operator>(</operator><name>zPend</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></while><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name>zPend</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>UChar</name></type> <name>rtmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>UChar</name><modifier>*</modifier></type> <name>ryy_j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>UChar</name></type> <name>rll_i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rtmp</name> <operator>=</operator> <name><name>yy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>yy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ryy_j</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>yy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>rll_i</name> <operator>=</operator> <name>ll_i</name></expr>;</expr_stmt>
<while>while <condition>( <expr><name>rll_i</name> <operator>!=</operator> <name>rtmp</name></expr> )</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>UChar</name></type> <name>rtmp2</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ryy_j</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>rtmp2</name> <operator>=</operator> <name>rtmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rtmp</name> <operator>=</operator> <operator>*</operator><name>ryy_j</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ryy_j</name> <operator>=</operator> <name>rtmp2</name></expr>;</expr_stmt>
</block_content>}</block></while><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name><name>yy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>rtmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>ryy_j</name> <operator>-</operator> <operator>&amp;</operator><operator>(</operator><name><name>yy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mtfv</name><index>[<expr><name>wr</name></expr>]</index></name> <operator>=</operator> <name>j</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>wr</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mtfFreq</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>

</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>zPend</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>zPend</name><operator>--</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><name>True</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>zPend</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mtfv</name><index>[<expr><name>wr</name></expr>]</index></name> <operator>=</operator> <name>BZ_RUNB</name></expr>;</expr_stmt> <expr_stmt><expr><name>wr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mtfFreq</name><index>[<expr><name>BZ_RUNB</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>mtfv</name><index>[<expr><name>wr</name></expr>]</index></name> <operator>=</operator> <name>BZ_RUNA</name></expr>;</expr_stmt> <expr_stmt><expr><name>wr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mtfFreq</name><index>[<expr><name>BZ_RUNA</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>zPend</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>zPend</name> <operator>=</operator> <operator>(</operator><name>zPend</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></while><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name>zPend</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mtfv</name><index>[<expr><name>wr</name></expr>]</index></name> <operator>=</operator> <name>EOB</name></expr>;</expr_stmt> <expr_stmt><expr><name>wr</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mtfFreq</name><index>[<expr><name>EOB</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nMTF</name></name> <operator>=</operator> <name>wr</name></expr>;</expr_stmt>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_LESSER_ICOST</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_GREATER_ICOST</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<function><type><specifier>static</specifier>
<name>void</name></type> <name>sendMTFValues</name> <parameter_list>( <parameter><decl><type><name>EState</name><modifier>*</modifier></type> <name>s</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Int32</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>gs</name></decl>, <decl><type ref="prev"/><name>ge</name></decl>, <decl><type ref="prev"/><name>totc</name></decl>, <decl><type ref="prev"/><name>bt</name></decl>, <decl><type ref="prev"/><name>bc</name></decl>, <decl><type ref="prev"/><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>nSelectors</name></decl>, <decl><type ref="prev"/><name>alphaSize</name></decl>, <decl><type ref="prev"/><name>minLen</name></decl>, <decl><type ref="prev"/><name>maxLen</name></decl>, <decl><type ref="prev"/><name>selCtr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>nGroups</name></decl>, <decl><type ref="prev"/><name>nBytes</name></decl>;</decl_stmt>












<decl_stmt><decl><type><name>UInt16</name></type> <name><name>cost</name><index>[<expr><name>BZ_N_GROUPS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name><name>fave</name><index>[<expr><name>BZ_N_GROUPS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UInt16</name><modifier>*</modifier></type> <name>mtfv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mtfv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>verbosity</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>VPrintf3</name><argument_list>( <argument><expr><literal type="string">" %d in block, %d after MTF &amp; 1-2 coding, "</literal>
<literal type="string">"%d+2 syms in use\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nblock</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nMTF</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nInUse</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>alphaSize</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nInUse</name></name><operator>+</operator><literal type="number">2</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>BZ_N_GROUPS</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <name>alphaSize</name></expr>;</condition> <incr><expr><name>v</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>BZ_GREATER_ICOST</name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>


<expr_stmt><expr><call><name>AssertH</name> <argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nMTF</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3001</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nMTF</name></name> <operator>&lt;</operator> <literal type="number">200</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nGroups</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if> <if type="elseif">else
if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nMTF</name></name> <operator>&lt;</operator> <literal type="number">600</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nGroups</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if> <if type="elseif">else
if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nMTF</name></name> <operator>&lt;</operator> <literal type="number">1200</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nGroups</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if> <if type="elseif">else
if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nMTF</name></name> <operator>&lt;</operator> <literal type="number">2400</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nGroups</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>nGroups</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>


<block>{<block_content>
<decl_stmt><decl><type><name>Int32</name></type> <name>nPart</name></decl>, <decl><type ref="prev"/><name>remF</name></decl>, <decl><type ref="prev"/><name>tFreq</name></decl>, <decl><type ref="prev"/><name>aFreq</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nPart</name> <operator>=</operator> <name>nGroups</name></expr>;</expr_stmt>
<expr_stmt><expr><name>remF</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nMTF</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>gs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>nPart</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tFreq</name> <operator>=</operator> <name>remF</name> <operator>/</operator> <name>nPart</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ge</name> <operator>=</operator> <name>gs</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>aFreq</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>aFreq</name> <operator>&lt;</operator> <name>tFreq</name> <operator>&amp;&amp;</operator> <name>ge</name> <operator>&lt;</operator> <name>alphaSize</name><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ge</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>aFreq</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>mtfFreq</name><index>[<expr><name>ge</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>ge</name> <operator>&gt;</operator> <name>gs</name>
<operator>&amp;&amp;</operator> <name>nPart</name> <operator>!=</operator> <name>nGroups</name> <operator>&amp;&amp;</operator> <name>nPart</name> <operator>!=</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>nGroups</name><operator>-</operator><name>nPart</name><operator>)</operator> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>aFreq</name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>mtfFreq</name><index>[<expr><name>ge</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ge</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>verbosity</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>VPrintf5</name><argument_list>( <argument><expr><literal type="string">" initial group %d, [%d .. %d], "</literal>
<literal type="string">"has %d syms (%4.1f%%)\n"</literal></expr></argument>,
<argument><expr><name>nPart</name></expr></argument>, <argument><expr><name>gs</name></expr></argument>, <argument><expr><name>ge</name></expr></argument>, <argument><expr><name>aFreq</name></expr></argument>,
<argument><expr><operator>(</operator><literal type="number">100.0</literal> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><name>aFreq</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>nMTF</name></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <name>alphaSize</name></expr>;</condition> <incr><expr><name>v</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <name>gs</name> <operator>&amp;&amp;</operator> <name>v</name> <operator>&lt;=</operator> <name>ge</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><name>nPart</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>BZ_LESSER_ICOST</name></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><name>nPart</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>BZ_GREATER_ICOST</name></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>

<expr_stmt><expr><name>nPart</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>gs</name> <operator>=</operator> <name>ge</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>remF</name> <operator>-=</operator> <name>aFreq</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block>




<for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iter</name> <operator>&lt;</operator> <name>BZ_N_ITERS</name></expr>;</condition> <incr><expr><name>iter</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>nGroups</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>fave</name><index>[<expr><name>t</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>nGroups</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <name>alphaSize</name></expr>;</condition> <incr><expr><name>v</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rfreq</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></for>





<if_stmt><if>if <condition>(<expr><name>nGroups</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <name>alphaSize</name></expr>;</condition> <incr><expr><name>v</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>len_pack</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>v</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>len_pack</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>v</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>len_pack</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><name>v</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nSelectors</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>totc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>gs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>True</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>gs</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>nMTF</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ge</name> <operator>=</operator> <name>gs</name> <operator>+</operator> <name>BZ_G_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ge</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>nMTF</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ge</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nMTF</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>





<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>nGroups</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>cost</name><index>[<expr><name>t</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>nGroups</name> <operator>==</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <literal type="number">50</literal> <operator>==</operator> <name>ge</name><operator>-</operator><name>gs</name><operator>+</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>UInt32</name></type> <name>cost01</name></decl>, <decl><type ref="prev"/><name>cost23</name></decl>, <decl><type ref="prev"/><name>cost45</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>UInt16</name></type> <name>icv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cost01</name> <operator>=</operator> <name>cost23</name> <operator>=</operator> <name>cost45</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_ITER</name><parameter_list>(<parameter><type><name>nn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>icv = mtfv[gs+(nn)]; cost01 += s-&gt;len_pack[icv][0]; cost23 += s-&gt;len_pack[icv][1]; cost45 += s-&gt;len_pack[icv][2];</cpp:value></cpp:define>





<expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">34</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">35</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">37</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">38</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">39</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">41</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">44</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">45</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">46</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">47</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITER</name><argument_list>(<argument><expr><literal type="number">49</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BZ_ITER</name></cpp:undef>

<expr_stmt><expr><name><name>cost</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>cost01</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>cost</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>cost01</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cost</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>cost23</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>cost</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>cost23</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cost</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>cost45</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>cost</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>cost45</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>gs</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>ge</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>UInt16</name></type> <name>icv</name> <init>= <expr><name><name>mtfv</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>nGroups</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>cost</name><index>[<expr><name>t</name></expr>]</index></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>icv</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>





<expr_stmt><expr><name>bc</name> <operator>=</operator> <literal type="number">999999999</literal></expr>;</expr_stmt> <expr_stmt><expr><name>bt</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>nGroups</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>cost</name><index>[<expr><name>t</name></expr>]</index></name> <operator>&lt;</operator> <name>bc</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>bc</name> <operator>=</operator> <name><name>cost</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>bt</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt></block_content></block></for><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name>totc</name> <operator>+=</operator> <name>bc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fave</name><index>[<expr><name>bt</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>selector</name><index>[<expr><name>nSelectors</name></expr>]</index></name> <operator>=</operator> <name>bt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nSelectors</name><operator>++</operator></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>nGroups</name> <operator>==</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <literal type="number">50</literal> <operator>==</operator> <name>ge</name><operator>-</operator><name>gs</name><operator>+</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_ITUR</name><parameter_list>(<parameter><type><name>nn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>s-&gt;rfreq[bt][ mtfv[gs+(nn)] ]++</cpp:value></cpp:define>

<expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">34</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">35</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">37</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">38</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">39</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">41</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">44</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">45</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">46</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">47</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITUR</name><argument_list>(<argument><expr><literal type="number">49</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BZ_ITUR</name></cpp:undef>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>gs</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>ge</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rfreq</name><index>[<expr><name>bt</name></expr>]</index><index>[ <expr><name><name>mtfv</name><index>[<expr><name>i</name></expr>]</index></name></expr> ]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>gs</name> <operator>=</operator> <name>ge</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>verbosity</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VPrintf2</name> <argument_list>( <argument><expr><literal type="string">" pass %d: size is %d, grp uses are "</literal></expr></argument>,
<argument><expr><name>iter</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>totc</name><operator>/</operator><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>nGroups</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>VPrintf1</name> <argument_list>( <argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name><name>fave</name><index>[<expr><name>t</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>VPrintf0</name> <argument_list>( <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>






<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>nGroups</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BZ2_hbMakeCodeLengths</name> <argument_list>( <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>rfreq</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>,
<argument><expr><name>alphaSize</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>


<expr_stmt><expr><call><name>AssertH</name><argument_list>( <argument><expr><name>nGroups</name> <operator>&lt;</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">3002</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AssertH</name><argument_list>( <argument><expr><name>nSelectors</name> <operator>&lt;</operator> <literal type="number">32768</literal> <operator>&amp;&amp;</operator>
<name>nSelectors</name> <operator>&lt;=</operator> <name>BZ_MAX_SELECTORS</name></expr></argument>,
<argument><expr><literal type="number">3003</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>



<block>{<block_content>
<decl_stmt><decl><type><name>UChar</name></type> <name><name>pos</name><index>[<expr><name>BZ_N_GROUPS</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>ll_i</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nGroups</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nSelectors</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ll_i</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>selector</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>pos</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>( <expr><name>ll_i</name> <operator>!=</operator> <name>tmp</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>pos</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>tmp2</name></expr>;</expr_stmt>
</block_content>}</block></while><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name><name>pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>selectorMtf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block><empty_stmt>;</empty_stmt>


<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>nGroups</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>minLen</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>maxLen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>alphaSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>maxLen</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>maxLen</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>minLen</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>minLen</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>AssertH</name> <argument_list>( <argument><expr><operator>!</operator><operator>(</operator><name>maxLen</name> <operator>&gt;</operator> <literal type="number">17</literal> <operator>)</operator></expr></argument>, <argument><expr><literal type="number">3004</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AssertH</name> <argument_list>( <argument><expr><operator>!</operator><operator>(</operator><name>minLen</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">3005</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ2_hbAssignCodes</name> <argument_list>( <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>,
<argument><expr><name>minLen</name></expr></argument>, <argument><expr><name>maxLen</name></expr></argument>, <argument><expr><name>alphaSize</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<block>{<block_content>
<decl_stmt><decl><type><name>Bool</name></type> <name><name>inUse16</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>inUse16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>False</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>inUse</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>inUse16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>True</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></for>

<expr_stmt><expr><name>nBytes</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>numZ</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>inUse16</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bsW</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>bsW</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>inUse16</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>inUse</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bsW</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>bsW</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>verbosity</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>VPrintf1</name><argument_list>( <argument><expr><literal type="string">" bytes: mapping %d, "</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>numZ</name></name><operator>-</operator><name>nBytes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>


<expr_stmt><expr><name>nBytes</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>numZ</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bsW</name> <argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>nGroups</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bsW</name> <argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name>nSelectors</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nSelectors</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>selectorMtf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bsW</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>bsW</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>verbosity</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>VPrintf1</name><argument_list>( <argument><expr><literal type="string">"selectors %d, "</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>numZ</name></name><operator>-</operator><name>nBytes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>nBytes</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>numZ</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>nGroups</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Int32</name></type> <name>curr</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bsW</name> <argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>curr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>alphaSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<while>while <condition>(<expr><name>curr</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>bsW</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>curr</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></while><empty_stmt>;</empty_stmt>
<while>while <condition>(<expr><name>curr</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>bsW</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>curr</name><operator>--</operator></expr>;</expr_stmt> </block_content>}</block></while><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>bsW</name> <argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>verbosity</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>VPrintf1</name> <argument_list>( <argument><expr><literal type="string">"code lengths %d, "</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>numZ</name></name><operator>-</operator><name>nBytes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>nBytes</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>numZ</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>selCtr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>gs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>True</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>gs</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>nMTF</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ge</name> <operator>=</operator> <name>gs</name> <operator>+</operator> <name>BZ_G_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ge</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>nMTF</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ge</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nMTF</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>AssertH</name> <argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>selector</name><index>[<expr><name>selCtr</name></expr>]</index></name> <operator>&lt;</operator> <name>nGroups</name></expr></argument>, <argument><expr><literal type="number">3006</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nGroups</name> <operator>==</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <literal type="number">50</literal> <operator>==</operator> <name>ge</name><operator>-</operator><name>gs</name><operator>+</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>UInt16</name></type> <name>mtfv_i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UChar</name><modifier>*</modifier></type> <name>s_len_sel_selCtr</name>
<init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>selector</name><index>[<expr><name>selCtr</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name><modifier>*</modifier></type> <name>s_code_sel_selCtr</name>
<init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>code</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>selector</name><index>[<expr><name>selCtr</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_ITAH</name><parameter_list>(<parameter><type><name>nn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mtfv_i = mtfv[gs+(nn)]; bsW ( s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i] )</cpp:value></cpp:define>





<expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">34</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">35</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">37</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">38</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">39</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">41</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">44</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">45</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">46</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">47</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BZ_ITAH</name><argument_list>(<argument><expr><literal type="number">49</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BZ_ITAH</name></cpp:undef>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>gs</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>ge</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>bsW</name> <argument_list>( <argument><expr><name>s</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>len</name> <index>[<expr><name><name>s</name><operator>-&gt;</operator><name>selector</name><index>[<expr><name>selCtr</name></expr>]</index></name></expr>]</index> <index>[<expr><name><name>mtfv</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>code</name> <index>[<expr><name><name>s</name><operator>-&gt;</operator><name>selector</name><index>[<expr><name>selCtr</name></expr>]</index></name></expr>]</index> <index>[<expr><name><name>mtfv</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>gs</name> <operator>=</operator> <name>ge</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>selCtr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>AssertH</name><argument_list>( <argument><expr><name>selCtr</name> <operator>==</operator> <name>nSelectors</name></expr></argument>, <argument><expr><literal type="number">3007</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>verbosity</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>VPrintf1</name><argument_list>( <argument><expr><literal type="string">"codes %d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>numZ</name></name><operator>-</operator><name>nBytes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>BZ2_compressBlock</name> <parameter_list>( <parameter><decl><type><name>EState</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>Bool</name></type> <name>is_last_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nblock</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>BZ_FINALISE_CRC</name> <argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>blockCRC</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>combinedCRC</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>combinedCRC</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>combinedCRC</name></name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>combinedCRC</name></name> <operator>^=</operator> <name><name>s</name><operator>-&gt;</operator><name>blockCRC</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>blockNo</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>numZ</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>verbosity</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>VPrintf4</name><argument_list>( <argument><expr><literal type="string">" block %d: crc = 0x%08x, "</literal>
<literal type="string">"combined CRC = 0x%08x, size = %d\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>blockNo</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>blockCRC</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>combinedCRC</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nblock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>BZ2_blockSort</name> <argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>zbits</name></name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>UChar</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>arr2</name></name><operator>)</operator><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nblock</name></name></expr>]</index><operator>)</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>blockNo</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BZ2_bsInitWrite</name> <argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bsPutUChar</name> <argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>BZ_HDR_B</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bsPutUChar</name> <argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>BZ_HDR_Z</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bsPutUChar</name> <argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>BZ_HDR_h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bsPutUChar</name> <argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>UChar</name><operator>)</operator><operator>(</operator><name>BZ_HDR_0</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>blockSize100k</name></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nblock</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bsPutUChar</name> <argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0x31</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>bsPutUChar</name> <argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0x41</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bsPutUChar</name> <argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0x59</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>bsPutUChar</name> <argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0x26</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bsPutUChar</name> <argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0x53</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>bsPutUChar</name> <argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0x59</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bsPutUInt32</name> <argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>blockCRC</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>










<expr_stmt><expr><call><name>bsW</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bsW</name> <argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>origPtr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>generateMTFValues</name> <argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sendMTFValues</name> <argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>is_last_block</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bsPutUChar</name> <argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0x17</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>bsPutUChar</name> <argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0x72</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bsPutUChar</name> <argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0x45</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>bsPutUChar</name> <argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0x38</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bsPutUChar</name> <argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0x50</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>bsPutUChar</name> <argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0x90</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bsPutUInt32</name> <argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>combinedCRC</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>verbosity</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>VPrintf1</name><argument_list>( <argument><expr><literal type="string">" final combined CRC = 0x%08x\n "</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>combinedCRC</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bsFinishWrite</name> <argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





</unit>
