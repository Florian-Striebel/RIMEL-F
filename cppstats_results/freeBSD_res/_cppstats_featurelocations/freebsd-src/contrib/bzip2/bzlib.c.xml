<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bzip2/bzlib.c">





























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bzlib_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BZ_NO_COMPRESS</name></expr></argument>)</argument_list></call></expr></cpp:if>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BZ_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>BZ2_bz__AssertH__fail</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name>errcode</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"\n\nbzip2/libbzip2: internal error number %d.\n"</literal>
<literal type="string">"This is a bug in bzip2/libbzip2, %s.\n"</literal>
<literal type="string">"Please report it to: bzip2-devel@sourceware.org. If this happened\n"</literal>
<literal type="string">"when you were using some program which uses libbzip2 as a\n"</literal>
<literal type="string">"component, you should also report this bug to the author(s)\n"</literal>
<literal type="string">"of that program. Please make an effort to report this bug;\n"</literal>
<literal type="string">"timely and accurate bug reports eventually lead to higher\n"</literal>
<literal type="string">"quality software. Thanks.\n\n"</literal></expr></argument>,
<argument><expr><name>errcode</name></expr></argument>,
<argument><expr><call><name>BZ2_bzlibVersion</name><argument_list>()</argument_list></call></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>errcode</name> <operator>==</operator> <literal type="number">1007</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"\n*** A special note about internal error number 1007 ***\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"Experience suggests that a common cause of i.e. 1007\n"</literal>
<literal type="string">"is unreliable memory or other hardware. The 1007 assertion\n"</literal>
<literal type="string">"just happens to cross-check the results of huge numbers of\n"</literal>
<literal type="string">"memory reads/writes, and so acts (unintendedly) as a stress\n"</literal>
<literal type="string">"test of your memory system.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"I suggest the following: try compressing the file again,\n"</literal>
<literal type="string">"possibly monitoring progress in detail with the -vv flag.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"* If the error cannot be reproduced, and/or happens at different\n"</literal>
<literal type="string">" points in compression, you may have a flaky memory system.\n"</literal>
<literal type="string">" Try a memory-test program. I have used Memtest86\n"</literal>
<literal type="string">" (www.memtest86.com). At the time of writing it is free (GPLd).\n"</literal>
<literal type="string">" Memtest86 tests memory much more thorougly than your BIOSs\n"</literal>
<literal type="string">" power-on test, and may find failures that the BIOS doesn't.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"* If the error can be repeatably reproduced, this is a bug in\n"</literal>
<literal type="string">" bzip2, and I would very much like to hear about it. Please\n"</literal>
<literal type="string">" let me know, and, ideally, save a copy of the file causing the\n"</literal>
<literal type="string">" problem -- without which I will be unable to investigate it.\n"</literal>
<literal type="string">"\n"</literal></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier>
<name>int</name></type> <name>bz_config_ok</name> <parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier>
<name>void</name><modifier>*</modifier></type> <name>default_bzalloc</name> <parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>opaque</name></decl></parameter>, <parameter><decl><type><name>Int32</name></type> <name>items</name></decl></parameter>, <parameter><decl><type><name>Int32</name></type> <name>size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>v</name> <init>= <expr><call><name>malloc</name> <argument_list>( <argument><expr><name>items</name> <operator>*</operator> <name>size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>void</name></type> <name>default_bzfree</name> <parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>opaque</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>addr</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name> <argument_list>( <argument><expr><name>addr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BZ_NO_COMPRESS</name></expr></argument>)</argument_list></call></expr></cpp:if>


<function><type><specifier>static</specifier>
<name>void</name></type> <name>prepare_new_block</name> <parameter_list>( <parameter><decl><type><name>EState</name><modifier>*</modifier></type> <name>s</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Int32</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nblock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>numZ</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state_out_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_INITIALISE_CRC</name> <argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>blockCRC</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>inUse</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>False</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blockNo</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier>
<name>void</name></type> <name>init_RL</name> <parameter_list>( <parameter><decl><type><name>EState</name><modifier>*</modifier></type> <name>s</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state_in_ch</name></name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state_in_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier>
<name>Bool</name></type> <name>isempty_RL</name> <parameter_list>( <parameter><decl><type><name>EState</name><modifier>*</modifier></type> <name>s</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>state_in_ch</name></name> <operator>&lt;</operator> <literal type="number">256</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>state_in_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>False</name></expr>;</return></block_content></block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><name>True</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>



<function><type><name>int</name> <name>BZ_API</name></type>(<name>BZ2_bzCompressInit</name>)
<parameter_list>( <parameter><decl><type><name>bz_stream</name><modifier>*</modifier></type> <name>strm</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>blockSize100k</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>verbosity</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>workFactor</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Int32</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EState</name><modifier>*</modifier></type> <name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bz_config_ok</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BZ_CONFIG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>strm</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>blockSize100k</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>blockSize100k</name></expr></argument> &gt;</argument_list></name> <literal type="number">9</literal> <operator>||</operator>
<name><name>workFactor</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>workFactor</name></expr></argument> &gt;</argument_list></name> <literal type="number">250</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BZ_PARAM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>workFactor</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>workFactor</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>bzalloc</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>bzalloc</name></name> <operator>=</operator> <name>default_bzalloc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>bzfree</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>bzfree</name></name> <operator>=</operator> <name>default_bzfree</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>BZALLOC</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EState</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BZ_MEM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strm</name></name> <operator>=</operator> <name>strm</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>arr1</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>arr2</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ftab</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">100000</literal> <operator>*</operator> <name>blockSize100k</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>arr1</name></name> <operator>=</operator> <call><name>BZALLOC</name><argument_list>( <argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>UInt32</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>arr2</name></name> <operator>=</operator> <call><name>BZALLOC</name><argument_list>( <argument><expr><operator>(</operator><name>n</name><operator>+</operator><name>BZ_N_OVERSHOOT</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>UInt32</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ftab</name></name> <operator>=</operator> <call><name>BZALLOC</name><argument_list>( <argument><expr><literal type="number">65537</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>UInt32</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>arr1</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>arr2</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>ftab</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>arr1</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>BZFREE</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>arr1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>arr2</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>BZFREE</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>arr2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ftab</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>BZFREE</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ftab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>BZFREE</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>BZ_MEM_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blockNo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>BZ_S_INPUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>BZ_M_RUNNING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>combinedCRC</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blockSize100k</name></name> <operator>=</operator> <name>blockSize100k</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nblockMAX</name></name> <operator>=</operator> <literal type="number">100000</literal> <operator>*</operator> <name>blockSize100k</name> <operator>-</operator> <literal type="number">19</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>verbosity</name></name> <operator>=</operator> <name>verbosity</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>workFactor</name></name> <operator>=</operator> <name>workFactor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block</name></name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>arr2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mtfv</name></name> <operator>=</operator> <operator>(</operator><name>UInt16</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>arr1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>zbits</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><name>UInt32</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>arr1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>total_in_lo32</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>total_in_hi32</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>total_out_lo32</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>total_out_hi32</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_RL</name> <argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>prepare_new_block</name> <argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>BZ_OK</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier>
<name>void</name></type> <name>add_pair_to_block</name> <parameter_list>( <parameter><decl><type><name>EState</name><modifier>*</modifier></type> <name>s</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Int32</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UChar</name></type> <name>ch</name> <init>= <expr><operator>(</operator><name>UChar</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>state_in_ch</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>state_in_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>BZ_UPDATE_CRC</name><argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>blockCRC</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>inUse</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>state_in_ch</name></name></expr>]</index></name> <operator>=</operator> <name>True</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>state_in_len</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nblock</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>)</operator><name>ch</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nblock</name></name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nblock</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>)</operator><name>ch</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nblock</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nblock</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>)</operator><name>ch</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nblock</name></name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nblock</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>)</operator><name>ch</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nblock</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nblock</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>)</operator><name>ch</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nblock</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nblock</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>)</operator><name>ch</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nblock</name></name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>inUse</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>state_in_len</name></name><operator>-</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>True</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nblock</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>)</operator><name>ch</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nblock</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nblock</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>)</operator><name>ch</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nblock</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nblock</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>)</operator><name>ch</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nblock</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nblock</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>)</operator><name>ch</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nblock</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nblock</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>UChar</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>state_in_len</name></name><operator>-</operator><literal type="number">4</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nblock</name></name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>



<function><type><specifier>static</specifier>
<name>void</name></type> <name>flush_RL</name> <parameter_list>( <parameter><decl><type><name>EState</name><modifier>*</modifier></type> <name>s</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>state_in_ch</name></name> <operator>&lt;</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>add_pair_to_block</name> <argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>init_RL</name> <argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_CHAR_TO_BLOCK</name><parameter_list>(<parameter><type><name>zs</name></type></parameter>,<parameter><type><name>zchh0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ UInt32 zchh = (UInt32)(zchh0); if (zchh != zs-&gt;state_in_ch &amp;&amp; zs-&gt;state_in_len == 1) { UChar ch = (UChar)(zs-&gt;state_in_ch); BZ_UPDATE_CRC( zs-&gt;blockCRC, ch ); zs-&gt;inUse[zs-&gt;state_in_ch] = True; zs-&gt;block[zs-&gt;nblock] = (UChar)ch; zs-&gt;nblock++; zs-&gt;state_in_ch = zchh; } else if (zchh != zs-&gt;state_in_ch || zs-&gt;state_in_len == 255) { if (zs-&gt;state_in_ch &lt; 256) add_pair_to_block ( zs ); zs-&gt;state_in_ch = zchh; zs-&gt;state_in_len = 1; } else { zs-&gt;state_in_len++; } }</cpp:value></cpp:define>



























<function><type><specifier>static</specifier>
<name>Bool</name></type> <name>copy_input_until_stop</name> <parameter_list>( <parameter><decl><type><name>EState</name><modifier>*</modifier></type> <name>s</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Bool</name></type> <name>progress_in</name> <init>= <expr><name>False</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>BZ_M_RUNNING</name></expr>)</condition> <block>{<block_content>


<while>while <condition>(<expr><name>True</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nblock</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>nblockMAX</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>progress_in</name> <operator>=</operator> <name>True</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_CHAR_TO_BLOCK</name> <argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>UInt32</name><operator>)</operator><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>UChar</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>next_in</name></name><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>next_in</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>total_in_lo32</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>total_in_lo32</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>total_in_hi32</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>

</block_content>}</block></if> <else>else <block>{<block_content>


<while>while <condition>(<expr><name>True</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nblock</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>nblockMAX</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avail_in_expect</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>progress_in</name> <operator>=</operator> <name>True</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_CHAR_TO_BLOCK</name> <argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>UInt32</name><operator>)</operator><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>UChar</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>next_in</name></name><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>next_in</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>total_in_lo32</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>total_in_lo32</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>total_in_hi32</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avail_in_expect</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>progress_in</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier>
<name>Bool</name></type> <name>copy_output_until_stop</name> <parameter_list>( <parameter><decl><type><name>EState</name><modifier>*</modifier></type> <name>s</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Bool</name></type> <name>progress_out</name> <init>= <expr><name>False</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>True</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>state_out_pos</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>numZ</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>progress_out</name> <operator>=</operator> <name>True</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>next_out</name></name><operator>)</operator> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>zbits</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>state_out_pos</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state_out_pos</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>next_out</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>total_out_lo32</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>total_out_lo32</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>total_out_hi32</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>progress_out</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier>
<name>Bool</name></type> <name>handle_compress</name> <parameter_list>( <parameter><decl><type><name>bz_stream</name><modifier>*</modifier></type> <name>strm</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Bool</name></type> <name>progress_in</name> <init>= <expr><name>False</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Bool</name></type> <name>progress_out</name> <init>= <expr><name>False</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EState</name><modifier>*</modifier></type> <name>s</name> <init>= <expr><name><name>strm</name><operator>-&gt;</operator><name>state</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>True</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>BZ_S_OUTPUT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>progress_out</name> <operator>|=</operator> <call><name>copy_output_until_stop</name> <argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>state_out_pos</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>numZ</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>BZ_M_FINISHING</name> <operator>&amp;&amp;</operator>
<name><name>s</name><operator>-&gt;</operator><name>avail_in_expect</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>isempty_RL</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>prepare_new_block</name> <argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>BZ_S_INPUT</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>BZ_M_FLUSHING</name> <operator>&amp;&amp;</operator>
<name><name>s</name><operator>-&gt;</operator><name>avail_in_expect</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>isempty_RL</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>BZ_S_INPUT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>progress_in</name> <operator>|=</operator> <call><name>copy_input_until_stop</name> <argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>BZ_M_RUNNING</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>avail_in_expect</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>flush_RL</name> <argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ2_compressBlock</name> <argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>Bool</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>BZ_M_FINISHING</name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>BZ_S_OUTPUT</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else
if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nblock</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>nblockMAX</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BZ2_compressBlock</name> <argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>False</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>BZ_S_OUTPUT</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else
if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>progress_in</name> <operator>||</operator> <name>progress_out</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name> <name>BZ_API</name></type>(<name>BZ2_bzCompress</name>) <parameter_list>( <parameter><decl><type><name>bz_stream</name> <modifier>*</modifier></type><name>strm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Bool</name></type> <name>progress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EState</name><modifier>*</modifier></type> <name>s</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>strm</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BZ_PARAM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>strm</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BZ_PARAM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>strm</name></name> <operator>!=</operator> <name>strm</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BZ_PARAM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<label><name>preswitch</name>:</label>
<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>BZ_M_IDLE</name></expr>:</case>
<return>return <expr><name>BZ_SEQUENCE_ERROR</name></expr>;</return>

<case>case <expr><name>BZ_M_RUNNING</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>BZ_RUN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>progress</name> <operator>=</operator> <call><name>handle_compress</name> <argument_list>( <argument><expr><name>strm</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>progress</name></expr> ?</condition><then> <expr><name>BZ_RUN_OK</name></expr> </then><else>: <expr><name>BZ_PARAM_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else
if <condition>(<expr><name>action</name> <operator>==</operator> <name>BZ_FLUSH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avail_in_expect</name></name> <operator>=</operator> <name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>BZ_M_FLUSHING</name></expr>;</expr_stmt>
<goto>goto <name>preswitch</name>;</goto>
</block_content>}</block></if>
<if type="elseif">else
if <condition>(<expr><name>action</name> <operator>==</operator> <name>BZ_FINISH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avail_in_expect</name></name> <operator>=</operator> <name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>BZ_M_FINISHING</name></expr>;</expr_stmt>
<goto>goto <name>preswitch</name>;</goto>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>BZ_PARAM_ERROR</name></expr>;</return></block_content></block></else></if_stmt>

<case>case <expr><name>BZ_M_FLUSHING</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>action</name> <operator>!=</operator> <name>BZ_FLUSH</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BZ_SEQUENCE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avail_in_expect</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BZ_SEQUENCE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>progress</name> <operator>=</operator> <call><name>handle_compress</name> <argument_list>( <argument><expr><name>strm</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avail_in_expect</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><call><name>isempty_RL</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>state_out_pos</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>numZ</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BZ_FLUSH_OK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>BZ_M_RUNNING</name></expr>;</expr_stmt>
<return>return <expr><name>BZ_RUN_OK</name></expr>;</return>

<case>case <expr><name>BZ_M_FINISHING</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>action</name> <operator>!=</operator> <name>BZ_FINISH</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BZ_SEQUENCE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avail_in_expect</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BZ_SEQUENCE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>progress</name> <operator>=</operator> <call><name>handle_compress</name> <argument_list>( <argument><expr><name>strm</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>progress</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BZ_SEQUENCE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avail_in_expect</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><call><name>isempty_RL</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>state_out_pos</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>numZ</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BZ_FINISH_OK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>BZ_M_IDLE</name></expr>;</expr_stmt>
<return>return <expr><name>BZ_STREAM_END</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>BZ_OK</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name> <name>BZ_API</name></type>(<name>BZ2_bzCompressEnd</name>) <parameter_list>( <parameter><decl><type><name>bz_stream</name> <modifier>*</modifier></type><name>strm</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EState</name><modifier>*</modifier></type> <name>s</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>strm</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BZ_PARAM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>strm</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BZ_PARAM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>strm</name></name> <operator>!=</operator> <name>strm</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BZ_PARAM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>arr1</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>BZFREE</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>arr1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>arr2</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>BZFREE</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>arr2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ftab</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>BZFREE</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ftab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>BZFREE</name><argument_list>(<argument><expr><name><name>strm</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>BZ_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><name>int</name> <name>BZ_API</name></type>(<name>BZ2_bzDecompressInit</name>)
<parameter_list>( <parameter><decl><type><name>bz_stream</name><modifier>*</modifier></type> <name>strm</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>verbosity</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>small</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DState</name><modifier>*</modifier></type> <name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bz_config_ok</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BZ_CONFIG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>strm</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BZ_PARAM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>small</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>small</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BZ_PARAM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>verbosity</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>verbosity</name></expr></argument> &gt;</argument_list></name> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BZ_PARAM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>bzalloc</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>bzalloc</name></name> <operator>=</operator> <name>default_bzalloc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>bzfree</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>bzfree</name></name> <operator>=</operator> <name>default_bzfree</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>BZALLOC</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DState</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BZ_MEM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strm</name></name> <operator>=</operator> <name>strm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>BZ_X_MAGIC_1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bsLive</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bsBuff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>calculatedCombinedCRC</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>total_in_lo32</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>total_in_hi32</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>total_out_lo32</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>total_out_hi32</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>smallDecompress</name></name> <operator>=</operator> <operator>(</operator><name>Bool</name><operator>)</operator><name>small</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ll4</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ll16</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>currBlockNo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>verbosity</name></name> <operator>=</operator> <name>verbosity</name></expr>;</expr_stmt>

<return>return <expr><name>BZ_OK</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier>
<name>Bool</name></type> <name>unRLE_obuf_to_output_FAST</name> <parameter_list>( <parameter><decl><type><name>DState</name><modifier>*</modifier></type> <name>s</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UChar</name></type> <name>k1</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>blockRandomised</name></name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>True</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>True</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>False</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>state_out_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator> <operator>(</operator><name>UChar</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>next_out</name></name><operator>)</operator> <operator>)</operator> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>state_out_ch</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_UPDATE_CRC</name> <argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>calculatedBlockCRC</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>state_out_ch</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state_out_len</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>next_out</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>total_out_lo32</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>total_out_lo32</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>total_out_hi32</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>save_nblock</name></name><operator>+</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>False</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>save_nblock</name></name><operator>+</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>True</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state_out_len</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state_out_ch</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>k0</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_GET_FAST</name><argument_list>(<argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>BZ_RAND_UPD_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k1</name> <operator>^=</operator> <name>BZ_RAND_MASK</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>save_nblock</name></name><operator>+</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>k1</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>k0</name></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>k0</name></name> <operator>=</operator> <name>k1</name></expr>;</expr_stmt> <continue>continue;</continue> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state_out_len</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_GET_FAST</name><argument_list>(<argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>BZ_RAND_UPD_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k1</name> <operator>^=</operator> <name>BZ_RAND_MASK</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>save_nblock</name></name><operator>+</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>k1</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>k0</name></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>k0</name></name> <operator>=</operator> <name>k1</name></expr>;</expr_stmt> <continue>continue;</continue> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state_out_len</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_GET_FAST</name><argument_list>(<argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>BZ_RAND_UPD_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k1</name> <operator>^=</operator> <name>BZ_RAND_MASK</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>save_nblock</name></name><operator>+</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>k1</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>k0</name></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>k0</name></name> <operator>=</operator> <name>k1</name></expr>;</expr_stmt> <continue>continue;</continue> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>BZ_GET_FAST</name><argument_list>(<argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>BZ_RAND_UPD_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k1</name> <operator>^=</operator> <name>BZ_RAND_MASK</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state_out_len</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Int32</name><operator>)</operator><name>k1</name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_GET_FAST</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>k0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>BZ_RAND_UPD_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>k0</name></name> <operator>^=</operator> <name>BZ_RAND_MASK</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

</block_content>}</block></if> <else>else <block>{<block_content>


<decl_stmt><decl><type><name>UInt32</name></type> <name>c_calculatedBlockCRC</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>calculatedBlockCRC</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UChar</name></type> <name>c_state_out_ch</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>state_out_ch</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>c_state_out_len</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>state_out_len</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>c_nblock_used</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>c_k0</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>k0</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name><modifier>*</modifier></type> <name>c_tt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tt</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>c_tPos</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tPos</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>cs_next_out</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>next_out</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cs_avail_out</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>ro_blockSize100k</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>blockSize100k</name></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>UInt32</name></type> <name>avail_out_INIT</name> <init>= <expr><name>cs_avail_out</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>s_save_nblockPP</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>save_nblock</name></name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>total_out_lo32_old</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>True</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>c_state_out_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>True</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cs_avail_out</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>return_notr</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c_state_out_len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator> <operator>(</operator><name>UChar</name><operator>*</operator><operator>)</operator><operator>(</operator><name>cs_next_out</name><operator>)</operator> <operator>)</operator> <operator>=</operator> <name>c_state_out_ch</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_UPDATE_CRC</name> <argument_list>( <argument><expr><name>c_calculatedBlockCRC</name></expr></argument>, <argument><expr><name>c_state_out_ch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c_state_out_len</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>cs_next_out</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>cs_avail_out</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<label><name>s_state_out_len_eq_one</name>:</label>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cs_avail_out</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c_state_out_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <goto>goto <name>return_notr</name>;</goto>
</block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator> <operator>(</operator><name>UChar</name><operator>*</operator><operator>)</operator><operator>(</operator><name>cs_next_out</name><operator>)</operator> <operator>)</operator> <operator>=</operator> <name>c_state_out_ch</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_UPDATE_CRC</name> <argument_list>( <argument><expr><name>c_calculatedBlockCRC</name></expr></argument>, <argument><expr><name>c_state_out_ch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cs_next_out</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>cs_avail_out</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c_nblock_used</name> <operator>&gt;</operator> <name>s_save_nblockPP</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>True</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>c_nblock_used</name> <operator>==</operator> <name>s_save_nblockPP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c_state_out_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <goto>goto <name>return_notr</name>;</goto>
</block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name>c_state_out_ch</name> <operator>=</operator> <name>c_k0</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_GET_FAST_C</name><argument_list>(<argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>c_nblock_used</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>k1</name> <operator>!=</operator> <name>c_k0</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c_k0</name> <operator>=</operator> <name>k1</name></expr>;</expr_stmt> <goto>goto <name>s_state_out_len_eq_one</name>;</goto>
</block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>
<if_stmt><if>if <condition>(<expr><name>c_nblock_used</name> <operator>==</operator> <name>s_save_nblockPP</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>s_state_out_len_eq_one</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c_state_out_len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_GET_FAST_C</name><argument_list>(<argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>c_nblock_used</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c_nblock_used</name> <operator>==</operator> <name>s_save_nblockPP</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>k1</name> <operator>!=</operator> <name>c_k0</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>c_k0</name> <operator>=</operator> <name>k1</name></expr>;</expr_stmt> <continue>continue;</continue> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>c_state_out_len</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_GET_FAST_C</name><argument_list>(<argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>c_nblock_used</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c_nblock_used</name> <operator>==</operator> <name>s_save_nblockPP</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>k1</name> <operator>!=</operator> <name>c_k0</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>c_k0</name> <operator>=</operator> <name>k1</name></expr>;</expr_stmt> <continue>continue;</continue> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>BZ_GET_FAST_C</name><argument_list>(<argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>c_nblock_used</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>c_state_out_len</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Int32</name><operator>)</operator><name>k1</name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_GET_FAST_C</name><argument_list>(<argument><expr><name>c_k0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>c_nblock_used</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<label><name>return_notr</name>:</label>
<expr_stmt><expr><name>total_out_lo32_old</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>total_out_lo32</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>total_out_lo32</name></name> <operator>+=</operator> <operator>(</operator><name>avail_out_INIT</name> <operator>-</operator> <name>cs_avail_out</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>total_out_lo32</name></name> <operator>&lt;</operator> <name>total_out_lo32_old</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>total_out_hi32</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>calculatedBlockCRC</name></name> <operator>=</operator> <name>c_calculatedBlockCRC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state_out_ch</name></name> <operator>=</operator> <name>c_state_out_ch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state_out_len</name></name> <operator>=</operator> <name>c_state_out_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name> <operator>=</operator> <name>c_nblock_used</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>k0</name></name> <operator>=</operator> <name>c_k0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tt</name></name> <operator>=</operator> <name>c_tt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tPos</name></name> <operator>=</operator> <name>c_tPos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>next_out</name></name> <operator>=</operator> <name>cs_next_out</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>=</operator> <name>cs_avail_out</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>
<return>return <expr><name>False</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>__inline__</name> <name>Int32</name></type> <name>BZ2_indexIntoF</name> <parameter_list>( <parameter><decl><type><name>Int32</name></type> <name>indx</name></decl></parameter>, <parameter><decl><type><name>Int32</name> <modifier>*</modifier></type><name>cftab</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Int32</name></type> <name>nb</name></decl>, <decl><type ref="prev"/><name>na</name></decl>, <decl><type ref="prev"/><name>mid</name></decl>;</decl_stmt>
<expr_stmt><expr><name>nb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>na</name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>mid</name> <operator>=</operator> <operator>(</operator><name>nb</name> <operator>+</operator> <name>na</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>indx</name> <operator>&gt;=</operator> <name><name>cftab</name><index>[<expr><name>mid</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nb</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>na</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block>
while <condition>(<expr><name>na</name> <operator>-</operator> <name>nb</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>;</do>
<return>return <expr><name>nb</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier>
<name>Bool</name></type> <name>unRLE_obuf_to_output_SMALL</name> <parameter_list>( <parameter><decl><type><name>DState</name><modifier>*</modifier></type> <name>s</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UChar</name></type> <name>k1</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>blockRandomised</name></name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>True</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>True</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>False</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>state_out_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator> <operator>(</operator><name>UChar</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>next_out</name></name><operator>)</operator> <operator>)</operator> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>state_out_ch</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_UPDATE_CRC</name> <argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>calculatedBlockCRC</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>state_out_ch</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state_out_len</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>next_out</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>total_out_lo32</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>total_out_lo32</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>total_out_hi32</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>save_nblock</name></name><operator>+</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>False</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>save_nblock</name></name><operator>+</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>True</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state_out_len</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state_out_ch</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>k0</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_GET_SMALL</name><argument_list>(<argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>BZ_RAND_UPD_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k1</name> <operator>^=</operator> <name>BZ_RAND_MASK</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>save_nblock</name></name><operator>+</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>k1</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>k0</name></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>k0</name></name> <operator>=</operator> <name>k1</name></expr>;</expr_stmt> <continue>continue;</continue> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state_out_len</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_GET_SMALL</name><argument_list>(<argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>BZ_RAND_UPD_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k1</name> <operator>^=</operator> <name>BZ_RAND_MASK</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>save_nblock</name></name><operator>+</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>k1</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>k0</name></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>k0</name></name> <operator>=</operator> <name>k1</name></expr>;</expr_stmt> <continue>continue;</continue> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state_out_len</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_GET_SMALL</name><argument_list>(<argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>BZ_RAND_UPD_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k1</name> <operator>^=</operator> <name>BZ_RAND_MASK</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>save_nblock</name></name><operator>+</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>k1</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>k0</name></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>k0</name></name> <operator>=</operator> <name>k1</name></expr>;</expr_stmt> <continue>continue;</continue> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>BZ_GET_SMALL</name><argument_list>(<argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>BZ_RAND_UPD_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k1</name> <operator>^=</operator> <name>BZ_RAND_MASK</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state_out_len</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Int32</name><operator>)</operator><name>k1</name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_GET_SMALL</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>k0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>BZ_RAND_UPD_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>k0</name></name> <operator>^=</operator> <name>BZ_RAND_MASK</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<while>while <condition>(<expr><name>True</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>True</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>False</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>state_out_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator> <operator>(</operator><name>UChar</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>next_out</name></name><operator>)</operator> <operator>)</operator> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>state_out_ch</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_UPDATE_CRC</name> <argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>calculatedBlockCRC</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>state_out_ch</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state_out_len</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>next_out</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>total_out_lo32</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>total_out_lo32</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strm</name><operator>-&gt;</operator><name>total_out_hi32</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>save_nblock</name></name><operator>+</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>False</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>save_nblock</name></name><operator>+</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>True</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state_out_len</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state_out_ch</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>k0</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_GET_SMALL</name><argument_list>(<argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>save_nblock</name></name><operator>+</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>k1</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>k0</name></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>k0</name></name> <operator>=</operator> <name>k1</name></expr>;</expr_stmt> <continue>continue;</continue> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state_out_len</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_GET_SMALL</name><argument_list>(<argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>save_nblock</name></name><operator>+</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>k1</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>k0</name></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>k0</name></name> <operator>=</operator> <name>k1</name></expr>;</expr_stmt> <continue>continue;</continue> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state_out_len</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_GET_SMALL</name><argument_list>(<argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>save_nblock</name></name><operator>+</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>k1</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>k0</name></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>k0</name></name> <operator>=</operator> <name>k1</name></expr>;</expr_stmt> <continue>continue;</continue> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>BZ_GET_SMALL</name><argument_list>(<argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state_out_len</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Int32</name><operator>)</operator><name>k1</name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_GET_SMALL</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>k0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><name>int</name> <name>BZ_API</name></type>(<name>BZ2_bzDecompress</name>) <parameter_list>( <parameter><decl><type><name>bz_stream</name> <modifier>*</modifier></type><name>strm</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Bool</name></type> <name>corrupt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DState</name><modifier>*</modifier></type> <name>s</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>strm</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BZ_PARAM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>strm</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BZ_PARAM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>strm</name></name> <operator>!=</operator> <name>strm</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BZ_PARAM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>True</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>BZ_X_IDLE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BZ_SEQUENCE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>BZ_X_OUTPUT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>smallDecompress</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>corrupt</name> <operator>=</operator> <call><name>unRLE_obuf_to_output_SMALL</name> <argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>corrupt</name> <operator>=</operator> <call><name>unRLE_obuf_to_output_FAST</name> <argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>corrupt</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BZ_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>save_nblock</name></name><operator>+</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>state_out_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BZ_FINALISE_CRC</name> <argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>calculatedBlockCRC</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>verbosity</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>VPrintf2</name> <argument_list>( <argument><expr><literal type="string">" {0x%08x, 0x%08x}"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>storedBlockCRC</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>calculatedBlockCRC</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>verbosity</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>VPrintf0</name> <argument_list>( <argument><expr><literal type="string">"]"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>calculatedBlockCRC</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>storedBlockCRC</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BZ_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>calculatedCombinedCRC</name></name>
<operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>calculatedCombinedCRC</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>calculatedCombinedCRC</name></name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>calculatedCombinedCRC</name></name> <operator>^=</operator> <name><name>s</name><operator>-&gt;</operator><name>calculatedBlockCRC</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>BZ_X_BLKHDR_1</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>BZ_OK</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>&gt;=</operator> <name>BZ_X_MAGIC_1</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Int32</name></type> <name>r</name> <init>= <expr><call><name>BZ2_decompress</name> <argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>BZ_STREAM_END</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>verbosity</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>VPrintf2</name> <argument_list>( <argument><expr><literal type="string">"\n combined CRCs: stored = 0x%08x, computed = 0x%08x"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>storedCombinedCRC</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>calculatedCombinedCRC</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>calculatedCombinedCRC</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>storedCombinedCRC</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BZ_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BZ_X_OUTPUT</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>AssertH</name> <argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6001</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name> <name>BZ_API</name></type>(<name>BZ2_bzDecompressEnd</name>) <parameter_list>( <parameter><decl><type><name>bz_stream</name> <modifier>*</modifier></type><name>strm</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DState</name><modifier>*</modifier></type> <name>s</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>strm</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BZ_PARAM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>strm</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BZ_PARAM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>strm</name></name> <operator>!=</operator> <name>strm</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BZ_PARAM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>tt</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>BZFREE</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ll16</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>BZFREE</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ll16</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ll4</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>BZFREE</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ll4</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>BZFREE</name><argument_list>(<argument><expr><name><name>strm</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>BZ_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BZ_NO_COMPRESS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BZ_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_SETERR</name><parameter_list>(<parameter><type><name>eee</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ if (bzerror != NULL) *bzerror = eee; if (bzf != NULL) bzf-&gt;lastErr = eee; }</cpp:value></cpp:define>





<typedef>typedef
<type><struct>struct <block>{
<decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Char</name></type> <name><name>buf</name><index>[<expr><name>BZ_MAX_UNUSED</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>bufN</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Bool</name></type> <name>writing</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bz_stream</name></type> <name>strm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>lastErr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Bool</name></type> <name>initialisedOk</name></decl>;</decl_stmt>
}</block></struct></type>
<name>bzFile</name>;</typedef>



<function><type><specifier>static</specifier> <name>Bool</name></type> <name>myfeof</name> <parameter_list>( <parameter><decl><type><name>FILE</name><modifier>*</modifier></type> <name>f</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Int32</name></type> <name>c</name> <init>= <expr><call><name>fgetc</name> <argument_list>( <argument><expr><name>f</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>True</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ungetc</name> <argument_list>( <argument><expr><name>c</name></expr></argument>, <argument><expr><name>f</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>False</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>BZFILE</name><modifier>*</modifier> <name>BZ_API</name></type>(<name>BZ2_bzWriteOpen</name>)
<parameter_list>( <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>bzerror</name></decl></parameter>,
<parameter><decl><type><name>FILE</name><modifier>*</modifier></type> <name>f</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>blockSize100k</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>verbosity</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>workFactor</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Int32</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bzFile</name><modifier>*</modifier></type> <name>bzf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name><name>blockSize100k</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>blockSize100k</name></expr></argument> &gt;</argument_list></name> <literal type="number">9</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>workFactor</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>workFactor</name></expr></argument> &gt;</argument_list></name> <literal type="number">250</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>verbosity</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>verbosity</name></expr></argument> &gt;</argument_list></name> <literal type="number">4</literal><operator>)</operator></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_PARAM_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>NULL</name></expr>;</return> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_IO_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>NULL</name></expr>;</return> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>bzf</name> <operator>=</operator> <call><name>malloc</name> <argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bzFile</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bzf</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_MEM_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>NULL</name></expr>;</return> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bzf</name><operator>-&gt;</operator><name>initialisedOk</name></name> <operator>=</operator> <name>False</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bzf</name><operator>-&gt;</operator><name>bufN</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bzf</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bzf</name><operator>-&gt;</operator><name>writing</name></name> <operator>=</operator> <name>True</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bzf</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>bzalloc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bzf</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>bzfree</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bzf</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>opaque</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>workFactor</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>workFactor</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BZ2_bzCompressInit</name> <argument_list>( <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>bzf</name><operator>-&gt;</operator><name>strm</name></name><operator>)</operator></expr></argument>, <argument><expr><name>blockSize100k</name></expr></argument>,
<argument><expr><name>verbosity</name></expr></argument>, <argument><expr><name>workFactor</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>BZ_OK</name></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bzf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>NULL</name></expr>;</return> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name><name>bzf</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bzf</name><operator>-&gt;</operator><name>initialisedOk</name></name> <operator>=</operator> <name>True</name></expr>;</expr_stmt>
<return>return <expr><name>bzf</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name> <name>BZ_API</name></type>(<name>BZ2_bzWrite</name>)
<parameter_list>( <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>bzerror</name></decl></parameter>,
<parameter><decl><type><name>BZFILE</name><modifier>*</modifier></type> <name>b</name></decl></parameter>,
<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Int32</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>n2</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bzFile</name><modifier>*</modifier></type> <name>bzf</name> <init>= <expr><operator>(</operator><name>bzFile</name><operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bzf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>buf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_PARAM_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>bzf</name><operator>-&gt;</operator><name>writing</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_SEQUENCE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name><name>bzf</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_IO_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name><name>bzf</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bzf</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>True</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bzf</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <name>BZ_MAX_UNUSED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bzf</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name><name>bzf</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BZ2_bzCompress</name> <argument_list>( <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>bzf</name><operator>-&gt;</operator><name>strm</name></name><operator>)</operator></expr></argument>, <argument><expr><name>BZ_RUN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>BZ_RUN_OK</name></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bzf</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>avail_out</name></name> <operator>&lt;</operator> <name>BZ_MAX_UNUSED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>BZ_MAX_UNUSED</name> <operator>-</operator> <name><name>bzf</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>avail_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n2</name> <operator>=</operator> <call><name>fwrite</name> <argument_list>( <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>bzf</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>UChar</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>bzf</name><operator>-&gt;</operator><name>handle</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <name>n2</name> <operator>||</operator> <call><name>ferror</name><argument_list>(<argument><expr><name><name>bzf</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_IO_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bzf</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>avail_in</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></while>
</block_content>}</block></function>



<function><type><name>void</name> <name>BZ_API</name></type>(<name>BZ2_bzWriteClose</name>)
<parameter_list>( <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>bzerror</name></decl></parameter>,
<parameter><decl><type><name>BZFILE</name><modifier>*</modifier></type> <name>b</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>abandon</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>nbytes_in</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>nbytes_out</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>BZ2_bzWriteClose64</name> <argument_list>( <argument><expr><name>bzerror</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>abandon</name></expr></argument>,
<argument><expr><name>nbytes_in</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>nbytes_out</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name> <name>BZ_API</name></type>(<name>BZ2_bzWriteClose64</name>)
<parameter_list>( <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>bzerror</name></decl></parameter>,
<parameter><decl><type><name>BZFILE</name><modifier>*</modifier></type> <name>b</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>abandon</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>nbytes_in_lo32</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>nbytes_in_hi32</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>nbytes_out_lo32</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>nbytes_out_hi32</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Int32</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>n2</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bzFile</name><modifier>*</modifier></type> <name>bzf</name> <init>= <expr><operator>(</operator><name>bzFile</name><operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bzf</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>bzf</name><operator>-&gt;</operator><name>writing</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_SEQUENCE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name><name>bzf</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_IO_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><name>nbytes_in_lo32</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>nbytes_in_lo32</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nbytes_in_hi32</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>nbytes_in_hi32</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nbytes_out_lo32</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>nbytes_out_lo32</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nbytes_out_hi32</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>nbytes_out_hi32</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>abandon</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>bzf</name><operator>-&gt;</operator><name>lastErr</name></name> <operator>==</operator> <name>BZ_OK</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>True</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bzf</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <name>BZ_MAX_UNUSED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bzf</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name><name>bzf</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BZ2_bzCompress</name> <argument_list>( <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>bzf</name><operator>-&gt;</operator><name>strm</name></name><operator>)</operator></expr></argument>, <argument><expr><name>BZ_FINISH</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>BZ_FINISH_OK</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>BZ_STREAM_END</name></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bzf</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>avail_out</name></name> <operator>&lt;</operator> <name>BZ_MAX_UNUSED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>BZ_MAX_UNUSED</name> <operator>-</operator> <name><name>bzf</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>avail_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n2</name> <operator>=</operator> <call><name>fwrite</name> <argument_list>( <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>bzf</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>UChar</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>bzf</name><operator>-&gt;</operator><name>handle</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <name>n2</name> <operator>||</operator> <call><name>ferror</name><argument_list>(<argument><expr><name><name>bzf</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_IO_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>BZ_STREAM_END</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>abandon</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ferror</name> <argument_list>( <argument><expr><name><name>bzf</name><operator>-&gt;</operator><name>handle</name></name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fflush</name> <argument_list>( <argument><expr><name><name>bzf</name><operator>-&gt;</operator><name>handle</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name><name>bzf</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_IO_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nbytes_in_lo32</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>nbytes_in_lo32</name> <operator>=</operator> <name><name>bzf</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>total_in_lo32</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nbytes_in_hi32</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>nbytes_in_hi32</name> <operator>=</operator> <name><name>bzf</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>total_in_hi32</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nbytes_out_lo32</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>nbytes_out_lo32</name> <operator>=</operator> <name><name>bzf</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>total_out_lo32</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nbytes_out_hi32</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>nbytes_out_hi32</name> <operator>=</operator> <name><name>bzf</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>total_out_hi32</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ2_bzCompressEnd</name> <argument_list>( <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>bzf</name><operator>-&gt;</operator><name>strm</name></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>( <argument><expr><name>bzf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>BZFILE</name><modifier>*</modifier> <name>BZ_API</name></type>(<name>BZ2_bzReadOpen</name>)
<parameter_list>( <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>bzerror</name></decl></parameter>,
<parameter><decl><type><name>FILE</name><modifier>*</modifier></type> <name>f</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>verbosity</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>small</name></decl></parameter>,
<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>unused</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>nUnused</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bzFile</name><modifier>*</modifier></type> <name>bzf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name>small</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>small</name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>verbosity</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>verbosity</name></expr></argument> &gt;</argument_list></name> <literal type="number">4</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>unused</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>nUnused</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>unused</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>nUnused</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>nUnused</name></expr></argument> &gt;</argument_list></name> <name>BZ_MAX_UNUSED</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_PARAM_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>NULL</name></expr>;</return> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_IO_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>NULL</name></expr>;</return> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>bzf</name> <operator>=</operator> <call><name>malloc</name> <argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bzFile</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bzf</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_MEM_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>NULL</name></expr>;</return> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bzf</name><operator>-&gt;</operator><name>initialisedOk</name></name> <operator>=</operator> <name>False</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bzf</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bzf</name><operator>-&gt;</operator><name>bufN</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bzf</name><operator>-&gt;</operator><name>writing</name></name> <operator>=</operator> <name>False</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bzf</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>bzalloc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bzf</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>bzfree</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bzf</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>opaque</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>nUnused</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bzf</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>bzf</name><operator>-&gt;</operator><name>bufN</name></name></expr>]</index></name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>UChar</name><operator>*</operator><operator>)</operator><operator>(</operator><name>unused</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name><name>bzf</name><operator>-&gt;</operator><name>bufN</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>unused</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>UChar</name><operator>*</operator><operator>)</operator><operator>(</operator><name>unused</name><operator>)</operator><operator>)</operator> <operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>nUnused</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BZ2_bzDecompressInit</name> <argument_list>( <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>bzf</name><operator>-&gt;</operator><name>strm</name></name><operator>)</operator></expr></argument>, <argument><expr><name>verbosity</name></expr></argument>, <argument><expr><name>small</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>BZ_OK</name></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bzf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>NULL</name></expr>;</return> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name><name>bzf</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name><name>bzf</name><operator>-&gt;</operator><name>bufN</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bzf</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <name><name>bzf</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bzf</name><operator>-&gt;</operator><name>initialisedOk</name></name> <operator>=</operator> <name>True</name></expr>;</expr_stmt>
<return>return <expr><name>bzf</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name> <name>BZ_API</name></type>(<name>BZ2_bzReadClose</name>) <parameter_list>( <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bzerror</name></decl></parameter>, <parameter><decl><type><name>BZFILE</name> <modifier>*</modifier></type><name>b</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bzFile</name><modifier>*</modifier></type> <name>bzf</name> <init>= <expr><operator>(</operator><name>bzFile</name><operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bzf</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bzf</name><operator>-&gt;</operator><name>writing</name></name></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_SEQUENCE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bzf</name><operator>-&gt;</operator><name>initialisedOk</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>BZ2_bzDecompressEnd</name> <argument_list>( <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>bzf</name><operator>-&gt;</operator><name>strm</name></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>( <argument><expr><name>bzf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>int</name> <name>BZ_API</name></type>(<name>BZ2_bzRead</name>)
<parameter_list>( <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>bzerror</name></decl></parameter>,
<parameter><decl><type><name>BZFILE</name><modifier>*</modifier></type> <name>b</name></decl></parameter>,
<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Int32</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bzFile</name><modifier>*</modifier></type> <name>bzf</name> <init>= <expr><operator>(</operator><name>bzFile</name><operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bzf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>buf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_PARAM_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bzf</name><operator>-&gt;</operator><name>writing</name></name></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_SEQUENCE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name><name>bzf</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bzf</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>True</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name><name>bzf</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_IO_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bzf</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>avail_in</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>myfeof</name><argument_list>(<argument><expr><name><name>bzf</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>fread</name> <argument_list>( <argument><expr><name><name>bzf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>UChar</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>BZ_MAX_UNUSED</name></expr></argument>, <argument><expr><name><name>bzf</name><operator>-&gt;</operator><name>handle</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name><name>bzf</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_IO_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name><name>bzf</name><operator>-&gt;</operator><name>bufN</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bzf</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name><name>bzf</name><operator>-&gt;</operator><name>bufN</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bzf</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <name><name>bzf</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BZ2_bzDecompress</name> <argument_list>( <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>bzf</name><operator>-&gt;</operator><name>strm</name></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>BZ_OK</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>BZ_STREAM_END</name></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>BZ_OK</name> <operator>&amp;&amp;</operator> <call><name>myfeof</name><argument_list>(<argument><expr><name><name>bzf</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>bzf</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>avail_in</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>bzf</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>avail_out</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_UNEXPECTED_EOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>BZ_STREAM_END</name></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_STREAM_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>len</name> <operator>-</operator> <name><name>bzf</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>avail_out</name></name></expr>;</return> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bzf</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>avail_out</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>len</name></expr>;</return> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name> <name>BZ_API</name></type>(<name>BZ2_bzReadGetUnused</name>)
<parameter_list>( <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>bzerror</name></decl></parameter>,
<parameter><decl><type><name>BZFILE</name><modifier>*</modifier></type> <name>b</name></decl></parameter>,
<parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>unused</name></decl></parameter>,
<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>nUnused</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bzFile</name><modifier>*</modifier></type> <name>bzf</name> <init>= <expr><operator>(</operator><name>bzFile</name><operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bzf</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_PARAM_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bzf</name><operator>-&gt;</operator><name>lastErr</name></name> <operator>!=</operator> <name>BZ_STREAM_END</name></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_SEQUENCE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>
<if_stmt><if>if <condition>(<expr><name>unused</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>nUnused</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_PARAM_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>BZ_SETERR</name><argument_list>(<argument><expr><name>BZ_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>nUnused</name> <operator>=</operator> <name><name>bzf</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>avail_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>unused</name> <operator>=</operator> <name><name>bzf</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>next_in</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<function><type><name>int</name> <name>BZ_API</name></type>(<name>BZ2_bzBuffToBuffCompress</name>)
<parameter_list>( <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>destLen</name></decl></parameter>,
<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>sourceLen</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>blockSize100k</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>verbosity</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>workFactor</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bz_stream</name></type> <name>strm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dest</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>destLen</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name>source</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>blockSize100k</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>blockSize100k</name></expr></argument> &gt;</argument_list></name> <literal type="number">9</literal> <operator>||</operator>
<name><name>verbosity</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>verbosity</name></expr></argument> &gt;</argument_list></name> <literal type="number">4</literal> <operator>||</operator>
<name><name>workFactor</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>workFactor</name></expr></argument> &gt;</argument_list></name> <literal type="number">250</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BZ_PARAM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>workFactor</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>workFactor</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>strm</name><operator>.</operator><name>bzalloc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>.</operator><name>bzfree</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>.</operator><name>opaque</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BZ2_bzCompressInit</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>strm</name></expr></argument>, <argument><expr><name>blockSize100k</name></expr></argument>,
<argument><expr><name>verbosity</name></expr></argument>, <argument><expr><name>workFactor</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>BZ_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>strm</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name>sourceLen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <operator>*</operator><name>destLen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BZ2_bzCompress</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>strm</name></expr></argument>, <argument><expr><name>BZ_FINISH</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>BZ_FINISH_OK</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>output_overflow</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>BZ_STREAM_END</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>errhandler</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><operator>*</operator><name>destLen</name> <operator>-=</operator> <name><name>strm</name><operator>.</operator><name>avail_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ2_bzCompressEnd</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>strm</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>BZ_OK</name></expr>;</return>

<label><name>output_overflow</name>:</label>
<expr_stmt><expr><call><name>BZ2_bzCompressEnd</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>strm</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>BZ_OUTBUFF_FULL</name></expr>;</return>

<label><name>errhandler</name>:</label>
<expr_stmt><expr><call><name>BZ2_bzCompressEnd</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>strm</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name> <name>BZ_API</name></type>(<name>BZ2_bzBuffToBuffDecompress</name>)
<parameter_list>( <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>destLen</name></decl></parameter>,
<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>sourceLen</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>small</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>verbosity</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bz_stream</name></type> <name>strm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dest</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>destLen</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name>source</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name>small</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>small</name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator>
<name><name>verbosity</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>verbosity</name></expr></argument> &gt;</argument_list></name> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BZ_PARAM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>strm</name><operator>.</operator><name>bzalloc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>.</operator><name>bzfree</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>.</operator><name>opaque</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BZ2_bzDecompressInit</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>strm</name></expr></argument>, <argument><expr><name>verbosity</name></expr></argument>, <argument><expr><name>small</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>BZ_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>strm</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name>sourceLen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <operator>*</operator><name>destLen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BZ2_bzDecompress</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>strm</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>BZ_OK</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>output_overflow_or_eof</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>BZ_STREAM_END</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>errhandler</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><operator>*</operator><name>destLen</name> <operator>-=</operator> <name><name>strm</name><operator>.</operator><name>avail_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ2_bzDecompressEnd</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>strm</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>BZ_OK</name></expr>;</return>

<label><name>output_overflow_or_eof</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>.</operator><name>avail_out</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BZ2_bzDecompressEnd</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>strm</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>BZ_UNEXPECTED_EOF</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>BZ2_bzDecompressEnd</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>strm</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>BZ_OUTBUFF_FULL</name></expr>;</return>
</block_content>}</block></else></if_stmt><empty_stmt>;</empty_stmt>

<label><name>errhandler</name>:</label>
<expr_stmt><expr><call><name>BZ2_bzDecompressEnd</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>strm</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

















<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <name>BZ_API</name></type>(<name>BZ2_bzlibVersion</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>BZ_VERSION</name></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BZ_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>OS2</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_BINARY_MODE</name><parameter_list>(<parameter><type><name>file</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>setmode(fileno(file),O_BINARY)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_BINARY_MODE</name><parameter_list>(<parameter><type><name>file</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier>
<name>BZFILE</name> <modifier>*</modifier></type> <name>bzopen_or_bzdopen</name>
<parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>open_mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bzerr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>unused</name><index>[<expr><name>BZ_MAX_UNUSED</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>blockSize100k</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>writing</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>mode2</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BZFILE</name> <modifier>*</modifier></type><name>bzfp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>verbosity</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>workFactor</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>smallMode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nUnused</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><operator>*</operator><name>mode</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>mode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><name>writing</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'w'</literal></expr>:</case>
<expr_stmt><expr><name>writing</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><name>smallMode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>*</operator><name>mode</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>blockSize100k</name> <operator>=</operator> <operator>*</operator><name>mode</name><operator>-</operator><name>BZ_HDR_0</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name>mode</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>mode2</name></expr></argument>, <argument><expr><ternary><condition><expr><name>writing</name></expr> ?</condition><then> <expr><literal type="string">"w"</literal></expr> </then><else>: <expr><literal type="string">"r"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>mode2</name></expr></argument>,<argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>open_mode</name><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>path</name><operator>==</operator><name>NULL</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fp</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>writing</name></expr> ?</condition><then> <expr><name>stdout</name></expr> </then><else>: <expr><name>stdin</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_BINARY_MODE</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>,<argument><expr><name>mode2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BZ_STRICT_ANSI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>fp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fdopen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><name>mode2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>writing</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>blockSize100k</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>blockSize100k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>blockSize100k</name> <operator>&gt;</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>blockSize100k</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bzfp</name> <operator>=</operator> <call><name>BZ2_bzWriteOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bzerr</name></expr></argument>,<argument><expr><name>fp</name></expr></argument>,<argument><expr><name>blockSize100k</name></expr></argument>,
<argument><expr><name>verbosity</name></expr></argument>,<argument><expr><name>workFactor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>bzfp</name> <operator>=</operator> <call><name>BZ2_bzReadOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bzerr</name></expr></argument>,<argument><expr><name>fp</name></expr></argument>,<argument><expr><name>verbosity</name></expr></argument>,<argument><expr><name>smallMode</name></expr></argument>,
<argument><expr><name>unused</name></expr></argument>,<argument><expr><name>nUnused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bzfp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>stdin</name> <operator>&amp;&amp;</operator> <name>fp</name> <operator>!=</operator> <name>stdout</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>bzfp</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>BZFILE</name> <modifier>*</modifier> <name>BZ_API</name></type>(<name>BZ2_bzopen</name>)
<parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>bzopen_or_bzdopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>mode</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>BZFILE</name> <modifier>*</modifier> <name>BZ_API</name></type>(<name>BZ2_bzdopen</name>)
<parameter_list>( <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>bzopen_or_bzdopen</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>fd</name></expr></argument>,<argument><expr><name>mode</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name> <name>BZ_API</name></type>(<name>BZ2_bzread</name>) <parameter_list>(<parameter><decl><type><name>BZFILE</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bzerr</name></decl>, <decl><type ref="prev"/><name>nread</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bzFile</name><operator>*</operator><operator>)</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>lastErr</name> <operator>==</operator> <name>BZ_STREAM_END</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>BZ2_bzRead</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bzerr</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bzerr</name> <operator>==</operator> <name>BZ_OK</name> <operator>||</operator> <name>bzerr</name> <operator>==</operator> <name>BZ_STREAM_END</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>nread</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><name>int</name> <name>BZ_API</name></type>(<name>BZ2_bzwrite</name>) <parameter_list>(<parameter><decl><type><name>BZFILE</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bzerr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BZ2_bzWrite</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bzerr</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>bzerr</name> <operator>==</operator> <name>BZ_OK</name></expr>)</condition><block>{<block_content>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></if><else>else<block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><name>int</name> <name>BZ_API</name></type>(<name>BZ2_bzflush</name>) <parameter_list>(<parameter><decl><type><name>BZFILE</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name> <name>BZ_API</name></type>(<name>BZ2_bzclose</name>) <parameter_list>(<parameter><decl><type><name>BZFILE</name><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bzerr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name><operator>==</operator><name>NULL</name></expr>)</condition> <block>{<block_content><return>return;</return></block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>bzFile</name> <operator>*</operator><operator>)</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>handle</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name>bzFile</name><operator>*</operator><operator>)</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>writing</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>BZ2_bzWriteClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bzerr</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>bzerr</name> <operator>!=</operator> <name>BZ_OK</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>BZ2_bzWriteClose</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<expr_stmt><expr><call><name>BZ2_bzReadClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bzerr</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><name>fp</name><operator>!=</operator><name>stdin</name> <operator>&amp;&amp;</operator> <name>fp</name><operator>!=</operator><name>stdout</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>bzerrorstrings</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"OK"</literal></expr>
,<expr><literal type="string">"SEQUENCE_ERROR"</literal></expr>
,<expr><literal type="string">"PARAM_ERROR"</literal></expr>
,<expr><literal type="string">"MEM_ERROR"</literal></expr>
,<expr><literal type="string">"DATA_ERROR"</literal></expr>
,<expr><literal type="string">"DATA_ERROR_MAGIC"</literal></expr>
,<expr><literal type="string">"IO_ERROR"</literal></expr>
,<expr><literal type="string">"UNEXPECTED_EOF"</literal></expr>
,<expr><literal type="string">"OUTBUFF_FULL"</literal></expr>
,<expr><literal type="string">"CONFIG_ERROR"</literal></expr>
,<expr><literal type="string">"???"</literal></expr>
,<expr><literal type="string">"???"</literal></expr>
,<expr><literal type="string">"???"</literal></expr>
,<expr><literal type="string">"???"</literal></expr>
,<expr><literal type="string">"???"</literal></expr>
,<expr><literal type="string">"???"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <name>BZ_API</name></type>(<name>BZ2_bzerror</name>) <parameter_list>(<parameter><decl><type><name>BZFILE</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>errnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><operator>(</operator><operator>(</operator><name>bzFile</name> <operator>*</operator><operator>)</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>lastErr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>errnum</name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>
<return>return <expr><name><name>bzerrorstrings</name><index>[<expr><name>err</name><operator>*</operator><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
