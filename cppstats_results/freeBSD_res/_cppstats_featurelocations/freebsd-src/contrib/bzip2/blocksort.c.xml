<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bzip2/blocksort.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bzlib_private.h"</cpp:file></cpp:include>







<function><type><specifier>static</specifier>
<name>__inline__</name>
<name>void</name></type> <name>fallbackSimpleSort</name> <parameter_list>( <parameter><decl><type><name>UInt32</name><modifier>*</modifier></type> <name>fmap</name></decl></parameter>,
<parameter><decl><type><name>UInt32</name><modifier>*</modifier></type> <name>eclass</name></decl></parameter>,
<parameter><decl><type><name>Int32</name></type> <name>lo</name></decl></parameter>,
<parameter><decl><type><name>Int32</name></type> <name>hi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Int32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>ec_tmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lo</name> <operator>==</operator> <name>hi</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hi</name> <operator>-</operator> <name>lo</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<for>for <control>( <init><expr><name>i</name> <operator>=</operator> <name>hi</name><operator>-</operator><literal type="number">4</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>lo</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control> <block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>fmap</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ec_tmp</name> <operator>=</operator> <name><name>eclass</name><index>[<expr><name>tmp</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>( <init><expr><name>j</name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">4</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>hi</name> <operator>&amp;&amp;</operator> <name>ec_tmp</name> <operator>&gt;</operator> <name><name>eclass</name><index>[<expr><name><name>fmap</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fmap</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>fmap</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>fmap</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<for>for <control>( <init><expr><name>i</name> <operator>=</operator> <name>hi</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>lo</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control> <block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>fmap</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ec_tmp</name> <operator>=</operator> <name><name>eclass</name><index>[<expr><name>tmp</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>( <init><expr><name>j</name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>hi</name> <operator>&amp;&amp;</operator> <name>ec_tmp</name> <operator>&gt;</operator> <name><name>eclass</name><index>[<expr><name><name>fmap</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fmap</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>fmap</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>fmap</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fswap</name><parameter_list>(<parameter><type><name>zz1</name></type></parameter>, <parameter><type><name>zz2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fvswap</name><parameter_list>(<parameter><type><name>zzp1</name></type></parameter>, <parameter><type><name>zzp2</name></type></parameter>, <parameter><type><name>zzn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ Int32 yyp1 = (zzp1); Int32 yyp2 = (zzp2); Int32 yyn = (zzn); while (yyn &gt; 0) { fswap(fmap[yyp1], fmap[yyp2]); yyp1++; yyp2++; yyn--; } }</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fmin</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &lt; (b)) ? (a) : (b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fpush</name><parameter_list>(<parameter><type><name>lz</name></type></parameter>,<parameter><type><name>hz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ stackLo[sp] = lz; stackHi[sp] = hz; sp++; }</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fpop</name><parameter_list>(<parameter><type><name>lz</name></type></parameter>,<parameter><type><name>hz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ sp--; lz = stackLo[sp]; hz = stackHi[sp]; }</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FALLBACK_QSORT_SMALL_THRESH</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FALLBACK_QSORT_STACK_SIZE</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>


<function><type><specifier>static</specifier>
<name>void</name></type> <name>fallbackQSort3</name> <parameter_list>( <parameter><decl><type><name>UInt32</name><modifier>*</modifier></type> <name>fmap</name></decl></parameter>,
<parameter><decl><type><name>UInt32</name><modifier>*</modifier></type> <name>eclass</name></decl></parameter>,
<parameter><decl><type><name>Int32</name></type> <name>loSt</name></decl></parameter>,
<parameter><decl><type><name>Int32</name></type> <name>hiSt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Int32</name></type> <name>unLo</name></decl>, <decl><type ref="prev"/><name>unHi</name></decl>, <decl><type ref="prev"/><name>ltLo</name></decl>, <decl><type ref="prev"/><name>gtHi</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>sp</name></decl>, <decl><type ref="prev"/><name>lo</name></decl>, <decl><type ref="prev"/><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>med</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>r3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name><name>stackLo</name><index>[<expr><name>FALLBACK_QSORT_STACK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name><name>stackHi</name><index>[<expr><name>FALLBACK_QSORT_STACK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fpush</name> <argument_list>( <argument><expr><name>loSt</name></expr></argument>, <argument><expr><name>hiSt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>sp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AssertH</name> <argument_list>( <argument><expr><name>sp</name> <operator>&lt;</operator> <name>FALLBACK_QSORT_STACK_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1004</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fpop</name> <argument_list>( <argument><expr><name>lo</name></expr></argument>, <argument><expr><name>hi</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hi</name> <operator>-</operator> <name>lo</name> <operator>&lt;</operator> <name>FALLBACK_QSORT_SMALL_THRESH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fallbackSimpleSort</name> <argument_list>( <argument><expr><name>fmap</name></expr></argument>, <argument><expr><name>eclass</name></expr></argument>, <argument><expr><name>lo</name></expr></argument>, <argument><expr><name>hi</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>








<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r</name> <operator>*</operator> <literal type="number">7621</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">32768</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r3</name> <operator>=</operator> <name>r</name> <operator>%</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r3</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>med</name> <operator>=</operator> <name><name>eclass</name><index>[<expr><name><name>fmap</name><index>[<expr><name>lo</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if> <if type="elseif">else
if <condition>(<expr><name>r3</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>med</name> <operator>=</operator> <name><name>eclass</name><index>[<expr><name><name>fmap</name><index>[<expr><operator>(</operator><name>lo</name><operator>+</operator><name>hi</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>med</name> <operator>=</operator> <name><name>eclass</name><index>[<expr><name><name>fmap</name><index>[<expr><name>hi</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>unLo</name> <operator>=</operator> <name>ltLo</name> <operator>=</operator> <name>lo</name></expr>;</expr_stmt>
<expr_stmt><expr><name>unHi</name> <operator>=</operator> <name>gtHi</name> <operator>=</operator> <name>hi</name></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>unLo</name> <operator>&gt;</operator> <name>unHi</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>Int32</name><operator>)</operator><name><name>eclass</name><index>[<expr><name><name>fmap</name><index>[<expr><name>unLo</name></expr>]</index></name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>Int32</name><operator>)</operator><name>med</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fswap</name><argument_list>(<argument><expr><name><name>fmap</name><index>[<expr><name>unLo</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>fmap</name><index>[<expr><name>ltLo</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ltLo</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>unLo</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>unLo</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>unLo</name> <operator>&gt;</operator> <name>unHi</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>Int32</name><operator>)</operator><name><name>eclass</name><index>[<expr><name><name>fmap</name><index>[<expr><name>unHi</name></expr>]</index></name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>Int32</name><operator>)</operator><name>med</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fswap</name><argument_list>(<argument><expr><name><name>fmap</name><index>[<expr><name>unHi</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>fmap</name><index>[<expr><name>gtHi</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gtHi</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>unHi</name><operator>--</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>unHi</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>unLo</name> <operator>&gt;</operator> <name>unHi</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fswap</name><argument_list>(<argument><expr><name><name>fmap</name><index>[<expr><name>unLo</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>fmap</name><index>[<expr><name>unHi</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>unLo</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>unHi</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>AssertD</name> <argument_list>( <argument><expr><name>unHi</name> <operator>==</operator> <name>unLo</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"fallbackQSort3(2)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gtHi</name> <operator>&lt;</operator> <name>ltLo</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>fmin</name><argument_list>(<argument><expr><name>ltLo</name><operator>-</operator><name>lo</name></expr></argument>, <argument><expr><name>unLo</name><operator>-</operator><name>ltLo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>fvswap</name><argument_list>(<argument><expr><name>lo</name></expr></argument>, <argument><expr><name>unLo</name><operator>-</operator><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>fmin</name><argument_list>(<argument><expr><name>hi</name><operator>-</operator><name>gtHi</name></expr></argument>, <argument><expr><name>gtHi</name><operator>-</operator><name>unHi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>fvswap</name><argument_list>(<argument><expr><name>unLo</name></expr></argument>, <argument><expr><name>hi</name><operator>-</operator><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>lo</name> <operator>+</operator> <name>unLo</name> <operator>-</operator> <name>ltLo</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>hi</name> <operator>-</operator> <operator>(</operator><name>gtHi</name> <operator>-</operator> <name>unHi</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>-</operator> <name>lo</name> <operator>&gt;</operator> <name>hi</name> <operator>-</operator> <name>m</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fpush</name> <argument_list>( <argument><expr><name>lo</name></expr></argument>, <argument><expr><name>n</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fpush</name> <argument_list>( <argument><expr><name>m</name></expr></argument>, <argument><expr><name>hi</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fpush</name> <argument_list>( <argument><expr><name>m</name></expr></argument>, <argument><expr><name>hi</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fpush</name> <argument_list>( <argument><expr><name>lo</name></expr></argument>, <argument><expr><name>n</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fmin</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fpush</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fpop</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fswap</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fvswap</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FALLBACK_QSORT_SMALL_THRESH</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FALLBACK_QSORT_STACK_SIZE</name></cpp:undef>
















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_BH</name><parameter_list>(<parameter><type><name>zz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bhtab[(zz) &gt;&gt; 5] |= ((UInt32)1 &lt;&lt; ((zz) &amp; 31))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLEAR_BH</name><parameter_list>(<parameter><type><name>zz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bhtab[(zz) &gt;&gt; 5] &amp;= ~((UInt32)1 &lt;&lt; ((zz) &amp; 31))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISSET_BH</name><parameter_list>(<parameter><type><name>zz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bhtab[(zz) &gt;&gt; 5] &amp; ((UInt32)1 &lt;&lt; ((zz) &amp; 31)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WORD_BH</name><parameter_list>(<parameter><type><name>zz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bhtab[(zz) &gt;&gt; 5]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNALIGNED_BH</name><parameter_list>(<parameter><type><name>zz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((zz) &amp; 0x01f)</cpp:value></cpp:define>

<function><type><specifier>static</specifier>
<name>void</name></type> <name>fallbackSort</name> <parameter_list>( <parameter><decl><type><name>UInt32</name><modifier>*</modifier></type> <name>fmap</name></decl></parameter>,
<parameter><decl><type><name>UInt32</name><modifier>*</modifier></type> <name>eclass</name></decl></parameter>,
<parameter><decl><type><name>UInt32</name><modifier>*</modifier></type> <name>bhtab</name></decl></parameter>,
<parameter><decl><type><name>Int32</name></type> <name>nblock</name></decl></parameter>,
<parameter><decl><type><name>Int32</name></type> <name>verb</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Int32</name></type> <name><name>ftab</name><index>[<expr><literal type="number">257</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name><name>ftabCopy</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>H</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>cc</name></decl>, <decl><type ref="prev"/><name>cc1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>nNotDone</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>nBhtab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UChar</name><modifier>*</modifier></type> <name>eclass8</name> <init>= <expr><operator>(</operator><name>UChar</name><operator>*</operator><operator>)</operator><name>eclass</name></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name>verb</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>VPrintf0</name> <argument_list>( <argument><expr><literal type="string">" bucket sorting ...\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">257</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ftab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nblock</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ftab</name><index>[<expr><name><name>eclass8</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ftabCopy</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ftab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">257</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ftab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>ftab</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nblock</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>eclass8</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>ftab</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftab</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmap</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>nBhtab</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>nblock</name> <operator>/</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nBhtab</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>bhtab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>SET_BH</name><argument_list>(<argument><expr><name><name>ftab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>








<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>SET_BH</name><argument_list>(<argument><expr><name>nblock</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLEAR_BH</name><argument_list>(<argument><expr><name>nblock</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>H</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>verb</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>VPrintf1</name> <argument_list>( <argument><expr><literal type="string">" depth %6d has "</literal></expr></argument>, <argument><expr><name>H</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nblock</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ISSET_BH</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>fmap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>H</name></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>k</name> <operator>+=</operator> <name>nblock</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>eclass</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>nNotDone</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>k</name> <operator>=</operator> <name>r</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>ISSET_BH</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>UNALIGNED_BH</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><call><name>ISSET_BH</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><call><name>WORD_BH</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0xffffffff</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></while>
<while>while <condition>(<expr><call><name>ISSET_BH</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;=</operator> <name>nblock</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>ISSET_BH</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>UNALIGNED_BH</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ISSET_BH</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><call><name>WORD_BH</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0x00000000</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></while>
<while>while <condition>(<expr><operator>!</operator><call><name>ISSET_BH</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;=</operator> <name>nblock</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name>l</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nNotDone</name> <operator>+=</operator> <operator>(</operator><name>r</name> <operator>-</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fallbackQSort3</name> <argument_list>( <argument><expr><name>fmap</name></expr></argument>, <argument><expr><name>eclass</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>cc</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>l</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>r</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cc1</name> <operator>=</operator> <name><name>eclass</name><index>[<expr><name><name>fmap</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cc</name> <operator>!=</operator> <name>cc1</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>SET_BH</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>cc</name> <operator>=</operator> <name>cc1</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>verb</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>VPrintf1</name> <argument_list>( <argument><expr><literal type="string">"%6d unresolved strings\n"</literal></expr></argument>, <argument><expr><name>nNotDone</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>H</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>H</name> <operator>&gt;</operator> <name>nblock</name> <operator>||</operator> <name>nNotDone</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>






<if_stmt><if>if <condition>(<expr><name>verb</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>VPrintf0</name> <argument_list>( <argument><expr><literal type="string">" reconstructing block ...\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nblock</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<while>while <condition>(<expr><name><name>ftabCopy</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>ftabCopy</name><index>[<expr><name>j</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eclass8</name><index>[<expr><name><name>fmap</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>)</operator><name>j</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>AssertH</name> <argument_list>( <argument><expr><name>j</name> <operator>&lt;</operator> <literal type="number">256</literal></expr></argument>, <argument><expr><literal type="number">1005</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SET_BH</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CLEAR_BH</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ISSET_BH</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>WORD_BH</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>UNALIGNED_BH</name></cpp:undef>









<function><type><specifier>static</specifier>
<name>__inline__</name>
<name>Bool</name></type> <name>mainGtU</name> <parameter_list>( <parameter><decl><type><name>UInt32</name></type> <name>i1</name></decl></parameter>,
<parameter><decl><type><name>UInt32</name></type> <name>i2</name></decl></parameter>,
<parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>block</name></decl></parameter>,
<parameter><decl><type><name>UInt16</name><modifier>*</modifier></type> <name>quadrant</name></decl></parameter>,
<parameter><decl><type><name>UInt32</name></type> <name>nblock</name></decl></parameter>,
<parameter><decl><type><name>Int32</name><modifier>*</modifier></type> <name>budget</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Int32</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UChar</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt16</name></type> <name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AssertD</name> <argument_list>( <argument><expr><name>i1</name> <operator>!=</operator> <name>i2</name></expr></argument>, <argument><expr><literal type="string">"mainGtU"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i1</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>c1</name> <operator>&gt;</operator> <name>c2</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i1</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i2</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i1</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>c1</name> <operator>&gt;</operator> <name>c2</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i1</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i2</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i1</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>c1</name> <operator>&gt;</operator> <name>c2</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i1</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i2</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i1</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>c1</name> <operator>&gt;</operator> <name>c2</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i1</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i2</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i1</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>c1</name> <operator>&gt;</operator> <name>c2</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i1</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i2</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i1</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>c1</name> <operator>&gt;</operator> <name>c2</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i1</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i2</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i1</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>c1</name> <operator>&gt;</operator> <name>c2</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i1</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i2</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i1</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>c1</name> <operator>&gt;</operator> <name>c2</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i1</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i2</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i1</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>c1</name> <operator>&gt;</operator> <name>c2</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i1</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i2</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i1</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>c1</name> <operator>&gt;</operator> <name>c2</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i1</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i2</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i1</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>c1</name> <operator>&gt;</operator> <name>c2</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i1</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i2</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i1</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>c1</name> <operator>&gt;</operator> <name>c2</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i1</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i2</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name>nblock</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i1</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>c1</name> <operator>&gt;</operator> <name>c2</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <name><name>quadrant</name><index>[<expr><name>i1</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>s2</name> <operator>=</operator> <name><name>quadrant</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s1</name> <operator>!=</operator> <name>s2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>s1</name> <operator>&gt;</operator> <name>s2</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i1</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i2</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i1</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>c1</name> <operator>&gt;</operator> <name>c2</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <name><name>quadrant</name><index>[<expr><name>i1</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>s2</name> <operator>=</operator> <name><name>quadrant</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s1</name> <operator>!=</operator> <name>s2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>s1</name> <operator>&gt;</operator> <name>s2</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i1</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i2</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i1</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>c1</name> <operator>&gt;</operator> <name>c2</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <name><name>quadrant</name><index>[<expr><name>i1</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>s2</name> <operator>=</operator> <name><name>quadrant</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s1</name> <operator>!=</operator> <name>s2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>s1</name> <operator>&gt;</operator> <name>s2</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i1</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i2</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i1</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>c1</name> <operator>&gt;</operator> <name>c2</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <name><name>quadrant</name><index>[<expr><name>i1</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>s2</name> <operator>=</operator> <name><name>quadrant</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s1</name> <operator>!=</operator> <name>s2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>s1</name> <operator>&gt;</operator> <name>s2</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i1</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i2</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i1</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>c1</name> <operator>&gt;</operator> <name>c2</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <name><name>quadrant</name><index>[<expr><name>i1</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>s2</name> <operator>=</operator> <name><name>quadrant</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s1</name> <operator>!=</operator> <name>s2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>s1</name> <operator>&gt;</operator> <name>s2</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i1</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i2</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i1</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>c1</name> <operator>&gt;</operator> <name>c2</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <name><name>quadrant</name><index>[<expr><name>i1</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>s2</name> <operator>=</operator> <name><name>quadrant</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s1</name> <operator>!=</operator> <name>s2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>s1</name> <operator>&gt;</operator> <name>s2</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i1</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i2</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i1</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>c1</name> <operator>&gt;</operator> <name>c2</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <name><name>quadrant</name><index>[<expr><name>i1</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>s2</name> <operator>=</operator> <name><name>quadrant</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s1</name> <operator>!=</operator> <name>s2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>s1</name> <operator>&gt;</operator> <name>s2</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i1</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i2</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i1</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>c1</name> <operator>&gt;</operator> <name>c2</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <name><name>quadrant</name><index>[<expr><name>i1</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>s2</name> <operator>=</operator> <name><name>quadrant</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s1</name> <operator>!=</operator> <name>s2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>s1</name> <operator>&gt;</operator> <name>s2</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i1</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i2</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i1</name> <operator>&gt;=</operator> <name>nblock</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i1</name> <operator>-=</operator> <name>nblock</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i2</name> <operator>&gt;=</operator> <name>nblock</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i2</name> <operator>-=</operator> <name>nblock</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>k</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>budget</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block>
while <condition>(<expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<return>return <expr><name>False</name></expr>;</return>
</block_content>}</block></function>









<decl_stmt><decl><type><specifier>static</specifier>
<name>Int32</name></type> <name><name>incs</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">121</literal></expr>, <expr><literal type="number">364</literal></expr>, <expr><literal type="number">1093</literal></expr>, <expr><literal type="number">3280</literal></expr>,
<expr><literal type="number">9841</literal></expr>, <expr><literal type="number">29524</literal></expr>, <expr><literal type="number">88573</literal></expr>, <expr><literal type="number">265720</literal></expr>,
<expr><literal type="number">797161</literal></expr>, <expr><literal type="number">2391484</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier>
<name>void</name></type> <name>mainSimpleSort</name> <parameter_list>( <parameter><decl><type><name>UInt32</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>,
<parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>block</name></decl></parameter>,
<parameter><decl><type><name>UInt16</name><modifier>*</modifier></type> <name>quadrant</name></decl></parameter>,
<parameter><decl><type><name>Int32</name></type> <name>nblock</name></decl></parameter>,
<parameter><decl><type><name>Int32</name></type> <name>lo</name></decl></parameter>,
<parameter><decl><type><name>Int32</name></type> <name>hi</name></decl></parameter>,
<parameter><decl><type><name>Int32</name></type> <name>d</name></decl></parameter>,
<parameter><decl><type><name>Int32</name><modifier>*</modifier></type> <name>budget</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Int32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>bigN</name></decl>, <decl><type ref="prev"/><name>hp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bigN</name> <operator>=</operator> <name>hi</name> <operator>-</operator> <name>lo</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bigN</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>incs</name><index>[<expr><name>hp</name></expr>]</index></name> <operator>&lt;</operator> <name>bigN</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>hp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>hp</name><operator>--</operator></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>hp</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>hp</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>incs</name><index>[<expr><name>hp</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>lo</name> <operator>+</operator> <name>h</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>True</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>hi</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<while>while <condition>( <expr><call><name>mainGtU</name> <argument_list>(
<argument><expr><name><name>ptr</name><index>[<expr><name>j</name><operator>-</operator><name>h</name></expr>]</index></name><operator>+</operator><name>d</name></expr></argument>, <argument><expr><name>v</name><operator>+</operator><name>d</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>quadrant</name></expr></argument>, <argument><expr><name>nblock</name></expr></argument>, <argument><expr><name>budget</name></expr></argument>
)</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>ptr</name><index>[<expr><name>j</name><operator>-</operator><name>h</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>j</name> <operator>-</operator> <name>h</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;=</operator> <operator>(</operator><name>lo</name> <operator>+</operator> <name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>hi</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<while>while <condition>( <expr><call><name>mainGtU</name> <argument_list>(
<argument><expr><name><name>ptr</name><index>[<expr><name>j</name><operator>-</operator><name>h</name></expr>]</index></name><operator>+</operator><name>d</name></expr></argument>, <argument><expr><name>v</name><operator>+</operator><name>d</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>quadrant</name></expr></argument>, <argument><expr><name>nblock</name></expr></argument>, <argument><expr><name>budget</name></expr></argument>
)</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>ptr</name><index>[<expr><name>j</name><operator>-</operator><name>h</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>j</name> <operator>-</operator> <name>h</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;=</operator> <operator>(</operator><name>lo</name> <operator>+</operator> <name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>hi</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<while>while <condition>( <expr><call><name>mainGtU</name> <argument_list>(
<argument><expr><name><name>ptr</name><index>[<expr><name>j</name><operator>-</operator><name>h</name></expr>]</index></name><operator>+</operator><name>d</name></expr></argument>, <argument><expr><name>v</name><operator>+</operator><name>d</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>quadrant</name></expr></argument>, <argument><expr><name>nblock</name></expr></argument>, <argument><expr><name>budget</name></expr></argument>
)</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>ptr</name><index>[<expr><name>j</name><operator>-</operator><name>h</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>j</name> <operator>-</operator> <name>h</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;=</operator> <operator>(</operator><name>lo</name> <operator>+</operator> <name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>budget</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
</block_content>}</block></function>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mswap</name><parameter_list>(<parameter><type><name>zz1</name></type></parameter>, <parameter><type><name>zz2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mvswap</name><parameter_list>(<parameter><type><name>zzp1</name></type></parameter>, <parameter><type><name>zzp2</name></type></parameter>, <parameter><type><name>zzn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ Int32 yyp1 = (zzp1); Int32 yyp2 = (zzp2); Int32 yyn = (zzn); while (yyn &gt; 0) { mswap(ptr[yyp1], ptr[yyp2]); yyp1++; yyp2++; yyn--; } }</cpp:value></cpp:define>










<function><type><specifier>static</specifier>
<name>__inline__</name>
<name>UChar</name></type> <name>mmed3</name> <parameter_list>( <parameter><decl><type><name>UChar</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>UChar</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>UChar</name></type> <name>c</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UChar</name></type> <name>t</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>t</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;</operator> <name>c</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mmin</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &lt; (b)) ? (a) : (b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mpush</name><parameter_list>(<parameter><type><name>lz</name></type></parameter>,<parameter><type><name>hz</name></type></parameter>,<parameter><type><name>dz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ stackLo[sp] = lz; stackHi[sp] = hz; stackD [sp] = dz; sp++; }</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mpop</name><parameter_list>(<parameter><type><name>lz</name></type></parameter>,<parameter><type><name>hz</name></type></parameter>,<parameter><type><name>dz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ sp--; lz = stackLo[sp]; hz = stackHi[sp]; dz = stackD [sp]; }</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mnextsize</name><parameter_list>(<parameter><type><name>az</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(nextHi[az]-nextLo[az])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mnextswap</name><parameter_list>(<parameter><type><name>az</name></type></parameter>,<parameter><type><name>bz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ Int32 tz; tz = nextLo[az]; nextLo[az] = nextLo[bz]; nextLo[bz] = tz; tz = nextHi[az]; nextHi[az] = nextHi[bz]; nextHi[bz] = tz; tz = nextD [az]; nextD [az] = nextD [bz]; nextD [bz] = tz; }</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAIN_QSORT_SMALL_THRESH</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAIN_QSORT_DEPTH_THRESH</name></cpp:macro> <cpp:value>(BZ_N_RADIX + BZ_N_QSORT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAIN_QSORT_STACK_SIZE</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<function><type><specifier>static</specifier>
<name>void</name></type> <name>mainQSort3</name> <parameter_list>( <parameter><decl><type><name>UInt32</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>,
<parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>block</name></decl></parameter>,
<parameter><decl><type><name>UInt16</name><modifier>*</modifier></type> <name>quadrant</name></decl></parameter>,
<parameter><decl><type><name>Int32</name></type> <name>nblock</name></decl></parameter>,
<parameter><decl><type><name>Int32</name></type> <name>loSt</name></decl></parameter>,
<parameter><decl><type><name>Int32</name></type> <name>hiSt</name></decl></parameter>,
<parameter><decl><type><name>Int32</name></type> <name>dSt</name></decl></parameter>,
<parameter><decl><type><name>Int32</name><modifier>*</modifier></type> <name>budget</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Int32</name></type> <name>unLo</name></decl>, <decl><type ref="prev"/><name>unHi</name></decl>, <decl><type ref="prev"/><name>ltLo</name></decl>, <decl><type ref="prev"/><name>gtHi</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>med</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>sp</name></decl>, <decl><type ref="prev"/><name>lo</name></decl>, <decl><type ref="prev"/><name>hi</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Int32</name></type> <name><name>stackLo</name><index>[<expr><name>MAIN_QSORT_STACK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name><name>stackHi</name><index>[<expr><name>MAIN_QSORT_STACK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name><name>stackD</name> <index>[<expr><name>MAIN_QSORT_STACK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Int32</name></type> <name><name>nextLo</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name><name>nextHi</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name><name>nextD</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpush</name> <argument_list>( <argument><expr><name>loSt</name></expr></argument>, <argument><expr><name>hiSt</name></expr></argument>, <argument><expr><name>dSt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>sp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AssertH</name> <argument_list>( <argument><expr><name>sp</name> <operator>&lt;</operator> <name>MAIN_QSORT_STACK_SIZE</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1001</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpop</name> <argument_list>( <argument><expr><name>lo</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>, <argument><expr><name>d</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hi</name> <operator>-</operator> <name><name>lo</name> <argument_list type="generic">&lt; <argument><expr><name>MAIN_QSORT_SMALL_THRESH</name> <operator>||</operator>
<name>d</name></expr></argument> &gt;</argument_list></name> <name>MAIN_QSORT_DEPTH_THRESH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mainSimpleSort</name> <argument_list>( <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>quadrant</name></expr></argument>, <argument><expr><name>nblock</name></expr></argument>, <argument><expr><name>lo</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>budget</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>budget</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>med</name> <operator>=</operator> <operator>(</operator><name>Int32</name><operator>)</operator>
<call><name>mmed3</name> <argument_list>( <argument><expr><name><name>block</name><index>[<expr><name><name>ptr</name><index>[ <expr><name>lo</name></expr> ]</index></name><operator>+</operator><name>d</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>block</name><index>[<expr><name><name>ptr</name><index>[ <expr><name>hi</name></expr> ]</index></name><operator>+</operator><name>d</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>block</name><index>[<expr><name><name>ptr</name><index>[ <expr><operator>(</operator><name>lo</name><operator>+</operator><name>hi</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr> ]</index></name><operator>+</operator><name>d</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>unLo</name> <operator>=</operator> <name>ltLo</name> <operator>=</operator> <name>lo</name></expr>;</expr_stmt>
<expr_stmt><expr><name>unHi</name> <operator>=</operator> <name>gtHi</name> <operator>=</operator> <name>hi</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>True</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>True</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>unLo</name> <operator>&gt;</operator> <name>unHi</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Int32</name><operator>)</operator><name><name>block</name><index>[<expr><name><name>ptr</name><index>[<expr><name>unLo</name></expr>]</index></name><operator>+</operator><name>d</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <name>med</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mswap</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>unLo</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ptr</name><index>[<expr><name>ltLo</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ltLo</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>unLo</name><operator>++</operator></expr>;</expr_stmt> <continue>continue;</continue>
</block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>unLo</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<while>while <condition>(<expr><name>True</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>unLo</name> <operator>&gt;</operator> <name>unHi</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Int32</name><operator>)</operator><name><name>block</name><index>[<expr><name><name>ptr</name><index>[<expr><name>unHi</name></expr>]</index></name><operator>+</operator><name>d</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <name>med</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mswap</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>unHi</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ptr</name><index>[<expr><name>gtHi</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gtHi</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>unHi</name><operator>--</operator></expr>;</expr_stmt> <continue>continue;</continue>
</block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>unHi</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>unLo</name> <operator>&gt;</operator> <name>unHi</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mswap</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>unLo</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ptr</name><index>[<expr><name>unHi</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>unLo</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>unHi</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>AssertD</name> <argument_list>( <argument><expr><name>unHi</name> <operator>==</operator> <name>unLo</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mainQSort3(2)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gtHi</name> <operator>&lt;</operator> <name>ltLo</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mpush</name><argument_list>(<argument><expr><name>lo</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>, <argument><expr><name>d</name><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>mmin</name><argument_list>(<argument><expr><name>ltLo</name><operator>-</operator><name>lo</name></expr></argument>, <argument><expr><name>unLo</name><operator>-</operator><name>ltLo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mvswap</name><argument_list>(<argument><expr><name>lo</name></expr></argument>, <argument><expr><name>unLo</name><operator>-</operator><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>mmin</name><argument_list>(<argument><expr><name>hi</name><operator>-</operator><name>gtHi</name></expr></argument>, <argument><expr><name>gtHi</name><operator>-</operator><name>unHi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mvswap</name><argument_list>(<argument><expr><name>unLo</name></expr></argument>, <argument><expr><name>hi</name><operator>-</operator><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>lo</name> <operator>+</operator> <name>unLo</name> <operator>-</operator> <name>ltLo</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>hi</name> <operator>-</operator> <operator>(</operator><name>gtHi</name> <operator>-</operator> <name>unHi</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nextLo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>lo</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>nextHi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>nextD</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nextLo</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>nextHi</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>hi</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>nextD</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nextLo</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>n</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>nextHi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>m</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>nextD</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>d</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mnextsize</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>mnextsize</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mnextswap</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mnextsize</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>mnextsize</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mnextswap</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mnextsize</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>mnextsize</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mnextswap</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AssertD</name> <argument_list>(<argument><expr><call><name>mnextsize</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <call><name>mnextsize</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"mainQSort3(8)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AssertD</name> <argument_list>(<argument><expr><call><name>mnextsize</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <call><name>mnextsize</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"mainQSort3(9)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpush</name> <argument_list>(<argument><expr><name><name>nextLo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>nextHi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>nextD</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpush</name> <argument_list>(<argument><expr><name><name>nextLo</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>nextHi</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>nextD</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpush</name> <argument_list>(<argument><expr><name><name>nextLo</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>nextHi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>nextD</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>mswap</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>mvswap</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>mpush</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>mpop</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>mmin</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>mnextsize</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>mnextswap</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAIN_QSORT_SMALL_THRESH</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAIN_QSORT_DEPTH_THRESH</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAIN_QSORT_STACK_SIZE</name></cpp:undef>

















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIGFREQ</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ftab[((b)+1) &lt;&lt; 8] - ftab[(b) &lt;&lt; 8])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETMASK</name></cpp:macro> <cpp:value>(1 &lt;&lt; 21)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLEARMASK</name></cpp:macro> <cpp:value>(~(SETMASK))</cpp:value></cpp:define>

<function><type><specifier>static</specifier>
<name>void</name></type> <name>mainSort</name> <parameter_list>( <parameter><decl><type><name>UInt32</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>,
<parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>block</name></decl></parameter>,
<parameter><decl><type><name>UInt16</name><modifier>*</modifier></type> <name>quadrant</name></decl></parameter>,
<parameter><decl><type><name>UInt32</name><modifier>*</modifier></type> <name>ftab</name></decl></parameter>,
<parameter><decl><type><name>Int32</name></type> <name>nblock</name></decl></parameter>,
<parameter><decl><type><name>Int32</name></type> <name>verb</name></decl></parameter>,
<parameter><decl><type><name>Int32</name><modifier>*</modifier></type> <name>budget</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Int32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>ss</name></decl>, <decl><type ref="prev"/><name>sb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name><name>runningOrder</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Bool</name></type> <name><name>bigDone</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name><name>copyStart</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name><name>copyEnd</name> <index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UChar</name></type> <name>c1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>numQSorted</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt16</name></type> <name>s</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>verb</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>VPrintf0</name> <argument_list>( <argument><expr><literal type="string">" main sort initialise ...\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">65536</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ftab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>nblock</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name> <operator>-=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>quadrant</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator> <operator>(</operator><operator>(</operator><name>UInt16</name><operator>)</operator><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftab</name><index>[<expr><name>j</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>quadrant</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator> <operator>(</operator><operator>(</operator><name>UInt16</name><operator>)</operator><name><name>block</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftab</name><index>[<expr><name>j</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>quadrant</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator> <operator>(</operator><operator>(</operator><name>UInt16</name><operator>)</operator><name><name>block</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftab</name><index>[<expr><name>j</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>quadrant</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator> <operator>(</operator><operator>(</operator><name>UInt16</name><operator>)</operator><name><name>block</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftab</name><index>[<expr><name>j</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>quadrant</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator> <operator>(</operator><operator>(</operator><name>UInt16</name><operator>)</operator><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftab</name><index>[<expr><name>j</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BZ_N_OVERSHOOT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>block</name> <index>[<expr><name>nblock</name><operator>+</operator><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>quadrant</name><index>[<expr><name>nblock</name><operator>+</operator><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>verb</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>VPrintf0</name> <argument_list>( <argument><expr><literal type="string">" bucket sorting ...\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">65536</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ftab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>ftab</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>nblock</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name> <operator>-=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>s</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>ftab</name><index>[<expr><name>s</name></expr>]</index></name> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftab</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>s</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>block</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>ftab</name><index>[<expr><name>s</name></expr>]</index></name> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftab</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>i</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>s</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>block</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>ftab</name><index>[<expr><name>s</name></expr>]</index></name> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftab</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>i</name><operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>s</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>block</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>ftab</name><index>[<expr><name>s</name></expr>]</index></name> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftab</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>i</name><operator>-</operator><literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>s</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>ftab</name><index>[<expr><name>s</name></expr>]</index></name> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftab</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>






<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">255</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>bigDone</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>False</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>runningOrder</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>

<block>{<block_content>
<decl_stmt><decl><type><name>Int32</name></type> <name>vv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>h</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<do>do<block type="pseudo"><block_content> <expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <name>h</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block> while <condition>(<expr><name>h</name> <operator>&lt;=</operator> <literal type="number">256</literal></expr>)</condition>;</do>
<do>do <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name>h</name> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>h</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">255</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>vv</name> <operator>=</operator> <name><name>runningOrder</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<while>while <condition>( <expr><call><name>BIGFREQ</name><argument_list>(<argument><expr><name><name>runningOrder</name><index>[<expr><name>j</name><operator>-</operator><name>h</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>BIGFREQ</name><argument_list>(<argument><expr><name>vv</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name><name>runningOrder</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>runningOrder</name><index>[<expr><name>j</name><operator>-</operator><name>h</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>j</name> <operator>-</operator> <name>h</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;=</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>zero</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></while>
<label><name>zero</name>:</label>
<expr_stmt><expr><name><name>runningOrder</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>vv</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block> while <condition>(<expr><name>h</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>;</do>
</block_content>}</block>





<expr_stmt><expr><name>numQSorted</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">255</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>







<expr_stmt><expr><name>ss</name> <operator>=</operator> <name><name>runningOrder</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>









<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <literal type="number">255</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name>ss</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sb</name> <operator>=</operator> <operator>(</operator><name>ss</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>j</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator> <operator>(</operator><name><name>ftab</name><index>[<expr><name>sb</name></expr>]</index></name> <operator>&amp;</operator> <name>SETMASK</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Int32</name></type> <name>lo</name> <init>= <expr><name><name>ftab</name><index>[<expr><name>sb</name></expr>]</index></name> <operator>&amp;</operator> <name>CLEARMASK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>hi</name> <init>= <expr><operator>(</operator><name><name>ftab</name><index>[<expr><name>sb</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>CLEARMASK</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>hi</name> <operator>&gt;</operator> <name>lo</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>verb</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>VPrintf4</name> <argument_list>( <argument><expr><literal type="string">" qsort [0x%x, 0x%x] "</literal>
<literal type="string">"done %d this %d\n"</literal></expr></argument>,
<argument><expr><name>ss</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>numQSorted</name></expr></argument>, <argument><expr><name>hi</name> <operator>-</operator> <name>lo</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mainQSort3</name> <argument_list>(
<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>quadrant</name></expr></argument>, <argument><expr><name>nblock</name></expr></argument>,
<argument><expr><name>lo</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>, <argument><expr><name>BZ_N_RADIX</name></expr></argument>, <argument><expr><name>budget</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>numQSorted</name> <operator>+=</operator> <operator>(</operator><name>hi</name> <operator>-</operator> <name>lo</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>budget</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ftab</name><index>[<expr><name>sb</name></expr>]</index></name> <operator>|=</operator> <name>SETMASK</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>AssertH</name> <argument_list>( <argument><expr><operator>!</operator><name><name>bigDone</name><index>[<expr><name>ss</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1006</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>








<block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <literal type="number">255</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>copyStart</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>ftab</name><index>[<expr><operator>(</operator><name>j</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>ss</name></expr>]</index></name> <operator>&amp;</operator> <name>CLEARMASK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>copyEnd</name> <index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>ftab</name><index>[<expr><operator>(</operator><name>j</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>ss</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>CLEARMASK</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>ftab</name><index>[<expr><name>ss</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>]</index></name> <operator>&amp;</operator> <name>CLEARMASK</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>copyStart</name><index>[<expr><name>ss</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><name>j</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>k</name> <operator>+=</operator> <name>nblock</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bigDone</name><index>[<expr><name>c1</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ptr</name><index>[ <expr><name><name>copyStart</name><index>[<expr><name>c1</name></expr>]</index></name><operator>++</operator></expr> ]</index></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <operator>(</operator><name><name>ftab</name><index>[<expr><operator>(</operator><name>ss</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>]</index></name> <operator>&amp;</operator> <name>CLEARMASK</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <name><name>copyEnd</name><index>[<expr><name>ss</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><name>j</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>k</name> <operator>+=</operator> <name>nblock</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bigDone</name><index>[<expr><name>c1</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ptr</name><index>[ <expr><name><name>copyEnd</name><index>[<expr><name>c1</name></expr>]</index></name><operator>--</operator></expr> ]</index></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block>

<macro><name>AssertH</name> <argument_list>( <argument>(copyStart[ss]-<literal type="number">1</literal> == copyEnd[ss])
||




(copyStart[ss] == <literal type="number">0</literal> &amp;&amp; copyEnd[ss] == nblock-<literal type="number">1</literal>)</argument>,
<argument><literal type="number">1007</literal></argument> )</argument_list></macro>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <literal type="number">255</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ftab</name><index>[<expr><operator>(</operator><name>j</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>ss</name></expr>]</index></name> <operator>|=</operator> <name>SETMASK</name></expr>;</expr_stmt></block_content></block></for>








































<expr_stmt><expr><name><name>bigDone</name><index>[<expr><name>ss</name></expr>]</index></name> <operator>=</operator> <name>True</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Int32</name></type> <name>bbStart</name> <init>= <expr><name><name>ftab</name><index>[<expr><name>ss</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>]</index></name> <operator>&amp;</operator> <name>CLEARMASK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>bbSize</name> <init>= <expr><operator>(</operator><name><name>ftab</name><index>[<expr><operator>(</operator><name>ss</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>]</index></name> <operator>&amp;</operator> <name>CLEARMASK</name><operator>)</operator> <operator>-</operator> <name>bbStart</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>shifts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>bbSize</name> <operator>&gt;&gt;</operator> <name>shifts</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">65534</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>shifts</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>bbSize</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Int32</name></type> <name>a2update</name> <init>= <expr><name><name>ptr</name><index>[<expr><name>bbStart</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt16</name></type> <name>qVal</name> <init>= <expr><operator>(</operator><name>UInt16</name><operator>)</operator><operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <name>shifts</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>quadrant</name><index>[<expr><name>a2update</name></expr>]</index></name> <operator>=</operator> <name>qVal</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>a2update</name> <operator>&lt;</operator> <name>BZ_N_OVERSHOOT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>quadrant</name><index>[<expr><name>a2update</name> <operator>+</operator> <name>nblock</name></expr>]</index></name> <operator>=</operator> <name>qVal</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>AssertH</name> <argument_list>( <argument><expr><operator>(</operator><operator>(</operator><name>bbSize</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>shifts</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">65535</literal></expr></argument>, <argument><expr><literal type="number">1002</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>verb</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>VPrintf3</name> <argument_list>( <argument><expr><literal type="string">" %d pointers, %d sorted, %d scanned\n"</literal></expr></argument>,
<argument><expr><name>nblock</name></expr></argument>, <argument><expr><name>numQSorted</name></expr></argument>, <argument><expr><name>nblock</name> <operator>-</operator> <name>numQSorted</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BIGFREQ</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SETMASK</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CLEARMASK</name></cpp:undef>















<function><type><name>void</name></type> <name>BZ2_blockSort</name> <parameter_list>( <parameter><decl><type><name>EState</name><modifier>*</modifier></type> <name>s</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UInt32</name><modifier>*</modifier></type> <name>ptr</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UChar</name><modifier>*</modifier></type> <name>block</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>block</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name><modifier>*</modifier></type> <name>ftab</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ftab</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>nblock</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>nblock</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>verb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>verbosity</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>wfact</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>workFactor</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt16</name><modifier>*</modifier></type> <name>quadrant</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>budget</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>budgetInit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nblock</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fallbackSort</name> <argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>arr1</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>arr2</name></name></expr></argument>, <argument><expr><name>ftab</name></expr></argument>, <argument><expr><name>nblock</name></expr></argument>, <argument><expr><name>verb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>





<expr_stmt><expr><name>i</name> <operator>=</operator> <name>nblock</name><operator>+</operator><name>BZ_N_OVERSHOOT</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>quadrant</name> <operator>=</operator> <operator>(</operator><name>UInt16</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><operator>(</operator><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>








<if_stmt><if>if <condition>(<expr><name>wfact</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>wfact</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>wfact</name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>wfact</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>budgetInit</name> <operator>=</operator> <name>nblock</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>wfact</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>budget</name> <operator>=</operator> <name>budgetInit</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mainSort</name> <argument_list>( <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>quadrant</name></expr></argument>, <argument><expr><name>ftab</name></expr></argument>, <argument><expr><name>nblock</name></expr></argument>, <argument><expr><name>verb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>budget</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>verb</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>VPrintf3</name> <argument_list>( <argument><expr><literal type="string">" %d work, %d block, ratio %5.2f\n"</literal></expr></argument>,
<argument><expr><name>budgetInit</name> <operator>-</operator> <name>budget</name></expr></argument>,
<argument><expr><name>nblock</name></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>budgetInit</name> <operator>-</operator> <name>budget</name><operator>)</operator> <operator>/</operator>
<operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>nblock</name><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>nblock</name></expr></else></ternary><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>budget</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>verb</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>VPrintf0</name> <argument_list>( <argument><expr><literal type="string">" too repetitive; using fallback"</literal>
<literal type="string">" sorting algorithm\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fallbackSort</name> <argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>arr1</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>arr2</name></name></expr></argument>, <argument><expr><name>ftab</name></expr></argument>, <argument><expr><name>nblock</name></expr></argument>, <argument><expr><name>verb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>origPtr</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nblock</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>origPtr</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> <break>break;</break> </block_content>}</block></if></if_stmt></block_content></block></for><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>AssertH</name><argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>origPtr</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1003</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





</unit>
