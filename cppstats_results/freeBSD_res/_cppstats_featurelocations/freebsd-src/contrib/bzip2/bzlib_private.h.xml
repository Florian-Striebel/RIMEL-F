<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bzip2/bzlib_private.h">




















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_BZLIB_PRIVATE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_BZLIB_PRIVATE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BZ_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bzlib.h"</cpp:file></cpp:include>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_VERSION</name></cpp:macro> <cpp:value>"1.0.8, 13-Jul-2019"</cpp:value></cpp:define>

<typedef>typedef <type><name>char</name></type> <name>Char</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>Bool</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>UChar</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>Int32</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>UInt32</name>;</typedef>
<typedef>typedef <type><name>short</name></type> <name>Int16</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>UInt16</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>True</name></cpp:macro> <cpp:value>((Bool)1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>False</name></cpp:macro> <cpp:value>((Bool)0)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__inline__</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BZ_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>BZ2_bz__AssertH__fail</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name>errcode</name></decl></parameter> )</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AssertH</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>,<parameter><type><name>errcode</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BZ_DEBUG</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AssertD</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>,<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ if (!(cond)) { fprintf ( stderr, "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );exit(1); }}</cpp:value></cpp:define>





<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AssertD</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>,<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VPrintf0</name><parameter_list>(<parameter><type><name>zf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fprintf(stderr,zf)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VPrintf1</name><parameter_list>(<parameter><type><name>zf</name></type></parameter>,<parameter><type><name>za1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fprintf(stderr,zf,za1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VPrintf2</name><parameter_list>(<parameter><type><name>zf</name></type></parameter>,<parameter><type><name>za1</name></type></parameter>,<parameter><type><name>za2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fprintf(stderr,zf,za1,za2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VPrintf3</name><parameter_list>(<parameter><type><name>zf</name></type></parameter>,<parameter><type><name>za1</name></type></parameter>,<parameter><type><name>za2</name></type></parameter>,<parameter><type><name>za3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fprintf(stderr,zf,za1,za2,za3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VPrintf4</name><parameter_list>(<parameter><type><name>zf</name></type></parameter>,<parameter><type><name>za1</name></type></parameter>,<parameter><type><name>za2</name></type></parameter>,<parameter><type><name>za3</name></type></parameter>,<parameter><type><name>za4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fprintf(stderr,zf,za1,za2,za3,za4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VPrintf5</name><parameter_list>(<parameter><type><name>zf</name></type></parameter>,<parameter><type><name>za1</name></type></parameter>,<parameter><type><name>za2</name></type></parameter>,<parameter><type><name>za3</name></type></parameter>,<parameter><type><name>za4</name></type></parameter>,<parameter><type><name>za5</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fprintf(stderr,zf,za1,za2,za3,za4,za5)</cpp:value></cpp:define>


<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>bz_internal_error</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name>errcode</name></decl></parameter> )</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AssertH</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>,<parameter><type><name>errcode</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ if (!(cond)) bz_internal_error ( errcode ); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AssertD</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>,<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VPrintf0</name><parameter_list>(<parameter><type><name>zf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VPrintf1</name><parameter_list>(<parameter><type><name>zf</name></type></parameter>,<parameter><type><name>za1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VPrintf2</name><parameter_list>(<parameter><type><name>zf</name></type></parameter>,<parameter><type><name>za1</name></type></parameter>,<parameter><type><name>za2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VPrintf3</name><parameter_list>(<parameter><type><name>zf</name></type></parameter>,<parameter><type><name>za1</name></type></parameter>,<parameter><type><name>za2</name></type></parameter>,<parameter><type><name>za3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VPrintf4</name><parameter_list>(<parameter><type><name>zf</name></type></parameter>,<parameter><type><name>za1</name></type></parameter>,<parameter><type><name>za2</name></type></parameter>,<parameter><type><name>za3</name></type></parameter>,<parameter><type><name>za4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VPrintf5</name><parameter_list>(<parameter><type><name>zf</name></type></parameter>,<parameter><type><name>za1</name></type></parameter>,<parameter><type><name>za2</name></type></parameter>,<parameter><type><name>za3</name></type></parameter>,<parameter><type><name>za4</name></type></parameter>,<parameter><type><name>za5</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { } while (0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZALLOC</name><parameter_list>(<parameter><type><name>nnn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(strm-&gt;bzalloc)(strm-&gt;opaque,(nnn),1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZFREE</name><parameter_list>(<parameter><type><name>ppp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(strm-&gt;bzfree)(strm-&gt;opaque,(ppp))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_HDR_B</name></cpp:macro> <cpp:value>0x42</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_HDR_Z</name></cpp:macro> <cpp:value>0x5a</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_HDR_h</name></cpp:macro> <cpp:value>0x68</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_HDR_0</name></cpp:macro> <cpp:value>0x30</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_MAX_ALPHA_SIZE</name></cpp:macro> <cpp:value>258</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_MAX_CODE_LEN</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_RUNA</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_RUNB</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_N_GROUPS</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_G_SIZE</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_N_ITERS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_MAX_SELECTORS</name></cpp:macro> <cpp:value>(2 + (900000 / BZ_G_SIZE))</cpp:value></cpp:define>





<decl_stmt><decl><type><specifier>extern</specifier> <name>Int32</name></type> <name><name>BZ2_rNums</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_RAND_DECLS</name></cpp:macro> <cpp:value>Int32 rNToGo; Int32 rTPos</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_RAND_INIT_MASK</name></cpp:macro> <cpp:value>s-&gt;rNToGo = 0; s-&gt;rTPos = 0</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_RAND_MASK</name></cpp:macro> <cpp:value>((s-&gt;rNToGo == 1) ? 1 : 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_RAND_UPD_MASK</name></cpp:macro> <cpp:value>if (s-&gt;rNToGo == 0) { s-&gt;rNToGo = BZ2_rNums[s-&gt;rTPos]; s-&gt;rTPos++; if (s-&gt;rTPos == 512) s-&gt;rTPos = 0; } s-&gt;rNToGo--;</cpp:value></cpp:define>











<decl_stmt><decl><type><specifier>extern</specifier> <name>UInt32</name></type> <name><name>BZ2_crc32Table</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_INITIALISE_CRC</name><parameter_list>(<parameter><type><name>crcVar</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ crcVar = 0xffffffffL; }</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_FINALISE_CRC</name><parameter_list>(<parameter><type><name>crcVar</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ crcVar = ~(crcVar); }</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_UPDATE_CRC</name><parameter_list>(<parameter><type><name>crcVar</name></type></parameter>,<parameter><type><name>cha</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ crcVar = (crcVar &lt;&lt; 8) ^ BZ2_crc32Table[(crcVar &gt;&gt; 24) ^ ((UChar)cha)]; }</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_M_IDLE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_M_RUNNING</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_M_FLUSHING</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_M_FINISHING</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_S_OUTPUT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_S_INPUT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_N_RADIX</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_N_QSORT</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_N_SHELL</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_N_OVERSHOOT</name></cpp:macro> <cpp:value>(BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)</cpp:value></cpp:define>






<typedef>typedef
<type><struct>struct <block>{

<decl_stmt><decl><type><name>bz_stream</name><modifier>*</modifier></type> <name>strm</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>Int32</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>state</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>UInt32</name></type> <name>avail_in_expect</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>UInt32</name><modifier>*</modifier></type> <name>arr1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name><modifier>*</modifier></type> <name>arr2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name><modifier>*</modifier></type> <name>ftab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>origPtr</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>UInt32</name><modifier>*</modifier></type> <name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UChar</name><modifier>*</modifier></type> <name>block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt16</name><modifier>*</modifier></type> <name>mtfv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UChar</name><modifier>*</modifier></type> <name>zbits</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Int32</name></type> <name>workFactor</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>UInt32</name></type> <name>state_in_ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>state_in_len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>BZ_RAND_DECLS</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>Int32</name></type> <name>nblock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>nblockMAX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>numZ</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>state_out_pos</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Int32</name></type> <name>nInUse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Bool</name></type> <name><name>inUse</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UChar</name></type> <name><name>unseqToSeq</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>UInt32</name></type> <name>bsBuff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>bsLive</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>UInt32</name></type> <name>blockCRC</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>combinedCRC</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Int32</name></type> <name>verbosity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>blockNo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>blockSize100k</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Int32</name></type> <name>nMTF</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name><name>mtfFreq</name> <index>[<expr><name>BZ_MAX_ALPHA_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UChar</name></type> <name><name>selector</name> <index>[<expr><name>BZ_MAX_SELECTORS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UChar</name></type> <name><name>selectorMtf</name><index>[<expr><name>BZ_MAX_SELECTORS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UChar</name></type> <name><name>len</name> <index>[<expr><name>BZ_N_GROUPS</name></expr>]</index><index>[<expr><name>BZ_MAX_ALPHA_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name><name>code</name> <index>[<expr><name>BZ_N_GROUPS</name></expr>]</index><index>[<expr><name>BZ_MAX_ALPHA_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name><name>rfreq</name> <index>[<expr><name>BZ_N_GROUPS</name></expr>]</index><index>[<expr><name>BZ_MAX_ALPHA_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UInt32</name></type> <name><name>len_pack</name><index>[<expr><name>BZ_MAX_ALPHA_SIZE</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type>
<name>EState</name>;</typedef>





<function_decl><type><specifier>extern</specifier> <name>void</name></type>
<name>BZ2_blockSort</name> <parameter_list>( <parameter><decl><type><name>EState</name><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type>
<name>BZ2_compressBlock</name> <parameter_list>( <parameter><decl><type><name>EState</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Bool</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type>
<name>BZ2_bsInitWrite</name> <parameter_list>( <parameter><decl><type><name>EState</name><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type>
<name>BZ2_hbAssignCodes</name> <parameter_list>( <parameter><decl><type><name>Int32</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Int32</name></type></decl></parameter>, <parameter><decl><type><name>Int32</name></type></decl></parameter>, <parameter><decl><type><name>Int32</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type>
<name>BZ2_hbMakeCodeLengths</name> <parameter_list>( <parameter><decl><type><name>UChar</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Int32</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Int32</name></type></decl></parameter>, <parameter><decl><type><name>Int32</name></type></decl></parameter> )</parameter_list>;</function_decl>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_IDLE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_OUTPUT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_MAGIC_1</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_MAGIC_2</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_MAGIC_3</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_MAGIC_4</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_BLKHDR_1</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_BLKHDR_2</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_BLKHDR_3</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_BLKHDR_4</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_BLKHDR_5</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_BLKHDR_6</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_BCRC_1</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_BCRC_2</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_BCRC_3</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_BCRC_4</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_RANDBIT</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_ORIGPTR_1</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_ORIGPTR_2</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_ORIGPTR_3</name></cpp:macro> <cpp:value>27</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_MAPPING_1</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_MAPPING_2</name></cpp:macro> <cpp:value>29</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_SELECTOR_1</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_SELECTOR_2</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_SELECTOR_3</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_CODING_1</name></cpp:macro> <cpp:value>33</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_CODING_2</name></cpp:macro> <cpp:value>34</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_CODING_3</name></cpp:macro> <cpp:value>35</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_MTF_1</name></cpp:macro> <cpp:value>36</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_MTF_2</name></cpp:macro> <cpp:value>37</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_MTF_3</name></cpp:macro> <cpp:value>38</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_MTF_4</name></cpp:macro> <cpp:value>39</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_MTF_5</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_MTF_6</name></cpp:macro> <cpp:value>41</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_ENDHDR_2</name></cpp:macro> <cpp:value>42</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_ENDHDR_3</name></cpp:macro> <cpp:value>43</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_ENDHDR_4</name></cpp:macro> <cpp:value>44</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_ENDHDR_5</name></cpp:macro> <cpp:value>45</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_ENDHDR_6</name></cpp:macro> <cpp:value>46</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_CCRC_1</name></cpp:macro> <cpp:value>47</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_CCRC_2</name></cpp:macro> <cpp:value>48</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_CCRC_3</name></cpp:macro> <cpp:value>49</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_X_CCRC_4</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MTFA_SIZE</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MTFL_SIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>





<typedef>typedef
<type><struct>struct <block>{

<decl_stmt><decl><type><name>bz_stream</name><modifier>*</modifier></type> <name>strm</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Int32</name></type> <name>state</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>UChar</name></type> <name>state_out_ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>state_out_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Bool</name></type> <name>blockRandomised</name></decl>;</decl_stmt>
<expr_stmt><expr><name>BZ_RAND_DECLS</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>UInt32</name></type> <name>bsBuff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>bsLive</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Int32</name></type> <name>blockSize100k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Bool</name></type> <name>smallDecompress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>currBlockNo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>verbosity</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Int32</name></type> <name>origPtr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>tPos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>k0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name><name>unzftab</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>nblock_used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name><name>cftab</name><index>[<expr><literal type="number">257</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name><name>cftabCopy</name><index>[<expr><literal type="number">257</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>UInt32</name> <modifier>*</modifier></type><name>tt</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>UInt16</name> <modifier>*</modifier></type><name>ll16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>ll4</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>UInt32</name></type> <name>storedBlockCRC</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>storedCombinedCRC</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>calculatedBlockCRC</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>calculatedCombinedCRC</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Int32</name></type> <name>nInUse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Bool</name></type> <name><name>inUse</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Bool</name></type> <name><name>inUse16</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UChar</name></type> <name><name>seqToUnseq</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>UChar</name></type> <name><name>mtfa</name> <index>[<expr><name>MTFA_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name><name>mtfbase</name><index>[<expr><literal type="number">256</literal> <operator>/</operator> <name>MTFL_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UChar</name></type> <name><name>selector</name> <index>[<expr><name>BZ_MAX_SELECTORS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UChar</name></type> <name><name>selectorMtf</name><index>[<expr><name>BZ_MAX_SELECTORS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UChar</name></type> <name><name>len</name> <index>[<expr><name>BZ_N_GROUPS</name></expr>]</index><index>[<expr><name>BZ_MAX_ALPHA_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Int32</name></type> <name><name>limit</name> <index>[<expr><name>BZ_N_GROUPS</name></expr>]</index><index>[<expr><name>BZ_MAX_ALPHA_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name><name>base</name> <index>[<expr><name>BZ_N_GROUPS</name></expr>]</index><index>[<expr><name>BZ_MAX_ALPHA_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name><name>perm</name> <index>[<expr><name>BZ_N_GROUPS</name></expr>]</index><index>[<expr><name>BZ_MAX_ALPHA_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name><name>minLens</name><index>[<expr><name>BZ_N_GROUPS</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Int32</name></type> <name>save_i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>save_j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>save_t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>save_alphaSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>save_nGroups</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>save_nSelectors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>save_EOB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>save_groupNo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>save_groupPos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>save_nextSym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>save_nblockMAX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>save_nblock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>save_es</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>save_N</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>save_curr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>save_zt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>save_zn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>save_zvec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>save_zj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>save_gSel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>save_gMinlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name><modifier>*</modifier></type> <name>save_gLimit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name><modifier>*</modifier></type> <name>save_gBase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name><modifier>*</modifier></type> <name>save_gPerm</name></decl>;</decl_stmt>

}</block></struct></type>
<name>DState</name>;</typedef>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_GET_FAST</name><parameter_list>(<parameter><type><name>cccc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (s-&gt;tPos &gt;= (UInt32)100000 * (UInt32)s-&gt;blockSize100k) return True; s-&gt;tPos = s-&gt;tt[s-&gt;tPos]; cccc = (UChar)(s-&gt;tPos &amp; 0xff); s-&gt;tPos &gt;&gt;= 8;</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_GET_FAST_C</name><parameter_list>(<parameter><type><name>cccc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (c_tPos &gt;= (UInt32)100000 * (UInt32)ro_blockSize100k) return True; c_tPos = c_tt[c_tPos]; cccc = (UChar)(c_tPos &amp; 0xff); c_tPos &gt;&gt;= 8;</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_LL4</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ if (((i) &amp; 0x1) == 0) s-&gt;ll4[(i) &gt;&gt; 1] = (s-&gt;ll4[(i) &gt;&gt; 1] &amp; 0xf0) | (n); else s-&gt;ll4[(i) &gt;&gt; 1] = (s-&gt;ll4[(i) &gt;&gt; 1] &amp; 0x0f) | ((n) &lt;&lt; 4); }</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_LL4</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((UInt32)(s-&gt;ll4[(i) &gt;&gt; 1])) &gt;&gt; (((i) &lt;&lt; 2) &amp; 0x4)) &amp; 0xF)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_LL</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ s-&gt;ll16[i] = (UInt16)(n &amp; 0x0000ffff); SET_LL4(i, n &gt;&gt; 16); }</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_LL</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((UInt32)s-&gt;ll16[i]) | (GET_LL4(i) &lt;&lt; 16))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_GET_SMALL</name><parameter_list>(<parameter><type><name>cccc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (s-&gt;tPos &gt;= (UInt32)100000 * (UInt32)s-&gt;blockSize100k) return True; cccc = BZ2_indexIntoF ( s-&gt;tPos, s-&gt;cftab ); s-&gt;tPos = GET_LL(s-&gt;tPos);</cpp:value></cpp:define>








<function_decl><type><specifier>extern</specifier> <name>Int32</name></type>
<name>BZ2_indexIntoF</name> <parameter_list>( <parameter><decl><type><name>Int32</name></type></decl></parameter>, <parameter><decl><type><name>Int32</name><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>Int32</name></type>
<name>BZ2_decompress</name> <parameter_list>( <parameter><decl><type><name>DState</name><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type>
<name>BZ2_hbCreateDecodeTables</name> <parameter_list>( <parameter><decl><type><name>Int32</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Int32</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Int32</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>Int32</name></type></decl></parameter>, <parameter><decl><type><name>Int32</name></type></decl></parameter>, <parameter><decl><type><name>Int32</name></type></decl></parameter> )</parameter_list>;</function_decl>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BZ_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NULL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





</unit>
