<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bzip2/bzlib.h">




















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_BZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_BZLIB_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_RUN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_FLUSH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_FINISH</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_OK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_RUN_OK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_FLUSH_OK</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_FINISH_OK</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_STREAM_END</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_SEQUENCE_ERROR</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_PARAM_ERROR</name></cpp:macro> <cpp:value>(-2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_MEM_ERROR</name></cpp:macro> <cpp:value>(-3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_DATA_ERROR</name></cpp:macro> <cpp:value>(-4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_DATA_ERROR_MAGIC</name></cpp:macro> <cpp:value>(-5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_IO_ERROR</name></cpp:macro> <cpp:value>(-6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_UNEXPECTED_EOF</name></cpp:macro> <cpp:value>(-7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_OUTBUFF_FULL</name></cpp:macro> <cpp:value>(-8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_CONFIG_ERROR</name></cpp:macro> <cpp:value>(-9)</cpp:value></cpp:define>

<typedef>typedef
<type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>avail_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>total_in_lo32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>total_in_hi32</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>avail_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>total_out_lo32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>total_out_hi32</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>

<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>bzalloc</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>bzfree</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl>;</decl_stmt>
}</block></struct></type>
<name>bz_stream</name>;</typedef>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BZ_IMPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_EXPORT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BZ_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>small</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>small</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BZ_EXPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_API</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>WINAPI func</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_EXTERN</name></cpp:macro> <cpp:value>extern</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_API</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(WINAPI * func)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_EXTERN</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_API</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>func</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_EXTERN</name></cpp:macro> <cpp:value>extern</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function_decl><type><name>BZ_EXTERN</name> <name>int</name> <name>BZ_API</name></type>(<name>BZ2_bzCompressInit</name>) <parameter_list>(
<parameter><decl><type><name>bz_stream</name><modifier>*</modifier></type> <name>strm</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>blockSize100k</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>verbosity</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>workFactor</name></decl></parameter>
)</parameter_list>;</function_decl>

<function_decl><type><name>BZ_EXTERN</name> <name>int</name> <name>BZ_API</name></type>(<name>BZ2_bzCompress</name>) <parameter_list>(
<parameter><decl><type><name>bz_stream</name><modifier>*</modifier></type> <name>strm</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>
)</parameter_list>;</function_decl>

<function_decl><type><name>BZ_EXTERN</name> <name>int</name> <name>BZ_API</name></type>(<name>BZ2_bzCompressEnd</name>) <parameter_list>(
<parameter><decl><type><name>bz_stream</name><modifier>*</modifier></type> <name>strm</name></decl></parameter>
)</parameter_list>;</function_decl>

<function_decl><type><name>BZ_EXTERN</name> <name>int</name> <name>BZ_API</name></type>(<name>BZ2_bzDecompressInit</name>) <parameter_list>(
<parameter><decl><type><name>bz_stream</name> <modifier>*</modifier></type><name>strm</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>verbosity</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>small</name></decl></parameter>
)</parameter_list>;</function_decl>

<function_decl><type><name>BZ_EXTERN</name> <name>int</name> <name>BZ_API</name></type>(<name>BZ2_bzDecompress</name>) <parameter_list>(
<parameter><decl><type><name>bz_stream</name><modifier>*</modifier></type> <name>strm</name></decl></parameter>
)</parameter_list>;</function_decl>

<function_decl><type><name>BZ_EXTERN</name> <name>int</name> <name>BZ_API</name></type>(<name>BZ2_bzDecompressEnd</name>) <parameter_list>(
<parameter><decl><type><name>bz_stream</name> <modifier>*</modifier></type><name>strm</name></decl></parameter>
)</parameter_list>;</function_decl>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BZ_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_MAX_UNUSED</name></cpp:macro> <cpp:value>5000</cpp:value></cpp:define>

<typedef>typedef <type><name>void</name></type> <name>BZFILE</name>;</typedef>

<function_decl><type><name>BZ_EXTERN</name> <name>BZFILE</name><modifier>*</modifier> <name>BZ_API</name></type>(<name>BZ2_bzReadOpen</name>) <parameter_list>(
<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>bzerror</name></decl></parameter>,
<parameter><decl><type><name>FILE</name><modifier>*</modifier></type> <name>f</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>verbosity</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>small</name></decl></parameter>,
<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>unused</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>nUnused</name></decl></parameter>
)</parameter_list>;</function_decl>

<function_decl><type><name>BZ_EXTERN</name> <name>void</name> <name>BZ_API</name></type>(<name>BZ2_bzReadClose</name>) <parameter_list>(
<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>bzerror</name></decl></parameter>,
<parameter><decl><type><name>BZFILE</name><modifier>*</modifier></type> <name>b</name></decl></parameter>
)</parameter_list>;</function_decl>

<function_decl><type><name>BZ_EXTERN</name> <name>void</name> <name>BZ_API</name></type>(<name>BZ2_bzReadGetUnused</name>) <parameter_list>(
<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>bzerror</name></decl></parameter>,
<parameter><decl><type><name>BZFILE</name><modifier>*</modifier></type> <name>b</name></decl></parameter>,
<parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>unused</name></decl></parameter>,
<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>nUnused</name></decl></parameter>
)</parameter_list>;</function_decl>

<function_decl><type><name>BZ_EXTERN</name> <name>int</name> <name>BZ_API</name></type>(<name>BZ2_bzRead</name>) <parameter_list>(
<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>bzerror</name></decl></parameter>,
<parameter><decl><type><name>BZFILE</name><modifier>*</modifier></type> <name>b</name></decl></parameter>,
<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>
)</parameter_list>;</function_decl>

<function_decl><type><name>BZ_EXTERN</name> <name>BZFILE</name><modifier>*</modifier> <name>BZ_API</name></type>(<name>BZ2_bzWriteOpen</name>) <parameter_list>(
<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>bzerror</name></decl></parameter>,
<parameter><decl><type><name>FILE</name><modifier>*</modifier></type> <name>f</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>blockSize100k</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>verbosity</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>workFactor</name></decl></parameter>
)</parameter_list>;</function_decl>

<function_decl><type><name>BZ_EXTERN</name> <name>void</name> <name>BZ_API</name></type>(<name>BZ2_bzWrite</name>) <parameter_list>(
<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>bzerror</name></decl></parameter>,
<parameter><decl><type><name>BZFILE</name><modifier>*</modifier></type> <name>b</name></decl></parameter>,
<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>
)</parameter_list>;</function_decl>

<function_decl><type><name>BZ_EXTERN</name> <name>void</name> <name>BZ_API</name></type>(<name>BZ2_bzWriteClose</name>) <parameter_list>(
<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>bzerror</name></decl></parameter>,
<parameter><decl><type><name>BZFILE</name><modifier>*</modifier></type> <name>b</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>abandon</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>nbytes_in</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>nbytes_out</name></decl></parameter>
)</parameter_list>;</function_decl>

<function_decl><type><name>BZ_EXTERN</name> <name>void</name> <name>BZ_API</name></type>(<name>BZ2_bzWriteClose64</name>) <parameter_list>(
<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>bzerror</name></decl></parameter>,
<parameter><decl><type><name>BZFILE</name><modifier>*</modifier></type> <name>b</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>abandon</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>nbytes_in_lo32</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>nbytes_in_hi32</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>nbytes_out_lo32</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>nbytes_out_hi32</name></decl></parameter>
)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function_decl><type><name>BZ_EXTERN</name> <name>int</name> <name>BZ_API</name></type>(<name>BZ2_bzBuffToBuffCompress</name>) <parameter_list>(
<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>destLen</name></decl></parameter>,
<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>sourceLen</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>blockSize100k</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>verbosity</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>workFactor</name></decl></parameter>
)</parameter_list>;</function_decl>

<function_decl><type><name>BZ_EXTERN</name> <name>int</name> <name>BZ_API</name></type>(<name>BZ2_bzBuffToBuffDecompress</name>) <parameter_list>(
<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>destLen</name></decl></parameter>,
<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>sourceLen</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>small</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>verbosity</name></decl></parameter>
)</parameter_list>;</function_decl>











<function_decl><type><name>BZ_EXTERN</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <name>BZ_API</name></type>(<name>BZ2_bzlibVersion</name>) <parameter_list>(
<parameter><decl><type><name>void</name></type></decl></parameter>
)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BZ_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>BZ_EXTERN</name> <name>BZFILE</name> <modifier>*</modifier> <name>BZ_API</name></type>(<name>BZ2_bzopen</name>) <parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>
)</parameter_list>;</function_decl>

<function_decl><type><name>BZ_EXTERN</name> <name>BZFILE</name> <modifier>*</modifier> <name>BZ_API</name></type>(<name>BZ2_bzdopen</name>) <parameter_list>(
<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>
)</parameter_list>;</function_decl>

<function_decl><type><name>BZ_EXTERN</name> <name>int</name> <name>BZ_API</name></type>(<name>BZ2_bzread</name>) <parameter_list>(
<parameter><decl><type><name>BZFILE</name><modifier>*</modifier></type> <name>b</name></decl></parameter>,
<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>
)</parameter_list>;</function_decl>

<function_decl><type><name>BZ_EXTERN</name> <name>int</name> <name>BZ_API</name></type>(<name>BZ2_bzwrite</name>) <parameter_list>(
<parameter><decl><type><name>BZFILE</name><modifier>*</modifier></type> <name>b</name></decl></parameter>,
<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>
)</parameter_list>;</function_decl>

<function_decl><type><name>BZ_EXTERN</name> <name>int</name> <name>BZ_API</name></type>(<name>BZ2_bzflush</name>) <parameter_list>(
<parameter><decl><type><name>BZFILE</name><modifier>*</modifier></type> <name>b</name></decl></parameter>
)</parameter_list>;</function_decl>

<function_decl><type><name>BZ_EXTERN</name> <name>void</name> <name>BZ_API</name></type>(<name>BZ2_bzclose</name>) <parameter_list>(
<parameter><decl><type><name>BZFILE</name><modifier>*</modifier></type> <name>b</name></decl></parameter>
)</parameter_list>;</function_decl>

<function_decl><type><name>BZ_EXTERN</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <name>BZ_API</name></type>(<name>BZ2_bzerror</name>) <parameter_list>(
<parameter><decl><type><name>BZFILE</name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>errnum</name></decl></parameter>
)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
