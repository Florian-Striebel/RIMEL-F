<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bzip2/decompress.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bzlib_private.h"</cpp:file></cpp:include>



<function><type><specifier>static</specifier>
<name>void</name></type> <name>makeMaps_d</name> <parameter_list>( <parameter><decl><type><name>DState</name><modifier>*</modifier></type> <name>s</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Int32</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nInUse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>inUse</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>seqToUnseq</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nInUse</name></name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nInUse</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RETURN</name><parameter_list>(<parameter><type><name>rrr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ retVal = rrr; goto save_state_and_return; };</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_BITS</name><parameter_list>(<parameter><type><name>lll</name></type></parameter>,<parameter><type><name>vvv</name></type></parameter>,<parameter><type><name>nnn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case lll: s-&gt;state = lll; while (True) { if (s-&gt;bsLive &gt;= nnn) { UInt32 v; v = (s-&gt;bsBuff &gt;&gt; (s-&gt;bsLive-nnn)) &amp; ((1 &lt;&lt; nnn)-1); s-&gt;bsLive -= nnn; vvv = v; break; } if (s-&gt;strm-&gt;avail_in == 0) RETURN(BZ_OK); s-&gt;bsBuff = (s-&gt;bsBuff &lt;&lt; 8) | ((UInt32) (*((UChar*)(s-&gt;strm-&gt;next_in)))); s-&gt;bsLive += 8; s-&gt;strm-&gt;next_in++; s-&gt;strm-&gt;avail_in--; s-&gt;strm-&gt;total_in_lo32++; if (s-&gt;strm-&gt;total_in_lo32 == 0) s-&gt;strm-&gt;total_in_hi32++; }</cpp:value></cpp:define>























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_UCHAR</name><parameter_list>(<parameter><type><name>lll</name></type></parameter>,<parameter><type><name>uuu</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GET_BITS(lll,uuu,8)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_BIT</name><parameter_list>(<parameter><type><name>lll</name></type></parameter>,<parameter><type><name>uuu</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GET_BITS(lll,uuu,1)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_MTF_VAL</name><parameter_list>(<parameter><type><name>label1</name></type></parameter>,<parameter><type><name>label2</name></type></parameter>,<parameter><type><name>lval</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ if (groupPos == 0) { groupNo++; if (groupNo &gt;= nSelectors) RETURN(BZ_DATA_ERROR); groupPos = BZ_G_SIZE; gSel = s-&gt;selector[groupNo]; gMinlen = s-&gt;minLens[gSel]; gLimit = &amp;(s-&gt;limit[gSel][0]); gPerm = &amp;(s-&gt;perm[gSel][0]); gBase = &amp;(s-&gt;base[gSel][0]); } groupPos--; zn = gMinlen; GET_BITS(label1, zvec, zn); while (1) { if (zn &gt; 20 ) RETURN(BZ_DATA_ERROR); if (zvec &lt;= gLimit[zn]) break; zn++; GET_BIT(label2, zj); zvec = (zvec &lt;&lt; 1) | zj; }; if (zvec - gBase[zn] &lt; 0 || zvec - gBase[zn] &gt;= BZ_MAX_ALPHA_SIZE) RETURN(BZ_DATA_ERROR); lval = gPerm[zvec - gBase[zn]]; }</cpp:value></cpp:define>































<function><type><name>Int32</name></type> <name>BZ2_decompress</name> <parameter_list>( <parameter><decl><type><name>DState</name><modifier>*</modifier></type> <name>s</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UChar</name></type> <name>uc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>retVal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>minLen</name></decl>, <decl><type ref="prev"/><name>maxLen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bz_stream</name><modifier>*</modifier></type> <name>strm</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>strm</name></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Int32</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>alphaSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>nGroups</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>nSelectors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>EOB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>groupNo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>groupPos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>nextSym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>nblockMAX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>nblock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>es</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>N</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>curr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>zt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>zn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>zvec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>zj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>gSel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>gMinlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name><modifier>*</modifier></type> <name>gLimit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name><modifier>*</modifier></type> <name>gBase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name><modifier>*</modifier></type> <name>gPerm</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>BZ_X_MAGIC_1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_j</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_t</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_alphaSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_nGroups</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_nSelectors</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_EOB</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_groupNo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_groupPos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_nextSym</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_nblockMAX</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_nblock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_es</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_N</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_curr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_zt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_zn</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_zvec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_zj</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_gSel</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_gMinlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_gLimit</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_gBase</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_gPerm</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>save_i</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>save_j</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>save_t</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>alphaSize</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>save_alphaSize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nGroups</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>save_nGroups</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nSelectors</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>save_nSelectors</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>EOB</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>save_EOB</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>groupNo</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>save_groupNo</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>groupPos</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>save_groupPos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nextSym</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>save_nextSym</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nblockMAX</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>save_nblockMAX</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nblock</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>save_nblock</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>es</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>save_es</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>N</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>save_N</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>save_curr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>zt</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>save_zt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>zn</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>save_zn</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>zvec</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>save_zvec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>zj</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>save_zj</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>gSel</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>save_gSel</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>gMinlen</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>save_gMinlen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>gLimit</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>save_gLimit</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>gBase</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>save_gBase</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>gPerm</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>save_gPerm</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>retVal</name> <operator>=</operator> <name>BZ_OK</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>GET_UCHAR</name><argument_list>(<argument><expr><name>BZ_X_MAGIC_1</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>!=</operator> <name>BZ_HDR_B</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>BZ_DATA_ERROR_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GET_UCHAR</name><argument_list>(<argument><expr><name>BZ_X_MAGIC_2</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>!=</operator> <name>BZ_HDR_Z</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>BZ_DATA_ERROR_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<macro><name>GET_UCHAR</name><argument_list>(<argument>BZ_X_MAGIC_3</argument>, <argument>uc</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>!=</operator> <name>BZ_HDR_h</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>BZ_DATA_ERROR_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<macro><name>GET_BITS</name><argument_list>(<argument>BZ_X_MAGIC_4</argument>, <argument>s-&gt;blockSize100k</argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>blockSize100k</name></name> <operator>&lt;</operator> <operator>(</operator><name>BZ_HDR_0</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>blockSize100k</name></name> <operator>&gt;</operator> <operator>(</operator><name>BZ_HDR_0</name> <operator>+</operator> <literal type="number">9</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>BZ_DATA_ERROR_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blockSize100k</name></name> <operator>-=</operator> <name>BZ_HDR_0</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>smallDecompress</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ll16</name></name> <operator>=</operator> <call><name>BZALLOC</name><argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>blockSize100k</name></name> <operator>*</operator> <literal type="number">100000</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>UInt16</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ll4</name></name> <operator>=</operator> <call><name>BZALLOC</name><argument_list>(
<argument><expr><operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>blockSize100k</name></name> <operator>*</operator> <literal type="number">100000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>UChar</name></expr></argument>)</argument_list></sizeof></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ll16</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>ll4</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>BZ_MEM_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tt</name></name> <operator>=</operator> <call><name>BZALLOC</name><argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>blockSize100k</name></name> <operator>*</operator> <literal type="number">100000</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Int32</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>tt</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>BZ_MEM_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>GET_UCHAR</name><argument_list>(<argument><expr><name>BZ_X_BLKHDR_1</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>==</operator> <literal type="number">0x17</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>endhdr_2</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>!=</operator> <literal type="number">0x31</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>BZ_DATA_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GET_UCHAR</name><argument_list>(<argument><expr><name>BZ_X_BLKHDR_2</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>!=</operator> <literal type="number">0x41</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>BZ_DATA_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GET_UCHAR</name><argument_list>(<argument><expr><name>BZ_X_BLKHDR_3</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>!=</operator> <literal type="number">0x59</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>BZ_DATA_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GET_UCHAR</name><argument_list>(<argument><expr><name>BZ_X_BLKHDR_4</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>!=</operator> <literal type="number">0x26</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>BZ_DATA_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GET_UCHAR</name><argument_list>(<argument><expr><name>BZ_X_BLKHDR_5</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>!=</operator> <literal type="number">0x53</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>BZ_DATA_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GET_UCHAR</name><argument_list>(<argument><expr><name>BZ_X_BLKHDR_6</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>!=</operator> <literal type="number">0x59</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>BZ_DATA_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>currBlockNo</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>verbosity</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>VPrintf1</name> <argument_list>( <argument><expr><literal type="string">"\n [%d: huff+mtf "</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>currBlockNo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>storedBlockCRC</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_UCHAR</name><argument_list>(<argument><expr><name>BZ_X_BCRC_1</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>storedBlockCRC</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>storedBlockCRC</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>UInt32</name><operator>)</operator><name>uc</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_UCHAR</name><argument_list>(<argument><expr><name>BZ_X_BCRC_2</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>storedBlockCRC</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>storedBlockCRC</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>UInt32</name><operator>)</operator><name>uc</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_UCHAR</name><argument_list>(<argument><expr><name>BZ_X_BCRC_3</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>storedBlockCRC</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>storedBlockCRC</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>UInt32</name><operator>)</operator><name>uc</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_UCHAR</name><argument_list>(<argument><expr><name>BZ_X_BCRC_4</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>storedBlockCRC</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>storedBlockCRC</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>UInt32</name><operator>)</operator><name>uc</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_BITS</name><argument_list>(<argument><expr><name>BZ_X_RANDBIT</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>blockRandomised</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>origPtr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_UCHAR</name><argument_list>(<argument><expr><name>BZ_X_ORIGPTR_1</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>origPtr</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>origPtr</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>Int32</name><operator>)</operator><name>uc</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_UCHAR</name><argument_list>(<argument><expr><name>BZ_X_ORIGPTR_2</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>origPtr</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>origPtr</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>Int32</name><operator>)</operator><name>uc</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_UCHAR</name><argument_list>(<argument><expr><name>BZ_X_ORIGPTR_3</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>origPtr</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>origPtr</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>Int32</name><operator>)</operator><name>uc</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>origPtr</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>BZ_DATA_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>origPtr</name></name> <operator>&gt;</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="number">100000</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>blockSize100k</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>BZ_DATA_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>GET_BIT</name><argument_list>(<argument><expr><name>BZ_X_MAPPING_1</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>inUse16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>True</name></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>inUse16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>False</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>inUse</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>False</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>inUse16</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>GET_BIT</name><argument_list>(<argument><expr><name>BZ_X_MAPPING_2</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>inUse</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name>True</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name>makeMaps_d</name> <argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nInUse</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>BZ_DATA_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>alphaSize</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nInUse</name></name><operator>+</operator><literal type="number">2</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>GET_BITS</name><argument_list>(<argument><expr><name>BZ_X_SELECTOR_1</name></expr></argument>, <argument><expr><name>nGroups</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>nGroups</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">2</literal> <operator>||</operator> <name>nGroups</name></expr></argument> &gt;</argument_list></name> <name>BZ_N_GROUPS</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>BZ_DATA_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GET_BITS</name><argument_list>(<argument><expr><name>BZ_X_SELECTOR_2</name></expr></argument>, <argument><expr><name>nSelectors</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nSelectors</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>BZ_DATA_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nSelectors</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>True</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GET_BIT</name><argument_list>(<argument><expr><name>BZ_X_SELECTOR_3</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name>nGroups</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>BZ_DATA_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>



<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>BZ_MAX_SELECTORS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>selectorMtf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>nSelectors</name> <operator>&gt;</operator> <name>BZ_MAX_SELECTORS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nSelectors</name> <operator>=</operator> <name>BZ_MAX_SELECTORS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<block>{<block_content>
<decl_stmt><decl><type><name>UChar</name></type> <name><name>pos</name><index>[<expr><name>BZ_N_GROUPS</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <name>nGroups</name></expr>;</condition> <incr><expr><name>v</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pos</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nSelectors</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>selectorMtf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>pos</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>v</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>pos</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name><name>pos</name><index>[<expr><name>v</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>v</name><operator>--</operator></expr>;</expr_stmt> </block_content>}</block></while>
<expr_stmt><expr><name><name>pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>selector</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block>


<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>nGroups</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>GET_BITS</name><argument_list>(<argument><expr><name>BZ_X_CODING_1</name></expr></argument>, <argument><expr><name>curr</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>alphaSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<while>while <condition>(<expr><name>True</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curr</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>curr</name></expr></argument> &gt;</argument_list></name> <literal type="number">20</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>BZ_DATA_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GET_BIT</name><argument_list>(<argument><expr><name>BZ_X_CODING_2</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GET_BIT</name><argument_list>(<argument><expr><name>BZ_X_CODING_3</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>curr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>curr</name><operator>--</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>curr</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>nGroups</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>minLen</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>maxLen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>alphaSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>maxLen</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>maxLen</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>minLen</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>minLen</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>BZ2_hbCreateDecodeTables</name> <argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>limit</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>base</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>perm</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>,
<argument><expr><name>minLen</name></expr></argument>, <argument><expr><name>maxLen</name></expr></argument>, <argument><expr><name>alphaSize</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>minLens</name><index>[<expr><name>t</name></expr>]</index></name> <operator>=</operator> <name>minLen</name></expr>;</expr_stmt>
</block_content>}</block></for>



<expr_stmt><expr><name>EOB</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nInUse</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nblockMAX</name> <operator>=</operator> <literal type="number">100000</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>blockSize100k</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>groupNo</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>groupPos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">255</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>unzftab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>


<block>{<block_content>
<decl_stmt><decl><type><name>Int32</name></type> <name>ii</name></decl>, <decl><type ref="prev"/><name>jj</name></decl>, <decl><type ref="prev"/><name>kk</name></decl>;</decl_stmt>
<expr_stmt><expr><name>kk</name> <operator>=</operator> <name>MTFA_SIZE</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">256</literal> <operator>/</operator> <name>MTFL_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>ii</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>jj</name> <operator>=</operator> <name>MTFL_SIZE</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>jj</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>jj</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mtfa</name><index>[<expr><name>kk</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>)</operator><operator>(</operator><name>ii</name> <operator>*</operator> <name>MTFL_SIZE</name> <operator>+</operator> <name>jj</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>kk</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mtfbase</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <name>kk</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block>


<expr_stmt><expr><name>nblock</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_MTF_VAL</name><argument_list>(<argument><expr><name>BZ_X_MTF_1</name></expr></argument>, <argument><expr><name>BZ_X_MTF_2</name></expr></argument>, <argument><expr><name>nextSym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>True</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nextSym</name> <operator>==</operator> <name>EOB</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nextSym</name> <operator>==</operator> <name>BZ_RUNA</name> <operator>||</operator> <name>nextSym</name> <operator>==</operator> <name>BZ_RUNB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>es</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>N</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>






<if_stmt><if>if <condition>(<expr><name>N</name> <operator>&gt;=</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>BZ_DATA_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nextSym</name> <operator>==</operator> <name>BZ_RUNA</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>es</name> <operator>=</operator> <name>es</name> <operator>+</operator> <operator>(</operator><literal type="number">0</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>N</name></expr>;</expr_stmt></block_content></block></if> <if type="elseif">else
if <condition>(<expr><name>nextSym</name> <operator>==</operator> <name>BZ_RUNB</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>es</name> <operator>=</operator> <name>es</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>N</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>N</name> <operator>=</operator> <name>N</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_MTF_VAL</name><argument_list>(<argument><expr><name>BZ_X_MTF_3</name></expr></argument>, <argument><expr><name>BZ_X_MTF_4</name></expr></argument>, <argument><expr><name>nextSym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
while <condition>(<expr><name>nextSym</name> <operator>==</operator> <name>BZ_RUNA</name> <operator>||</operator> <name>nextSym</name> <operator>==</operator> <name>BZ_RUNB</name></expr>)</condition>;</do>

<expr_stmt><expr><name>es</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>uc</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>seqToUnseq</name><index>[ <expr><name><name>s</name><operator>-&gt;</operator><name>mtfa</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mtfbase</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr> ]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>unzftab</name><index>[<expr><name>uc</name></expr>]</index></name> <operator>+=</operator> <name>es</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>smallDecompress</name></name></expr>)</condition><block type="pseudo"><block_content>
<while>while <condition>(<expr><name>es</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nblock</name> <operator>&gt;=</operator> <name>nblockMAX</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>BZ_DATA_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ll16</name><index>[<expr><name>nblock</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>UInt16</name><operator>)</operator><name>uc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nblock</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>es</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<while>while <condition>(<expr><name>es</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nblock</name> <operator>&gt;=</operator> <name>nblockMAX</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>BZ_DATA_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tt</name><index>[<expr><name>nblock</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>UInt32</name><operator>)</operator><name>uc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nblock</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>es</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while></block_content></block></else></if_stmt><empty_stmt>;</empty_stmt>

<continue>continue;</continue>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nblock</name> <operator>&gt;=</operator> <name>nblockMAX</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>BZ_DATA_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<block>{<block_content>
<decl_stmt><decl><type><name>Int32</name></type> <name>ii</name></decl>, <decl><type ref="prev"/><name>jj</name></decl>, <decl><type ref="prev"/><name>kk</name></decl>, <decl><type ref="prev"/><name>pp</name></decl>, <decl><type ref="prev"/><name>lno</name></decl>, <decl><type ref="prev"/><name>off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>nn</name></decl>;</decl_stmt>
<expr_stmt><expr><name>nn</name> <operator>=</operator> <operator>(</operator><name>UInt32</name><operator>)</operator><operator>(</operator><name>nextSym</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nn</name> <operator>&lt;</operator> <name>MTFL_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pp</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mtfbase</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>uc</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mtfa</name><index>[<expr><name>pp</name><operator>+</operator><name>nn</name></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>nn</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Int32</name></type> <name>z</name> <init>= <expr><name>pp</name><operator>+</operator><name>nn</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mtfa</name><index>[<expr><operator>(</operator><name>z</name><operator>)</operator></expr> ]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mtfa</name><index>[<expr><operator>(</operator><name>z</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mtfa</name><index>[<expr><operator>(</operator><name>z</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mtfa</name><index>[<expr><operator>(</operator><name>z</name><operator>)</operator><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mtfa</name><index>[<expr><operator>(</operator><name>z</name><operator>)</operator><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mtfa</name><index>[<expr><operator>(</operator><name>z</name><operator>)</operator><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mtfa</name><index>[<expr><operator>(</operator><name>z</name><operator>)</operator><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mtfa</name><index>[<expr><operator>(</operator><name>z</name><operator>)</operator><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nn</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<while>while <condition>(<expr><name>nn</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mtfa</name><index>[<expr><operator>(</operator><name>pp</name><operator>+</operator><name>nn</name><operator>)</operator></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mtfa</name><index>[<expr><operator>(</operator><name>pp</name><operator>+</operator><name>nn</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>nn</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mtfa</name><index>[<expr><name>pp</name></expr>]</index></name> <operator>=</operator> <name>uc</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>lno</name> <operator>=</operator> <name>nn</name> <operator>/</operator> <name>MTFL_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <name>nn</name> <operator>%</operator> <name>MTFL_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mtfbase</name><index>[<expr><name>lno</name></expr>]</index></name> <operator>+</operator> <name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><name>uc</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mtfa</name><index>[<expr><name>pp</name></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>pp</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mtfbase</name><index>[<expr><name>lno</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mtfa</name><index>[<expr><name>pp</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mtfa</name><index>[<expr><name>pp</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>pp</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mtfbase</name><index>[<expr><name>lno</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><name>lno</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mtfbase</name><index>[<expr><name>lno</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mtfa</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mtfbase</name><index>[<expr><name>lno</name></expr>]</index></name></expr>]</index></name>
<operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mtfa</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mtfbase</name><index>[<expr><name>lno</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>MTFL_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lno</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mtfbase</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mtfa</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mtfbase</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>uc</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mtfbase</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>kk</name> <operator>=</operator> <name>MTFA_SIZE</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">256</literal> <operator>/</operator> <name>MTFL_SIZE</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>ii</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>jj</name> <operator>=</operator> <name>MTFL_SIZE</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>jj</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>jj</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mtfa</name><index>[<expr><name>kk</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mtfa</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mtfbase</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>+</operator> <name>jj</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>kk</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mtfbase</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <name>kk</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>unzftab</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>seqToUnseq</name><index>[<expr><name>uc</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>smallDecompress</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ll16</name><index>[<expr><name>nblock</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>UInt16</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>seqToUnseq</name><index>[<expr><name>uc</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tt</name><index>[<expr><name>nblock</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>UInt32</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>seqToUnseq</name><index>[<expr><name>uc</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>nblock</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_MTF_VAL</name><argument_list>(<argument><expr><name>BZ_X_MTF_5</name></expr></argument>, <argument><expr><name>BZ_X_MTF_6</name></expr></argument>, <argument><expr><name>nextSym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>




<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>origPtr</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>origPtr</name></name> <operator>&gt;=</operator> <name>nblock</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>BZ_DATA_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">255</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>unzftab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>unzftab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>nblock</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>BZ_DATA_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cftab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cftab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>unzftab</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cftab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>cftab</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cftab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>cftab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>nblock</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>BZ_DATA_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cftab</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cftab</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>BZ_DATA_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state_out_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state_out_ch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_INITIALISE_CRC</name> <argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>calculatedBlockCRC</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>BZ_X_OUTPUT</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>verbosity</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>VPrintf0</name> <argument_list>( <argument><expr><literal type="string">"rt+rld"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>smallDecompress</name></name></expr>)</condition> <block>{<block_content>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cftabCopy</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cftab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nblock</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>uc</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ll16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_LL</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cftabCopy</name><index>[<expr><name>uc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cftabCopy</name><index>[<expr><name>uc</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>origPtr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>GET_LL</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>Int32</name></type> <name>tmp</name> <init>= <expr><call><name>GET_LL</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SET_LL</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block>
while <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>origPtr</name></name></expr>)</condition>;</do>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tPos</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>origPtr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>blockRandomised</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>BZ_RAND_INIT_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_GET_SMALL</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>k0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>BZ_RAND_UPD_MASK</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>k0</name></name> <operator>^=</operator> <name>BZ_RAND_MASK</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>BZ_GET_SMALL</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>k0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nblock</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>uc</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>tt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tt</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>cftab</name><index>[<expr><name>uc</name></expr>]</index></name></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cftab</name><index>[<expr><name>uc</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tPos</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>tt</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>origPtr</name></name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>blockRandomised</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>BZ_RAND_INIT_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BZ_GET_FAST</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>k0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>BZ_RAND_UPD_MASK</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>k0</name></name> <operator>^=</operator> <name>BZ_RAND_MASK</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>BZ_GET_FAST</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>k0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nblock_used</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>BZ_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label><name>endhdr_2</name>:</label>

<expr_stmt><expr><call><name>GET_UCHAR</name><argument_list>(<argument><expr><name>BZ_X_ENDHDR_2</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>!=</operator> <literal type="number">0x72</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>BZ_DATA_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GET_UCHAR</name><argument_list>(<argument><expr><name>BZ_X_ENDHDR_3</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>!=</operator> <literal type="number">0x45</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>BZ_DATA_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GET_UCHAR</name><argument_list>(<argument><expr><name>BZ_X_ENDHDR_4</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>!=</operator> <literal type="number">0x38</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>BZ_DATA_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GET_UCHAR</name><argument_list>(<argument><expr><name>BZ_X_ENDHDR_5</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>!=</operator> <literal type="number">0x50</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>BZ_DATA_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GET_UCHAR</name><argument_list>(<argument><expr><name>BZ_X_ENDHDR_6</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>!=</operator> <literal type="number">0x90</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>BZ_DATA_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>storedCombinedCRC</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_UCHAR</name><argument_list>(<argument><expr><name>BZ_X_CCRC_1</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>storedCombinedCRC</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>storedCombinedCRC</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>UInt32</name><operator>)</operator><name>uc</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_UCHAR</name><argument_list>(<argument><expr><name>BZ_X_CCRC_2</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>storedCombinedCRC</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>storedCombinedCRC</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>UInt32</name><operator>)</operator><name>uc</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_UCHAR</name><argument_list>(<argument><expr><name>BZ_X_CCRC_3</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>storedCombinedCRC</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>storedCombinedCRC</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>UInt32</name><operator>)</operator><name>uc</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_UCHAR</name><argument_list>(<argument><expr><name>BZ_X_CCRC_4</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>storedCombinedCRC</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>storedCombinedCRC</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>UInt32</name><operator>)</operator><name>uc</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>BZ_X_IDLE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>BZ_STREAM_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<default>default:</default> <expr_stmt><expr><call><name>AssertH</name> <argument_list>( <argument><expr><name>False</name></expr></argument>, <argument><expr><literal type="number">4001</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>AssertH</name> <argument_list>( <argument><expr><name>False</name></expr></argument>, <argument><expr><literal type="number">4002</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>save_state_and_return</name>:</label>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_i</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_j</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_t</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_alphaSize</name></name> <operator>=</operator> <name>alphaSize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_nGroups</name></name> <operator>=</operator> <name>nGroups</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_nSelectors</name></name> <operator>=</operator> <name>nSelectors</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_EOB</name></name> <operator>=</operator> <name>EOB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_groupNo</name></name> <operator>=</operator> <name>groupNo</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_groupPos</name></name> <operator>=</operator> <name>groupPos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_nextSym</name></name> <operator>=</operator> <name>nextSym</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_nblockMAX</name></name> <operator>=</operator> <name>nblockMAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_nblock</name></name> <operator>=</operator> <name>nblock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_es</name></name> <operator>=</operator> <name>es</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_N</name></name> <operator>=</operator> <name>N</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_curr</name></name> <operator>=</operator> <name>curr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_zt</name></name> <operator>=</operator> <name>zt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_zn</name></name> <operator>=</operator> <name>zn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_zvec</name></name> <operator>=</operator> <name>zvec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_zj</name></name> <operator>=</operator> <name>zj</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_gSel</name></name> <operator>=</operator> <name>gSel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_gMinlen</name></name> <operator>=</operator> <name>gMinlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_gLimit</name></name> <operator>=</operator> <name>gLimit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_gBase</name></name> <operator>=</operator> <name>gBase</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_gPerm</name></name> <operator>=</operator> <name>gPerm</name></expr>;</expr_stmt>

<return>return <expr><name>retVal</name></expr>;</return>
</block_content>}</block></function>





</unit>
