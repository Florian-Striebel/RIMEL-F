<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bzip2/bzip2recover.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>MaybeUInt64</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MaybeUInt64_FMT</name></cpp:macro> <cpp:value>"%llu"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>__int64</name></type> <name>MaybeUInt64</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MaybeUInt64_FMT</name></cpp:macro> <cpp:value>"%I64u"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>MaybeUInt64</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MaybeUInt64_FMT</name></cpp:macro> <cpp:value>"%u"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>UInt32</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>Int32</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>UChar</name>;</typedef>
<typedef>typedef <type><name>char</name></type> <name>Char</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>Bool</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>True</name></cpp:macro> <cpp:value>((Bool)1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>False</name></cpp:macro> <cpp:value>((Bool)0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_MAX_FILENAME</name></cpp:macro> <cpp:value>2000</cpp:value></cpp:define>

<decl_stmt><decl><type><name>Char</name></type> <name><name>inFileName</name><index>[<expr><name>BZ_MAX_FILENAME</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Char</name></type> <name><name>outFileName</name><index>[<expr><name>BZ_MAX_FILENAME</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Char</name></type> <name><name>progName</name><index>[<expr><name>BZ_MAX_FILENAME</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MaybeUInt64</name></type> <name>bytesOut</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MaybeUInt64</name></type> <name>bytesIn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_HDR_B</name></cpp:macro> <cpp:value>0x42</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_HDR_Z</name></cpp:macro> <cpp:value>0x5a</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_HDR_h</name></cpp:macro> <cpp:value>0x68</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_HDR_0</name></cpp:macro> <cpp:value>0x30</cpp:value></cpp:define>







<function><type><specifier>static</specifier> <name>void</name></type> <name>readError</name> <parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>( <argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"%s: I/O error reading `%s', possible reason follows.\n"</literal></expr></argument>,
<argument><expr><name>progName</name></expr></argument>, <argument><expr><name>inFileName</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>perror</name> <argument_list>( <argument><expr><name>progName</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: warning: output file(s) may be incomplete.\n"</literal></expr></argument>,
<argument><expr><name>progName</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name> <argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>writeError</name> <parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>( <argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"%s: I/O error reading `%s', possible reason follows.\n"</literal></expr></argument>,
<argument><expr><name>progName</name></expr></argument>, <argument><expr><name>inFileName</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>perror</name> <argument_list>( <argument><expr><name>progName</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: warning: output file(s) may be incomplete.\n"</literal></expr></argument>,
<argument><expr><name>progName</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name> <argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>mallocFail</name> <parameter_list>( <parameter><decl><type><name>Int32</name></type> <name>n</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>( <argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"%s: malloc failed on request for %d bytes.\n"</literal></expr></argument>,
<argument><expr><name>progName</name></expr></argument>, <argument><expr><name>n</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: warning: output file(s) may be incomplete.\n"</literal></expr></argument>,
<argument><expr><name>progName</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name> <argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>tooManyBlocks</name> <parameter_list>( <parameter><decl><type><name>Int32</name></type> <name>max_handled_blocks</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>( <argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"%s: `%s' appears to contain more than %d blocks\n"</literal></expr></argument>,
<argument><expr><name>progName</name></expr></argument>, <argument><expr><name>inFileName</name></expr></argument>, <argument><expr><name>max_handled_blocks</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>( <argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"%s: and cannot be handled. To fix, increase\n"</literal></expr></argument>,
<argument><expr><name>progName</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>( <argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"%s: BZ_MAX_HANDLED_BLOCKS in bzip2recover.c, and recompile.\n"</literal></expr></argument>,
<argument><expr><name>progName</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name> <argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<typedef>typedef
<type><struct>struct <block>{
<decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>buffLive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Char</name></type> <name>mode</name></decl>;</decl_stmt>
}</block></struct></type>
<name>BitStream</name>;</typedef>



<function><type><specifier>static</specifier> <name>BitStream</name><modifier>*</modifier></type> <name>bsOpenReadStream</name> <parameter_list>( <parameter><decl><type><name>FILE</name><modifier>*</modifier></type> <name>stream</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BitStream</name> <modifier>*</modifier></type><name>bs</name> <init>= <expr><call><name>malloc</name> <argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BitStream</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bs</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mallocFail</name> <argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BitStream</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <name>stream</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>buffLive</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <literal type="char">'r'</literal></expr>;</expr_stmt>
<return>return <expr><name>bs</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>BitStream</name><modifier>*</modifier></type> <name>bsOpenWriteStream</name> <parameter_list>( <parameter><decl><type><name>FILE</name><modifier>*</modifier></type> <name>stream</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BitStream</name> <modifier>*</modifier></type><name>bs</name> <init>= <expr><call><name>malloc</name> <argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BitStream</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bs</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mallocFail</name> <argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BitStream</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <name>stream</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>buffLive</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <literal type="char">'w'</literal></expr>;</expr_stmt>
<return>return <expr><name>bs</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>bsPutBit</name> <parameter_list>( <parameter><decl><type><name>BitStream</name><modifier>*</modifier></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>Int32</name></type> <name>bit</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bs</name><operator>-&gt;</operator><name>buffLive</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Int32</name></type> <name>retVal</name> <init>= <expr><call><name>putc</name> <argument_list>( <argument><expr><operator>(</operator><name>UChar</name><operator>)</operator> <name><name>bs</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>bs</name><operator>-&gt;</operator><name>handle</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>retVal</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>writeError</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bytesOut</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>buffLive</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>bit</name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <operator>(</operator> <operator>(</operator><name><name>bs</name><operator>-&gt;</operator><name>buffer</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>bit</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>buffLive</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>Int32</name></type> <name>bsGetBit</name> <parameter_list>( <parameter><decl><type><name>BitStream</name><modifier>*</modifier></type> <name>bs</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bs</name><operator>-&gt;</operator><name>buffLive</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>buffLive</name></name> <operator>--</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator> <operator>(</operator><operator>(</operator><name><name>bs</name><operator>-&gt;</operator><name>buffer</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>bs</name><operator>-&gt;</operator><name>buffLive</name></name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>Int32</name></type> <name>retVal</name> <init>= <expr><call><name>getc</name> <argument_list>( <argument><expr><name><name>bs</name><operator>-&gt;</operator><name>handle</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>retVal</name> <operator>==</operator> <name>EOF</name></expr> )</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>readError</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>buffLive</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>retVal</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator> <operator>(</operator><operator>(</operator><name><name>bs</name><operator>-&gt;</operator><name>buffer</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>bsClose</name> <parameter_list>( <parameter><decl><type><name>BitStream</name><modifier>*</modifier></type> <name>bs</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Int32</name></type> <name>retVal</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>bs</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <literal type="char">'w'</literal></expr> )</condition> <block>{<block_content>
<while>while <condition>( <expr><name><name>bs</name><operator>-&gt;</operator><name>buffLive</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>buffLive</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>buffer</name></name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name>retVal</name> <operator>=</operator> <call><name>putc</name> <argument_list>( <argument><expr><operator>(</operator><name>UChar</name><operator>)</operator> <operator>(</operator><name><name>bs</name><operator>-&gt;</operator><name>buffer</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>bs</name><operator>-&gt;</operator><name>handle</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retVal</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>writeError</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bytesOut</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>retVal</name> <operator>=</operator> <call><name>fflush</name> <argument_list>( <argument><expr><name><name>bs</name><operator>-&gt;</operator><name>handle</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retVal</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>writeError</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>retVal</name> <operator>=</operator> <call><name>fclose</name> <argument_list>( <argument><expr><name><name>bs</name><operator>-&gt;</operator><name>handle</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retVal</name> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bs</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <literal type="char">'w'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>writeError</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>readError</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>( <argument><expr><name>bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>bsPutUChar</name> <parameter_list>( <parameter><decl><type><name>BitStream</name><modifier>*</modifier></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>UChar</name></type> <name>c</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Int32</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">7</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsPutBit</name> <argument_list>( <argument><expr><name>bs</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>UInt32</name><operator>)</operator> <name>c</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>bsPutUInt32</name> <parameter_list>( <parameter><decl><type><name>BitStream</name><modifier>*</modifier></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>UInt32</name></type> <name>c</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Int32</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">31</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsPutBit</name> <argument_list>( <argument><expr><name>bs</name></expr></argument>, <argument><expr><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>Bool</name></type> <name>endsInBz2</name> <parameter_list>( <parameter><decl><type><name>Char</name><modifier>*</modifier></type> <name>name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Int32</name></type> <name>n</name> <init>= <expr><call><name>strlen</name> <argument_list>( <argument><expr><name>name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>False</name></expr>;</return></block_content></block></if></if_stmt>
<return>return
<expr><operator>(</operator><name><name>name</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator>
<name><name>name</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'b'</literal> <operator>&amp;&amp;</operator>
<name><name>name</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'z'</literal> <operator>&amp;&amp;</operator>
<name><name>name</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'2'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_SPLIT_SYM</name></cpp:macro> <cpp:value>'\\'</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_SPLIT_SYM</name></cpp:macro> <cpp:value>'/'</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_HEADER_HI</name></cpp:macro> <cpp:value>0x00003141UL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_HEADER_LO</name></cpp:macro> <cpp:value>0x59265359UL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_ENDMARK_HI</name></cpp:macro> <cpp:value>0x00001772UL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_ENDMARK_LO</name></cpp:macro> <cpp:value>0x45385090UL</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BZ_MAX_HANDLED_BLOCKS</name></cpp:macro> <cpp:value>50000</cpp:value></cpp:define>

<decl_stmt><decl><type><name>MaybeUInt64</name></type> <name><name>bStart</name> <index>[<expr><name>BZ_MAX_HANDLED_BLOCKS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MaybeUInt64</name></type> <name><name>bEnd</name> <index>[<expr><name>BZ_MAX_HANDLED_BLOCKS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MaybeUInt64</name></type> <name><name>rbStart</name><index>[<expr><name>BZ_MAX_HANDLED_BLOCKS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MaybeUInt64</name></type> <name><name>rbEnd</name> <index>[<expr><name>BZ_MAX_HANDLED_BLOCKS</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>Int32</name></type> <name>main</name> <parameter_list>( <parameter><decl><type><name>Int32</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>Char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>inFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>outFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BitStream</name><modifier>*</modifier></type> <name>bsIn</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bsWr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>b</name></decl>, <decl><type ref="prev"/><name>wrBlock</name></decl>, <decl><type ref="prev"/><name>currBlock</name></decl>, <decl><type ref="prev"/><name>rbCtr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MaybeUInt64</name></type> <name>bitsRead</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UInt32</name></type> <name>buffHi</name></decl>, <decl><type ref="prev"/><name>buffLo</name></decl>, <decl><type ref="prev"/><name>blockCRC</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Char</name><modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>( <argument><expr><name>progName</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>BZ_MAX_FILENAME</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>progName</name><index>[<expr><name>BZ_MAX_FILENAME</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inFileName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>outFileName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>( <argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"bzip2recover 1.0.8: extracts blocks from damaged .bz2 files.\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: usage is `%s damaged_file_name'.\n"</literal></expr></argument>,
<argument><expr><name>progName</name></expr></argument>, <argument><expr><name>progName</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>MaybeUInt64</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"\trestrictions on size of recovered file: None\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"\trestrictions on size of recovered file: 512 MB\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"\tto circumvent, recompile with MaybeUInt64 as an\n"</literal>
<literal type="string">"\tunsigned 64-bit int.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"\tsizeof(MaybeUInt64) is not 4 or 8 -- "</literal>
<literal type="string">"configuration error.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>BZ_MAX_FILENAME</name><operator>-</operator><literal type="number">20</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>( <argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"%s: supplied filename is suspiciously (&gt;= %d chars) long. Bye!\n"</literal></expr></argument>,
<argument><expr><name>progName</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>( <argument><expr><name>inFileName</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inFile</name> <operator>=</operator> <call><name>fopen</name> <argument_list>( <argument><expr><name>inFileName</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>inFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: can't read `%s'\n"</literal></expr></argument>, <argument><expr><name>progName</name></expr></argument>, <argument><expr><name>inFileName</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bsIn</name> <operator>=</operator> <call><name>bsOpenReadStream</name> <argument_list>( <argument><expr><name>inFile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: searching for block boundaries ...\n"</literal></expr></argument>, <argument><expr><name>progName</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bitsRead</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buffHi</name> <operator>=</operator> <name>buffLo</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>currBlock</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bStart</name><index>[<expr><name>currBlock</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rbCtr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>True</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>bsGetBit</name> <argument_list>( <argument><expr><name>bsIn</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bitsRead</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bitsRead</name> <operator>&gt;=</operator> <name><name>bStart</name><index>[<expr><name>currBlock</name></expr>]</index></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>bitsRead</name> <operator>-</operator> <name><name>bStart</name><index>[<expr><name>currBlock</name></expr>]</index></name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">40</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bEnd</name><index>[<expr><name>currBlock</name></expr>]</index></name> <operator>=</operator> <name>bitsRead</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>currBlock</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" block %d runs from "</literal> <name>MaybeUInt64_FMT</name>
<literal type="string">" to "</literal> <name>MaybeUInt64_FMT</name> <literal type="string">" (incomplete)\n"</literal></expr></argument>,
<argument><expr><name>currBlock</name></expr></argument>, <argument><expr><name><name>bStart</name><index>[<expr><name>currBlock</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>bEnd</name><index>[<expr><name>currBlock</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>currBlock</name><operator>--</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buffHi</name> <operator>=</operator> <operator>(</operator><name>buffHi</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>buffLo</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>buffLo</name> <operator>=</operator> <operator>(</operator><name>buffLo</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator> <operator>(</operator><name>buffHi</name> <operator>&amp;</operator> <literal type="number">0x0000ffff</literal><operator>)</operator> <operator>==</operator> <name>BLOCK_HEADER_HI</name>
<operator>&amp;&amp;</operator> <name>buffLo</name> <operator>==</operator> <name>BLOCK_HEADER_LO</name><operator>)</operator>
<operator>||</operator>
<operator>(</operator> <operator>(</operator><name>buffHi</name> <operator>&amp;</operator> <literal type="number">0x0000ffff</literal><operator>)</operator> <operator>==</operator> <name>BLOCK_ENDMARK_HI</name>
<operator>&amp;&amp;</operator> <name>buffLo</name> <operator>==</operator> <name>BLOCK_ENDMARK_LO</name><operator>)</operator></expr>
)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bitsRead</name> <operator>&gt;</operator> <literal type="number">49</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bEnd</name><index>[<expr><name>currBlock</name></expr>]</index></name> <operator>=</operator> <name>bitsRead</name><operator>-</operator><literal type="number">49</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>bEnd</name><index>[<expr><name>currBlock</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>currBlock</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>bEnd</name><index>[<expr><name>currBlock</name></expr>]</index></name> <operator>-</operator> <name><name>bStart</name><index>[<expr><name>currBlock</name></expr>]</index></name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">130</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" block %d runs from "</literal> <name>MaybeUInt64_FMT</name>
<literal type="string">" to "</literal> <name>MaybeUInt64_FMT</name> <literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name>rbCtr</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>bStart</name><index>[<expr><name>currBlock</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>bEnd</name><index>[<expr><name>currBlock</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rbStart</name><index>[<expr><name>rbCtr</name></expr>]</index></name> <operator>=</operator> <name><name>bStart</name><index>[<expr><name>currBlock</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rbEnd</name><index>[<expr><name>rbCtr</name></expr>]</index></name> <operator>=</operator> <name><name>bEnd</name><index>[<expr><name>currBlock</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rbCtr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>currBlock</name> <operator>&gt;=</operator> <name>BZ_MAX_HANDLED_BLOCKS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tooManyBlocks</name><argument_list>(<argument><expr><name>BZ_MAX_HANDLED_BLOCKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>currBlock</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bStart</name><index>[<expr><name>currBlock</name></expr>]</index></name> <operator>=</operator> <name>bitsRead</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>bsClose</name> <argument_list>( <argument><expr><name>bsIn</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>rbCtr</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>( <argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"%s: sorry, I couldn't find any block boundaries.\n"</literal></expr></argument>,
<argument><expr><name>progName</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: splitting into blocks\n"</literal></expr></argument>, <argument><expr><name>progName</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inFile</name> <operator>=</operator> <call><name>fopen</name> <argument_list>( <argument><expr><name>inFileName</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>inFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: can't open `%s'\n"</literal></expr></argument>, <argument><expr><name>progName</name></expr></argument>, <argument><expr><name>inFileName</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bsIn</name> <operator>=</operator> <call><name>bsOpenReadStream</name> <argument_list>( <argument><expr><name>inFile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>blockCRC</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>bsWr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bitsRead</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>outFile</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wrBlock</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>True</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>bsGetBit</name><argument_list>(<argument><expr><name>bsIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>buffHi</name> <operator>=</operator> <operator>(</operator><name>buffHi</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>buffLo</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>buffLo</name> <operator>=</operator> <operator>(</operator><name>buffLo</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bitsRead</name> <operator>==</operator> <literal type="number">47</literal><operator>+</operator><name><name>rbStart</name><index>[<expr><name>wrBlock</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>blockCRC</name> <operator>=</operator> <operator>(</operator><name>buffHi</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>buffLo</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>outFile</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>bitsRead</name> <operator>&gt;=</operator> <name><name>rbStart</name><index>[<expr><name>wrBlock</name></expr>]</index></name>
<operator>&amp;&amp;</operator> <name>bitsRead</name> <operator>&lt;=</operator> <name><name>rbEnd</name><index>[<expr><name>wrBlock</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bsPutBit</name> <argument_list>( <argument><expr><name>bsWr</name></expr></argument>, <argument><expr><name>b</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bitsRead</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bitsRead</name> <operator>==</operator> <name><name>rbEnd</name><index>[<expr><name>wrBlock</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>outFile</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bsPutUChar</name> <argument_list>( <argument><expr><name>bsWr</name></expr></argument>, <argument><expr><literal type="number">0x17</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>bsPutUChar</name> <argument_list>( <argument><expr><name>bsWr</name></expr></argument>, <argument><expr><literal type="number">0x72</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bsPutUChar</name> <argument_list>( <argument><expr><name>bsWr</name></expr></argument>, <argument><expr><literal type="number">0x45</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>bsPutUChar</name> <argument_list>( <argument><expr><name>bsWr</name></expr></argument>, <argument><expr><literal type="number">0x38</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bsPutUChar</name> <argument_list>( <argument><expr><name>bsWr</name></expr></argument>, <argument><expr><literal type="number">0x50</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>bsPutUChar</name> <argument_list>( <argument><expr><name>bsWr</name></expr></argument>, <argument><expr><literal type="number">0x90</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bsPutUInt32</name> <argument_list>( <argument><expr><name>bsWr</name></expr></argument>, <argument><expr><name>blockCRC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bsClose</name> <argument_list>( <argument><expr><name>bsWr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>outFile</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>wrBlock</name> <operator>&gt;=</operator> <name>rbCtr</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>wrBlock</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else
if <condition>(<expr><name>bitsRead</name> <operator>==</operator> <name><name>rbStart</name><index>[<expr><name>wrBlock</name></expr>]</index></name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>Char</name><modifier>*</modifier></type> <name>split</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>ofs</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>BZ_MAX_FILENAME</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>outFileName</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>outFileName</name></expr></argument>, <argument><expr><name>inFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>split</name> <operator>=</operator> <call><name>strrchr</name> <argument_list>(<argument><expr><name>outFileName</name></expr></argument>, <argument><expr><name>BZ_SPLIT_SYM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>split</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>split</name> <operator>=</operator> <name>outFileName</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>split</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ofs</name> <operator>=</operator> <name>split</name> <operator>-</operator> <name>outFileName</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>split</name></expr></argument>, <argument><expr><literal type="string">"rec%5d"</literal></expr></argument>, <argument><expr><name>wrBlock</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>split</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>outFileName</name></expr></argument>, <argument><expr><name>inFileName</name> <operator>+</operator> <name>ofs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>endsInBz2</name><argument_list>(<argument><expr><name>outFileName</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>strcat</name> <argument_list>( <argument><expr><name>outFileName</name></expr></argument>, <argument><expr><literal type="string">".bz2"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" writing block %d to `%s' ...\n"</literal></expr></argument>,
<argument><expr><name>wrBlock</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>outFileName</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>outFile</name> <operator>=</operator> <call><name>fopen</name> <argument_list>( <argument><expr><name>outFileName</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>outFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: can't write `%s'\n"</literal></expr></argument>,
<argument><expr><name>progName</name></expr></argument>, <argument><expr><name>outFileName</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bsWr</name> <operator>=</operator> <call><name>bsOpenWriteStream</name> <argument_list>( <argument><expr><name>outFile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bsPutUChar</name> <argument_list>( <argument><expr><name>bsWr</name></expr></argument>, <argument><expr><name>BZ_HDR_B</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bsPutUChar</name> <argument_list>( <argument><expr><name>bsWr</name></expr></argument>, <argument><expr><name>BZ_HDR_Z</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bsPutUChar</name> <argument_list>( <argument><expr><name>bsWr</name></expr></argument>, <argument><expr><name>BZ_HDR_h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bsPutUChar</name> <argument_list>( <argument><expr><name>bsWr</name></expr></argument>, <argument><expr><name>BZ_HDR_0</name> <operator>+</operator> <literal type="number">9</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bsPutUChar</name> <argument_list>( <argument><expr><name>bsWr</name></expr></argument>, <argument><expr><literal type="number">0x31</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>bsPutUChar</name> <argument_list>( <argument><expr><name>bsWr</name></expr></argument>, <argument><expr><literal type="number">0x41</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bsPutUChar</name> <argument_list>( <argument><expr><name>bsWr</name></expr></argument>, <argument><expr><literal type="number">0x59</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>bsPutUChar</name> <argument_list>( <argument><expr><name>bsWr</name></expr></argument>, <argument><expr><literal type="number">0x26</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bsPutUChar</name> <argument_list>( <argument><expr><name>bsWr</name></expr></argument>, <argument><expr><literal type="number">0x53</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>bsPutUChar</name> <argument_list>( <argument><expr><name>bsWr</name></expr></argument>, <argument><expr><literal type="number">0x59</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: finished\n"</literal></expr></argument>, <argument><expr><name>progName</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






</unit>
