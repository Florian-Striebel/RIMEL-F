<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bzip2/unzcrash.c">





























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bzlib.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_BLOCK</name></cpp:macro> <cpp:value>1000000</cpp:value></cpp:define>

<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>uchar</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_BLOCK_OUT</name></cpp:macro> <cpp:value>(M_BLOCK + 1000000)</cpp:value></cpp:define>
<decl_stmt><decl><type><name>uchar</name></type> <name><name>inbuf</name><index>[<expr><name>M_BLOCK</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uchar</name></type> <name><name>outbuf</name><index>[<expr><name>M_BLOCK_OUT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uchar</name></type> <name><name>zbuf</name><index>[<expr><name>M_BLOCK</name> <operator>+</operator> <literal type="number">600</literal> <operator>+</operator> <operator>(</operator><name>M_BLOCK</name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nIn</name></decl>, <decl><type ref="prev"/><name>nOut</name></decl>, <decl><type ref="prev"/><name>nZ</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>bzerrorstrings</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"OK"</literal></expr>
,<expr><literal type="string">"SEQUENCE_ERROR"</literal></expr>
,<expr><literal type="string">"PARAM_ERROR"</literal></expr>
,<expr><literal type="string">"MEM_ERROR"</literal></expr>
,<expr><literal type="string">"DATA_ERROR"</literal></expr>
,<expr><literal type="string">"DATA_ERROR_MAGIC"</literal></expr>
,<expr><literal type="string">"IO_ERROR"</literal></expr>
,<expr><literal type="string">"UNEXPECTED_EOF"</literal></expr>
,<expr><literal type="string">"OUTBUFF_FULL"</literal></expr>
,<expr><literal type="string">"???"</literal></expr>
,<expr><literal type="string">"???"</literal></expr>
,<expr><literal type="string">"???"</literal></expr>
,<expr><literal type="string">"???"</literal></expr>
,<expr><literal type="string">"???"</literal></expr>
,<expr><literal type="string">"???"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>flip_bit</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name>bit</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>byteno</name> <init>= <expr><name>bit</name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bitno</name> <init>= <expr><name>bit</name> <operator>%</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uchar</name></type> <name>mask</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bitno</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>zbuf</name><index>[<expr><name>byteno</name></expr>]</index></name> <operator>^=</operator> <name>mask</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"usage: unzcrash filename\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fopen</name> <argument_list>( <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"unzcrash: can't open %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nIn</name> <operator>=</operator> <call><name>fread</name> <argument_list>( <argument><expr><name>inbuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>M_BLOCK</name></expr></argument>, <argument><expr><name>f</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%d bytes read\n"</literal></expr></argument>, <argument><expr><name>nIn</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nZ</name> <operator>=</operator> <name>M_BLOCK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>BZ2_bzBuffToBuffCompress</name> <argument_list>(
<argument><expr><name>zbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nZ</name></expr></argument>, <argument><expr><name>inbuf</name></expr></argument>, <argument><expr><name>nIn</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>r</name> <operator>==</operator> <name>BZ_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%d after compression\n"</literal></expr></argument>, <argument><expr><name>nZ</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>bit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bit</name> <operator>&lt;</operator> <name>nZ</name><operator>*</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>bit</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"bit %d "</literal></expr></argument>, <argument><expr><name>bit</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flip_bit</name> <argument_list>( <argument><expr><name>bit</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nOut</name> <operator>=</operator> <name>M_BLOCK_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>BZ2_bzBuffToBuffDecompress</name> <argument_list>(
<argument><expr><name>outbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nOut</name></expr></argument>, <argument><expr><name>zbuf</name></expr></argument>, <argument><expr><name>nZ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" %d %s "</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>bzerrorstrings</name><index>[<expr><operator>-</operator><name>r</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>BZ_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nOut</name> <operator>!=</operator> <name>nIn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"nIn/nOut mismatch %d %d\n"</literal></expr></argument>, <argument><expr><name>nIn</name></expr></argument>, <argument><expr><name>nOut</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nOut</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>inbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>outbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"mismatch at %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>nOut</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"really ok!\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>flip_bit</name> <argument_list>( <argument><expr><name>bit</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
assert (nOut == nIn);
for (i = 0; i &lt; nOut; i++) {
if (inbuf[i] != outbuf[i]) {
fprintf ( stderr, "difference at %d !\n", i );
return 1;
}
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"all ok\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
