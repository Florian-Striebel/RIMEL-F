<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bsnmp/gensnmptree/gensnmptree.c">











































































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ERR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;err.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"support.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asn1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snmp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snmpagent.h"</cpp:file></cpp:include>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>asn_subid_t</name></type> <name><name>prefix</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFIX_LEN</name></cpp:macro> <cpp:value>(sizeof(prefix) / sizeof(prefix[0]))</cpp:value></cpp:define>

<decl_stmt><decl><type><name>u_int</name></type> <name>tree_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file_prefix</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>localincs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>debug</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>usgtxt</name><index>[]</index></name> <init>= <expr><literal type="string">"\
Generate SNMP tables.\n\
usage: gensnmptree [-dEeFfhlt] [-I directory] [-i infile] [-p prefix]\n\
[name]...\n\
options:\n\
-d debug mode\n\
-E extract the named or all enums and bits only\n\
-e extract the named oids or enums\n\
-F generate functions for -E into a .c file\n\
-f generate functions for -E into the header\n\
-h print this info\n\
-I directory add directory to include path\n\
-i ifile read from the named file instead of stdin\n\
-l generate local include directives\n\
-p prefix prepend prefix to file and variable names\n\
-t generate a .def file\n\
"</literal></expr></init></decl>;</decl_stmt>




<enum>enum <name>op</name> <block>{

<decl><name>OP_GEN</name></decl>,


<decl><name>OP_EXTRACT</name></decl>,


<decl><name>OP_TREE</name></decl>,


<decl><name>OP_ENUMS</name></decl>,
}</block>;</enum>




<enum>enum <name>gen_funcs</name> <block>{

<decl><name>GEN_FUNCS_NONE</name></decl>,


<decl><name>GEN_FUNCS_H</name></decl>,


<decl><name>GEN_FUNCS_C</name></decl>,
}</block>;</enum>




<enum>enum <name>ntype</name> <block>{
<decl><name>NODE_LEAF</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>NODE_TREE</name></decl>,
<decl><name>NODE_ENTRY</name></decl>,
<decl><name>NODE_COLUMN</name></decl>
}</block>;</enum>

<enum>enum <block>{
<decl><name>FL_GET</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
<decl><name>FL_SET</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,
}</block>;</enum>

<struct_decl>struct <name>node</name>;</struct_decl>
<expr_stmt><expr><call><name>TAILQ_HEAD</name><argument_list>(<argument><expr><name>node_list</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<struct>struct <name>node</name> <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>ntype</name></name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asn_subid_t</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>node</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>lno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>flags</name></decl>;</decl_stmt>

<union>union <block>{
<struct>struct <name>tree</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>node_list</name></name></type> <name>subs</name></decl>;</decl_stmt>
}</block> <decl><name>tree</name></decl>;</struct>

<struct>struct <name>entry</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>node_list</name></name></type> <name>subs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>subtypes</name><index>[<expr><name>SNMP_INDEXES_MAX</name></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>entry</name></decl>;</struct>

<struct>struct <name>leaf</name> <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>snmp_syntax</name></name></type> <name>syntax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>subtype</name></decl>;</decl_stmt>
}</block> <decl><name>leaf</name></decl>;</struct>

<struct>struct <name>column</name> <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>snmp_syntax</name></name></type> <name>syntax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>subtype</name></decl>;</decl_stmt>
}</block> <decl><name>column</name></decl>;</struct>
}</block> <decl><name>u</name></decl>;</union>
}</block>;</struct>

<struct>struct <name>func</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<macro><name>LIST_ENTRY</name><argument_list>(<argument>func</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>
}</block>;</struct>

<expr_stmt><expr><specifier>static</specifier> <macro><name>LIST_HEAD</name><argument_list>(<argument/>, <argument>func</argument>)</argument_list></macro> <name>funcs</name> <operator>=</operator> <call><name>LIST_HEAD_INITIALIZER</name><argument_list>(<argument><expr><name>funcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<struct>struct <name>enums</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>value</name></decl>;</decl_stmt>
<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>enums</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>
}</block>;</struct>

<struct>struct <name>type</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>from_fname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>from_lno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>syntax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_enum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_bits</name></decl>;</decl_stmt>
<macro><name>TAILQ_HEAD</name><argument_list>(<argument/>, <argument>enums</argument>)</argument_list></macro> <expr_stmt><expr><name>enums</name></expr>;</expr_stmt>
<macro><name>LIST_ENTRY</name><argument_list>(<argument>type</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>
}</block>;</struct>

<expr_stmt><expr><specifier>static</specifier> <macro><name>LIST_HEAD</name><argument_list>(<argument/>, <argument>type</argument>)</argument_list></macro> <name>types</name> <operator>=</operator> <call><name>LIST_HEAD_INITIALIZER</name><argument_list>(<argument><expr><name>types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>report</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list> <name>__dead2</name> <name>__printflike</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>report_node</name><argument_list>(<argument><expr><specifier>const</specifier> struct <name>node</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list>
<name>__dead2</name> <name>__printflike</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></decl>;</decl_stmt>





<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>xalloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"allocing %zu bytes"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ptr</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>savestr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>strcpy</name><argument_list>(<argument><expr><call><name>xalloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<struct>struct <name>input</name> <block>{
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>lno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<macro><name>LIST_ENTRY</name><argument_list>(<argument>input</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>
}</block>;</struct>
<expr_stmt><expr><specifier>static</specifier> <macro><name>LIST_HEAD</name><argument_list>(<argument/>, <argument>input</argument>)</argument_list></macro> <name>inputs</name> <operator>=</operator> <call><name>LIST_HEAD_INITIALIZER</name><argument_list>(<argument><expr><name>inputs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PATHS</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>u_int</name></type> <name>npaths</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>u_int</name></type> <name>stdpaths</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>paths</name><index>[<expr><name>MAX_PATHS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="string">"/usr/share/snmp/defs"</literal></expr>,
<expr><literal type="string">"/usr/local/share/snmp/defs"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>pbchar</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>path_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>npaths</name> <operator>&gt;=</operator> <name>MAX_PATHS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"too many -I directives"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>paths</name><index>[<expr><name>npaths</name> <operator>-</operator> <name>stdpaths</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paths</name><index>[<expr><name>npaths</name> <operator>-</operator> <name>stdpaths</name></expr>]</index></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>stdpaths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>paths</name><index>[<expr><name>npaths</name> <operator>-</operator> <name>stdpaths</name></expr>]</index></name> <operator>=</operator> <call><name>savestr</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>npaths</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>input_new</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>input</name></name> <modifier>*</modifier></type><name>ip</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ip</name> <operator>=</operator> <call><name>xalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ip</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>lno</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>fname</name></name> <operator>=</operator> <call><name>savestr</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>savestr</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LIST_INSERT_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inputs</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name> <operator>=</operator> <name>ip</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>input_close</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>input</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LIST_REMOVE</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name> <operator>=</operator> <call><name>LIST_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inputs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FILE</name> <modifier>*</modifier></type>
<name>tryopen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fn</name> <operator>=</operator> <call><name>savestr</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>fn</name> <operator>=</operator> <call><name>xalloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>fp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>input_fopen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>loc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>tryopen</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>input_new</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>loc</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>input</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>path</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>tryopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>input_new</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>paths</name><index>[<expr><name>p</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>tryopen</name><argument_list>(<argument><expr><name><name>paths</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>input_new</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>paths</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"cannot open '%s'"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>tgetc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pbchar</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>pbchar</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pbchar</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>c</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>input</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>getc</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>c</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>input_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>tungetc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pbchar</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pbchar</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></function>





<enum>enum <name>tok</name> <block>{
<decl><name>TOK_EOF</name> <init>= <expr><literal type="number">0200</literal></expr></init></decl>,
<decl><name>TOK_NUM</name></decl>,
<decl><name>TOK_STR</name></decl>,
<decl><name>TOK_ACCESS</name></decl>,
<decl><name>TOK_TYPE</name></decl>,
<decl><name>TOK_ENUM</name></decl>,
<decl><name>TOK_TYPEDEF</name></decl>,
<decl><name>TOK_DEFTYPE</name></decl>,
<decl><name>TOK_INCLUDE</name></decl>,
<decl><name>TOK_FILENAME</name></decl>,
<decl><name>TOK_BITS</name></decl>,
}</block>;</enum>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>tok</name></name></type> <name>tok</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>val</name></decl>;</decl_stmt>
}</block> <decl><name><name>keywords</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"GET"</literal></expr>, <expr><name>TOK_ACCESS</name></expr>, <expr><name>FL_GET</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SET"</literal></expr>, <expr><name>TOK_ACCESS</name></expr>, <expr><name>FL_SET</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"NULL"</literal></expr>, <expr><name>TOK_TYPE</name></expr>, <expr><name>SNMP_SYNTAX_NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"INTEGER"</literal></expr>, <expr><name>TOK_TYPE</name></expr>, <expr><name>SNMP_SYNTAX_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"INTEGER32"</literal></expr>, <expr><name>TOK_TYPE</name></expr>, <expr><name>SNMP_SYNTAX_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"UNSIGNED32"</literal></expr>, <expr><name>TOK_TYPE</name></expr>, <expr><name>SNMP_SYNTAX_GAUGE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"OCTETSTRING"</literal></expr>, <expr><name>TOK_TYPE</name></expr>, <expr><name>SNMP_SYNTAX_OCTETSTRING</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"IPADDRESS"</literal></expr>, <expr><name>TOK_TYPE</name></expr>, <expr><name>SNMP_SYNTAX_IPADDRESS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"OID"</literal></expr>, <expr><name>TOK_TYPE</name></expr>, <expr><name>SNMP_SYNTAX_OID</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"TIMETICKS"</literal></expr>, <expr><name>TOK_TYPE</name></expr>, <expr><name>SNMP_SYNTAX_TIMETICKS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"COUNTER"</literal></expr>, <expr><name>TOK_TYPE</name></expr>, <expr><name>SNMP_SYNTAX_COUNTER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"GAUGE"</literal></expr>, <expr><name>TOK_TYPE</name></expr>, <expr><name>SNMP_SYNTAX_GAUGE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"COUNTER64"</literal></expr>, <expr><name>TOK_TYPE</name></expr>, <expr><name>SNMP_SYNTAX_COUNTER64</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ENUM"</literal></expr>, <expr><name>TOK_ENUM</name></expr>, <expr><name>SNMP_SYNTAX_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"BITS"</literal></expr>, <expr><name>TOK_BITS</name></expr>, <expr><name>SNMP_SYNTAX_OCTETSTRING</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"typedef"</literal></expr>, <expr><name>TOK_TYPEDEF</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"include"</literal></expr>, <expr><name>TOK_INCLUDE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXSTR</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>str</name><index>[<expr><name>MAXSTR</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>u_long</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>saved_token</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>report</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"line %u: "</literal></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>lno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"context: \""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>tgetc</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>report_node</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>node</name></name> <modifier>*</modifier></type><name>np</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"line %u, node %s: "</literal></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>lno</name></name></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>savetok</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>savestr</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>gettoken_internal</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>type</name></name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>saved_token</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>saved_token</name></expr>;</expr_stmt>
<expr_stmt><expr><name>saved_token</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>c</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<label><name>again</name>:</label>



<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>tgetc</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>lno</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>TOK_EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isascii</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"unexpected character %#2x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>u_int</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>tgetc</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>lno</name></name><operator>++</operator></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"unexpected EOF in comment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"():|-"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>c</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><name>c</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <literal type="char">'&gt;'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>tgetc</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"filename too long '%s...'"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>TOK_FILENAME</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>tgetc</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tungetc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"number too long '%s...'"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>TOK_NUM</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>tgetc</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isalnum</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'_'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tungetc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"string too long '%s...'"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>




<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>keywords</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>str</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>keywords</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>keywords</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>val</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>keywords</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>tok</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>

<macro><name>LIST_FOREACH</name><argument_list>(<argument>t</argument>, <argument>&amp;types</argument>, <argument>link</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>syntax</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>TOK_DEFTYPE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><operator>(</operator><name>TOK_STR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isprint</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%u: unexpected character '%c'"</literal></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>lno</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%u: unexpected character 0x%02x"</literal></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>lno</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>u_int</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>gettoken</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tok</name> <init>= <expr><call><name>gettoken_internal</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>debug</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TOK_EOF</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"EOF "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>TOK_NUM</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"NUM(%lu) "</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>TOK_STR</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"STR(%s) "</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>TOK_ACCESS</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ACCESS(%lu) "</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>TOK_TYPE</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"TYPE(%lu) "</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>TOK_ENUM</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ENUM "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>TOK_BITS</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"BITS "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>TOK_TYPEDEF</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"TYPEDEF "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>TOK_DEFTYPE</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"DEFTYPE(%s,%lu) "</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>TOK_INCLUDE</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"INCLUDE "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>TOK_FILENAME</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FILENAME "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>&lt;</operator> <name>TOK_EOF</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isprint</name><argument_list>(<argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"'%c' "</literal></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%02x "</literal></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>tok</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>pushback</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>tok</name></name></type> <name>tok</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>saved_token</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>saved_token</name> <operator>=</operator> <name>tok</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name><name>struct</name> <name>type</name></name> <modifier>*</modifier></type>
<name>make_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>type</name></name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>xalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>savestr</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>is_enum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>syntax</name></name> <operator>=</operator> <name>SNMP_SYNTAX_NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>from_fname</name></name> <operator>=</operator> <call><name>savestr</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>from_lno</name></name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>lno</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>enums</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LIST_INSERT_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name>types</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>t</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>u_int</name></type>
<name>parse_type</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>tok</name></name> <modifier>*</modifier></type><name>tok</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>type</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vname</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>subtype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_int</name></type> <name>syntax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>enums</name></name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><name>syntax</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>subtype</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>subtype</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tok</name> <operator>==</operator> <name>TOK_ENUM</name> <operator>||</operator> <operator>*</operator><name>tok</name> <operator>==</operator> <name>TOK_BITS</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>vname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>make_type</name><argument_list>(<argument><expr><name>vname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>is_enum</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>tok</name> <operator>==</operator> <name>TOK_ENUM</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>is_bits</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>tok</name> <operator>==</operator> <name>TOK_BITS</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>syntax</name></name> <operator>=</operator> <name>syntax</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gettoken</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="char">'('</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"'(' expected after ENUM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>tok</name> <operator>=</operator> <call><name>gettoken</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>TOK_EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"unexpected EOF in ENUM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>xalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tok</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>tok</name> <operator>=</operator> <call><name>gettoken</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>TOK_EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"unexpected EOF in ENUM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>long</name><operator>)</operator><name>val</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tok</name> <operator>!=</operator> <name>TOK_NUM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"need value for ENUM/BITS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gettoken</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>TOK_STR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"need string in ENUM/BITS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>savetok</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>enums</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>tok</name> <operator>=</operator> <call><name>gettoken</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>TOK_EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"unexpected EOF in ENUM/BITS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><operator>*</operator><name>tok</name> <operator>!=</operator> <literal type="char">')'</literal></expr>)</condition>;</do>
<expr_stmt><expr><operator>*</operator><name>tok</name> <operator>=</operator> <call><name>gettoken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>tok</name> <operator>==</operator> <name>TOK_DEFTYPE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>tok</name> <operator>=</operator> <call><name>gettoken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>tok</name> <operator>=</operator> <call><name>gettoken</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="char">'|'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>gettoken</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>TOK_STR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"subtype expected after '|'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>subtype</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>subtype</name> <operator>=</operator> <call><name>savetok</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>tok</name> <operator>=</operator> <call><name>gettoken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>syntax</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name><name>struct</name> <name>node</name></name> <modifier>*</modifier></type>
<name>parse</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>tok</name></name></type> <name>tok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>node</name></name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>node</name></name> <modifier>*</modifier></type><name>sub</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>index_count</name></decl>;</decl_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>xalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>node</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>lno</name></name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>lno</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>!=</operator> <literal type="char">'('</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"'(' expected at begin of node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gettoken</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>TOK_NUM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"node id expected after opening '('"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <name>ASN_MAXID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"subid too large '%lu'"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <operator>(</operator><name>asn_subid_t</name><operator>)</operator><name>val</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gettoken</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>TOK_STR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"node name expected after '(' ID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>savetok</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tok</name> <operator>=</operator> <call><name>gettoken</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>TOK_TYPE</name> <operator>||</operator> <name>tok</name> <operator>==</operator> <name>TOK_DEFTYPE</name> <operator>||</operator>
<name>tok</name> <operator>==</operator> <name>TOK_ENUM</name> <operator>||</operator> <name>tok</name> <operator>==</operator> <name>TOK_BITS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>subtype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>syntax</name> <init>= <expr><call><name>parse_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tok</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subtype</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_STR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>NODE_LEAF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>leaf</name><operator>.</operator><name>func</name></name> <operator>=</operator> <call><name>savetok</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>leaf</name><operator>.</operator><name>syntax</name></name> <operator>=</operator> <name>syntax</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>leaf</name><operator>.</operator><name>subtype</name></name> <operator>=</operator> <name>subtype</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tok</name> <operator>=</operator> <call><name>gettoken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>NODE_COLUMN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>column</name><operator>.</operator><name>syntax</name></name> <operator>=</operator> <name>syntax</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>column</name><operator>.</operator><name>subtype</name></name> <operator>=</operator> <name>subtype</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><name>tok</name> <operator>!=</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>!=</operator> <name>TOK_ACCESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"access keyword or ')' expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <operator>(</operator><name>u_int</name><operator>)</operator><name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tok</name> <operator>=</operator> <call><name>gettoken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>NODE_ENTRY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>entry</name><operator>.</operator><name>subs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>entry</name><operator>.</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tok</name> <operator>=</operator> <call><name>gettoken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_TYPE</name> <operator>||</operator> <name>tok</name> <operator>==</operator> <name>TOK_DEFTYPE</name> <operator>||</operator>
<name>tok</name> <operator>==</operator> <name>TOK_ENUM</name> <operator>||</operator> <name>tok</name> <operator>==</operator> <name>TOK_BITS</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>subtype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>syntax</name> <init>= <expr><call><name>parse_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tok</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>subtype</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>index_count</name> <operator>==</operator> <name>SNMP_INDEXES_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"too many table indexes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>entry</name><operator>.</operator><name>subtypes</name><index>[<expr><name>index_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>subtype</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>entry</name><operator>.</operator><name>index</name></name> <operator>|=</operator>
<name>syntax</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>SNMP_INDEX_SHIFT</name> <operator>*</operator> <name>index_count</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>entry</name><operator>.</operator><name>index</name></name> <operator>|=</operator> <name>index_count</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>index_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"need at least one index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>!=</operator> <name>TOK_STR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"function name expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>entry</name><operator>.</operator><name>func</name></name> <operator>=</operator> <call><name>savetok</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <call><name>gettoken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>tok</name> <operator>!=</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sub</name> <operator>=</operator> <call><name>parse</name><argument_list>(<argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>entry</name><operator>.</operator><name>subs</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tok</name> <operator>=</operator> <call><name>gettoken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>NODE_TREE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tree</name><operator>.</operator><name>subs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>tok</name> <operator>!=</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sub</name> <operator>=</operator> <call><name>parse</name><argument_list>(<argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tree</name><operator>.</operator><name>subs</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tok</name> <operator>=</operator> <call><name>gettoken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><name>node</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name><name>struct</name> <name>node</name></name> <modifier>*</modifier></type>
<name>parse_top</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>tok</name></name></type> <name>tok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>type</name></name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>parse</name><argument_list>(<argument><expr><name>tok</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_TYPEDEF</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>gettoken</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>TOK_STR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"type name expected after typedef"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>make_type</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <call><name>gettoken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>is_enum</name></name> <operator>=</operator> <operator>(</operator><name>tok</name> <operator>==</operator> <name>TOK_ENUM</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>is_bits</name></name> <operator>=</operator> <operator>(</operator><name>tok</name> <operator>==</operator> <name>TOK_BITS</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>syntax</name></name> <operator>=</operator> <call><name>parse_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tok</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pushback</name><argument_list>(<argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_INCLUDE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>gettoken</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>TOK_FILENAME</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"filename expected in include directive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>input_fopen</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"'(' or 'typedef' expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>gen_node</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>node</name></name> <modifier>*</modifier></type><name>np</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>u_int</name></type> <name>idx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>node</name></name> <modifier>*</modifier></type><name>sub</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>syntax</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <name>ASN_MAXOIDLEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report_node</name><argument_list>(<argument><expr><name>np</name></expr></argument>, <argument><expr><literal type="string">"OID too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_TREE</name></expr>)</condition> <block>{<block_content>
<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>sub</argument>, <argument>&amp;np-&gt;u.tree.subs</argument>, <argument>link</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>gen_node</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name><operator>--</operator></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_ENTRY</name></expr>)</condition> <block>{<block_content>
<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>sub</argument>, <argument>&amp;np-&gt;u.entry.subs</argument>, <argument>link</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>gen_node</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>entry</name><operator>.</operator><name>index</name></name></expr></argument>,
<argument><expr><name><name>np</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>entry</name><operator>.</operator><name>func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name><operator>--</operator></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>np</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>FL_GET</name><operator>|</operator><name>FL_SET</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name><operator>--</operator></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" {{ %u, {"</literal></expr></argument>, <argument><expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>oid</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" %u,"</literal></expr></argument>, <argument><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" }}, \"%s\", "</literal></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_COLUMN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>syntax</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>column</name><operator>.</operator><name>syntax</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"SNMP_NODE_COLUMN, "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>syntax</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>leaf</name><operator>.</operator><name>syntax</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"SNMP_NODE_LEAF, "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><name>syntax</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SNMP_SYNTAX_NULL</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"SNMP_SYNTAX_NULL, "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_INTEGER</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"SNMP_SYNTAX_INTEGER, "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_OCTETSTRING</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"SNMP_SYNTAX_OCTETSTRING, "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_IPADDRESS</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"SNMP_SYNTAX_IPADDRESS, "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_OID</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"SNMP_SYNTAX_OID, "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_TIMETICKS</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"SNMP_SYNTAX_TIMETICKS, "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_COUNTER</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"SNMP_SYNTAX_COUNTER, "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_GAUGE</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"SNMP_SYNTAX_GAUGE, "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_COUNTER64</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"SNMP_SYNTAX_COUNTER64, "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_NOSUCHOBJECT</name></expr>:</case>
<case>case <expr><name>SNMP_SYNTAX_NOSUCHINSTANCE</name></expr>:</case>
<case>case <expr><name>SNMP_SYNTAX_ENDOFMIBVIEW</name></expr>:</case>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_COLUMN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%s, "</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%s, "</literal></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>leaf</name><operator>.</operator><name>func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FL_SET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"|SNMP_NODE_CANSET"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">", %#x, NULL, NULL },\n"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name><operator>--</operator></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>gen_header</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>node</name></name> <modifier>*</modifier></type><name>np</name></decl></parameter>, <parameter><decl><type><name>u_int</name></type> <name>oidlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>f</name><index>[<expr><name>MAXSTR</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>node</name></name> <modifier>*</modifier></type><name>sub</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>func</name></name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>oidlen</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_TREE</name></expr>)</condition> <block>{<block_content>
<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>sub</argument>, <argument>&amp;np-&gt;u.tree.subs</argument>, <argument>link</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>gen_header</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>oidlen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_ENTRY</name></expr>)</condition> <block>{<block_content>
<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>sub</argument>, <argument>&amp;np-&gt;u.entry.subs</argument>, <argument>link</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>gen_header</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>oidlen</name></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>entry</name><operator>.</operator><name>func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>np</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>FL_GET</name><operator>|</operator><name>FL_SET</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_COLUMN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>func</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"column without function (%s) - probably "</literal>
<literal type="string">"outside of a table"</literal></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>leaf</name><operator>.</operator><name>func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<macro><name>LIST_FOREACH</name><argument_list>(<argument>ptr</argument>, <argument>&amp;funcs</argument>, <argument>link</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>xalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>savestr</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LIST_INSERT_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name>funcs</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"int %s(struct snmp_context *, "</literal>
<literal type="string">"struct snmp_value *, u_int, u_int, "</literal>
<literal type="string">"enum snmp_op);\n"</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define LEAF_%s %u\n"</literal></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>gen_table</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>node</name></name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>asn_oid</name></name></type> <name>oid</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#include &lt;sys/types.h&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#include &lt;stdio.h&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDINT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#include &lt;stdint.h&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>localincs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#include \"asn1.h\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#include \"snmp.h\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#include \"snmpagent.h\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#include &lt;bsnmp/asn1.h&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#include &lt;bsnmp/snmp.h&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#include &lt;bsnmp/snmpagent.h&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#include \"%stree.h\"\n"</literal></expr></argument>, <argument><expr><name>file_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"const struct snmp_node %sctree[] = {\n"</literal></expr></argument>, <argument><expr><name>file_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oid</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>PREFIX_LEN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>oid</name><operator>.</operator><name>subs</name></name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gen_node</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"};\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_syntax</name><parameter_list>(<parameter><decl><type><name>u_int</name></type> <name>syntax</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>keywords</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>str</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>keywords</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tok</name> <operator>==</operator> <name>TOK_TYPE</name> <operator>&amp;&amp;</operator>
<name><name>keywords</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>==</operator> <name>syntax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name><name>keywords</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>gen_tree</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>node</name></name> <modifier>*</modifier></type><name>np</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>node</name></name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%*s(%u %s"</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>level</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>NODE_LEAF</name></expr>:</case>
<expr_stmt><expr><call><name>print_syntax</name><argument_list>(<argument><expr><name><name>np</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>leaf</name><operator>.</operator><name>syntax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>leaf</name><operator>.</operator><name>subtype</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" | %s"</literal></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>leaf</name><operator>.</operator><name>subtype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s%s%s)\n"</literal></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>leaf</name><operator>.</operator><name>func</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>np</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FL_GET</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">" GET"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>np</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FL_SET</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">" SET"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NODE_TREE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>TAILQ_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>np</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tree</name><operator>.</operator><name>subs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">")\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>sp</argument>, <argument>&amp;np-&gt;u.tree.subs</argument>, <argument>link</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>gen_tree</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%*s)\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>level</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>NODE_ENTRY</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" :"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>SNMP_INDEX_COUNT</name><argument_list>(<argument><expr><name><name>np</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>entry</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>print_syntax</name><argument_list>(<argument><expr><call><name>SNMP_INDEX</name><argument_list>(<argument><expr><name><name>np</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>entry</name><operator>.</operator><name>index</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>entry</name><operator>.</operator><name>subtypes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" | %s"</literal></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>entry</name><operator>.</operator><name>subtypes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>entry</name><operator>.</operator><name>func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>sp</argument>, <argument>&amp;np-&gt;u.entry.subs</argument>, <argument>link</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>gen_tree</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%*s)\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>level</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NODE_COLUMN</name></expr>:</case>
<expr_stmt><expr><call><name>print_syntax</name><argument_list>(<argument><expr><name><name>np</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>column</name><operator>.</operator><name>syntax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>column</name><operator>.</operator><name>subtype</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" | %s"</literal></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>column</name><operator>.</operator><name>subtype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s)\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>np</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FL_GET</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">" GET"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>np</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FL_SET</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">" SET"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>extract</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>node</name></name> <modifier>*</modifier></type><name>np</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>iname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>node</name></name> <modifier>*</modifier></type><name>sub</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <name>ASN_MAXOIDLEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report_node</name><argument_list>(<argument><expr><name>np</name></expr></argument>, <argument><expr><literal type="string">"OID too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name><name>idx</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;=</operator> <name>ASN_MAXOIDLEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report_node</name><argument_list>(<argument><expr><name>np</name></expr></argument>, <argument><expr><literal type="string">"OID too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define OID_%s%s\t%u\n"</literal></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>iname</name></expr> ?</condition><then> <expr><name>iname</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define OIDLEN_%s%s\t%u\n"</literal></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>iname</name></expr> ?</condition><then> <expr><name>iname</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name><name>idx</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define OIDX_%s%s\t{ %u, {"</literal></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>iname</name></expr> ?</condition><then> <expr><name>iname</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name><name>idx</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>oid</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" %u,"</literal></expr></argument>, <argument><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>idx</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" %u,"</literal></expr></argument>, <argument><expr><name><name>idx</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" } }\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_TREE</name></expr>)</condition> <block>{<block_content>
<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>sub</argument>, <argument>&amp;np-&gt;u.tree.subs</argument>, <argument>link</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>extract</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>iname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_ENTRY</name></expr>)</condition> <block>{<block_content>
<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>sub</argument>, <argument>&amp;np-&gt;u.entry.subs</argument>, <argument>link</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>extract</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>iname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name><operator>--</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>gen_extract</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>node</name></name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>asn_oid</name></name></type> <name>oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>asn_oid</name></name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>ul</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>idx</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>iname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>iname</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>iname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"cannot allocated index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>iname</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <name>iname</name></expr>;</init> <condition><expr><operator>*</operator><name>e</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>e</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"bad index syntax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>e</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ul</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"bad index syntax '%s'"</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"bad index syntax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>idx</name><operator>.</operator><name>len</name></name> <operator>==</operator> <name>ASN_MAXOIDLEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"index oid too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>idx</name><operator>.</operator><name>subs</name><index>[<expr><name><name>idx</name><operator>.</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ul</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>oid</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>PREFIX_LEN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>oid</name><operator>.</operator><name>subs</name></name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>extract</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>, <argument><expr><name>iname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>iname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>iname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_sub_order</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>node</name></name> <modifier>*</modifier></type><name>np</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>node_list</name></name> <modifier>*</modifier></type><name>subs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>node</name></name> <modifier>*</modifier></type><name>sub</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asn_subid_t</name></type> <name>maxid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>sub</argument>, <argument>subs</argument>, <argument>link</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name> <operator>&amp;&amp;</operator> <name><name>sub</name><operator>-&gt;</operator><name>id</name></name> <operator>&lt;=</operator> <name>maxid</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report_node</name><argument_list>(<argument><expr><name>np</name></expr></argument>, <argument><expr><literal type="string">"subids not ordered at %s"</literal></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>maxid</name> <operator>=</operator> <name><name>sub</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_tree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>node</name></name> <modifier>*</modifier></type><name>np</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>node</name></name> <modifier>*</modifier></type><name>sub</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_LEAF</name> <operator>||</operator> <name><name>np</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_COLUMN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>np</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>FL_GET</name><operator>|</operator><name>FL_SET</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tree_size</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_ENTRY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>check_sub_order</name><argument_list>(<argument><expr><name>np</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>np</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>entry</name><operator>.</operator><name>subs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>sub</argument>, <argument>&amp;np-&gt;u.entry.subs</argument>, <argument>link</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sub</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>NODE_COLUMN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report_node</name><argument_list>(<argument><expr><name>np</name></expr></argument>, <argument><expr><literal type="string">"entry subnode '%s' is not "</literal>
<literal type="string">"a column"</literal></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>check_tree</name><argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>check_sub_order</name><argument_list>(<argument><expr><name>np</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>np</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tree</name><operator>.</operator><name>subs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>sub</argument>, <argument>&amp;np-&gt;u.tree.subs</argument>, <argument>link</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>check_tree</name><argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>merge_subs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>node_list</name></name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>node_list</name></name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>node</name></name> <modifier>*</modifier></type><name>n1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>n2</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>TAILQ_EMPTY</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n2</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>n1</argument>, <argument>s1</argument>, <argument>link</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>n1</name><operator>-&gt;</operator><name>id</name></name> <operator>&gt;=</operator> <name><name>n2</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n1</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>n1</name><operator>-&gt;</operator><name>id</name></name> <operator>&gt;</operator> <name><name>n2</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TAILQ_INSERT_BEFORE</name><argument_list>(<argument><expr><name>n1</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>n1</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_TREE</name> <operator>&amp;&amp;</operator> <name><name>n2</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_TREE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>n1</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>n2</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"trees to merge must have "</literal>
<literal type="string">"same name '%s' '%s'"</literal></expr></argument>, <argument><expr><name><name>n1</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><name><name>n2</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>merge_subs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>n1</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tree</name><operator>.</operator><name>subs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>n2</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tree</name><operator>.</operator><name>subs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>n1</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_ENTRY</name> <operator>&amp;&amp;</operator>
<name><name>n2</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_ENTRY</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>n1</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>n2</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"entries to merge must have "</literal>
<literal type="string">"same name '%s' '%s'"</literal></expr></argument>, <argument><expr><name><name>n1</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><name><name>n2</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>n1</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>entry</name><operator>.</operator><name>index</name></name> <operator>!=</operator> <name><name>n2</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>entry</name><operator>.</operator><name>index</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"entries to merge must have "</literal>
<literal type="string">"same index '%s'"</literal></expr></argument>, <argument><expr><name><name>n1</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>n1</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>entry</name><operator>.</operator><name>func</name></name></expr></argument>,
<argument><expr><name><name>n2</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>entry</name><operator>.</operator><name>func</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"entries to merge must have "</literal>
<literal type="string">"same op '%s'"</literal></expr></argument>, <argument><expr><name><name>n1</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>merge_subs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>n1</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>entry</name><operator>.</operator><name>subs</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>n2</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>entry</name><operator>.</operator><name>subs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"entities to merge must be both "</literal>
<literal type="string">"trees or both entries: %s, %s"</literal></expr></argument>,
<argument><expr><name><name>n1</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>n2</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>merge</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>node</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>node</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>root</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>root</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>root</name><operator>)</operator><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>NODE_TREE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"root is not a tree"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>NODE_TREE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"can merge only with tree"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>root</name><operator>)</operator><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name><name>t</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"trees to merge must have same id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>merge_subs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>root</name><operator>)</operator><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>tree</name><operator>.</operator><name>subs</name></name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tree</name><operator>.</operator><name>subs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>unminus</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"_"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>void</name></type>
<name>gen_enum_funcs</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>type</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ccode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ccode</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"static inline "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"int\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"isok_%s(enum %s s)\n"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"{\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" switch (s) {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>enums</name></name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>e</argument>, <argument>&amp;t-&gt;enums</argument>, <argument>link</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\t case %s_"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unminus</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">":\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" return (1);\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" }\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" return (0);\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"}\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ccode</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"static inline "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"const char *\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"tostr_%s(enum %s s)\n"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"{\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" static const char *vals[] = { STRING_%s };\n"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" if (isok_%s(s))\n"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" return (vals[(int)s - STROFF_%s]);\n"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" return (\"%s???\");\n"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"}\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ccode</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"static inline "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"int\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"fromstr_%s(const char *str, enum %s *s)\n"</literal></expr></argument>,
<argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"{\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" static const char *vals[] = { STRING_%s };\n"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" for (size_t i = 0; i &lt; sizeof(vals)/sizeof(vals[0]); i++) {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" if (vals[i] != NULL &amp;&amp; strcmp(vals[i], str) == 0) {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" *s = i + STROFF_%s;\n"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" return (1);\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" }\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" }\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" return (0);\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>void</name></type>
<name>gen_enum</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>type</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dof</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>enums</name></name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>min</name> <init>= <expr><name>LONG_MAX</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#ifndef %s_defined__\n"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define %s_defined__\n"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"/*\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" * From %s:%u\n"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>from_fname</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>from_lno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" */\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"enum %s {\n"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>e</argument>, <argument>&amp;t-&gt;enums</argument>, <argument>link</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\t%s_"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unminus</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" = %ld,\n"</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>&lt;</operator> <name>min</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>min</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"};\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define STROFF_%s %ld\n"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define STRING_%s \\\n"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>e</argument>, <argument>&amp;t-&gt;enums</argument>, <argument>link</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\t[%ld] = \"%s_"</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>-</operator> <name>min</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unminus</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\",\\\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dof</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#ifdef SNMPENUM_FUNCS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gen_enum_funcs</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#endif\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#endif /* %s_defined__ */\n"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>gen_enum_funcs_str</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>type</name></name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<macro><name>LIST_FOREACH</name><argument_list>(<argument>t</argument>, <argument>&amp;types</argument>, <argument>link</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>is_enum</name></name> <operator>||</operator> <name><name>t</name><operator>-&gt;</operator><name>is_bits</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gen_enum_funcs</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>gen_all_enum_funcs</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ccode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>type</name></name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<macro><name>LIST_FOREACH</name><argument_list>(<argument>t</argument>, <argument>&amp;types</argument>, <argument>link</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>is_enum</name></name> <operator>||</operator> <name><name>t</name><operator>-&gt;</operator><name>is_bits</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gen_enum_funcs</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>ccode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gen_enums</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dof</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>type</name></name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<macro><name>LIST_FOREACH</name><argument_list>(<argument>t</argument>, <argument>&amp;types</argument>, <argument>link</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>is_enum</name></name> <operator>||</operator> <name><name>t</name><operator>-&gt;</operator><name>is_bits</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gen_enum</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>dof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>int</name></type>
<name>extract_enum</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gen_funcs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>type</name></name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<macro><name>LIST_FOREACH</name><argument_list>(<argument>t</argument>, <argument>&amp;types</argument>, <argument>link</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>is_enum</name></name> <operator>||</operator> <name><name>t</name><operator>-&gt;</operator><name>is_bits</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gen_enum</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>gen_funcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type>
<name>extract_all_enums</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gen_funcs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>type</name></name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<macro><name>LIST_FOREACH</name><argument_list>(<argument>t</argument>, <argument>&amp;types</argument>, <argument>link</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>is_enum</name></name> <operator>||</operator> <name><name>t</name><operator>-&gt;</operator><name>is_bits</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gen_enum</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>gen_funcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type>
<name>make_enums</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>gen_funcs</name></name></type> <name>gen_funcs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>gen_funcs</name> <operator>==</operator> <name>GEN_FUNCS_C</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gen_all_enum_funcs</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>gen_enum_funcs_str</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"enum not found: %s"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>extract_all_enums</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>gen_funcs</name> <operator>==</operator> <name>GEN_FUNCS_H</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>extract_enum</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>gen_funcs</name> <operator>==</operator> <name>GEN_FUNCS_H</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"enum not found: %s"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>make_table</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>node</name></name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gen_funcs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>fname</name><index>[<expr><name>MAXPATHLEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"%stree.h"</literal></expr></argument>, <argument><expr><name>file_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: "</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>gen_header</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>PREFIX_LEN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n#ifdef SNMPTREE_TYPES\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gen_enums</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>gen_funcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n#endif /* SNMPTREE_TYPES */\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define %sCTREE_SIZE %u\n"</literal></expr></argument>, <argument><expr><name>file_prefix</name></expr></argument>, <argument><expr><name>tree_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"extern const struct snmp_node %sctree[];\n"</literal></expr></argument>, <argument><expr><name>file_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"%stree.c"</literal></expr></argument>, <argument><expr><name>file_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: "</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>gen_table</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>op</name></name></type> <name>op</name> <init>= <expr><name>OP_GEN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>gen_funcs</name></name></type> <name>gen_funcs</name> <init>= <expr><name>GEN_FUNCS_NONE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>infile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>opt</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"dEeFfhI:i:lp:t"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><name>opt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<expr_stmt><expr><name>debug</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'E'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>!=</operator> <name>OP_GEN</name> <operator>&amp;&amp;</operator> <name>op</name> <operator>!=</operator> <name>OP_ENUMS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"-E conflicts with earlier options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <name>OP_ENUMS</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'e'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>!=</operator> <name>OP_GEN</name> <operator>&amp;&amp;</operator> <name>op</name> <operator>!=</operator> <name>OP_EXTRACT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"-e conflicts with earlier options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <name>OP_EXTRACT</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'F'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>gen_funcs</name> <operator>!=</operator> <name>GEN_FUNCS_NONE</name> <operator>&amp;&amp;</operator>
<name>gen_funcs</name> <operator>!=</operator> <name>GEN_FUNCS_C</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"-F conflicts with -f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>gen_funcs</name> <operator>=</operator> <name>GEN_FUNCS_C</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>gen_funcs</name> <operator>!=</operator> <name>GEN_FUNCS_NONE</name> <operator>&amp;&amp;</operator>
<name>gen_funcs</name> <operator>!=</operator> <name>GEN_FUNCS_H</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"-f conflicts with -F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>gen_funcs</name> <operator>=</operator> <name>GEN_FUNCS_H</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>usgtxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<expr_stmt><expr><call><name>path_new</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<expr_stmt><expr><name>infile</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<expr_stmt><expr><name>localincs</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<expr_stmt><expr><name>file_prefix</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>file_prefix</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"tree.c"</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator>
<name>MAXPATHLEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"prefix too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>!=</operator> <name>OP_GEN</name> <operator>&amp;&amp;</operator> <name>op</name> <operator>!=</operator> <name>OP_TREE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"-t conflicts with earlier options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <name>OP_TREE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch></block_content></block></while>

<expr_stmt><expr><name>argc</name> <operator>-=</operator> <name>optind</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name> <operator>+=</operator> <name>optind</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>infile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>input_new</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"&lt;stdin&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>infile</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>infile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>input_new</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>infile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>node</name></name> <modifier>*</modifier></type><name>root</name> <init>= <expr><call><name>parse_top</name><argument_list>(<argument><expr><call><name>gettoken</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tok</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>tok</name> <operator>=</operator> <call><name>gettoken</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>TOK_EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>merge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>root</name></expr></argument>, <argument><expr><call><name>parse_top</name><argument_list>(<argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>root</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>check_tree</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>OP_EXTRACT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"-e requires arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>gen_extract</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"object not found: %s"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>

<case>case <expr><name>OP_ENUMS</name></expr>:</case>
<expr_stmt><expr><call><name>make_enums</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>gen_funcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>

<case>case <expr><name>OP_TREE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"-t allows no arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>gen_tree</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>

<case>case <expr><name>OP_GEN</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"tree generation allows no arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>make_table</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>gen_funcs</name> <operator>==</operator> <name>GEN_FUNCS_H</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
