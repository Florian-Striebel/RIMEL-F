<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bsnmp/snmp_target/target_snmp.c">





























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;syslog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asn1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snmp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snmpmod.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMPTREE_TYPES</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"target_tree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"target_oid.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>lmodule</name></name> <modifier>*</modifier></type><name>target_module</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name></type> <name>oid_target</name> <init>= <expr><name>OIDX_snmpTargetMIB</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name></type> <name>oid_notification</name> <init>= <expr><name>OIDX_snmpNotificationMIB</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint</name></type> <name>reg_target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint</name></type> <name>reg_notification</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>target_lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name></type> <name>oid_udp_domain</name> <init>= <expr><name>OIDX_snmpUDPDomain</name></expr></init></decl>;</decl_stmt>




<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>target_append_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint</name></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>target_decode_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint</name></type></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>target_address</name></name> <modifier>*</modifier></type><name>target_get_address</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>uint</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>target_address</name></name> <modifier>*</modifier></type><name>target_get_next_address</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>uint</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>target_param</name></name> <modifier>*</modifier></type><name>target_get_param</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>uint</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>target_param</name></name> <modifier>*</modifier></type><name>target_get_next_param</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>uint</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>target_notify</name></name> <modifier>*</modifier></type><name>target_get_notify</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>uint</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>target_notify</name></name> <modifier>*</modifier></type><name>target_get_next_notify</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>uint</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type>
<name>op_snmp_target</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier><name>ctx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <name>iidx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>snmp_op</name></name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>snmpd_target_stats</name></name> <modifier>*</modifier></type><name>ctx_stats</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>LEAF_snmpTargetSpinLock</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SNMP_OP_GET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>target_lock</name> <operator>==</operator> <name>INT32_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>target_lock</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name>target_lock</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SNMP_OP_GETNEXT</name></expr>:</case>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>SNMP_OP_SET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>target_lock</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>SNMP_OP_ROLLBACK</name></expr>:</case>

<case>case <expr><name>SNMP_OP_COMMIT</name></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>op</name> <operator>==</operator> <name>SNMP_OP_SET</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOT_WRITEABLE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ctx_stats</name> <operator>=</operator> <call><name>bsnmpd_get_target_stats</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>SNMP_OP_GET</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LEAF_snmpUnavailableContexts</name></expr>:</case>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name><name>ctx_stats</name><operator>-&gt;</operator><name>unavail_contexts</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_snmpUnknownContexts</name></expr>:</case>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name><name>ctx_stats</name><operator>-&gt;</operator><name>unknown_contexts</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>op_snmp_target_addrs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier><name>ctx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <name>iidx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>snmp_op</name></name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>aname</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>target_address</name></name> <modifier>*</modifier></type><name>addrs</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SNMP_OP_GET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>addrs</name> <operator>=</operator> <call><name>target_get_address</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_OP_GETNEXT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>addrs</name> <operator>=</operator> <call><name>target_get_next_address</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>target_append_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name><name>addrs</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_OP_SET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>addrs</name> <operator>=</operator> <call><name>target_get_address</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>LEAF_snmpTargetAddrRowStatus</name> <operator>||</operator>
<name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>RowStatus_createAndWait</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>addrs</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>community</name> <operator>!=</operator> <name>COMM_INITIALIZE</name> <operator>&amp;&amp;</operator>
<name><name>addrs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>StorageType_readOnly</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOT_WRITEABLE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>addrs</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>RowStatus_active</name> <operator>&amp;&amp;</operator>
<name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>RowStatus_destroy</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LEAF_snmpTargetAddrTDomain</name></expr>:</case>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return>
<case>case <expr><name>LEAF_snmpTargetAddrTAddress</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name> <operator>!=</operator> <name>SNMP_UDP_ADDR_SIZ</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>SNMP_UDP_ADDR_SIZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name></expr></argument>, <argument><expr><name><name>addrs</name><operator>-&gt;</operator><name>address</name></name></expr></argument>,
<argument><expr><name>SNMP_UDP_ADDR_SIZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>addrs</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>octets</name></name></expr></argument>,
<argument><expr><name>SNMP_UDP_ADDR_SIZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_snmpTargetAddrTagList</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name> <operator>&gt;=</operator> <name>SNMP_TAG_SIZ</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>addrs</name><operator>-&gt;</operator><name>taglist</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name></expr></argument>, <argument><expr><name><name>addrs</name><operator>-&gt;</operator><name>taglist</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>addrs</name><operator>-&gt;</operator><name>taglist</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>octets</name></name></expr></argument>,
<argument><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>addrs</name><operator>-&gt;</operator><name>taglist</name><index>[<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_snmpTargetAddrParams</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name> <operator>&gt;=</operator> <name>SNMP_ADM_STR32_SIZ</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>addrs</name><operator>-&gt;</operator><name>paramname</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name></expr></argument>, <argument><expr><name><name>addrs</name><operator>-&gt;</operator><name>paramname</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>addrs</name><operator>-&gt;</operator><name>paramname</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>octets</name></name></expr></argument>,
<argument><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>addrs</name><operator>-&gt;</operator><name>paramname</name><index>[<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_snmpTargetAddrRetryCount</name></expr>:</case>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>=</operator> <name><name>addrs</name><operator>-&gt;</operator><name>retry</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>addrs</name><operator>-&gt;</operator><name>retry</name></name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_snmpTargetAddrTimeout</name></expr>:</case>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>=</operator> <name><name>addrs</name><operator>-&gt;</operator><name>timeout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>addrs</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_snmpTargetAddrStorageType</name></expr>:</case>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return>

<case>case <expr><name>LEAF_snmpTargetAddrRowStatus</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>addrs</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>RowStatus_active</name> <operator>&amp;&amp;</operator>
<name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>RowStatus_destroy</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>==</operator> <name>RowStatus_active</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>addrs</name><operator>-&gt;</operator><name>address</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strlen</name><argument_list>(<argument><expr><name><name>addrs</name><operator>-&gt;</operator><name>taglist</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strlen</name><argument_list>(<argument><expr><name><name>addrs</name><operator>-&gt;</operator><name>paramname</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>=</operator> <name><name>addrs</name><operator>-&gt;</operator><name>status</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>addrs</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>RowStatus_createAndWait</name> <operator>||</operator>
<call><name>target_decode_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>aname</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>addrs</name> <operator>=</operator> <call><name>target_new_address</name><argument_list>(<argument><expr><name>aname</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>addrs</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RowStatus_destroy</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>community</name> <operator>!=</operator> <name>COMM_INITIALIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>addrs</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>StorageType_volatile</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>addrs</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>StorageType_readOnly</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>SNMP_OP_COMMIT</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LEAF_snmpTargetAddrTAddress</name></expr>:</case>
<case>case <expr><name>LEAF_snmpTargetAddrTagList</name></expr>:</case>
<case>case <expr><name>LEAF_snmpTargetAddrParams</name></expr>:</case>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_snmpTargetAddrRowStatus</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>addrs</name> <operator>=</operator> <call><name>target_get_address</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>==</operator> <name>RowStatus_destroy</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>target_delete_address</name><argument_list>(<argument><expr><name>addrs</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>==</operator> <name>RowStatus_active</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>target_activate_address</name><argument_list>(<argument><expr><name>addrs</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>SNMP_OP_ROLLBACK</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>addrs</name> <operator>=</operator> <call><name>target_get_address</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LEAF_snmpTargetAddrTAddress</name></expr>:</case>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>addrs</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name></expr></argument>,
<argument><expr><name>SNMP_UDP_ADDR_SIZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_snmpTargetAddrTagList</name></expr>:</case>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>addrs</name><operator>-&gt;</operator><name>taglist</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_snmpTargetAddrParams</name></expr>:</case>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>addrs</name><operator>-&gt;</operator><name>paramname</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_snmpTargetAddrRetryCount</name></expr>:</case>
<expr_stmt><expr><name><name>addrs</name><operator>-&gt;</operator><name>retry</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_snmpTargetAddrTimeout</name></expr>:</case>
<expr_stmt><expr><name><name>addrs</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_snmpTargetAddrRowStatus</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>==</operator> <name>RowStatus_destroy</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>target_delete_address</name><argument_list>(<argument><expr><name>addrs</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<default>default:</default>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LEAF_snmpTargetAddrTDomain</name></expr>:</case>
<return>return <expr><operator>(</operator><call><name>oid_get</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid_udp_domain</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><name>LEAF_snmpTargetAddrTAddress</name></expr>:</case>
<return>return <expr><operator>(</operator><call><name>string_get</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>addrs</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name>SNMP_UDP_ADDR_SIZ</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><name>LEAF_snmpTargetAddrTimeout</name></expr>:</case>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>addrs</name><operator>-&gt;</operator><name>timeout</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_snmpTargetAddrRetryCount</name></expr>:</case>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>addrs</name><operator>-&gt;</operator><name>retry</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_snmpTargetAddrTagList</name></expr>:</case>
<return>return <expr><operator>(</operator><call><name>string_get</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>addrs</name><operator>-&gt;</operator><name>taglist</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><name>LEAF_snmpTargetAddrParams</name></expr>:</case>
<return>return <expr><operator>(</operator><call><name>string_get</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>addrs</name><operator>-&gt;</operator><name>paramname</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><name>LEAF_snmpTargetAddrStorageType</name></expr>:</case>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>addrs</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_snmpTargetAddrRowStatus</name></expr>:</case>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>addrs</name><operator>-&gt;</operator><name>status</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>op_snmp_target_params</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier><name>ctx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <name>iidx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>snmp_op</name></name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>pname</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>target_param</name></name> <modifier>*</modifier></type><name>param</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SNMP_OP_GET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>param</name> <operator>=</operator> <call><name>target_get_param</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_OP_GETNEXT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>param</name> <operator>=</operator> <call><name>target_get_next_param</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>target_append_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_OP_SET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>param</name> <operator>=</operator> <call><name>target_get_param</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>LEAF_snmpTargetParamsRowStatus</name> <operator>||</operator>
<name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>RowStatus_createAndWait</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>param</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>community</name> <operator>!=</operator> <name>COMM_INITIALIZE</name> <operator>&amp;&amp;</operator>
<name><name>param</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>StorageType_readOnly</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOT_WRITEABLE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>RowStatus_active</name> <operator>&amp;&amp;</operator>
<name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>RowStatus_destroy</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LEAF_snmpTargetParamsMPModel</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>SNMP_MPM_SNMP_V1</name> <operator>&amp;&amp;</operator>
<name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>SNMP_MPM_SNMP_V2c</name> <operator>&amp;&amp;</operator>
<name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>SNMP_MPM_SNMP_V3</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>mpmodel</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>mpmodel</name></name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_snmpTargetParamsSecurityModel</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>SNMP_SECMODEL_SNMPv1</name> <operator>&amp;&amp;</operator>
<name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>SNMP_SECMODEL_SNMPv2c</name> <operator>&amp;&amp;</operator>
<name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>SNMP_SECMODEL_USM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>sec_model</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>sec_model</name></name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_snmpTargetParamsSecurityName</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name> <operator>&gt;=</operator> <name>SNMP_ADM_STR32_SIZ</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>secname</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>secname</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>secname</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>octets</name></name></expr></argument>,
<argument><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>secname</name><index>[<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_snmpTargetParamsSecurityLevel</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>SNMP_noAuthNoPriv</name> <operator>&amp;&amp;</operator>
<name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>SNMP_authNoPriv</name> <operator>&amp;&amp;</operator>
<name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>SNMP_authPriv</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>sec_level</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>sec_level</name></name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_snmpTargetParamsStorageType</name></expr>:</case>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return>

<case>case <expr><name>LEAF_snmpTargetParamsRowStatus</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>param</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>RowStatus_active</name> <operator>&amp;&amp;</operator>
<name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>RowStatus_destroy</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>==</operator> <name>RowStatus_active</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>sec_model</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>param</name><operator>-&gt;</operator><name>sec_level</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strlen</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>secname</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>status</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>RowStatus_createAndWait</name> <operator>||</operator>
<call><name>target_decode_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>pname</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>param</name> <operator>=</operator> <call><name>target_new_param</name><argument_list>(<argument><expr><name>pname</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RowStatus_destroy</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>community</name> <operator>!=</operator> <name>COMM_INITIALIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>StorageType_volatile</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>StorageType_readOnly</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>SNMP_OP_COMMIT</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LEAF_snmpTargetParamsSecurityName</name></expr>:</case>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_snmpTargetParamsRowStatus</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>param</name> <operator>=</operator> <call><name>target_get_param</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>==</operator> <name>RowStatus_destroy</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>target_delete_param</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>SNMP_OP_ROLLBACK</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>param</name> <operator>=</operator> <call><name>target_get_param</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>LEAF_snmpTargetParamsRowStatus</name> <operator>||</operator>
<name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>RowStatus_createAndWait</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LEAF_snmpTargetParamsMPModel</name></expr>:</case>
<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>mpmodel</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_snmpTargetParamsSecurityModel</name></expr>:</case>
<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>sec_model</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_snmpTargetParamsSecurityName</name></expr>:</case>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>secname</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>secname</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_snmpTargetParamsSecurityLevel</name></expr>:</case>
<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>sec_level</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_snmpTargetParamsRowStatus</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>==</operator> <name>RowStatus_destroy</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>target_delete_param</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<default>default:</default>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LEAF_snmpTargetParamsMPModel</name></expr>:</case>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>mpmodel</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_snmpTargetParamsSecurityModel</name></expr>:</case>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>sec_model</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_snmpTargetParamsSecurityName</name></expr>:</case>
<return>return <expr><operator>(</operator><call><name>string_get</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>secname</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><name>LEAF_snmpTargetParamsSecurityLevel</name></expr>:</case>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>sec_level</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_snmpTargetParamsStorageType</name></expr>:</case>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_snmpTargetParamsRowStatus</name></expr>:</case>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>status</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>op_snmp_notify</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier><name>ctx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <name>iidx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>snmp_op</name></name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>nname</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>target_notify</name></name> <modifier>*</modifier></type><name>notify</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SNMP_OP_GET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>notify</name> <operator>=</operator> <call><name>target_get_notify</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_OP_GETNEXT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>notify</name> <operator>=</operator> <call><name>target_get_next_notify</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>target_append_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name><name>notify</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_OP_SET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>notify</name> <operator>=</operator> <call><name>target_get_notify</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>LEAF_snmpNotifyRowStatus</name> <operator>||</operator>
<name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>RowStatus_createAndGo</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>notify</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>community</name> <operator>!=</operator> <name>COMM_INITIALIZE</name> <operator>&amp;&amp;</operator>
<name><name>notify</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>StorageType_readOnly</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOT_WRITEABLE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LEAF_snmpNotifyTag</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name> <operator>&gt;=</operator> <name>SNMP_TAG_SIZ</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>notify</name><operator>-&gt;</operator><name>taglist</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name></expr></argument>, <argument><expr><name><name>notify</name><operator>-&gt;</operator><name>taglist</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>notify</name><operator>-&gt;</operator><name>taglist</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>octets</name></name></expr></argument>,
<argument><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>notify</name><operator>-&gt;</operator><name>taglist</name><index>[<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_snmpNotifyType</name></expr>:</case>

<case>case <expr><name>LEAF_snmpNotifyStorageType</name></expr>:</case>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return>
<case>case <expr><name>LEAF_snmpNotifyRowStatus</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>notify</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>RowStatus_active</name> <operator>&amp;&amp;</operator>
<name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>RowStatus_destroy</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>=</operator> <name><name>notify</name><operator>-&gt;</operator><name>status</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>notify</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>RowStatus_createAndGo</name> <operator>||</operator>
<call><name>target_decode_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>nname</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>notify</name> <operator>=</operator> <call><name>target_new_notify</name><argument_list>(<argument><expr><name>nname</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>notify</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RowStatus_destroy</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>community</name> <operator>!=</operator> <name>COMM_INITIALIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>notify</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>StorageType_volatile</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>notify</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>StorageType_readOnly</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>SNMP_OP_COMMIT</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LEAF_snmpNotifyTag</name></expr>:</case>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_snmpNotifyRowStatus</name></expr>:</case>
<expr_stmt><expr><name>notify</name> <operator>=</operator> <call><name>target_get_notify</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>notify</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>==</operator> <name>RowStatus_destroy</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>target_delete_notify</name><argument_list>(<argument><expr><name>notify</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>notify</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RowStatus_active</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>SNMP_OP_ROLLBACK</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>notify</name> <operator>=</operator> <call><name>target_get_notify</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LEAF_snmpNotifyTag</name></expr>:</case>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>notify</name><operator>-&gt;</operator><name>taglist</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_snmpNotifyRowStatus</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>==</operator> <name>RowStatus_destroy</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>target_delete_notify</name><argument_list>(<argument><expr><name>notify</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<default>default:</default>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>


<switch>switch <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LEAF_snmpNotifyTag</name></expr>:</case>
<return>return <expr><operator>(</operator><call><name>string_get</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>notify</name><operator>-&gt;</operator><name>taglist</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><name>LEAF_snmpNotifyType</name></expr>:</case>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name>snmpNotifyType_trap</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_snmpNotifyStorageType</name></expr>:</case>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>notify</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_snmpNotifyRowStatus</name></expr>:</case>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>notify</name><operator>-&gt;</operator><name>status</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>target_append_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>sub</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>name</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>target_decode_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>sub</name> <operator>!=</operator> <name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name></expr>]</index></name> <operator>&gt;=</operator>
<name>SNMP_ADM_STR32_SIZ</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>target_address</name></name> <modifier>*</modifier></type>
<name>target_get_address</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>sub</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>aname</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>target_address</name></name> <modifier>*</modifier></type><name>addrs</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>target_decode_index</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>aname</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>addrs</name> <operator>=</operator> <call><name>target_first_address</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>addrs</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>addrs</name> <operator>=</operator> <call><name>target_next_address</name><argument_list>(<argument><expr><name>addrs</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>aname</name></expr></argument>, <argument><expr><name><name>addrs</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>addrs</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>target_address</name></name> <modifier>*</modifier></type>
<name>target_get_next_address</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type> <name>oid</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>sub</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>aname</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>target_address</name></name> <modifier>*</modifier></type><name>addrs</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>sub</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>target_first_address</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>target_decode_index</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>aname</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>addrs</name> <operator>=</operator> <call><name>target_first_address</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>addrs</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>addrs</name> <operator>=</operator> <call><name>target_next_address</name><argument_list>(<argument><expr><name>addrs</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>aname</name></expr></argument>, <argument><expr><name><name>addrs</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>target_next_address</name><argument_list>(<argument><expr><name>addrs</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>target_param</name></name> <modifier>*</modifier></type>
<name>target_get_param</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>sub</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>pname</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>target_param</name></name> <modifier>*</modifier></type><name>param</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>target_decode_index</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>pname</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>param</name> <operator>=</operator> <call><name>target_first_param</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>param</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>param</name> <operator>=</operator> <call><name>target_next_param</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>pname</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>param</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>target_param</name></name> <modifier>*</modifier></type>
<name>target_get_next_param</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>sub</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>pname</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>target_param</name></name> <modifier>*</modifier></type><name>param</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>sub</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>target_first_param</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>target_decode_index</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>pname</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>param</name> <operator>=</operator> <call><name>target_first_param</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>param</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>param</name> <operator>=</operator> <call><name>target_next_param</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>pname</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>target_next_param</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>target_notify</name></name> <modifier>*</modifier></type>
<name>target_get_notify</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>sub</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>nname</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>target_notify</name></name> <modifier>*</modifier></type><name>notify</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>target_decode_index</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>nname</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>notify</name> <operator>=</operator> <call><name>target_first_notify</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>notify</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>notify</name> <operator>=</operator> <call><name>target_next_notify</name><argument_list>(<argument><expr><name>notify</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>nname</name></expr></argument>, <argument><expr><name><name>notify</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>notify</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>target_notify</name></name> <modifier>*</modifier></type>
<name>target_get_next_notify</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>sub</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>nname</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>target_notify</name></name> <modifier>*</modifier></type><name>notify</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>sub</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>target_first_notify</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>target_decode_index</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>nname</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>notify</name> <operator>=</operator> <call><name>target_first_notify</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>notify</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>notify</name> <operator>=</operator> <call><name>target_next_notify</name><argument_list>(<argument><expr><name>notify</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>nname</name></expr></argument>, <argument><expr><name><name>notify</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>target_next_notify</name><argument_list>(<argument><expr><name>notify</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>target_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lmodule</name></name> <modifier>*</modifier></type><name>mod</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>argc</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><name><name>argv</name><index>[]</index></name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>target_module</name> <operator>=</operator> <name>mod</name></expr>;</expr_stmt>
<expr_stmt><expr><name>target_lock</name> <operator>=</operator> <call><name>random</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>target_fini</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>target_flush_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>or_unregister</name><argument_list>(<argument><expr><name>reg_target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>or_unregister</name><argument_list>(<argument><expr><name>reg_notification</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>target_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>reg_target</name> <operator>=</operator> <call><name>or_register</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid_target</name></expr></argument>,
<argument><expr><literal type="string">"The MIB module for managing SNMP Management Targets."</literal></expr></argument>,
<argument><expr><name>target_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reg_notification</name> <operator>=</operator> <call><name>or_register</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid_notification</name></expr></argument>,
<argument><expr><literal type="string">"The MIB module for configuring generation of SNMP notifications."</literal></expr></argument>,
<argument><expr><name>target_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>target_dump</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>target_comment</name><index>[]</index></name> <init>= \
<expr><literal type="string">"This module implements SNMP Management Target MIB Module defined in RFC 3413."</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>snmp_module</name></name></type> <name>config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_module</name></name></type> <name>config</name> <init>= <expr><block>{
<expr><operator>.</operator><name>comment</name> <operator>=</operator> <name>target_comment</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>target_init</name></expr>,
<expr><operator>.</operator><name>fini</name> <operator>=</operator> <name>target_fini</name></expr>,
<expr><operator>.</operator><name>start</name> <operator>=</operator> <name>target_start</name></expr>,
<expr><operator>.</operator><name>tree</name> <operator>=</operator> <name>target_ctree</name></expr>,
<expr><operator>.</operator><name>dump</name> <operator>=</operator> <name>target_dump</name></expr>,
<expr><operator>.</operator><name>tree_size</name> <operator>=</operator> <name>target_CTREE_SIZE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
