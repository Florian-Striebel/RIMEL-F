<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bsnmp/snmpd/config.c">































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/un.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;syslog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snmpmod.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snmpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree.h"</cpp:file></cpp:include>


























<enum>enum <name>input_type</name> <block>{
<decl><name>INPUT_FILE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>INPUT_STRING</name></decl>
}</block>;</enum>
<struct>struct <name>input</name> <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>input_type</name></name></type> <name>type</name></decl>;</decl_stmt>
<union>union <block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>lno</name></decl>;</decl_stmt>
}</block> <decl><name>file</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>macro</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>left</name></decl>;</decl_stmt>
}</block> <decl><name>str</name></decl>;</struct>
}</block> <decl><name>u</name></decl>;</union>
<macro><name>LIST_ENTRY</name><argument_list>(<argument>input</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>
}</block>;</struct>
<expr_stmt><expr><specifier>static</specifier> <macro><name>LIST_HEAD</name><argument_list>(<argument/>, <argument>input</argument>)</argument_list></macro> <name>inputs</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>input_fp</name></cpp:macro> <cpp:value>u.file.fp</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>input_filename</name></cpp:macro> <cpp:value>u.file.filename</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>input_lno</name></cpp:macro> <cpp:value>u.file.lno</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>input_macro</name></cpp:macro> <cpp:value>u.str.macro</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>input_str</name></cpp:macro> <cpp:value>u.str.str</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>input_ptr</name></cpp:macro> <cpp:value>u.str.ptr</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>input_left</name></cpp:macro> <cpp:value>u.str.left</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>input_push</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>input_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>







<struct>struct <name>assign</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>snmp_value</name></name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>snmp_scratch</name></name></type> <name>scratch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node_name</name></decl>;</decl_stmt>

<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>assign</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>
}</block>;</struct>
<expr_stmt><expr><specifier>static</specifier> <macro><name>TAILQ_HEAD</name><argument_list>(<argument>assigns</argument>, <argument>assign</argument>)</argument_list></macro> <name>assigns</name> <operator>=</operator> <call><name>TAILQ_HEAD_INITIALIZER</name><argument_list>(<argument><expr><name>assigns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type><name>snmp_ctx</name></decl>;</decl_stmt>

<struct>struct <name>macro</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name></decl>;</decl_stmt>
<macro><name>LIST_ENTRY</name><argument_list>(<argument>macro</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>perm</name></decl>;</decl_stmt>
}</block>;</struct>
<expr_stmt><expr><specifier>static</specifier> <macro><name>LIST_HEAD</name><argument_list>(<argument/>, <argument>macro</argument>)</argument_list></macro> <name>macros</name> <operator>=</operator> <call><name>LIST_HEAD_INITIALIZER</name><argument_list>(<argument><expr><name>macros</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<enum>enum <block>{
<decl><name>TOK_EOF</name> <init>= <expr><literal type="number">0200</literal></expr></init></decl>,
<decl><name>TOK_EOL</name></decl>,
<decl><name>TOK_NUM</name></decl>,
<decl><name>TOK_STR</name></decl>,
<decl><name>TOK_HOST</name></decl>,
<decl><name>TOK_ASSIGN</name></decl>,
<decl><name>TOK_QASSIGN</name></decl>,
}</block>;</enum>


<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>numval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>strval</name><index>[<expr><name>_POSIX2_LINE_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>strvallen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>token</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>jmp_buf</name></type> <name><name>errjmp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>errstk</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERRPUSH</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(setjmp(errjmp[errstk++]))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERRPOP</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>((void)(errstk--))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERRNEXT</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(longjmp(errjmp[--errstk], 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERR</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(longjmp(errjmp[--errstk], 1))</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ignore</name></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>report</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>fmt</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list> <name>__dead2</name> <name>__printflike</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>report</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>input</name></name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vsyslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>LIST_FOREACH</name><argument_list>(<argument>input</argument>, <argument>&amp;inputs</argument>, <argument>link</argument>)</argument_list></macro> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>INPUT_FILE</name></expr>:</case>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">" in file %s line %u"</literal></expr></argument>,
<argument><expr><name><name>input</name><operator>-&gt;</operator><name>input_filename</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>input_lno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>INPUT_STRING</name></expr>:</case>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">" in macro %s pos %td"</literal></expr></argument>,
<argument><expr><name><name>input</name><operator>-&gt;</operator><name>input_macro</name></name></expr></argument>,
<argument><expr><name><name>input</name><operator>-&gt;</operator><name>input_ptr</name></name> <operator>-</operator> <name><name>input</name><operator>-&gt;</operator><name>input_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block>
<expr_stmt><expr><call><name>ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>input_open_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sysdir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>input</name></name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>PATH_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sysdir</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>syspath</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>col</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>,
<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>col</name> <operator>==</operator> <name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"./%s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%.*s/%s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>col</name> <operator>-</operator> <name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>col</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"%s: %m"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>input</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>input</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>input</name><operator>-&gt;</operator><name>input_filename</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>input_filename</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>input_fp</name></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>input_lno</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>INPUT_FILE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LIST_INSERT_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inputs</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>input_open_macro</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>macro</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>input</name></name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>input</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>input</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"%m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>INPUT_STRING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>input_macro</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>input</name><operator>-&gt;</operator><name>input_str</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"%m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>input_str</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>input_ptr</name></name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>input_str</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>input_left</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LIST_INSERT_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inputs</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>input_close</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>input</name></name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>input</name> <operator>=</operator> <call><name>LIST_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inputs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>INPUT_FILE</name></expr>:</case>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>input_fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>input_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>INPUT_STRING</name></expr>:</case>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>input_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>LIST_REMOVE</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>input_close_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>!</operator><call><name>LIST_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inputs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>input_ungetc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"pushing EOF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>input_push</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"pushing third char"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>input_buf</name><index>[<expr><name>input_push</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>input_getc_raw</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>input</name></name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>input_push</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>input_buf</name><index>[<expr><operator>--</operator><name>input_push</name></expr>]</index></name></expr>;</expr_stmt>
<goto>goto <name>ok</name>;</goto>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><operator>(</operator><name>input</name> <operator>=</operator> <call><name>LIST_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inputs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>INPUT_FILE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>getc</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>input_fp</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>input_fp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"read error: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>input_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>input_lno</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>ok</name>;</goto>

<case>case <expr><name>INPUT_STRING</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>input_left</name></name><operator>--</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>input_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name><name>input</name><operator>-&gt;</operator><name>input_ptr</name></name><operator>++</operator></expr>;</expr_stmt>
<goto>goto <name>ok</name>;</goto>
</block_content>}</block></switch>
</block_content>}</block></while>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGGING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"EOF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><name>EOF</name><operator>)</operator></expr>;</return>

<label><name>ok</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGGING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isascii</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>isprint</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"'%#2x'"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"'%c'"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><name>c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>input_getc_plain</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<label><name>again</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>input_getc_raw</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>input_getc_raw</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>again</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_ungetc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="char">'\\'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>input_getc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>macro</name></name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>_POSIX2_LINE_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>namelen</name></decl>;</decl_stmt>

<label><name>again</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>input_getc_plain</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="char">'$'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>c</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>input_getc</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"unexpected EOF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'('</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"expecting '(' after '$'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>namelen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>input_getc</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'_'</literal> <operator>||</operator> <operator>(</operator><name>namelen</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>name</name><index>[<expr><name>namelen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<goto>goto <name>badchar</name>;</goto></block_content></block></else></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"unexpected EOF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><name>namelen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<macro><name>LIST_FOREACH</name><argument_list>(<argument>m</argument>, <argument>&amp;macros</argument>, <argument>link</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"undefined macro '%s'"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>input_open_macro</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>

<label><name>badchar</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isascii</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>isprint</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"unexpected character %#2x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>u_int</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"bad character '%c'"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>input_getnum</name><parameter_list>(<parameter><decl><type><name>u_int</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>u_int</name></type> <name>flen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>cnt</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>numval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>flen</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>cnt</name> <operator>&lt;</operator> <name>flen</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>input_getc</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"bad number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>base</name> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'8'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'9'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>input_ungetc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"bad number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>numval</name> <operator>=</operator> <name>numval</name> <operator>*</operator> <name>base</name> <operator>+</operator> <operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>base</name> <operator>==</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <call><name>isxdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>islower</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>numval</name> <operator>=</operator> <name>numval</name> <operator>*</operator> <name>base</name> <operator>+</operator> <operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>numval</name> <operator>=</operator> <name>numval</name> <operator>*</operator> <name>base</name> <operator>+</operator> <operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>input_ungetc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"bad number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGGING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_gettoken</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
gettoken<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>esc</name><index>[]</index></name> <init>= <expr><literal type="string">"abfnrtv"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>chr</name><index>[]</index></name> <init>= <expr><literal type="string">"\a\b\f\n\r\t\v"</literal></expr></init></decl>;</decl_stmt>




<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>input_getc</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>token</name> <operator>=</operator> <name>TOK_EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isascii</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>badchar</name>;</goto></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>input_getc_plain</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>token</name> <operator>=</operator> <name>TOK_EOL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
<goto>goto <name>badeof</name>;</goto>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>token</name> <operator>=</operator> <name>TOK_EOL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'%'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'='</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'&lt;'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>token</name> <operator>=</operator> <name>c</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>input_getc</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>token</name> <operator>=</operator> <name>TOK_ASSIGN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>input_ungetc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>token</name> <operator>=</operator> <literal type="char">':'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>input_getc</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>token</name> <operator>=</operator> <name>TOK_QASSIGN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>input_ungetc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>badchar</name>;</goto>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>input_getc</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="char">'x'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'X'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>input_getnum</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>input_ungetc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_getnum</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_ungetc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>numval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>input_ungetc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_getnum</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><name>token</name> <operator>=</operator> <name>TOK_NUM</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>strvallen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETC</name><parameter_list>(<parameter><type><name>C</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((c = input_getc()) == EOF) goto badeof; if (!isascii(c) || (!isprint(c) &amp;&amp; c != '\t')) goto badchar; } while(0)</cpp:value></cpp:define>






<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>GETC</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>strval</name><index>[<expr><name>strvallen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>strval</name><index>[<expr><name>strvallen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>GETC</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>end</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>esc</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>strval</name><index>[<expr><name>strvallen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>chr</name><index>[<expr><name>end</name> <operator>-</operator> <name>esc</name></expr>]</index></name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'x'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>input_getnum</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>numval</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'7'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>input_ungetc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_getnum</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>numval</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>strval</name><index>[<expr><name>strvallen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GETC</name></cpp:undef>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>



<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>input_getc</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>badeof</name>;</goto></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">']'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isalnum</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>badchar</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>strval</name><index>[<expr><name>strvallen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>input_getc</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>badeof</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></while>
<while>while <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">']'</literal> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>input_getc</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>badeof</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>badchar</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>strval</name><index>[<expr><name>strvallen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>token</name> <operator>=</operator> <name>TOK_HOST</name><operator>)</operator></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>isalpha</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>badchar</name>;</goto>

</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>strval</name><index>[<expr><name>strvallen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>input_getc</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>badeof</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isalnum</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'_'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>input_ungetc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strval</name><index>[<expr><name>strvallen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>token</name> <operator>=</operator> <name>TOK_STR</name><operator>)</operator></expr>;</return>

<label><name>badeof</name>:</label>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"unexpected EOF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>badchar</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isascii</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>isprint</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"unexpected character %#2x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>u_int</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"bad character '%c'"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGGING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>gettoken</name><parameter_list>()</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_gettoken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isascii</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isprint</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(%c)"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<switch>switch <condition>(<expr><name>token</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TOK_EOF</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(EOF)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TOK_EOL</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(EOL)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TOK_NUM</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(NUM %ju)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name>numval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TOK_STR</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(STR %.*s)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>strvallen</name></expr></argument>, <argument><expr><name>strval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TOK_HOST</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(HOST %s)"</literal></expr></argument>, <argument><expr><name>strval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(%#2x)"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><name>token</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>handle_assignment</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_node</name></name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>vindex</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>assign</name></name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>nodename</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SNMP_NODE_LEAF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>vindex</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name><name>vindex</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<name><name>vindex</name><operator>-&gt;</operator><name>subs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"bad index on leaf node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>vindex</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vindex</name><operator>-&gt;</operator><name>subs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>len</name></name> <operator>+</operator> <name><name>vindex</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>ASN_MAXOIDLEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"resulting OID too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tp</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"%m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <operator>*</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>node_name</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>




<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>var</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>oid</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vindex</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name><name>tp</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>var</name><operator>.</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>vindex</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>







<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nodename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snmp_ctx</name><operator>-&gt;</operator><name>scratch</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>scratch</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snmp_ctx</name><operator>-&gt;</operator><name>var_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>node</name><operator>-&gt;</operator><name>op</name></name>)<argument_list>(<argument><expr><name>snmp_ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>index</name></name></expr></argument>,
<argument><expr><name>SNMP_OP_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"assignment to %s.%s returns %d"</literal></expr></argument>, <argument><expr><name>nodename</name></expr></argument>,
<argument><expr><call><name>asn_oid2str</name><argument_list>(<argument><expr><name>vindex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>TAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>assigns</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>parse_section</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>lmodule</name></name> <modifier>*</modifier></type><name>mod</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>token</name> <operator>!=</operator> <name>TOK_STR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"expecting section name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>strval</name></expr></argument>, <argument><expr><literal type="string">"snmpd"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mod</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ignore</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ignore</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mod</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ignore</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ignore</name> <operator>=</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>strval</name></expr></argument>, <argument><expr><name><name>mod</name><operator>-&gt;</operator><name>section</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>gettoken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>gethost</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>sain</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_DGRAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_protocol</name></name> <operator>=</operator> <name>IPPROTO_UDP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <name>AI_PASSIVE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"%s: unknown hostname"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sain</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>res</name><operator>-&gt;</operator><name>ai_addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sain</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>sain</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sain</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sain</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>sain</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>sain</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>&gt;&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>snmp_node</name></name> <modifier>*</modifier></type>
<name>parse_oid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>varname</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>snmp_node</name></name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name></type> <name><name>ip</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>asn_oid</name></name></type> <name>str_oid</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>node</name> <operator>=</operator> <name>tree</name></expr>;</init> <condition><expr><name>node</name> <operator>&lt;</operator> <operator>&amp;</operator><name><name>tree</name><index>[<expr><name>tree_size</name></expr>]</index></name></expr>;</condition> <incr><expr><name>node</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>varname</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <operator>&amp;</operator><name><name>tree</name><index>[<expr><name>tree_size</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>token</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>gettoken</name><argument_list>()</argument_list></call> <operator>==</operator> <name>TOK_NUM</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>numval</name> <operator>&gt;</operator> <name>ASN_MAXID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"subid too large %#jx"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name>numval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <name>ASN_MAXOIDLEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"index too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gettoken</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>numval</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>str_oid</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str_oid</name><operator>.</operator><name>subs</name><index>[<expr><name><name>str_oid</name><operator>.</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>numval</name></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>gettoken</name><argument_list>()</argument_list></call> <operator>==</operator> <name>TOK_NUM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>str_oid</name><operator>.</operator><name>subs</name><index>[<expr><name><name>str_oid</name><operator>.</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>numval</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gettoken</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>str_oid</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>asn_append_oid</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>token</name> <operator>==</operator> <name>TOK_STR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>strvallen</name> <operator>+</operator> <name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>ASN_MAXOIDLEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"oid too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>strvallen</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>strvallen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>strval</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>gettoken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>token</name> <operator>==</operator> <name>TOK_HOST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gethost</name><argument_list>(<argument><expr><name>strval</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>&gt;</operator> <name>ASN_MAXOIDLEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"index too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>ip</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>gettoken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"bad token in index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>node</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>parse_syntax_null</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier><name>value</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>token</name> <operator>!=</operator> <name>TOK_EOL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"bad NULL syntax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>parse_syntax_integer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>token</name> <operator>!=</operator> <name>TOK_NUM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"bad INTEGER syntax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>numval</name> <operator>&gt;</operator> <literal type="number">0x7fffffff</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"INTEGER too large %ju"</literal></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name>numval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name>numval</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gettoken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>parse_syntax_counter64</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>token</name> <operator>!=</operator> <name>TOK_NUM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"bad COUNTER64 syntax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>counter64</name></name> <operator>=</operator> <name>numval</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gettoken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>parse_syntax_octetstring</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_long</name></type> <name>alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>noct</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <name>TOK_STR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>strvallen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>octets</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>strvallen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memcpy</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>octets</name></name></expr></argument>, <argument><expr><name>strval</name></expr></argument>, <argument><expr><name>strvallen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gettoken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>octets</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>token</name> <operator>!=</operator> <name>TOK_NUM</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ERRPUSH</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>octets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ERRNEXT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>alloc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>token</name> <operator>!=</operator> <name>TOK_NUM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"bad OCTETSTRING syntax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>numval</name> <operator>&gt;</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"byte value too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>alloc</name> <operator>==</operator> <name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>alloc</name> <operator>+=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>noct</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>octets</name></name></expr></argument>, <argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>noct</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"%m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>octets</name></name> <operator>=</operator> <name>noct</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>octets</name><index>[<expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name><operator>++</operator></expr>]</index></name>
<operator>=</operator> <name>numval</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gettoken</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>gettoken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ERRPOP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>parse_syntax_oid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>oid</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>token</name> <operator>!=</operator> <name>TOK_NUM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>token</name> <operator>!=</operator> <name>TOK_NUM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"bad OID syntax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>numval</name> <operator>&gt;</operator> <name>ASN_MAXID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"subid too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>oid</name><operator>.</operator><name>len</name></name> <operator>==</operator> <name>ASN_MAXOIDLEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"OID too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>oid</name><operator>.</operator><name>subs</name><index>[<expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>oid</name><operator>.</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>numval</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gettoken</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>gettoken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>parse_syntax_ipaddress</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name></type> <name><name>ip</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <name>TOK_NUM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>numval</name> <operator>&gt;=</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"ip address part too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>ipaddress</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>numval</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gettoken</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"expecting '.' in ip address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>gettoken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>token</name> <operator>==</operator> <name>TOK_HOST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gethost</name><argument_list>(<argument><expr><name>strval</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>ipaddress</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ip</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>gettoken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"bad ip address syntax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>parse_syntax_uint32</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>token</name> <operator>!=</operator> <name>TOK_NUM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"bad number syntax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>numval</name> <operator>&gt;</operator> <literal type="number">0xffffffff</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"number too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name>numval</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gettoken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>parse_assign</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>varname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>snmp_value</name></name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>asn_oid</name></name></type> <name>vindex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_node</name></name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>parse_oid</name><argument_list>(<argument><expr><name>varname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>token</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"'=' expected, got '%c'"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>gettoken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ignore</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>token</name> <operator>!=</operator> <name>TOK_EOL</name> <operator>&amp;&amp;</operator> <name>token</name> <operator>!=</operator> <name>TOK_EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gettoken</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"unknown variable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>value</name><operator>.</operator><name>syntax</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>syntax</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SNMP_SYNTAX_NULL</name></expr>:</case>
<expr_stmt><expr><call><name>parse_syntax_null</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_INTEGER</name></expr>:</case>
<expr_stmt><expr><call><name>parse_syntax_integer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_COUNTER64</name></expr>:</case>
<expr_stmt><expr><call><name>parse_syntax_counter64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_OCTETSTRING</name></expr>:</case>
<expr_stmt><expr><call><name>parse_syntax_octetstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_OID</name></expr>:</case>
<expr_stmt><expr><call><name>parse_syntax_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_IPADDRESS</name></expr>:</case>
<expr_stmt><expr><call><name>parse_syntax_ipaddress</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_COUNTER</name></expr>:</case>
<case>case <expr><name>SNMP_SYNTAX_GAUGE</name></expr>:</case>
<case>case <expr><name>SNMP_SYNTAX_TIMETICKS</name></expr>:</case>
<expr_stmt><expr><call><name>parse_syntax_uint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_NOSUCHOBJECT</name></expr>:</case>
<case>case <expr><name>SNMP_SYNTAX_NOSUCHINSTANCE</name></expr>:</case>
<case>case <expr><name>SNMP_SYNTAX_ENDOFMIBVIEW</name></expr>:</case>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>ERRPUSH</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_value_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ERRNEXT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>handle_assignment</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vindex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ERRPOP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>parse_define</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>varname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>volatile</specifier></type> <name>string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>size_t</name></type> <name>alloc</name></decl>, <decl><type ref="prev"/><name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>macro</name></name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name>token</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>alloc</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>string</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>alloc</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"%m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ERRPUSH</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ERRNEXT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>input_getc_plain</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>

<while>while <condition>(<expr><name>c</name> <operator>!=</operator> <name>EOF</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'#'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>alloc</name> <operator>==</operator> <name>length</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>alloc</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>new</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>alloc</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"%m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>string</name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>string</name><index>[<expr><name>length</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>input_getc_plain</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>input_getc_plain</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"EOF in macro definition"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<macro><name>LIST_FOREACH</name><argument_list>(<argument>m</argument>, <argument>&amp;macros</argument>, <argument>link</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>varname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>m</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"%m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>varname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"%m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LIST_INSERT_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name>macros</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>string</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>TOK_ASSIGN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>string</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <name>TOK_EOL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ERRPOP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>macro_free_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>macro</name></name> <modifier>*</modifier></type><name>m</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>m1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>LIST_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>macros</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>m</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m1</name> <operator>=</operator> <call><name>LIST_NEXT</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>perm</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LIST_REMOVE</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>m1</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>parse_include</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sysdir</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>fname</name><index>[<expr><name>_POSIX2_LINE_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gettoken</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sysdir</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gettoken</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>TOK_STR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"expecting filename after in .include"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>token</name> <operator>!=</operator> <name>TOK_STR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"expecting filename after in .include"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>strval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sysdir</name> <operator>&amp;&amp;</operator> <call><name>gettoken</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="char">'&gt;'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"expecting '&gt;'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>gettoken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>input_open_file</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>sysdir</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"%s: %m"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>parse_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>lmodule</name></name> <modifier>*</modifier></type><name>mod</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>varname</name><index>[<expr><name>_POSIX2_LINE_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>gettoken</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>TOK_EOF</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <name>TOK_EOL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gettoken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parse_section</name><argument_list>(<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>token</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>gettoken</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>TOK_STR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"keyword expected after '.'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>strval</name></expr></argument>, <argument><expr><literal type="string">"include"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>parse_include</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"unknown keyword '%s'"</literal></expr></argument>, <argument><expr><name>strval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>token</name> <operator>==</operator> <name>TOK_STR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>varname</name></expr></argument>, <argument><expr><name>strval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gettoken</name><argument_list>()</argument_list></call> <operator>==</operator> <name>TOK_ASSIGN</name> <operator>||</operator> <name>token</name> <operator>==</operator> <name>TOK_QASSIGN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>parse_define</name><argument_list>(<argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>parse_assign</name><argument_list>(<argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>token</name> <operator>!=</operator> <name>TOK_EOL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"eol expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>do_rollback</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>assign</name></name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>snmp_node</name></name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>tp</name> <operator>=</operator> <call><name>TAILQ_LAST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>assigns</name></expr></argument>, <argument><expr><name>assigns</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>assigns</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>node</name> <operator>=</operator> <name>tree</name></expr>;</init> <condition><expr><name>node</name> <operator>&lt;</operator> <operator>&amp;</operator><name><name>tree</name><index>[<expr><name>tree_size</name></expr>]</index></name></expr>;</condition> <incr><expr><name>node</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name><name>tp</name><operator>-&gt;</operator><name>node_name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>snmp_ctx</name><operator>-&gt;</operator><name>scratch</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>scratch</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call>(<modifier>*</modifier><name><name>node</name><operator>-&gt;</operator><name>op</name></name>)<argument_list>(<argument><expr><name>snmp_ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>value</name></name></expr></argument>,
<argument><expr><name><name>node</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>index</name></name></expr></argument>,
<argument><expr><name>SNMP_OP_ROLLBACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <operator>&amp;</operator><name><name>tree</name><index>[<expr><name>tree_size</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"failed to find node for "</literal>
<literal type="string">"rollback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>snmp_value_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>do_commit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>assign</name></name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>snmp_node</name></name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>tp</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>assigns</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>assigns</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>node</name> <operator>=</operator> <name>tree</name></expr>;</init> <condition><expr><name>node</name> <operator>&lt;</operator> <operator>&amp;</operator><name><name>tree</name><index>[<expr><name>tree_size</name></expr>]</index></name></expr>;</condition> <incr><expr><name>node</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name><name>tp</name><operator>-&gt;</operator><name>node_name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>snmp_ctx</name><operator>-&gt;</operator><name>scratch</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>scratch</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call>(<modifier>*</modifier><name><name>node</name><operator>-&gt;</operator><name>op</name></name>)<argument_list>(<argument><expr><name>snmp_ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>value</name></name></expr></argument>,
<argument><expr><name><name>node</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>SNMP_OP_COMMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <operator>&amp;</operator><name><name>tree</name><index>[<expr><name>tree_size</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"failed to find node for commit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>snmp_value_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>







<function><type><name>int</name></type>
<name>read_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>lmodule</name></name> <modifier>*</modifier></type><name>lodmod</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>objbuf</name><index>[<expr><name>ASN_OIDSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>idxbuf</name><index>[<expr><name>ASN_OIDSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>ignore</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>input_push</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ERRPUSH</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>input_open_file</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"%s: %m"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ERRPOP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>community</name> <operator>=</operator> <name>COMM_INITIALIZE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>snmp_ctx</name> <operator>=</operator> <call><name>snmp_init_context</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>input_close_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"%m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ERRPUSH</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>do_rollback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_close_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>macro_free_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>snmp_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>parse_file</name><argument_list>(<argument><expr><name>lodmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ERRPOP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>snmp_dep_commit</name><argument_list>(<argument><expr><name>snmp_ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SNMP_ERR_NOERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"init dep failed: %u %s %s"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>,
<argument><expr><call><name>asn_oid2str_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>snmp_ctx</name><operator>-&gt;</operator><name>dep</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name>objbuf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>asn_oid2str_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>snmp_ctx</name><operator>-&gt;</operator><name>dep</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>, <argument><expr><name>idxbuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snmp_dep_rollback</name><argument_list>(<argument><expr><name>snmp_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_rollback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_close_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>macro_free_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>snmp_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>do_commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snmp_dep_finish</name><argument_list>(<argument><expr><name>snmp_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>macro_free_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>snmp_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>define_macro</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>macro</name></name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>m</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LIST_INSERT_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name>macros</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
