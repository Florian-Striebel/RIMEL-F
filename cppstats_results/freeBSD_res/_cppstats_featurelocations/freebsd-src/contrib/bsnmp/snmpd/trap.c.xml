<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bsnmp/snmpd/trap.c">





































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/un.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;syslog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snmpmod.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snmpd.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMPTREE_TYPES</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"oid.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name><name>struct</name> <name>trapsink_list</name></name></type> <name>trapsink_list</name> <init>= <expr><call><name>TAILQ_HEAD_INITIALIZER</name><argument_list>(<argument><expr><name>trapsink_list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>target_addresslist</name></name></type> <name>target_addresslist</name> <init>=
<expr><call><name>SLIST_HEAD_INITIALIZER</name><argument_list>(<argument><expr><name>target_addresslist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>target_paramlist</name></name></type> <name>target_paramlist</name> <init>=
<expr><call><name>SLIST_HEAD_INITIALIZER</name><argument_list>(<argument><expr><name>target_paramlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>target_notifylist</name></name></type> <name>target_notifylist</name> <init>=
<expr><call><name>SLIST_HEAD_INITIALIZER</name><argument_list>(<argument><expr><name>target_notifylist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name></type> <name>oid_begemotTrapSinkTable</name> <init>=
<expr><name>OIDX_begemotTrapSinkTable</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name></type> <name>oid_sysUpTime</name> <init>= <expr><name>OIDX_sysUpTime</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name></type> <name>oid_snmpTrapOID</name> <init>= <expr><name>OIDX_snmpTrapOID</name></expr></init></decl>;</decl_stmt>

<struct>struct <name>trapsink_dep</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>snmp_dependency</name></name></type> <name>dep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name></type> <name><name>comm</name><index>[<expr><name>SNMP_COMMUNITY_MAXLEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>rb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>rb_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>rb_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name></type> <name><name>rb_comm</name><index>[<expr><name>SNMP_COMMUNITY_MAXLEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<enum>enum <block>{
<decl><name>TDEP_STATUS</name> <init>= <expr><literal type="number">0x0001</literal></expr></init></decl>,
<decl><name>TDEP_COMM</name> <init>= <expr><literal type="number">0x0002</literal></expr></init></decl>,
<decl><name>TDEP_VERSION</name> <init>= <expr><literal type="number">0x0004</literal></expr></init></decl>,

<decl><name>TDEP_CREATE</name> <init>= <expr><literal type="number">0x0001</literal></expr></init></decl>,
<decl><name>TDEP_MODIFY</name> <init>= <expr><literal type="number">0x0002</literal></expr></init></decl>,
<decl><name>TDEP_DESTROY</name> <init>= <expr><literal type="number">0x0004</literal></expr></init></decl>,
}</block>;</enum>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>trapsink_create</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>trapsink_dep</name></name> <modifier>*</modifier></type><name>tdep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>trapsink</name></name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>sa</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_RES_UNAVAIL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name><name>tdep</name><operator>-&gt;</operator><name>dep</name><operator>.</operator><name>idx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>TRAPSINK_NOT_READY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>comm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>TRAPSINK_V2</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>socket</name></name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>PF_INET</name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"socket(UDP): %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_RES_UNAVAIL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>shutdown</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>, <argument><expr><name>SHUT_RD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sin_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>subs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>subs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>subs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>subs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>subs</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>connect</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><name><name>sa</name><operator>.</operator><name>sin_len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"connect(%s,%u): %m"</literal></expr></argument>,
<argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name><name>sa</name><operator>.</operator><name>sin_addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>sa</name><operator>.</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tdep</name><operator>-&gt;</operator><name>set</name></name> <operator>&amp;</operator> <name>TDEP_VERSION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name><name>tdep</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tdep</name><operator>-&gt;</operator><name>set</name></name> <operator>&amp;</operator> <name>TDEP_COMM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>comm</name></name></expr></argument>, <argument><expr><name><name>tdep</name><operator>-&gt;</operator><name>comm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>comm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>TRAPSINK_NOT_IN_SERVICE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>tdep</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>TRAPSINK_NOT_READY</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>socket</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>TRAPSINK_ACTIVE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>INSERT_OBJECT_OID</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trapsink_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tdep</name><operator>-&gt;</operator><name>rb</name></name> <operator>|=</operator> <name>TDEP_CREATE</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>trapsink_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>trapsink</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trapsink_list</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>socket</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>trapsink_modify</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>trapsink</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>trapsink_dep</name></name> <modifier>*</modifier></type><name>tdep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>tdep</name><operator>-&gt;</operator><name>rb_status</name></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>status</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdep</name><operator>-&gt;</operator><name>rb_version</name></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>tdep</name><operator>-&gt;</operator><name>rb_comm</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>comm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tdep</name><operator>-&gt;</operator><name>set</name></name> <operator>&amp;</operator> <name>TDEP_STATUS</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>tdep</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>tdep</name><operator>-&gt;</operator><name>rb_status</name></name> <operator>==</operator> <name>TRAPSINK_ACTIVE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>TRAPSINK_NOT_IN_SERVICE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdep</name><operator>-&gt;</operator><name>rb</name></name> <operator>|=</operator> <name>TDEP_MODIFY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tdep</name><operator>-&gt;</operator><name>set</name></name> <operator>&amp;</operator> <name>TDEP_VERSION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name><name>tdep</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tdep</name><operator>-&gt;</operator><name>set</name></name> <operator>&amp;</operator> <name>TDEP_COMM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>comm</name></name></expr></argument>, <argument><expr><name><name>tdep</name><operator>-&gt;</operator><name>comm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tdep</name><operator>-&gt;</operator><name>set</name></name> <operator>&amp;</operator> <name>TDEP_STATUS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tdep</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>tdep</name><operator>-&gt;</operator><name>rb_status</name></name> <operator>!=</operator> <name>TRAPSINK_ACTIVE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>comm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name><name>tdep</name><operator>-&gt;</operator><name>rb_status</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name><name>tdep</name><operator>-&gt;</operator><name>rb_version</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>comm</name></name></expr></argument>, <argument><expr><name><name>tdep</name><operator>-&gt;</operator><name>rb_comm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>TRAPSINK_ACTIVE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdep</name><operator>-&gt;</operator><name>rb</name></name> <operator>|=</operator> <name>TDEP_MODIFY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>trapsink_unmodify</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>trapsink</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>trapsink_dep</name></name> <modifier>*</modifier></type><name>tdep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tdep</name><operator>-&gt;</operator><name>set</name></name> <operator>&amp;</operator> <name>TDEP_STATUS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name><name>tdep</name><operator>-&gt;</operator><name>rb_status</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tdep</name><operator>-&gt;</operator><name>set</name></name> <operator>&amp;</operator> <name>TDEP_VERSION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name><name>tdep</name><operator>-&gt;</operator><name>rb_version</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tdep</name><operator>-&gt;</operator><name>set</name></name> <operator>&amp;</operator> <name>TDEP_COMM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>comm</name></name></expr></argument>, <argument><expr><name><name>tdep</name><operator>-&gt;</operator><name>rb_comm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>trapsink_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier><name>ctx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>trapsink</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>trapsink_dep</name></name> <modifier>*</modifier></type><name>tdep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>TRAPSINK_DESTROY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdep</name><operator>-&gt;</operator><name>rb_status</name></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>status</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdep</name><operator>-&gt;</operator><name>rb</name></name> <operator>|=</operator> <name>TDEP_DESTROY</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>trapsink_undestroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>trapsink</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>trapsink_dep</name></name> <modifier>*</modifier></type><name>tdep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name><name>tdep</name><operator>-&gt;</operator><name>rb_status</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>trapsink_dep</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_dependency</name></name> <modifier>*</modifier></type><name>dep</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>snmp_depop</name></name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>trapsink_dep</name></name> <modifier>*</modifier></type><name>tdep</name> <init>= <expr><operator>(</operator>struct <name>trapsink_dep</name> <operator>*</operator><operator>)</operator><name>dep</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>trapsink</name></name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>FIND_OBJECT_OID</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trapsink_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dep</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SNMP_DEPOP_COMMIT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>tdep</name><operator>-&gt;</operator><name>set</name></name> <operator>&amp;</operator> <name>TDEP_STATUS</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>tdep</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>trapsink_modify</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>tdep</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><literal type="number">4</literal></expr>:</case>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>trapsink_create</name><argument_list>(<argument><expr><name>tdep</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><literal type="number">6</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>trapsink_destroy</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>tdep</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>tdep</name><operator>-&gt;</operator><name>set</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>trapsink_modify</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>tdep</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>SNMP_DEPOP_ROLLBACK</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>tdep</name><operator>-&gt;</operator><name>rb</name></name> <operator>&amp;</operator> <name>TDEP_CREATE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>trapsink_free</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tdep</name><operator>-&gt;</operator><name>rb</name></name> <operator>&amp;</operator> <name>TDEP_MODIFY</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>trapsink_unmodify</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>tdep</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>tdep</name><operator>-&gt;</operator><name>rb</name></name> <operator>&amp;</operator> <name>TDEP_DESTROY</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>trapsink_undestroy</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>tdep</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>SNMP_DEPOP_FINISH</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>tdep</name><operator>-&gt;</operator><name>rb</name></name> <operator>&amp;</operator> <name>TDEP_DESTROY</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>t</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>code</name></name> <operator>==</operator> <name>SNMP_RET_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>trapsink_free</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>op_trapsink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
<parameter><decl><type><name>u_int</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>u_int</name></type> <name>iidx</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>snmp_op</name></name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>trapsink</name></name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name></type> <name><name>ipa</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>asn_oid</name></name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>trapsink_dep</name></name> <modifier>*</modifier></type><name>tdep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SNMP_OP_GETNEXT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call><name>NEXT_OBJECT_OID</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trapsink_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>index_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_OP_GET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call><name>FIND_OBJECT_OID</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trapsink_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_OP_SET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>index_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>iidx</name></expr></argument>, <argument><expr><name>ipa</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call> <operator>||</operator>
<name>port</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>port</name> <operator>&gt;</operator> <literal type="number">65535</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NO_CREATION</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>FIND_OBJECT_OID</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trapsink_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>asn_slice_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name><name>value</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tdep</name> <operator>=</operator> <operator>(</operator>struct <name>trapsink_dep</name> <operator>*</operator><operator>)</operator><call><name>snmp_dep_lookup</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>oid_begemotTrapSinkTable</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tdep</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>trapsink_dep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tdep</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_RES_UNAVAIL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LEAF_begemotTrapSinkStatus</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>tdep</name><operator>-&gt;</operator><name>set</name></name> <operator>&amp;</operator> <name>TDEP_STATUS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case>
<break>break;</break>

<default>default:</default>
<return>return <expr><operator>(</operator><name>SNMP_ERR_WRONG_VALUE</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>tdep</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdep</name><operator>-&gt;</operator><name>set</name></name> <operator>|=</operator> <name>TDEP_STATUS</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>LEAF_begemotTrapSinkComm</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>tdep</name><operator>-&gt;</operator><name>set</name></name> <operator>&amp;</operator> <name>TDEP_COMM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <name>SNMP_COMMUNITY_MAXLEN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_WRONG_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>octets</name></name></expr>;</init>
<condition><expr><name>p</name> <operator>&lt;</operator> <name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>octets</name></name> <operator>+</operator> <name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name></expr>;</condition>
<incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isascii</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>isprint</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_WRONG_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>tdep</name><operator>-&gt;</operator><name>set</name></name> <operator>|=</operator> <name>TDEP_COMM</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>tdep</name><operator>-&gt;</operator><name>comm</name></name></expr></argument>, <argument><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>octets</name></name></expr></argument>,
<argument><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdep</name><operator>-&gt;</operator><name>comm</name><index>[<expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>LEAF_begemotTrapSinkVersion</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>tdep</name><operator>-&gt;</operator><name>set</name></name> <operator>&amp;</operator> <name>TDEP_VERSION</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>TRAPSINK_V1</name> <operator>&amp;&amp;</operator>
<name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>TRAPSINK_V2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_WRONG_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tdep</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdep</name><operator>-&gt;</operator><name>set</name></name> <operator>|=</operator> <name>TDEP_VERSION</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_NAME</name><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOT_WRITEABLE</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>


<case>case <expr><name>SNMP_OP_ROLLBACK</name></expr>:</case>
<case>case <expr><name>SNMP_OP_COMMIT</name></expr>:</case>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LEAF_begemotTrapSinkStatus</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>status</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_begemotTrapSinkComm</name></expr>:</case>
<return>return <expr><operator>(</operator><call><name>string_get</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>comm</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><name>LEAF_begemotTrapSinkVersion</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
<break>break;</break>

</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>snmp_create_v1_trap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>com</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>trap_oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pdu</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pdu</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>community</name></name></expr></argument>, <argument><expr><name>com</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>community</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>SNMP_V1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>SNMP_PDU_TRAP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>enterprise</name></name> <operator>=</operator> <name><name>systemg</name><operator>.</operator><name>object_id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>agent_addr</name></name></expr></argument>, <argument><expr><name><name>snmpd</name><operator>.</operator><name>trap1addr</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>generic_trap</name></name> <operator>=</operator> <name><name>trap_oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name><name>trap_oid</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>specific_trap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>time_stamp</name></name> <operator>=</operator> <call><name>get_ticks</name><argument_list>()</argument_list></call> <operator>-</operator> <name>start_tick</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>nbindings</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>snmp_create_v2_trap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>com</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>trap_oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pdu</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pdu</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>community</name></name></expr></argument>, <argument><expr><name>com</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>community</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>SNMP_V2c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>SNMP_PDU_TRAP2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>request_id</name></name> <operator>=</operator> <call><name>reqid_next</name><argument_list>(<argument><expr><name>trap_reqid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_status</name></name> <operator>=</operator> <name>SNMP_ERR_NOERROR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>var</name> <operator>=</operator> <name>oid_sysUpTime</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name><name>pdu</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>var</name><operator>.</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>syntax</name> <operator>=</operator> <name>SNMP_SYNTAX_TIMETICKS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <call><name>get_ticks</name><argument_list>()</argument_list></call> <operator>-</operator> <name>start_tick</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>var</name> <operator>=</operator> <name>oid_snmpTrapOID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name><name>pdu</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>var</name><operator>.</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>syntax</name> <operator>=</operator> <name>SNMP_SYNTAX_OID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>v</name><operator>.</operator><name>oid</name></name> <operator>=</operator> <operator>*</operator><name>trap_oid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>nbindings</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>snmp_create_v3_trap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>target_param</name></name> <modifier>*</modifier></type><name>target</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>trap_oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>usm_user</name></name> <modifier>*</modifier></type><name>usmuser</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pdu</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pdu</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>SNMP_V3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>SNMP_PDU_TRAP2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>request_id</name></name> <operator>=</operator> <call><name>reqid_next</name><argument_list>(<argument><expr><name>trap_reqid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_status</name></name> <operator>=</operator> <name>SNMP_ERR_NOERROR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>var</name> <operator>=</operator> <name>oid_sysUpTime</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name><name>pdu</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>var</name><operator>.</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>syntax</name> <operator>=</operator> <name>SNMP_SYNTAX_TIMETICKS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <call><name>get_ticks</name><argument_list>()</argument_list></call> <operator>-</operator> <name>start_tick</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>var</name> <operator>=</operator> <name>oid_snmpTrapOID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name><name>pdu</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>var</name><operator>.</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>syntax</name> <operator>=</operator> <name>SNMP_SYNTAX_OID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>v</name><operator>.</operator><name>oid</name></name> <operator>=</operator> <operator>*</operator><name>trap_oid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>nbindings</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_snmpd_engine_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>engine</name><operator>.</operator><name>engine_id</name></name></expr></argument>, <argument><expr><name><name>snmpd_engine</name><operator>.</operator><name>engine_id</name></name></expr></argument>,
<argument><expr><name><name>snmpd_engine</name><operator>.</operator><name>engine_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>engine</name><operator>.</operator><name>engine_len</name></name> <operator>=</operator> <name><name>snmpd_engine</name><operator>.</operator><name>engine_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>engine</name><operator>.</operator><name>engine_boots</name></name> <operator>=</operator> <name><name>snmpd_engine</name><operator>.</operator><name>engine_boots</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>engine</name><operator>.</operator><name>engine_time</name></name> <operator>=</operator> <name><name>snmpd_engine</name><operator>.</operator><name>engine_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>engine</name><operator>.</operator><name>max_msg_size</name></name> <operator>=</operator> <name><name>snmpd_engine</name><operator>.</operator><name>max_msg_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>sec_name</name></name></expr></argument>, <argument><expr><name><name>target</name><operator>-&gt;</operator><name>secname</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>sec_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>security_model</name></name> <operator>=</operator> <name><name>target</name><operator>-&gt;</operator><name>sec_model</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>context_engine_len</name></name> <operator>=</operator> <name><name>snmpd_engine</name><operator>.</operator><name>engine_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>context_engine</name></name></expr></argument>, <argument><expr><name><name>snmpd_engine</name><operator>.</operator><name>engine_id</name></name></expr></argument>,
<argument><expr><name><name>snmpd_engine</name><operator>.</operator><name>engine_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>target</name><operator>-&gt;</operator><name>sec_model</name></name> <operator>==</operator> <name>SNMP_SECMODEL_USM</name> <operator>&amp;&amp;</operator>
<name><name>target</name><operator>-&gt;</operator><name>sec_level</name></name> <operator>!=</operator> <name>SNMP_noAuthNoPriv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>usmuser</name> <operator>=</operator> <call><name>usm_find_user</name><argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>engine</name><operator>.</operator><name>engine_id</name></name></expr></argument>,
<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>engine</name><operator>.</operator><name>engine_len</name></name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>sec_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>usmuser</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>auth_proto</name></name> <operator>=</operator> <name><name>usmuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>auth_proto</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>priv_proto</name></name> <operator>=</operator> <name><name>usmuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>priv_proto</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>auth_key</name></name></expr></argument>, <argument><expr><name><name>usmuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>auth_key</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>auth_key</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>priv_key</name></name></expr></argument>, <argument><expr><name><name>usmuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>priv_key</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>priv_key</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>snmp_pdu_init_secparams</name><argument_list>(<argument><expr><name>pdu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>snmp_send_trap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>trap_oid</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>snmp_pdu</name></name></type> <name>pdu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>trapsink</name></name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>target_notify</name></name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>target_address</name></name> <modifier>*</modifier></type><name>ta</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>target_param</name></name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>sndbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sndlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>ip</name></decl>;</decl_stmt>

<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>t</argument>, <argument>&amp;trapsink_list</argument>, <argument>link</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>TRAPSINK_ACTIVE</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <name>TRAPSINK_V1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_create_v1_trap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pdu</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>comm</name></name></expr></argument>, <argument><expr><name>trap_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_create_v2_trap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pdu</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>comm</name></name></expr></argument>, <argument><expr><name>trap_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>trap_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>v</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> struct <name>snmp_value</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pdu</name><operator>.</operator><name>bindings</name><index>[<expr><name><name>pdu</name><operator>.</operator><name>nbindings</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>v</name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>snmp_pdu_auth_access</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pdu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SNMP_CODE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"send trap to %s failed: no access"</literal></expr></argument>,
<argument><expr><name><name>t</name><operator>-&gt;</operator><name>comm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sndbuf</name> <operator>=</operator> <call><name>buf_alloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"trap send buffer: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snmp_output</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pdu</name></expr></argument>, <argument><expr><name>sndbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sndlen</name></expr></argument>, <argument><expr><literal type="string">"TRAP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>send</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>, <argument><expr><name>sndbuf</name></expr></argument>, <argument><expr><name>sndlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"send: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name> <operator>!=</operator> <name>sndlen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"send: short write %zu/%zu"</literal></expr></argument>,
<argument><expr><name>sndlen</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sndbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>SLIST_FOREACH</name><argument_list>(<argument>n</argument>, <argument>&amp;target_notifylist</argument>, <argument>tn</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>RowStatus_active</name> <operator>||</operator> <name><name>n</name><operator>-&gt;</operator><name>taglist</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<macro><name>SLIST_FOREACH</name><argument_list>(<argument>ta</argument>, <argument>&amp;target_addresslist</argument>, <argument>ta</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tag</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name><name>ta</name><operator>-&gt;</operator><name>taglist</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>taglist</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>tag</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>taglist</name></name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator>
<name><name>tag</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>taglist</name></name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator>
<name><name>tag</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>taglist</name></name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator>
<name><name>tag</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>taglist</name></name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator>
<name><name>tag</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>taglist</name></name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>ta</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>RowStatus_active</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ta</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<macro><name>SLIST_FOREACH</name><argument_list>(<argument>tp</argument>, <argument>&amp;target_paramlist</argument>, <argument>tp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ta</name><operator>-&gt;</operator><name>paramname</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>tp</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>mpmodel</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SNMP_MPM_SNMP_V1</name></expr>:</case>
<expr_stmt><expr><call><name>snmp_create_v1_trap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pdu</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>secname</name></name></expr></argument>, <argument><expr><name>trap_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_MPM_SNMP_V2c</name></expr>:</case>
<expr_stmt><expr><call><name>snmp_create_v2_trap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pdu</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>secname</name></name></expr></argument>, <argument><expr><name>trap_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_MPM_SNMP_V3</name></expr>:</case>
<expr_stmt><expr><call><name>snmp_create_v3_trap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pdu</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><name>trap_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<continue>continue;</continue>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>trap_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>v</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> struct <name>snmp_value</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pdu</name><operator>.</operator><name>bindings</name><index>[<expr><name><name>pdu</name><operator>.</operator><name>nbindings</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>v</name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>snmp_pdu_auth_access</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pdu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SNMP_CODE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"send trap to %s failed: no access"</literal></expr></argument>,
<argument><expr><name><name>t</name><operator>-&gt;</operator><name>comm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sndbuf</name> <operator>=</operator> <call><name>buf_alloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"trap send buffer: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snmp_output</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pdu</name></expr></argument>, <argument><expr><name>sndbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sndlen</name></expr></argument>, <argument><expr><literal type="string">"TRAP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>send</name><argument_list>(<argument><expr><name><name>ta</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>, <argument><expr><name>sndbuf</name></expr></argument>, <argument><expr><name>sndlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"send: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name> <operator>!=</operator> <name>sndlen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"send: short write %zu/%zu"</literal></expr></argument>,
<argument><expr><name>sndlen</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sndbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>




<function><type><name><name>struct</name> <name>snmpd_target_stats</name></name> <modifier>*</modifier></type>
<name>bsnmpd_get_target_stats</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>&amp;</operator><name>snmpd_target_stats</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>target_address</name></name> <modifier>*</modifier></type>
<name>target_first_address</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>SLIST_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>target_addresslist</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>target_address</name></name> <modifier>*</modifier></type>
<name>target_next_address</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>target_address</name></name> <modifier>*</modifier></type><name>addrs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>addrs</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>SLIST_NEXT</name><argument_list>(<argument><expr><name>addrs</name></expr></argument>, <argument><expr><name>ta</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>target_address</name></name> <modifier>*</modifier></type>
<name>target_new_address</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>aname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>target_address</name></name> <modifier>*</modifier></type><name>addrs</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>temp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

<macro><name>SLIST_FOREACH</name><argument_list>(<argument>addrs</argument>, <argument>&amp;target_addresslist</argument>, <argument>ta</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>aname</name></expr></argument>, <argument><expr><name><name>addrs</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>addrs</name> <operator>=</operator> <operator>(</operator>struct <name>target_address</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>addrs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>addrs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>addrs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>addrs</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>aname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>addrs</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>addrs</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <literal type="number">150</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>addrs</name><operator>-&gt;</operator><name>retry</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>prev</name> <operator>=</operator> <call><name>SLIST_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>target_addresslist</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>aname</name></expr></argument>, <argument><expr><name><name>prev</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SLIST_INSERT_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name>target_addresslist</name></expr></argument>, <argument><expr><name>addrs</name></expr></argument>, <argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>addrs</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<macro><name>SLIST_FOREACH</name><argument_list>(<argument>temp</argument>, <argument>&amp;target_addresslist</argument>, <argument>ta</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmp</name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>aname</name></expr></argument>, <argument><expr><name><name>temp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>temp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SLIST_INSERT_AFTER</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>addrs</name></expr></argument>, <argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cmp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SLIST_INSERT_AFTER</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>addrs</name></expr></argument>, <argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"Target address %s exists"</literal></expr></argument>, <argument><expr><name><name>addrs</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>addrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>addrs</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>target_activate_address</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>target_address</name></name> <modifier>*</modifier></type><name>addrs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>sa</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>addrs</name><operator>-&gt;</operator><name>socket</name></name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>PF_INET</name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"socket(UDP): %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_RES_UNAVAIL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>shutdown</name><argument_list>(<argument><expr><name><name>addrs</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>, <argument><expr><name>SHUT_RD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sin_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><name><name>addrs</name><operator>-&gt;</operator><name>address</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>addrs</name><operator>-&gt;</operator><name>address</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>addrs</name><operator>-&gt;</operator><name>address</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>addrs</name><operator>-&gt;</operator><name>address</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>addrs</name><operator>-&gt;</operator><name>address</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name><name>addrs</name><operator>-&gt;</operator><name>address</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>connect</name><argument_list>(<argument><expr><name><name>addrs</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><name><name>sa</name><operator>.</operator><name>sin_len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"connect(%s,%u): %m"</literal></expr></argument>,
<argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name><name>sa</name><operator>.</operator><name>sin_addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>sa</name><operator>.</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name><name>addrs</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>addrs</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RowStatus_active</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>target_delete_address</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>target_address</name></name> <modifier>*</modifier></type><name>addrs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>SLIST_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>target_addresslist</name></expr></argument>, <argument><expr><name>addrs</name></expr></argument>, <argument><expr><name>target_address</name></expr></argument>, <argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>addrs</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>RowStatus_active</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>addrs</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>addrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>target_param</name></name> <modifier>*</modifier></type>
<name>target_first_param</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>SLIST_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>target_paramlist</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>target_param</name></name> <modifier>*</modifier></type>
<name>target_next_param</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>target_param</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>param</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>SLIST_NEXT</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>target_param</name></name> <modifier>*</modifier></type>
<name>target_new_param</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>target_param</name></name> <modifier>*</modifier></type><name>param</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>temp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

<macro><name>SLIST_FOREACH</name><argument_list>(<argument>param</argument>, <argument>&amp;target_paramlist</argument>, <argument>tp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>pname</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>param</name> <operator>=</operator> <operator>(</operator>struct <name>target_param</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>param</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>param</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>pname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>prev</name> <operator>=</operator> <call><name>SLIST_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>target_paramlist</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>pname</name></expr></argument>, <argument><expr><name><name>prev</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SLIST_INSERT_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name>target_paramlist</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>param</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<macro><name>SLIST_FOREACH</name><argument_list>(<argument>temp</argument>, <argument>&amp;target_paramlist</argument>, <argument>tp</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmp</name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>pname</name></expr></argument>, <argument><expr><name><name>temp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>temp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SLIST_INSERT_AFTER</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cmp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SLIST_INSERT_AFTER</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"Target parameter %s exists"</literal></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>param</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>target_delete_param</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>target_param</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>SLIST_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>target_paramlist</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>target_param</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>target_notify</name></name> <modifier>*</modifier></type>
<name>target_first_notify</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>SLIST_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>target_notifylist</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>target_notify</name></name> <modifier>*</modifier></type>
<name>target_next_notify</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>target_notify</name></name> <modifier>*</modifier></type><name>notify</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>notify</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>SLIST_NEXT</name><argument_list>(<argument><expr><name>notify</name></expr></argument>, <argument><expr><name>tn</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>target_notify</name></name> <modifier>*</modifier></type>
<name>target_new_notify</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>target_notify</name></name> <modifier>*</modifier></type><name>notify</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>temp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

<macro><name>SLIST_FOREACH</name><argument_list>(<argument>notify</argument>, <argument>&amp;target_notifylist</argument>, <argument>tn</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>nname</name></expr></argument>, <argument><expr><name><name>notify</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>notify</name> <operator>=</operator> <operator>(</operator>struct <name>target_notify</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>notify</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>notify</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>notify</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>notify</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>nname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>notify</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>prev</name> <operator>=</operator> <call><name>SLIST_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>target_notifylist</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>nname</name></expr></argument>, <argument><expr><name><name>prev</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SLIST_INSERT_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name>target_notifylist</name></expr></argument>, <argument><expr><name>notify</name></expr></argument>, <argument><expr><name>tn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>notify</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<macro><name>SLIST_FOREACH</name><argument_list>(<argument>temp</argument>, <argument>&amp;target_notifylist</argument>, <argument>tn</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmp</name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>nname</name></expr></argument>, <argument><expr><name><name>temp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>temp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SLIST_INSERT_AFTER</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>notify</name></expr></argument>, <argument><expr><name>tn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cmp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SLIST_INSERT_AFTER</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>notify</name></expr></argument>, <argument><expr><name>tn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"Notification target %s exists"</literal></expr></argument>, <argument><expr><name><name>notify</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>notify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>notify</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>target_delete_notify</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>target_notify</name></name> <modifier>*</modifier></type><name>notify</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>SLIST_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>target_notifylist</name></expr></argument>, <argument><expr><name>notify</name></expr></argument>, <argument><expr><name>target_notify</name></expr></argument>, <argument><expr><name>tn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>notify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>target_flush_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>target_address</name></name> <modifier>*</modifier></type><name>addrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>target_param</name></name> <modifier>*</modifier></type><name>param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>target_notify</name></name> <modifier>*</modifier></type><name>notify</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>addrs</name> <operator>=</operator> <call><name>SLIST_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>target_addresslist</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SLIST_REMOVE_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name>target_addresslist</name></expr></argument>, <argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>addrs</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>RowStatus_active</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>addrs</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>addrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>SLIST_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>target_addresslist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>param</name> <operator>=</operator> <call><name>SLIST_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>target_paramlist</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SLIST_REMOVE_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name>target_paramlist</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>SLIST_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>target_paramlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>notify</name> <operator>=</operator> <call><name>SLIST_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>target_notifylist</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SLIST_REMOVE_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name>target_notifylist</name></expr></argument>, <argument><expr><name>tn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>notify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>SLIST_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>target_notifylist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
