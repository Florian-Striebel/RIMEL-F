<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bsnmp/snmpd/snmpmod.h">





































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>snmpmod_h_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snmpmod_h_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/if.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asn1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snmp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snmpagent.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_MOD_ARGS</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>














<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSERT_OBJECT_OID_LINK_INDEX_TYPE</name><parameter_list>(<parameter><type><name>PTR</name></type></parameter>, <parameter><type><name>LIST</name></type></parameter>, <parameter><type><name>LINK</name></type></parameter>, <parameter><type><name>INDEX</name></type></parameter>, <parameter><type><name>SUBF</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {typedef __typeof ((PTR)-&gt;SUBF) _subf_type; _subf_type *_lelem; TAILQ_FOREACH(_lelem, (LIST), LINK) if (asn_compare_oid(&amp;_lelem-&gt;INDEX, &amp;(PTR)-&gt;SUBF.INDEX) &gt; 0)break; if (_lelem == NULL) TAILQ_INSERT_TAIL((LIST), &amp;(PTR)-&gt;SUBF, LINK); else TAILQ_INSERT_BEFORE(_lelem, &amp;(PTR)-&gt;SUBF, LINK); } while (0)</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT_OBJECT_OID_LINK_INDEX_TYPE</name><parameter_list>(<parameter><type><name>LIST</name></type></parameter>, <parameter><type><name>OID</name></type></parameter>, <parameter><type><name>SUB</name></type></parameter>, <parameter><type><name>LINK</name></type></parameter>, <parameter><type><name>INDEX</name></type></parameter>, <parameter><type><name>TYPE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({__typeof (TAILQ_FIRST((LIST))) _lelem; TAILQ_FOREACH(_lelem, (LIST), LINK) if (index_compare(OID, SUB, &amp;_lelem-&gt;INDEX) &lt; 0) break; (TYPE *)(_lelem); })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIND_OBJECT_OID_LINK_INDEX_TYPE</name><parameter_list>(<parameter><type><name>LIST</name></type></parameter>, <parameter><type><name>OID</name></type></parameter>, <parameter><type><name>SUB</name></type></parameter>, <parameter><type><name>LINK</name></type></parameter>, <parameter><type><name>INDEX</name></type></parameter>, <parameter><type><name>TYPE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({__typeof (TAILQ_FIRST((LIST))) _lelem; TAILQ_FOREACH(_lelem, (LIST), LINK) if (index_compare(OID, SUB, &amp;_lelem-&gt;INDEX) == 0) break; (TYPE *)(_lelem); })</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSERT_OBJECT_OID_LINK_INDEX</name><parameter_list>(<parameter><type><name>PTR</name></type></parameter>, <parameter><type><name>LIST</name></type></parameter>, <parameter><type><name>LINK</name></type></parameter>, <parameter><type><name>INDEX</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { __typeof (PTR) _lelem; TAILQ_FOREACH(_lelem, (LIST), LINK) if (asn_compare_oid(&amp;_lelem-&gt;INDEX, &amp;(PTR)-&gt;INDEX) &gt; 0) break; if (_lelem == NULL) TAILQ_INSERT_TAIL((LIST), (PTR), LINK); else TAILQ_INSERT_BEFORE(_lelem, (PTR), LINK); } while (0)</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSERT_OBJECT_INT_LINK_INDEX</name><parameter_list>(<parameter><type><name>PTR</name></type></parameter>, <parameter><type><name>LIST</name></type></parameter>, <parameter><type><name>LINK</name></type></parameter>, <parameter><type><name>INDEX</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { __typeof (PTR) _lelem; TAILQ_FOREACH(_lelem, (LIST), LINK) if ((asn_subid_t)_lelem-&gt;INDEX &gt; (asn_subid_t)(PTR)-&gt;INDEX)break; if (_lelem == NULL) TAILQ_INSERT_TAIL((LIST), (PTR), LINK); else TAILQ_INSERT_BEFORE(_lelem, (PTR), LINK); } while (0)</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSERT_OBJECT_FUNC_LINK</name><parameter_list>(<parameter><type><name>PTR</name></type></parameter>, <parameter><type><name>LIST</name></type></parameter>, <parameter><type><name>LINK</name></type></parameter>, <parameter><type><name>FUNC</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { __typeof (PTR) _lelem; TAILQ_FOREACH(_lelem, (LIST), LINK) if ((FUNC)(_lelem, (PTR)) &gt; 0) break; if (_lelem == NULL) TAILQ_INSERT_TAIL((LIST), (PTR), LINK); else TAILQ_INSERT_BEFORE(_lelem, (PTR), LINK); } while (0)</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSERT_OBJECT_FUNC_LINK_REV</name><parameter_list>(<parameter><type><name>PTR</name></type></parameter>, <parameter><type><name>LIST</name></type></parameter>, <parameter><type><name>HEAD</name></type></parameter>, <parameter><type><name>LINK</name></type></parameter>, <parameter><type><name>FUNC</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { __typeof (PTR) _lelem; TAILQ_FOREACH_REVERSE(_lelem, (LIST), HEAD, LINK) if ((FUNC)(_lelem, (PTR)) &lt; 0) break; if (_lelem == NULL) TAILQ_INSERT_HEAD((LIST), (PTR), LINK); else TAILQ_INSERT_AFTER((LIST), _lelem, (PTR), LINK); } while (0)</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIND_OBJECT_OID_LINK_INDEX</name><parameter_list>(<parameter><type><name>LIST</name></type></parameter>, <parameter><type><name>OID</name></type></parameter>, <parameter><type><name>SUB</name></type></parameter>, <parameter><type><name>LINK</name></type></parameter>, <parameter><type><name>INDEX</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ __typeof (TAILQ_FIRST(LIST)) _lelem; TAILQ_FOREACH(_lelem, (LIST), LINK) if (index_compare(OID, SUB, &amp;_lelem-&gt;INDEX) == 0) break; (_lelem); })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT_OBJECT_OID_LINK_INDEX</name><parameter_list>(<parameter><type><name>LIST</name></type></parameter>, <parameter><type><name>OID</name></type></parameter>, <parameter><type><name>SUB</name></type></parameter>, <parameter><type><name>LINK</name></type></parameter>, <parameter><type><name>INDEX</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ __typeof (TAILQ_FIRST(LIST)) _lelem; TAILQ_FOREACH(_lelem, (LIST), LINK) if (index_compare(OID, SUB, &amp;_lelem-&gt;INDEX) &lt; 0) break; (_lelem); })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIND_OBJECT_INT_LINK_INDEX</name><parameter_list>(<parameter><type><name>LIST</name></type></parameter>, <parameter><type><name>OID</name></type></parameter>, <parameter><type><name>SUB</name></type></parameter>, <parameter><type><name>LINK</name></type></parameter>, <parameter><type><name>INDEX</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ __typeof (TAILQ_FIRST(LIST)) _lelem; if ((OID)-&gt;len - SUB != 1) _lelem = NULL; else TAILQ_FOREACH(_lelem, (LIST), LINK) if ((OID)-&gt;subs[SUB] == (asn_subid_t)_lelem-&gt;INDEX)break; (_lelem); })</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT_OBJECT_INT_LINK_INDEX</name><parameter_list>(<parameter><type><name>LIST</name></type></parameter>, <parameter><type><name>OID</name></type></parameter>, <parameter><type><name>SUB</name></type></parameter>, <parameter><type><name>LINK</name></type></parameter>, <parameter><type><name>INDEX</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ __typeof (TAILQ_FIRST(LIST)) _lelem; if ((OID)-&gt;len - SUB == 0) _lelem = TAILQ_FIRST(LIST); else TAILQ_FOREACH(_lelem, (LIST), LINK) if ((OID)-&gt;subs[SUB] &lt; (asn_subid_t)_lelem-&gt;INDEX)break; (_lelem); })</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIND_OBJECT_FUNC_LINK</name><parameter_list>(<parameter><type><name>LIST</name></type></parameter>, <parameter><type><name>OID</name></type></parameter>, <parameter><type><name>SUB</name></type></parameter>, <parameter><type><name>LINK</name></type></parameter>, <parameter><type><name>FUNC</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ __typeof (TAILQ_FIRST(LIST)) _lelem; TAILQ_FOREACH(_lelem, (LIST), LINK) if ((FUNC)(OID, SUB, _lelem) == 0) break; (_lelem); })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT_OBJECT_FUNC_LINK</name><parameter_list>(<parameter><type><name>LIST</name></type></parameter>, <parameter><type><name>OID</name></type></parameter>, <parameter><type><name>SUB</name></type></parameter>, <parameter><type><name>LINK</name></type></parameter>, <parameter><type><name>FUNC</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ __typeof (TAILQ_FIRST(LIST)) _lelem; TAILQ_FOREACH(_lelem, (LIST), LINK) if ((FUNC)(OID, SUB, _lelem) &lt; 0) break; (_lelem); })</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSERT_OBJECT_OID_LINK</name><parameter_list>(<parameter><type><name>PTR</name></type></parameter>, <parameter><type><name>LIST</name></type></parameter>, <parameter><type><name>LINK</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>INSERT_OBJECT_OID_LINK_INDEX(PTR, LIST, LINK, index)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSERT_OBJECT_INT_LINK</name><parameter_list>(<parameter><type><name>PTR</name></type></parameter>, <parameter><type><name>LIST</name></type></parameter>, <parameter><type><name>LINK</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { INSERT_OBJECT_INT_LINK_INDEX(PTR, LIST, LINK, index)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIND_OBJECT_OID_LINK</name><parameter_list>(<parameter><type><name>LIST</name></type></parameter>, <parameter><type><name>OID</name></type></parameter>, <parameter><type><name>SUB</name></type></parameter>, <parameter><type><name>LINK</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FIND_OBJECT_OID_LINK_INDEX(LIST, OID, SUB, LINK, index)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT_OBJECT_OID_LINK</name><parameter_list>(<parameter><type><name>LIST</name></type></parameter>, <parameter><type><name>OID</name></type></parameter>, <parameter><type><name>SUB</name></type></parameter>, <parameter><type><name>LINK</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEXT_OBJECT_OID_LINK_INDEX(LIST, OID, SUB, LINK, index)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIND_OBJECT_INT_LINK</name><parameter_list>(<parameter><type><name>LIST</name></type></parameter>, <parameter><type><name>OID</name></type></parameter>, <parameter><type><name>SUB</name></type></parameter>, <parameter><type><name>LINK</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FIND_OBJECT_INT_LINK_INDEX(LIST, OID, SUB, LINK, index)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT_OBJECT_INT_LINK</name><parameter_list>(<parameter><type><name>LIST</name></type></parameter>, <parameter><type><name>OID</name></type></parameter>, <parameter><type><name>SUB</name></type></parameter>, <parameter><type><name>LINK</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEXT_OBJECT_INT_LINK_INDEX(LIST, OID, SUB, LINK, index)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSERT_OBJECT_OID</name><parameter_list>(<parameter><type><name>PTR</name></type></parameter>, <parameter><type><name>LIST</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>INSERT_OBJECT_OID_LINK_INDEX(PTR, LIST, link, index)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSERT_OBJECT_INT</name><parameter_list>(<parameter><type><name>PTR</name></type></parameter>, <parameter><type><name>LIST</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>INSERT_OBJECT_INT_LINK_INDEX(PTR, LIST, link, index)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSERT_OBJECT_FUNC_REV</name><parameter_list>(<parameter><type><name>PTR</name></type></parameter>, <parameter><type><name>LIST</name></type></parameter>, <parameter><type><name>HEAD</name></type></parameter>, <parameter><type><name>FUNC</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>INSERT_OBJECT_FUNC_LINK_REV(PTR, LIST, HEAD, link, FUNC)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIND_OBJECT_OID</name><parameter_list>(<parameter><type><name>LIST</name></type></parameter>, <parameter><type><name>OID</name></type></parameter>, <parameter><type><name>SUB</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FIND_OBJECT_OID_LINK_INDEX(LIST, OID, SUB, link, index)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIND_OBJECT_INT</name><parameter_list>(<parameter><type><name>LIST</name></type></parameter>, <parameter><type><name>OID</name></type></parameter>, <parameter><type><name>SUB</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FIND_OBJECT_INT_LINK_INDEX(LIST, OID, SUB, link, index)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIND_OBJECT_FUNC</name><parameter_list>(<parameter><type><name>LIST</name></type></parameter>, <parameter><type><name>OID</name></type></parameter>, <parameter><type><name>SUB</name></type></parameter>, <parameter><type><name>FUNC</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FIND_OBJECT_FUNC_LINK(LIST, OID, SUB, link, FUNC)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT_OBJECT_OID</name><parameter_list>(<parameter><type><name>LIST</name></type></parameter>, <parameter><type><name>OID</name></type></parameter>, <parameter><type><name>SUB</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEXT_OBJECT_OID_LINK_INDEX(LIST, OID, SUB, link, index)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT_OBJECT_INT</name><parameter_list>(<parameter><type><name>LIST</name></type></parameter>, <parameter><type><name>OID</name></type></parameter>, <parameter><type><name>SUB</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEXT_OBJECT_INT_LINK_INDEX(LIST, OID, SUB, link, index)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT_OBJECT_FUNC</name><parameter_list>(<parameter><type><name>LIST</name></type></parameter>, <parameter><type><name>OID</name></type></parameter>, <parameter><type><name>SUB</name></type></parameter>, <parameter><type><name>FUNC</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEXT_OBJECT_FUNC_LINK(LIST, OID, SUB, link, FUNC)</cpp:value></cpp:define>


<struct_decl>struct <name>lmodule</name>;</struct_decl>



<decl_stmt><decl><type><specifier>extern</specifier> <name>uint64_t</name></type> <name>start_tick</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <name>uint64_t</name></type> <name>this_tick</name></decl>;</decl_stmt>


<function_decl><type><name>uint64_t</name></type> <name>get_ticks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>




<enum>enum <name>snmpd_proxy_err</name> <block>{

<decl><name>SNMPD_PROXY_OK</name></decl>,

<decl><name>SNMPD_PROXY_REJ</name></decl>,

<decl><name>SNMPD_PROXY_DROP</name></decl>,

<decl><name>SNMPD_PROXY_BADCOMM</name></decl>,

<decl><name>SNMPD_PROXY_BADCOMMUSE</name></decl>
}</block>;</enum>




<enum>enum <name>snmpd_input_err</name> <block>{

<decl><name>SNMPD_INPUT_OK</name></decl>,

<decl><name>SNMPD_INPUT_FAILED</name></decl>,

<decl><name>SNMPD_INPUT_VALBADLEN</name></decl>,

<decl><name>SNMPD_INPUT_VALRANGE</name></decl>,

<decl><name>SNMPD_INPUT_VALBADENC</name></decl>,

<decl><name>SNMPD_INPUT_TRUNC</name></decl>,

<decl><name>SNMPD_INPUT_BAD_COMM</name></decl>,
}</block>;</enum>





<struct>struct <name>snmp_module</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>comment</name></decl>;</decl_stmt>


<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>init</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lmodule</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>fini</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>idle</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>dump</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>config</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>start</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name><name>enum</name> <name>snmpd_proxy_err</name></name></type> (<modifier>*</modifier><name>proxy</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>snmpd_input_err</name></name></type></decl></parameter>, <parameter><decl><type><name>int32_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_node</name></name> <modifier>*</modifier></type><name>tree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>tree_size</name></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>loading</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>lmodule</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>








<struct>struct <name>systemg</name> <block>{
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>descr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>asn_oid</name></name></type> <name>object_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>contact</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>location</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>services</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>or_last_change</name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>systemg</name></name></type> <name>systemg</name></decl>;</decl_stmt>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMM_INITIALIZE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMM_READ</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMM_WRITE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function_decl><type><name>u_int</name></type> <name>comm_define</name><parameter_list>(<parameter><decl><type><name>u_int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>lmodule</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>community</name></name> <modifier>*</modifier></type><name>comm_define_ordered</name><parameter_list>(<parameter><decl><type><name>u_int</name></type> <name>priv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>index</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>lmodule</name></name> <modifier>*</modifier></type><name>owner</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>comm_string</name><parameter_list>(<parameter><decl><type><name>u_int</name></type></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>extern</specifier> <name>u_int</name></type> <name>community</name></decl>;</decl_stmt>




<struct>struct <name>snmpd_usmstat</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>unsupported_seclevels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>not_in_time_windows</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>unknown_users</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>unknown_engine_ids</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>wrong_digests</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>decrypt_errors</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>snmpd_usmstat</name></name></type> <name>snmpd_usmstats</name></decl>;</decl_stmt>
<function_decl><type><name><name>struct</name> <name>snmpd_usmstat</name></name> <modifier>*</modifier></type><name>bsnmpd_get_usm_stats</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bsnmpd_reset_usm_stats</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>usm_user</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>snmp_user</name></name></type> <name>suser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>user_engine_id</name><index>[<expr><name>SNMP_ENGINE_ID_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>user_engine_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>user_public</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>user_public_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>type</name></decl>;</decl_stmt>
<macro><name>SLIST_ENTRY</name><argument_list>(<argument>usm_user</argument>)</argument_list></macro> <expr_stmt><expr><name>up</name></expr>;</expr_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>SLIST_HEAD</name><argument_list>(<argument><expr><name>usm_userlist</name></expr></argument>, <argument><expr><name>usm_user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name><name>struct</name> <name>usm_user</name></name> <modifier>*</modifier></type><name>usm_first_user</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>usm_user</name></name> <modifier>*</modifier></type><name>usm_next_user</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>usm_user</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>usm_user</name></name> <modifier>*</modifier></type><name>usm_find_user</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>usm_user</name></name> <modifier>*</modifier></type><name>usm_new_user</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>usm_delete_user</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>usm_user</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>usm_flush_users</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>usm_user</name></name> <modifier>*</modifier></type><name>usm_user</name></decl>;</decl_stmt>




<struct_decl>struct <name>vacm_group</name>;</struct_decl>

<struct>struct <name>vacm_user</name> <block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>secname</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>sec_model</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vacm_group</name></name> <modifier>*</modifier></type><name>group</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>status</name></decl>;</decl_stmt>
<macro><name>SLIST_ENTRY</name><argument_list>(<argument>vacm_user</argument>)</argument_list></macro> <expr_stmt><expr><name>vvu</name></expr>;</expr_stmt>
<macro><name>SLIST_ENTRY</name><argument_list>(<argument>vacm_user</argument>)</argument_list></macro> <expr_stmt><expr><name>vvg</name></expr>;</expr_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>SLIST_HEAD</name><argument_list>(<argument><expr><name>vacm_userlist</name></expr></argument>, <argument><expr><name>vacm_user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<struct>struct <name>vacm_group</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>groupname</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vacm_userlist</name></name></type> <name>group_users</name></decl>;</decl_stmt>
<macro><name>SLIST_ENTRY</name><argument_list>(<argument>vacm_group</argument>)</argument_list></macro> <expr_stmt><expr><name>vge</name></expr>;</expr_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>SLIST_HEAD</name><argument_list>(<argument><expr><name>vacm_grouplist</name></expr></argument>, <argument><expr><name>vacm_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<struct>struct <name>vacm_access</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>vacm_group</name></name> <modifier>*</modifier></type><name>group</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ctx_prefix</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>sec_model</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>sec_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>ctx_match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vacm_view</name></name> <modifier>*</modifier></type><name>read_view</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vacm_view</name></name> <modifier>*</modifier></type><name>write_view</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vacm_view</name></name> <modifier>*</modifier></type><name>notify_view</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>status</name></decl>;</decl_stmt>
<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>vacm_access</argument>)</argument_list></macro> <expr_stmt><expr><name>vva</name></expr>;</expr_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>TAILQ_HEAD</name><argument_list>(<argument><expr><name>vacm_accesslist</name></expr></argument>, <argument><expr><name>vacm_access</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<struct>struct <name>vacm_view</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>viewname</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>asn_oid</name></name></type> <name>subtree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>mask</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>exclude</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>status</name></decl>;</decl_stmt>
<macro><name>SLIST_ENTRY</name><argument_list>(<argument>vacm_view</argument>)</argument_list></macro> <expr_stmt><expr><name>vvl</name></expr>;</expr_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>SLIST_HEAD</name><argument_list>(<argument><expr><name>vacm_viewlist</name></expr></argument>, <argument><expr><name>vacm_view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<struct>struct <name>vacm_context</name> <block>{

<decl_stmt><decl><type><name>int32_t</name></type> <name>regid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ctxname</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<macro><name>SLIST_ENTRY</name><argument_list>(<argument>vacm_context</argument>)</argument_list></macro> <expr_stmt><expr><name>vcl</name></expr>;</expr_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>SLIST_HEAD</name><argument_list>(<argument><expr><name>vacm_contextlist</name></expr></argument>, <argument><expr><name>vacm_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>vacm_groups_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>vacm_user</name></name> <modifier>*</modifier></type><name>vacm_first_user</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>vacm_user</name></name> <modifier>*</modifier></type><name>vacm_next_user</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vacm_user</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>vacm_user</name></name> <modifier>*</modifier></type><name>vacm_new_user</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>vacm_delete_user</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vacm_user</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>vacm_user_set_group</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vacm_user</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>u_int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>vacm_access</name></name> <modifier>*</modifier></type><name>vacm_first_access_rule</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>vacm_access</name></name> <modifier>*</modifier></type><name>vacm_next_access_rule</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vacm_access</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>vacm_access</name></name> <modifier>*</modifier></type><name>vacm_new_access_rule</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int32_t</name></type></decl></parameter>, <parameter><decl><type><name>int32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>vacm_delete_access_rule</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vacm_access</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>vacm_view</name></name> <modifier>*</modifier></type><name>vacm_first_view</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>vacm_view</name></name> <modifier>*</modifier></type><name>vacm_next_view</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vacm_view</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>vacm_view</name></name> <modifier>*</modifier></type><name>vacm_new_view</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>vacm_delete_view</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vacm_view</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>vacm_context</name></name> <modifier>*</modifier></type><name>vacm_first_context</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>vacm_context</name></name> <modifier>*</modifier></type><name>vacm_next_context</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vacm_context</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>vacm_context</name></name> <modifier>*</modifier></type><name>vacm_add_context</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>vacm_flush_contexts</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>





<struct>struct <name>snmpd_target_stats</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>unavail_contexts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>unknown_contexts</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_UDP_ADDR_SIZ</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_TAG_SIZ</name></cpp:macro> <cpp:value>(255 + 1)</cpp:value></cpp:define>

<struct>struct <name>target_address</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>address</name><index>[<expr><name>SNMP_UDP_ADDR_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>retry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>taglist</name><index>[<expr><name>SNMP_TAG_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>paramname</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>socket</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>status</name></decl>;</decl_stmt>
<macro><name>SLIST_ENTRY</name><argument_list>(<argument>target_address</argument>)</argument_list></macro> <expr_stmt><expr><name>ta</name></expr>;</expr_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>SLIST_HEAD</name><argument_list>(<argument><expr><name>target_addresslist</name></expr></argument>, <argument><expr><name>target_address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<struct>struct <name>target_param</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>mpmodel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>sec_model</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>secname</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>snmp_usm_level</name></name></type> <name>sec_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>status</name></decl>;</decl_stmt>
<macro><name>SLIST_ENTRY</name><argument_list>(<argument>target_param</argument>)</argument_list></macro> <expr_stmt><expr><name>tp</name></expr>;</expr_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>SLIST_HEAD</name><argument_list>(<argument><expr><name>target_paramlist</name></expr></argument>, <argument><expr><name>target_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<struct>struct <name>target_notify</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>taglist</name><index>[<expr><name>SNMP_TAG_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>notify_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>status</name></decl>;</decl_stmt>
<macro><name>SLIST_ENTRY</name><argument_list>(<argument>target_notify</argument>)</argument_list></macro> <expr_stmt><expr><name>tn</name></expr>;</expr_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>SLIST_HEAD</name><argument_list>(<argument><expr><name>target_notifylist</name></expr></argument>, <argument><expr><name>target_notify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>snmpd_target_stats</name></name></type> <name>snmpd_target_stats</name></decl>;</decl_stmt>
<function_decl><type><name><name>struct</name> <name>snmpd_target_stats</name></name> <modifier>*</modifier></type><name>bsnmpd_get_target_stats</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>target_address</name></name> <modifier>*</modifier></type><name>target_first_address</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>target_address</name></name> <modifier>*</modifier></type><name>target_next_address</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>target_address</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>target_address</name></name> <modifier>*</modifier></type><name>target_new_address</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>target_activate_address</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>target_address</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>target_delete_address</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>target_address</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>target_param</name></name> <modifier>*</modifier></type><name>target_first_param</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>target_param</name></name> <modifier>*</modifier></type><name>target_next_param</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>target_param</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>target_param</name></name> <modifier>*</modifier></type><name>target_new_param</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>target_delete_param</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>target_param</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>target_notify</name></name> <modifier>*</modifier></type><name>target_first_notify</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>target_notify</name></name> <modifier>*</modifier></type><name>target_next_notify</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>target_notify</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>target_notify</name></name> <modifier>*</modifier></type><name>target_new_notify</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>target_delete_notify</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>target_notify</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>target_flush_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name></type> <name>oid_zeroDotZero</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name></type> <name>oid_usmUnknownEngineIDs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name></type> <name>oid_usmNotInTimeWindows</name></decl>;</decl_stmt>







<function_decl><type><name>u_int</name></type> <name>reqid_allocate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>lmodule</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>reqid_next</name><parameter_list>(<parameter><decl><type><name>u_int</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>reqid_base</name><parameter_list>(<parameter><decl><type><name>u_int</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>reqid_istype</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>reqid</name></decl></parameter>, <parameter><decl><type><name>u_int</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>u_int</name></type> <name>reqid_type</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>reqid</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name> <modifier>*</modifier></type><name>timer_start</name><parameter_list>(<parameter><decl><type><name>u_int</name></type></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>lmodule</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>timer_start_repeat</name><parameter_list>(<parameter><decl><type><name>u_int</name></type></decl></parameter>, <parameter><decl><type><name>u_int</name></type></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>lmodule</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>timer_stop</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name> <modifier>*</modifier></type><name>fd_select</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>lmodule</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>fd_deselect</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>fd_suspend</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>fd_resume</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>u_int</name></type> <name>or_register</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>lmodule</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>or_unregister</name><parameter_list>(<parameter><decl><type><name>u_int</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name> <modifier>*</modifier></type><name>buf_alloc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>buf_size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tx</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name><name>enum</name> <name>snmpd_input_err</name></name></type> <name>snmp_input_start</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name><name>enum</name> <name>snmpd_input_err</name></name></type> <name>snmp_input_finish</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>snmpd_input_err</name></name></type></decl></parameter>, <parameter><decl><type><name>int32_t</name></type></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>snmp_output</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>snmp_send_port</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>enum</name> <name>snmp_code</name></name></type> <name>snmp_pdu_auth_access</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>snmp_send_trap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>int</name></type> <name>string_save</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>string_commit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>string_rollback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>string_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>string_get_max</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>string_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ip_save</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ip_rollback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ip_commit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ip_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>oid_save</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>oid_rollback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>oid_commit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>oid_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>index_decode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>u_int</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>u_int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>index_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>u_int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>index_compare_off</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>u_int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>u_int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>index_append</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>u_int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>index_append_off</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>u_int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>u_int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
