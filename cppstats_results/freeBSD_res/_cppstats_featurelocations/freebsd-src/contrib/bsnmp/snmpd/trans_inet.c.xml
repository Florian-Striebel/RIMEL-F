<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bsnmp/snmpd/trans_inet.c">
































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;syslog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asn1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snmp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snmpmod.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snmpd.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMPTREE_TYPES</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMPENUM_FUNCS</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"oid.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>transport_def</name></name></type> <name>inet_trans</name></decl>;</decl_stmt>

<struct_decl>struct <name>inet_port</name>;</struct_decl>
<struct_decl>struct <name>inet_port_params</name>;</struct_decl>
<struct_decl>struct <name>port_sock</name>;</struct_decl>

<typedef>typedef <function_decl><type><name>int</name></type> <name>create_func</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>inet_port</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>inet_port_params</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> <name>input_func</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> <name>activate_func</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>inet_port</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> <name>deactivate_func</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>inet_port</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> <name>parse_ctrl_func</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>port_sock</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>msghdr</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> <name>setsrc_func</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>port_sock</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>msghdr</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>create_func</name></type> <name>ipv4_create</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>input_func</name></type> <name>ipv4_input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>activate_func</name></type> <name>ipv4_activate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>deactivate_func</name></type> <name>ipv4_deactivate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>parse_ctrl_func</name></type> <name>ipv4_parse_ctrl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>setsrc_func</name></type> <name>ipv4_setsrc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>create_func</name></type> <name>ipv6_create</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>input_func</name></type> <name>ipv6_input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>activate_func</name></type> <name>ipv6_activate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>deactivate_func</name></type> <name>ipv6_deactivate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>parse_ctrl_func</name></type> <name>ipv6_parse_ctrl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>setsrc_func</name></type> <name>ipv6_setsrc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>create_func</name></type> <name>ipv6z_create</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>create_func</name></type> <name>dns_create</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>activate_func</name></type> <name>dns_activate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>deactivate_func</name></type> <name>dns_deactivate</name></decl>;</decl_stmt>

<struct>struct <name>port_sock</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>port_input</name></name></type> <name>input</name></decl>;</decl_stmt>


<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>port_sock</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>inet_port</name></name> <modifier>*</modifier></type><name>port</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>bind_addr</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>ret_dest</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>set_ret_source</name></decl>;</decl_stmt>


<union>union <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>a4</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>in6_pktinfo</name></name></type> <name>a6</name></decl>;</decl_stmt>
}</block> <decl><name>ret_source</name></decl>;</union>


<decl_stmt><decl><type><name>parse_ctrl_func</name> <modifier>*</modifier></type><name>parse_ctrl</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>setsrc_func</name> <modifier>*</modifier></type><name>setsrc</name></decl>;</decl_stmt>
}</block>;</struct>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>port_sock</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"input not first in port_sock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<struct>struct <name>inet_port</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>tport</name></name></type> <name>tport</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>BegemotSnmpdTransportProto</name></name></type> <name>proto</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>RowStatus</name></name></type> <name>row_status</name></decl>;</decl_stmt>


<macro><name>TAILQ_HEAD</name><argument_list>(<argument/>, <argument>port_sock</argument>)</argument_list></macro> <expr_stmt><expr><name>socks</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dns_addr</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint16_t</name></type> <name>dns_port</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>create_func</name> <modifier>*</modifier></type><name>create</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>activate_func</name> <modifier>*</modifier></type><name>activate</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>deactivate_func</name> <modifier>*</modifier></type><name>deactivate</name></decl>;</decl_stmt>
}</block>;</struct>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>inet_port</name></expr></argument>, <argument><expr><name>tport</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"tport not first in inet_port"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_DNS</name></cpp:macro> <cpp:value>AF_VENDOR00</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>my_trans</name></decl>;</decl_stmt>


<enum>enum <block>{
<decl><name>SET_CREATED</name></decl>,
<decl><name>SET_ACTIVATED</name></decl>,
<decl><name>SET_DEACTIVATE</name></decl>,
<decl><name>SET_DESTROY</name></decl>,
}</block>;</enum>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>RECV_CBUF_SIZE</name> <init>=
<expr><call><name>MAX</name><argument_list>(<argument><expr><call><name>CMSG_SPACE</name><argument_list>(<argument><expr><call><name>SOCKCREDSIZE</name><argument_list>(<argument><expr><name>CMGROUP_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>CMSG_SPACE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>CMSG_SPACE</name><argument_list>(<argument><expr><call><name>SOCKCREDSIZE</name><argument_list>(<argument><expr><name>CMGROUP_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>CMSG_SPACE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_pktinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>XMIT_CBUF_SIZE</name> <init>=
<expr><call><name>MAX</name><argument_list>(<argument><expr><call><name>CMSG_SPACE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>CMSG_SPACE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_pktinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>inet_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>trans_register</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inet_trans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my_trans</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>inet_stop</name><parameter_list>(<parameter><decl><type><name>int</name> <name>force</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>my_trans</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>trans_unregister</name><argument_list>(<argument><expr><name>my_trans</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>deactivate_port</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>inet_port</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>deactivate</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>int</name></type>
<name>inet_activate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tport</name></name> <modifier>*</modifier></type><name>tp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>inet_port</name></name> <modifier>*</modifier></type><name>port</name> <init>= <expr><operator>(</operator>struct <name>inet_port</name> <operator>*</operator><operator>)</operator><name>tp</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><call><name><name>port</name><operator>-&gt;</operator><name>activate</name></name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>inet_destroy_port</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tport</name></name> <modifier>*</modifier></type><name>tp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>inet_port</name></name> <modifier>*</modifier></type><name>port</name> <init>= <expr><operator>(</operator>struct <name>inet_port</name> <operator>*</operator><operator>)</operator><name>tp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>deactivate_port</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trans_remove_port</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>dns_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int</name></type>
<name>inet_alloc_buf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>port_input</name></name> <modifier>*</modifier></type><name>pi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>drop_buf</name><index>[<expr><literal type="number">2000</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pi</name><operator>-&gt;</operator><name>buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pi</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>buf_alloc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>recvfrom</name><argument_list>(<argument><expr><name><name>pi</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>drop_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>drop_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pi</name><operator>-&gt;</operator><name>buflen</name></name> <operator>=</operator> <call><name>buf_size</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>int</name></type>
<name>inet_read_msg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>port_input</name></name> <modifier>*</modifier></type><name>pi</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>msghdr</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name><name>iov</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <name><name>pi</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <name><name>pi</name><operator>-&gt;</operator><name>buflen</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>msg_name</name></name> <operator>=</operator> <name><name>pi</name><operator>-&gt;</operator><name>peer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>msg_namelen</name></name> <operator>=</operator> <name><name>pi</name><operator>-&gt;</operator><name>peerlen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>msg_iov</name></name> <operator>=</operator> <name>iov</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>msg_iovlen</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>msg_control</name></name> <operator>=</operator> <name>cbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>msg_controllen</name></name> <operator>=</operator> <name>RECV_CBUF_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>msg_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>RECV_CBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ssize_t</name></type> <name>len</name> <init>= <expr><call><name>recvmsg</name><argument_list>(<argument><expr><name><name>pi</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>msg_flags</name></name> <operator>&amp;</operator> <name>MSG_TRUNC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>snmpd_stats</name><operator>.</operator><name>silentDrops</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snmpd_stats</name><operator>.</operator><name>inTooLong</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pi</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>inet_recv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tport</name></name> <modifier>*</modifier></type><name>tp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>port_input</name></name> <modifier>*</modifier></type><name>pi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>inet_port</name></name> <modifier>*</modifier></type><name>port</name> <init>= <expr><call><name>__containerof</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr>struct <name>inet_port</name></expr></argument>, <argument><expr><name>tport</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>port_sock</name></name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><call><name>__containerof</name><argument_list>(<argument><expr><name>pi</name></expr></argument>, <argument><expr>struct <name>port_sock</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>proto</name></name> <operator>==</operator> <name>BegemotSnmpdTransportProto_udp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>inet_alloc_buf</name><argument_list>(<argument><expr><name>pi</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>cbuf</name><index>[<expr><name>RECV_CBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>msghdr</name></name></type> <name>msg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>inet_read_msg</name><argument_list>(<argument><expr><name>pi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>cbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>sock</name><operator>-&gt;</operator><name>parse_ctrl</name></name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>inet_send2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tport</name></name> <modifier>*</modifier></type><name>tp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>port_input</name></name> <modifier>*</modifier></type><name>pi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>inet_port</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>__containerof</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr>struct <name>inet_port</name></expr></argument>, <argument><expr><name>tport</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>port_sock</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>pi</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>socks</name></name></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><call><name>__containerof</name><argument_list>(<argument><expr><name>pi</name></expr></argument>, <argument><expr>struct <name>port_sock</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name>iov</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_base</name></name> <operator>=</operator> <call><name>__DECONST</name><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>msghdr</name></name></type> <name>msg</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_iov</name></name> <operator>=</operator> <operator>&amp;</operator><name>iov</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_iovlen</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_name</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>pi</name><operator>-&gt;</operator><name>peer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_namelen</name></name> <operator>=</operator> <name><name>pi</name><operator>-&gt;</operator><name>peerlen</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>cbuf</name><index>[<expr><name>XMIT_CBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>set_ret_source</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>setsrc</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>cbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_control</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_controllen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><call><name>sendmsg</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>transport_def</name></name></type> <name>inet_trans</name> <init>= <expr><block>{
<expr><literal type="string">"inet"</literal></expr>,
<expr><name>OIDX_begemotSnmpdTransInet</name></expr>,
<expr><name>inet_start</name></expr>,
<expr><name>inet_stop</name></expr>,
<expr><name>inet_destroy_port</name></expr>,
<expr><name>inet_activate</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>inet_recv</name></expr>,
<expr><name>inet_send2</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>inet_port_params</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>asn_oid</name></name></type> <name>index</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>InetAddressType</name></name></type> <name>type</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>addr_len</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>port</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>BegemotSnmpdTransportProto</name></name></type> <name>proto</name></decl>;</decl_stmt>
}</block>;</struct>










<function><type><specifier>static</specifier> <name>int</name></type>
<name>ipv4_create</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>inet_port</name></name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>inet_port_params</name></name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>addr_len</name></name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>port_sock</name></name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>port_sock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sock</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>snmpd_input_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sock</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAILQ_INSERT_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>socks</name></name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>sin</name> <init>=
<expr><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>sock</name><operator>-&gt;</operator><name>bind_addr</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sin</name><operator>-&gt;</operator><name>sin_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin</name><operator>-&gt;</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin</name><operator>-&gt;</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>params</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sin</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type>
<name>ipv4_input</name><parameter_list>(<parameter><decl><type><name>int</name> <name>fd</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>udata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>port_sock</name></name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><name>udata</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>peerlen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snmpd_input</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sock</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sock</name><operator>-&gt;</operator><name>port</name><operator>-&gt;</operator><name>tport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>ipv4_activate_sock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>port_sock</name></name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sock</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>PF_INET</name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"creating UDP4 socket: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_RES_UNAVAIL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>sin</name> <init>=
<expr><operator>(</operator><specifier>const</specifier> struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>sock</name><operator>-&gt;</operator><name>bind_addr</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sin</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <name>INADDR_ANY</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>on</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>IPPROTO_IP</name></expr></argument>, <argument><expr><name>IP_RECVDSTADDR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>on</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>on</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"setsockopt(IP_RECVDSTADDR): %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>set_ret_source</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><name>sin</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EADDRNOTAVAIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_NAME</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"bind: %s:%u %m"</literal></expr></argument>, <argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name><name>sin</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>sin</name><operator>-&gt;</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sock</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>id</name></name> <operator>=</operator> <call><name>fd_select</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>ipv4_input</name></expr></argument>,
<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>peer</name></name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>sock</name><operator>-&gt;</operator><name>ret_dest</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>parse_ctrl</name></name> <operator>=</operator> <name>ipv4_parse_ctrl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>setsrc</name></name> <operator>=</operator> <name>ipv4_setsrc</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int</name></type>
<name>ipv4_activate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>inet_port</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>port_sock</name></name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>socks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>TAILQ_NEXT</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ret</name> <init>= <expr><call><name>ipv4_activate_sock</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>SNMP_ERR_NOERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>row_status</name></name> <operator>=</operator> <name>RowStatus_active</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>ipv4_deactivate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>inet_port</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>port_sock</name></name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>socks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>TAILQ_NEXT</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snmpd_input_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sock</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>row_status</name></name> <operator>=</operator> <name>RowStatus_notInService</name></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>void</name></type>
<name>ipv4_parse_ctrl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>port_sock</name></name> <modifier>*</modifier></type><name>sock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>msghdr</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockcred</name></name> <modifier>*</modifier></type><name>cred</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name><name>struct</name> <name>cmsghdr</name></name> <modifier>*</modifier><name>cmsg</name></type> <init>= <expr><call><name>CMSG_FIRSTHDR</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>cmsg</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>cmsg</name> <operator>=</operator> <call><name>CMSG_NXTHDR</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>cmsg</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cmsg</name><operator>-&gt;</operator><name>cmsg_level</name></name> <operator>==</operator> <name>IPPROTO_IP</name> <operator>&amp;&amp;</operator>
<name><name>cmsg</name><operator>-&gt;</operator><name>cmsg_type</name></name> <operator>==</operator> <name>IP_RECVDSTADDR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sock</name><operator>-&gt;</operator><name>ret_source</name><operator>.</operator><name>a4</name></name></expr></argument>, <argument><expr><call><name>CMSG_DATA</name><argument_list>(<argument><expr><name>cmsg</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cmsg</name><operator>-&gt;</operator><name>cmsg_level</name></name> <operator>==</operator> <name>SOL_SOCKET</name> <operator>&amp;&amp;</operator>
<name><name>cmsg</name><operator>-&gt;</operator><name>cmsg_type</name></name> <operator>==</operator> <name>SCM_CREDS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cred</name> <operator>=</operator> <operator>(</operator>struct <name>sockcred</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>CMSG_DATA</name><argument_list>(<argument><expr><name>cmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>priv</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sock</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>cred</name></name> <operator>&amp;&amp;</operator> <name>cred</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>priv</name></name> <operator>=</operator> <operator>(</operator><name><name>cred</name><operator>-&gt;</operator><name>sc_euid</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>ipv4_setsrc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>port_sock</name></name> <modifier>*</modifier></type><name>sock</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>msghdr</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cmsghdr</name></name> <modifier>*</modifier></type><name>cmsg</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>msg_control</name></name> <operator>=</operator> <name>cbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>msg_controllen</name></name> <operator>=</operator> <call><name>CMSG_SPACE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>cmsg</name> <operator>=</operator> <call><name>CMSG_FIRSTHDR</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmsg</name><operator>-&gt;</operator><name>cmsg_level</name></name> <operator>=</operator> <name>IPPROTO_IP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmsg</name><operator>-&gt;</operator><name>cmsg_type</name></name> <operator>=</operator> <name>IP_SENDSRCADDR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmsg</name><operator>-&gt;</operator><name>cmsg_len</name></name> <operator>=</operator> <call><name>CMSG_LEN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>CMSG_DATA</name><argument_list>(<argument><expr><name>cmsg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sock</name><operator>-&gt;</operator><name>ret_source</name><operator>.</operator><name>a4</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>int</name></type>
<name>ipv6_create_common</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>inet_port</name></name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>inet_port_params</name></name> <modifier>*</modifier></type><name>params</name></decl></parameter>,
<parameter><decl><type><name>u_int</name></type> <name>scope_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>port_sock</name></name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>port_sock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sock</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>sin</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>sock</name><operator>-&gt;</operator><name>bind_addr</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sin</name><operator>-&gt;</operator><name>sin6_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin</name><operator>-&gt;</operator><name>sin6_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin</name><operator>-&gt;</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>params</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin</name><operator>-&gt;</operator><name>sin6_flowinfo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin</name><operator>-&gt;</operator><name>sin6_scope_id</name></name> <operator>=</operator> <name>scope_id</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sin</name><operator>-&gt;</operator><name>sin6_addr</name><operator>.</operator><name>s6_addr</name></name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IN6_IS_ADDR_LINKLOCAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sin</name><operator>-&gt;</operator><name>sin6_addr</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>scope_id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>INET6_ADDRSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%s: link local address used without scope "</literal>
<literal type="string">"index: %s"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>sin</name><operator>-&gt;</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NO_CREATION</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snmpd_input_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sock</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_INSERT_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>socks</name></name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type>
<name>ipv6_create</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>inet_port</name></name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>inet_port_params</name></name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>addr_len</name></name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ret</name> <init>= <expr><call><name>ipv6_create_common</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>SNMP_ERR_NOERROR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type>
<name>ipv6_input</name><parameter_list>(<parameter><decl><type><name>int</name> <name>fd</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>udata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>port_sock</name></name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><name>udata</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>peerlen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snmpd_input</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sock</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sock</name><operator>-&gt;</operator><name>port</name><operator>-&gt;</operator><name>tport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>ipv6_activate_sock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>port_sock</name></name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sock</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>PF_INET6</name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"creating UDP6 socket: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_RES_UNAVAIL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>sin</name> <init>=
<expr><operator>(</operator><specifier>const</specifier> struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>sock</name><operator>-&gt;</operator><name>bind_addr</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sin</name><operator>-&gt;</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in6addr_any</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>in6addr_any</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>on</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>IPPROTO_IPV6</name></expr></argument>, <argument><expr><name>IPV6_RECVPKTINFO</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>on</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>on</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"setsockopt(IP6_PKTINFO): %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>set_ret_source</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><name>sin</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>community</name> <operator>!=</operator> <name>COMM_INITIALIZE</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EADDRNOTAVAIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_NAME</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>INET6_ADDRSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"bind: %s:%u:%u %m"</literal></expr></argument>, <argument><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>sin</name><operator>-&gt;</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sin</name><operator>-&gt;</operator><name>sin6_scope_id</name></name></expr></argument>,
<argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>sin</name><operator>-&gt;</operator><name>sin6_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sock</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>id</name></name> <operator>=</operator> <call><name>fd_select</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>ipv6_input</name></expr></argument>,
<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>peer</name></name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>sock</name><operator>-&gt;</operator><name>ret_dest</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>parse_ctrl</name></name> <operator>=</operator> <name>ipv6_parse_ctrl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>setsrc</name></name> <operator>=</operator> <name>ipv6_setsrc</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>ipv6_activate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>inet_port</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>port_sock</name></name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>socks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ret</name> <init>= <expr><call><name>ipv6_activate_sock</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>SNMP_ERR_NOERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>row_status</name></name> <operator>=</operator> <name>RowStatus_active</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>ipv6_deactivate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>inet_port</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>port_sock</name></name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>socks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>TAILQ_NEXT</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snmpd_input_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sock</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>row_status</name></name> <operator>=</operator> <name>RowStatus_notInService</name></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>void</name></type>
<name>ipv6_parse_ctrl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>port_sock</name></name> <modifier>*</modifier></type><name>sock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>msghdr</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockcred</name></name> <modifier>*</modifier></type><name>cred</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name><name>struct</name> <name>cmsghdr</name></name> <modifier>*</modifier><name>cmsg</name></type> <init>= <expr><call><name>CMSG_FIRSTHDR</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>cmsg</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>cmsg</name> <operator>=</operator> <call><name>CMSG_NXTHDR</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>cmsg</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cmsg</name><operator>-&gt;</operator><name>cmsg_level</name></name> <operator>==</operator> <name>IPPROTO_IPV6</name> <operator>&amp;&amp;</operator>
<name><name>cmsg</name><operator>-&gt;</operator><name>cmsg_type</name></name> <operator>==</operator> <name>IPV6_PKTINFO</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>in6_pktinfo</name></name> <modifier>*</modifier></type><name>info</name> <init>=
<expr><operator>(</operator><specifier>const</specifier> struct <name>in6_pktinfo</name> <operator>*</operator><operator>)</operator><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator>
<call><name>CMSG_DATA</name><argument_list>(<argument><expr><name>cmsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>ret_source</name><operator>.</operator><name>a6</name><operator>.</operator><name>ipi6_addr</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>ipi6_addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>ret_source</name><operator>.</operator><name>a6</name><operator>.</operator><name>ipi6_ifindex</name></name> <operator>=</operator>
<ternary><condition><expr><operator>!</operator><call><name>IN6_IS_ADDR_LINKLOCAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>ipi6_addr</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr></then><else>:
<expr><name><name>info</name><operator>-&gt;</operator><name>ipi6_ifindex</name></name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cmsg</name><operator>-&gt;</operator><name>cmsg_level</name></name> <operator>==</operator> <name>SOL_SOCKET</name> <operator>&amp;&amp;</operator>
<name><name>cmsg</name><operator>-&gt;</operator><name>cmsg_type</name></name> <operator>==</operator> <name>SCM_CREDS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cred</name> <operator>=</operator> <operator>(</operator>struct <name>sockcred</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>CMSG_DATA</name><argument_list>(<argument><expr><name>cmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>priv</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sock</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>cred</name></name> <operator>&amp;&amp;</operator> <name>cred</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>priv</name></name> <operator>=</operator> <operator>(</operator><name><name>cred</name><operator>-&gt;</operator><name>sc_euid</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>ipv6_setsrc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>port_sock</name></name> <modifier>*</modifier></type><name>sock</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>msghdr</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cmsghdr</name></name> <modifier>*</modifier></type><name>cmsg</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>msg_control</name></name> <operator>=</operator> <name>cbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>msg_controllen</name></name> <operator>=</operator> <call><name>CMSG_SPACE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_pktinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>cmsg</name> <operator>=</operator> <call><name>CMSG_FIRSTHDR</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmsg</name><operator>-&gt;</operator><name>cmsg_level</name></name> <operator>=</operator> <name>IPPROTO_IPV6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmsg</name><operator>-&gt;</operator><name>cmsg_type</name></name> <operator>=</operator> <name>IPV6_PKTINFO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmsg</name><operator>-&gt;</operator><name>cmsg_len</name></name> <operator>=</operator> <call><name>CMSG_LEN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_pktinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>CMSG_DATA</name><argument_list>(<argument><expr><name>cmsg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sock</name><operator>-&gt;</operator><name>ret_source</name><operator>.</operator><name>a6</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_pktinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type>
<name>ipv6z_create</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>inet_port</name></name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>inet_port_params</name></name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>addr_len</name></name> <operator>!=</operator> <literal type="number">20</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>u_int</name></type> <name>scope_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>u_int</name></type> <name>i</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>scope_id</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>scope_id</name> <operator>|=</operator> <name><name>params</name><operator>-&gt;</operator><name>addr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ret</name> <init>= <expr><call><name>ipv6_create_common</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>scope_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>SNMP_ERR_NOERROR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type>
<name>dns_create</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>inet_port</name></name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>inet_port_params</name></name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>addr_len</name></name> <operator>&gt;</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strnlen</name><argument_list>(<argument><expr><name><name>params</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>addr_len</name></name></expr></argument>)</argument_list></call> <operator>!=</operator>
<name><name>params</name><operator>-&gt;</operator><name>addr_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>port</name><operator>-&gt;</operator><name>dns_addr</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>params</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>,
<argument><expr><name><name>params</name><operator>-&gt;</operator><name>addr_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>dns_addr</name><index>[<expr><name><name>params</name><operator>-&gt;</operator><name>addr_len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>dns_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>params</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int</name></type>
<name>dns_activate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>inet_port</name></name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_UNSPEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_DGRAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <name>AI_ADDRCONFIG</name> <operator>|</operator> <name>AI_PASSIVE</name> <operator>|</operator> <name>AI_NUMERICSERV</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>portbuf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>portbuf</name></expr></argument>, <argument><expr><literal type="string">"%hu"</literal></expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>dns_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>res0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><call><name>getaddrinfo</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>port</name><operator>-&gt;</operator><name>dns_addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>
?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>port</name><operator>-&gt;</operator><name>dns_addr</name></name></expr></else></ternary></expr></argument>,
<argument><expr><name>portbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"cannot resolve address '%s': %s"</literal></expr></argument>,
<argument><expr><name><name>port</name><operator>-&gt;</operator><name>dns_addr</name></name></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier><name>res</name></type> <init>= <expr><name>res0</name></expr></init></decl>;</init> <condition><expr><name>res</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>res</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>!=</operator> <name>AF_INET</name> <operator>&amp;&amp;</operator> <name><name>res</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>!=</operator> <name>AF_INET6</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>port_sock</name></name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>port_sock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sock</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>snmpd_input_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sock</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>SNMP_ERR_NOERROR</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>sock</name><operator>-&gt;</operator><name>bind_addr</name></name> <operator>=</operator>
<operator>*</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>res</name><operator>-&gt;</operator><name>ai_addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ipv4_activate_sock</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>sock</name><operator>-&gt;</operator><name>bind_addr</name></name> <operator>=</operator>
<operator>*</operator><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>res</name><operator>-&gt;</operator><name>ai_addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ipv6_activate_sock</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>SNMP_ERR_NOERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TAILQ_INSERT_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>socks</name></name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TAILQ_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>socks</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>row_status</name></name> <operator>=</operator> <name>RowStatus_active</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>dns_deactivate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>inet_port</name></name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>!</operator><call><name>TAILQ_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>socks</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>port_sock</name></name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>socks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>socks</name></name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snmpd_input_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sock</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>row_status</name></name> <operator>=</operator> <name>RowStatus_notInService</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>inet_create</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>inet_port_params</name></name> <modifier>*</modifier></type><name>params</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>inet_port</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name>SNMP_ERR_NOERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>inet_port</name></name> <modifier>*</modifier></type><name>port</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>port</name></name> <operator>&gt;</operator> <literal type="number">0xffff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>SNMP_ERR_NO_CREATION</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>port</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>port</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>SNMP_ERR_GENERR</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>port</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>socks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>proto</name></name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>proto</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>tport</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>InetAddressType_ipv4</name></expr>:</case>
<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>create</name></name> <operator>=</operator> <name>ipv4_create</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>activate</name></name> <operator>=</operator> <name>ipv4_activate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>deactivate</name></name> <operator>=</operator> <name>ipv4_deactivate</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>InetAddressType_ipv6</name></expr>:</case>
<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>create</name></name> <operator>=</operator> <name>ipv6_create</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>activate</name></name> <operator>=</operator> <name>ipv6_activate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>deactivate</name></name> <operator>=</operator> <name>ipv6_deactivate</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>InetAddressType_ipv6z</name></expr>:</case>
<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>create</name></name> <operator>=</operator> <name>ipv6z_create</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>activate</name></name> <operator>=</operator> <name>ipv6_activate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>deactivate</name></name> <operator>=</operator> <name>ipv6_deactivate</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>InetAddressType_dns</name></expr>:</case>
<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>create</name></name> <operator>=</operator> <name>dns_create</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>activate</name></name> <operator>=</operator> <name>dns_activate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>deactivate</name></name> <operator>=</operator> <name>dns_deactivate</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>SNMP_ERR_NO_CREATION</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name><name>port</name><operator>-&gt;</operator><name>create</name></name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SNMP_ERR_NOERROR</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>trans_insert_port</name><argument_list>(<argument><expr><name>my_trans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>tport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>dns_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>create_and_go</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>inet_port_params</name></name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>inet_port</name></name> <modifier>*</modifier></type><name>port</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>inet_create</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SNMP_ERR_NOERROR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>row_status</name></name> <operator>=</operator> <name>RowStatus_createAndGo</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>community</name> <operator>==</operator> <name>COMM_INITIALIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>inet_activate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>tport</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>create_and_wait</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>inet_port_params</name></name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>inet_port</name></name> <modifier>*</modifier></type><name>port</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>inet_create</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SNMP_ERR_NOERROR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>row_status</name></name> <operator>=</operator> <name>RowStatus_createAndWait</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int</name></type>
<name>inet_port_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>inet_port</name></name> <modifier>*</modifier></type><name>port</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>inet_port_params</name></name> <modifier>*</modifier></type><name>params</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>RowStatus</name></name></type> <name>nstatus</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>nstatus</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>RowStatus_createAndGo</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>port</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>=</operator> <name>SET_CREATED</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>create_and_go</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><name>RowStatus_createAndWait</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>port</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>=</operator> <name>SET_CREATED</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>create_and_wait</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><name>RowStatus_active</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>port</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>port</name><operator>-&gt;</operator><name>row_status</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>RowStatus_notReady</name></expr>:</case>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>RowStatus_notInService</name></expr>:</case>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>=</operator> <name>SET_ACTIVATED</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>inet_activate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>tport</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><name>RowStatus_active</name></expr>:</case>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>RowStatus_createAndGo</name></expr>:</case>
<case>case <expr><name>RowStatus_createAndWait</name></expr>:</case>
<case>case <expr><name>RowStatus_destroy</name></expr>:</case>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<break>break;</break>

<case>case <expr><name>RowStatus_notInService</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>port</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>port</name><operator>-&gt;</operator><name>row_status</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>RowStatus_notReady</name></expr>:</case>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>RowStatus_notInService</name></expr>:</case>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>RowStatus_active</name></expr>:</case>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>=</operator> <name>SET_DEACTIVATE</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>RowStatus_createAndGo</name></expr>:</case>
<case>case <expr><name>RowStatus_createAndWait</name></expr>:</case>
<case>case <expr><name>RowStatus_destroy</name></expr>:</case>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<break>break;</break>

<case>case <expr><name>RowStatus_destroy</name></expr>:</case>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>=</operator> <name>SET_DESTROY</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>RowStatus_notReady</name></expr>:</case>
<return>return <expr><operator>(</operator><name>SNMP_ERR_WRONG_VALUE</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>op_snmp_trans_inet</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
<parameter><decl><type><name>u_int</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>u_int</name> <name>iidx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>snmp_op</name></name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>asn_subid_t</name></type> <name>which</name> <init>= <expr><name><name>value</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>inet_port</name></name> <modifier>*</modifier></type><name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>inet_port_params</name></name></type> <name>params</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SNMP_OP_GETNEXT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>port</name> <operator>=</operator> <operator>(</operator>struct <name>inet_port</name> <operator>*</operator><operator>)</operator><call><name>trans_next_port</name><argument_list>(<argument><expr><name>my_trans</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>index_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>tport</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fetch</name>;</goto>

<case>case <expr><name>SNMP_OP_GET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>port</name> <operator>=</operator> <operator>(</operator>struct <name>inet_port</name> <operator>*</operator><operator>)</operator><call><name>trans_find_port</name><argument_list>(<argument><expr><name>my_trans</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<goto>goto <name>fetch</name>;</goto>

<case>case <expr><name>SNMP_OP_SET</name></expr>:</case>
<expr_stmt><expr><name>port</name> <operator>=</operator> <operator>(</operator>struct <name>inet_port</name> <operator>*</operator><operator>)</operator><call><name>trans_find_port</name><argument_list>(<argument><expr><name>my_trans</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>which</name> <operator>!=</operator> <name>LEAF_begemotSnmpdTransInetStatus</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isok_RowStatus</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_WRONG_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>index_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>iidx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>params</name><operator>.</operator><name>type</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>params</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>params</name><operator>.</operator><name>addr_len</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>params</name><operator>.</operator><name>port</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>params</name><operator>.</operator><name>proto</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NO_CREATION</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>asn_slice_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>params</name><operator>.</operator><name>index</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name><name>value</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>inet_port_set</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>,
<argument><expr><operator>(</operator>enum <name>RowStatus</name><operator>)</operator><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>params</name><operator>.</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>

<case>case <expr><name>SNMP_OP_ROLLBACK</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>port</name> <operator>=</operator> <operator>(</operator>struct <name>inet_port</name> <operator>*</operator><operator>)</operator><call><name>trans_find_port</name><argument_list>(<argument><expr><name>my_trans</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SET_CREATED</name></expr>:</case>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>port</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>inet_destroy_port</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>tport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>SET_DESTROY</name></expr>:</case>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>port</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>SET_ACTIVATED</name></expr>:</case>
<expr_stmt><expr><call><name>deactivate_port</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>SET_DEACTIVATE</name></expr>:</case>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>SNMP_OP_COMMIT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>port</name> <operator>=</operator> <operator>(</operator>struct <name>inet_port</name> <operator>*</operator><operator>)</operator><call><name>trans_find_port</name><argument_list>(<argument><expr><name>my_trans</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SET_CREATED</name></expr>:</case>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>port</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>SET_DESTROY</name></expr>:</case>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>port</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>inet_destroy_port</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>tport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>SET_ACTIVATED</name></expr>:</case>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>SET_DEACTIVATE</name></expr>:</case>
<expr_stmt><expr><call><name>deactivate_port</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>fetch</name>:</label>
<switch>switch <condition>(<expr><name>which</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LEAF_begemotSnmpdTransInetStatus</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>port</name><operator>-&gt;</operator><name>row_status</name></name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
