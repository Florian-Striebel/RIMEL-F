<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bsnmp/snmpd/snmpd.h">
































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBBEGEMOT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpoll.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;isc/eventlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_SYSCONFIG</name></cpp:macro> <cpp:value>"/etc:/usr/etc:/usr/local/etc"</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBBEGEMOT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>evTimerID</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>evFileID</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<struct>struct <name>community</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>lmodule</name></name> <modifier>*</modifier></type><name>owner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>private</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type> <name>string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type> <name>descr</name></decl>;</decl_stmt>
<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>community</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>asn_oid</name></name></type> <name>index</name></decl>;</decl_stmt>
}</block>;</struct>

<extern>extern TAILQ_HEAD(community_list<operator>,</operator> community</extern>) <expr_stmt><expr><name>community_list</name></expr>;</expr_stmt>





<struct>struct <name>idrange</name> <block>{
<decl_stmt><decl><type><name>u_int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lmodule</name></name> <modifier>*</modifier></type><name>owner</name></decl>;</decl_stmt>
<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>idrange</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>
}</block>;</struct>


<extern>extern TAILQ_HEAD(idrange_list<operator>,</operator> idrange</extern>) <expr_stmt><expr><name>idrange_list</name></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>u_int</name></type> <name>next_idrange</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>u_int</name></type> <name>trap_reqid</name></decl>;</decl_stmt>





<struct>struct <name>timer</name> <block>{
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>udata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>evTimerID</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lmodule</name></name> <modifier>*</modifier></type><name>owner</name></decl>;</decl_stmt>
<macro><name>LIST_ENTRY</name><argument_list>(<argument>timer</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>
}</block>;</struct>


<extern>extern LIST_HEAD(timer_list<operator>,</operator> timer</extern>) <expr_stmt><expr><name>timer_list</name></expr>;</expr_stmt>






<struct>struct <name>fdesc</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>udata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>evFileID</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lmodule</name></name> <modifier>*</modifier></type><name>owner</name></decl>;</decl_stmt>
<macro><name>LIST_ENTRY</name><argument_list>(<argument>fdesc</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>
}</block>;</struct>


<extern>extern LIST_HEAD(fdesc_list<operator>,</operator> fdesc</extern>) <expr_stmt><expr><name>fdesc_list</name></expr>;</expr_stmt>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LM_SECTION_MAX</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<struct>struct <name>lmodule</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>section</name><index>[<expr><name>LM_SECTION_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_module</name></name> <modifier>*</modifier></type><name>config</name></decl>;</decl_stmt>

<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>lmodule</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>
<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>lmodule</argument>)</argument_list></macro> <expr_stmt><expr><name>start</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>asn_oid</name></name></type> <name>index</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LM_STARTED</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LM_ONSTARTLIST</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>

<extern>extern TAILQ_HEAD(lmodules<operator>,</operator> lmodule</extern>) <expr_stmt><expr><name>lmodules</name></expr>;</expr_stmt>

<function_decl><type><name><name>struct</name> <name>lmodule</name></name> <modifier>*</modifier></type><name>lm_load</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>lm_unload</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lmodule</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>lm_start</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lmodule</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>








<struct>struct <name>port_input</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stream</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cred</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>peer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>peerlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>priv</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buflen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>consumed</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>tport</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>asn_oid</name></name></type> <name>index</name></decl>;</decl_stmt>
<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>tport</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport</name></decl>;</decl_stmt>
}</block>;</struct>
<expr_stmt><expr><call><name>TAILQ_HEAD</name><argument_list>(<argument><expr><name>tport_list</name></expr></argument>, <argument><expr><name>tport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>int</name></type> <name>snmpd_input</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>port_input</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tport</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>snmpd_input_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>port_input</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>snmpd_input_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>port_input</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANS_NAMELEN</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<struct>struct <name>transport_def</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>asn_oid</name></name></type> <name>id</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>start</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>stop</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>close_port</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tport</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>init_port</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tport</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>send</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tport</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>recv</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tport</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>port_input</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>send2</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tport</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>port_input</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>
<struct>struct <name>transport</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>asn_oid</name></name></type> <name>index</name></decl>;</decl_stmt>
<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>transport</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>or_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tport_list</name></name></type> <name>table</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>transport_def</name></name> <modifier>*</modifier></type><name>vtab</name></decl>;</decl_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>TAILQ_HEAD</name><argument_list>(<argument><expr><name>transport_list</name></expr></argument>, <argument><expr><name>transport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>transport_list</name></name></type> <name>transport_list</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>trans_insert_port</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tport</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>trans_remove_port</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tport</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>tport</name></name> <modifier>*</modifier></type><name>trans_find_port</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>u_int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>tport</name></name> <modifier>*</modifier></type><name>trans_next_port</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>u_int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>tport</name></name> <modifier>*</modifier></type><name>trans_first_port</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>tport</name></name> <modifier>*</modifier></type><name>trans_iter_port</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tport</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>intptr_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>trans_register</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>transport_def</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>trans_unregister</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>





<struct>struct <name>snmpd</name> <block>{

<decl_stmt><decl><type><name>u_int32_t</name></type> <name>txbuf</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>u_int32_t</name></type> <name>rxbuf</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>comm_dis</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>auth_traps</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>u_char</name></type> <name><name>trap1addr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>version_enable</name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>snmpd</name></name></type> <name>snmpd</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERS_ENABLE_V1</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERS_ENABLE_V2C</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERS_ENABLE_V3</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERS_ENABLE_ALL</name></cpp:macro> <cpp:value>(VERS_ENABLE_V1 | VERS_ENABLE_V2C | VERS_ENABLE_V3)</cpp:value></cpp:define>




<struct>struct <name>debug</name> <block>{
<decl_stmt><decl><type><name>u_int</name></type> <name>dump_pdus</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>logpri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>evdebug</name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>debug</name></name></type> <name>debug</name></decl>;</decl_stmt>





<struct>struct <name>snmpd_stats</name> <block>{
<decl_stmt><decl><type><name>u_int32_t</name></type> <name>inPkts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int32_t</name></type> <name>inBadVersions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int32_t</name></type> <name>inASNParseErrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int32_t</name></type> <name>inBadCommunityNames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int32_t</name></type> <name>inBadCommunityUses</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int32_t</name></type> <name>proxyDrops</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int32_t</name></type> <name>silentDrops</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>u_int32_t</name></type> <name>inBadPduTypes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int32_t</name></type> <name>inTooLong</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int32_t</name></type> <name>noTxbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int32_t</name></type> <name>noRxbuf</name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>snmpd_stats</name></name></type> <name>snmpd_stats</name></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>snmp_engine</name></name></type> <name>snmpd_engine</name></decl>;</decl_stmt>




<struct>struct <name>objres</name> <block>{
<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>objres</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>asn_oid</name></name></type> <name>oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>descr</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int32_t</name></type> <name>uptime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lmodule</name></name> <modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>
}</block>;</struct>
<expr_stmt><expr><call><name>TAILQ_HEAD</name><argument_list>(<argument><expr><name>objres_list</name></expr></argument>, <argument><expr><name>objres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>objres_list</name></name></type> <name>objres_list</name></decl>;</decl_stmt>




<struct>struct <name>trapsink</name> <block>{
<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>trapsink</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>asn_oid</name></name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>socket</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name></type> <name><name>comm</name><index>[<expr><name>SNMP_COMMUNITY_MAXLEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>version</name></decl>;</decl_stmt>
}</block>;</struct>
<enum>enum <block>{
<decl><name>TRAPSINK_ACTIVE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>TRAPSINK_NOT_IN_SERVICE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>TRAPSINK_NOT_READY</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>TRAPSINK_DESTROY</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,

<decl><name>TRAPSINK_V1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>TRAPSINK_V2</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
}</block>;</enum>
<expr_stmt><expr><call><name>TAILQ_HEAD</name><argument_list>(<argument><expr><name>trapsink_list</name></expr></argument>, <argument><expr><name>trapsink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>trapsink_list</name></name></type> <name>trapsink_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>syspath</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>int32_t</name></type> <name>snmp_serial_no</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>init_actvals</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name><name>engine_file</name><index>[]</index></name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> <name>init_snmpd_engine</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>set_snmpd_engine</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>update_snmpd_engine_time</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>read_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>lmodule</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>define_macro</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_ASN1_ERRORS</name></cpp:macro> <cpp:value>0x10000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_SNMP_ERRORS</name></cpp:macro> <cpp:value>0x20000000</cpp:value></cpp:define>
</unit>
