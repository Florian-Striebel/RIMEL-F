<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bsnmp/tests/constbuf.h">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>constbuf_h_1578777513</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>constbuf_h_1578777513</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;array&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_EXPR_IN_ARRAY_SIZE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__GNUC__</name><operator>&gt;=</operator> <literal type="number">9</literal> <operator>||</operator> <operator>(</operator><name>__GNUC__</name> <operator>==</operator> <literal type="number">9</literal> <operator>&amp;&amp;</operator> <name>__GNUC_MINOR__</name> <operator>&gt;=</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_EXPR_IN_ARRAY_SIZE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>clang</name> <name>diagnostic</name> <name>push</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>clang</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wgnu-string-literal-operator-template"</cpp:literal></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_EXPR_IN_ARRAY_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>test</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>detail</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>Constbuf_mode</name> <block>{<block_content>
<expr_stmt><expr><name>BIN</name></expr><operator>,</operator>
<expr><name>COMMENT</name></expr><operator>,</operator>
<expr><name>HEX</name></expr><operator>,</operator>
<expr><name>CHECK</name></expr><operator>,</operator>
<expr><name>GOTO</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A</name></expr></argument>&gt;</argument_list></name>
<name>constexpr</name> <name>bool</name></type>
<name>count_comment</name><parameter_list>(<parameter><decl><type><name>A</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>Constbuf_mode</name> <modifier>&amp;</modifier></type><name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>Constbuf_mode</name><operator>::</operator><name>BIN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A</name></expr></argument>&gt;</argument_list></name>
<name>constexpr</name> <name>bool</name></type>
<name>count_hex</name><argument_list>(<argument><expr><name>A</name> <name>c</name></expr></argument>, <argument><expr><name>Constbuf_mode</name> <operator>&amp;</operator><name>mode</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>size_t</name> <operator>&amp;</operator><name>bits</name></expr></argument>)</argument_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'f'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'F'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>%</operator> <literal type="number">4</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>throw</name> <literal type="string">"unaligned hex digit"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bits</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>Constbuf_mode</name><operator>::</operator><name>BIN</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A</name></expr></argument>, <argument><expr><name>typename</name> <name>U</name></expr></argument>&gt;</argument_list></name>
<name>constexpr</name> <name>bool</name></type>
<name>handle_hex</name><argument_list>(<argument><expr><name>A</name> <name>c</name></expr></argument>, <argument><expr><name>Constbuf_mode</name> <operator>&amp;</operator><name>mode</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>size_t</name> <operator>&amp;</operator><name>bit</name></expr></argument>, <argument><expr><name>U</name> <operator>&amp;</operator><name>n</name></expr></argument>)</argument_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>n</name><index>[<expr><name>bit</name> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>bit</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>bit</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'f'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>n</name><index>[<expr><name>bit</name> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">10</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>bit</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>bit</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'F'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>n</name><index>[<expr><name>bit</name> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">10</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>bit</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>bit</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>Constbuf_mode</name><operator>::</operator><name>BIN</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A</name></expr></argument>&gt;</argument_list></name>
<name>constexpr</name> <name>bool</name></type>
<name>count_check</name><argument_list>(<argument><expr><name>A</name> <name>c</name></expr></argument>, <argument><expr><name>Constbuf_mode</name> <operator>&amp;</operator><name>mode</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>size_t</name> <operator>&amp;</operator></expr></argument>)</argument_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>Constbuf_mode</name><operator>::</operator><name>BIN</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A</name></expr></argument>&gt;</argument_list></name>
<name>constexpr</name> <name>bool</name></type>
<name>handle_check</name><argument_list>(<argument><expr><name>A</name> <name>c</name></expr></argument>, <argument><expr><name>Constbuf_mode</name> <operator>&amp;</operator><name>mode</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>size_t</name> <operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>size_t</name> <operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>addr</name> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>%</operator> <literal type="number">8</literal> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>bits</name> <operator>/</operator> <literal type="number">8</literal> <operator>!=</operator> <name>addr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>throw</name> <literal type="string">"address check failed"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>Constbuf_mode</name><operator>::</operator><name>BIN</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A</name></expr></argument>&gt;</argument_list></name>
<name>constexpr</name> <name>bool</name></type>
<name>count_goto</name><argument_list>(<argument><expr><name>A</name> <name>c</name></expr></argument>, <argument><expr><name>Constbuf_mode</name> <operator>&amp;</operator><name>mode</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>size_t</name> <operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>size_t</name> <operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>addr</name> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">8</literal> <operator>*</operator> <name>addr</name> <operator>&lt;</operator> <name>bits</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>throw</name> <literal type="string">"cannot go backwards"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>Constbuf_mode</name><operator>::</operator><name>BIN</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A</name></expr></argument>&gt;</argument_list></name>
<name>constexpr</name> <name>bool</name></type>
<name>count_bin</name><argument_list>(<argument><expr><name>A</name> <name>c</name></expr></argument>, <argument><expr><name>Constbuf_mode</name> <operator>&amp;</operator><name>mode</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>size_t</name> <operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>size_t</name> <operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>Constbuf_mode</name><operator>::</operator><name>COMMENT</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'x'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'X'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>Constbuf_mode</name><operator>::</operator><name>HEX</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>Constbuf_mode</name><operator>::</operator><name>CHECK</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>Constbuf_mode</name><operator>::</operator><name>GOTO</name></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'0'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'1'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bits</name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>throw</name> <literal type="string">"bad character"</literal></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A</name></expr></argument>, <argument><expr><name>typename</name> <name>U</name></expr></argument>&gt;</argument_list></name>
<name>constexpr</name> <name>bool</name></type>
<name>handle_bin</name><argument_list>(<argument><expr><name>A</name> <name>c</name></expr></argument>, <argument><expr><name>Constbuf_mode</name> <operator>&amp;</operator><name>mode</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>size_t</name> <operator>&amp;</operator><name>bit</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>size_t</name> <operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>U</name> <operator>&amp;</operator><name>n</name></expr></argument>)</argument_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>Constbuf_mode</name><operator>::</operator><name>COMMENT</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'x'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'X'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>Constbuf_mode</name><operator>::</operator><name>HEX</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>Constbuf_mode</name><operator>::</operator><name>CHECK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>Constbuf_mode</name><operator>::</operator><name>GOTO</name></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'0'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bit</name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'1'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>n</name><index>[<expr><name>bit</name> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">0x80</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name>bit</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>bit</name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>throw</name> <literal type="string">"bad character"</literal></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>









<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A</name></expr></argument>, <argument><expr><name>A</name> <modifier>...</modifier><name>a</name></expr></argument>&gt;</argument_list></name>
<name>constexpr</name> <name>std</name><operator>::</operator><name>size_t</name>
<macro><name>count_bits</name><argument_list>()</argument_list></macro>
<block>{
<expr><name>std</name><operator>::</operator><name>size_t</name> <name>bits</name> <block>{<expr><literal type="number">0</literal></expr>}</block></expr>;
<expr><name>std</name><operator>::</operator><name>size_t</name> <name>addr</name> <block>{<expr><literal type="number">0</literal></expr>}</block></expr>;
<expr><name>auto</name> <name>mode</name> <operator>=</operator> <name>Constbuf_mode</name><operator>::</operator><name>BIN</name></expr>;

<for>for <control>(<init><decl><type><name>auto</name></type> <name>c</name> <range>: <expr><block>{<expr><name>a</name><operator>...</operator></expr>}</block></expr></range></decl></init>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>bool</name></type> <name>again</name> <init>= <expr><name>true</name></expr></init></decl>;</init> <condition><expr><name>again</name></expr>;</condition> <incr><expr><name>again</name> <operator>=</operator> <name>false</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Constbuf_mode</name><operator>::</operator><name>COMMENT</name></expr>:</case>
<expr_stmt><expr><name>again</name> <operator>=</operator> <call><name>count_comment</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>Constbuf_mode</name><operator>::</operator><name>CHECK</name></expr>:</case>
<expr_stmt><expr><name>again</name> <operator>=</operator> <call><name>count_check</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>Constbuf_mode</name><operator>::</operator><name>GOTO</name></expr>:</case>
<expr_stmt><expr><name>again</name> <operator>=</operator> <call><name>count_goto</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>Constbuf_mode</name><operator>::</operator><name>HEX</name></expr>:</case>
<expr_stmt><expr><name>again</name> <operator>=</operator> <call><name>count_hex</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>Constbuf_mode</name><operator>::</operator><name>BIN</name></expr>:</case>
<expr_stmt><expr><name>again</name> <operator>=</operator> <call><name>count_bin</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<expr_stmt/>}</block_content>
}
}
return bits</block><empty_stmt>;</empty_stmt></switch>
<expr_stmt/>}</block_content>

}

template&lt;typename A</block><operator>,</operator> <expr_stmt><expr><name>A</name> <operator>...</operator><name>a</name><operator>&gt;</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_EXPR_IN_ARRAY_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>constexpr</name> <name>auto</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>auto</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>constbuf</name><argument_list>()</argument_list></macro>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_EXPR_IN_ARRAY_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>std</name><operator>::</operator><name><name>array</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><operator>(</operator><name>detail</name><operator>::</operator><name><name>count_bits</name><argument_list type="generic">&lt;<argument><expr><name>A</name></expr></argument>, <argument><expr><name>a</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><operator>(</operator><operator>)</operator> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></argument>&gt;</argument_list></name> <name>n</name> <block>{}</block></expr>;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name> <call><name>n</name><argument_list>(<argument><expr><operator>(</operator><name>detail</name><operator>::</operator><call><name><name>count_bits</name><argument_list type="generic">&lt;<argument><expr><name>A</name></expr></argument>, <argument><expr><name>a</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><name>using</name> <name>namespace</name> <name>detail</name></expr>;

<expr><name>std</name><operator>::</operator><name>size_t</name> <name>bit</name> <block>{<expr><literal type="number">0</literal></expr>}</block></expr>;
<expr><name>std</name><operator>::</operator><name>size_t</name> <name>addr</name> <block>{<expr><literal type="number">0</literal></expr>}</block></expr>;
<expr><name>auto</name> <name>mode</name> <operator>=</operator> <name>Constbuf_mode</name><operator>::</operator><name>BIN</name></expr>;

<for>for <control>(<init><decl><type><name>auto</name></type> <name>c</name> <range>: <expr><block>{<expr><name>a</name><operator>...</operator></expr>}</block></expr></range></decl></init>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>bool</name></type> <name>again</name> <init>= <expr><name>true</name></expr></init></decl>;</init> <condition><expr><name>again</name></expr>;</condition> <incr><expr><name>again</name> <operator>=</operator> <name>false</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Constbuf_mode</name><operator>::</operator><name>COMMENT</name></expr>:</case>
<expr_stmt><expr><name>again</name> <operator>=</operator> <call><name>count_comment</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>Constbuf_mode</name><operator>::</operator><name>CHECK</name></expr>:</case>
<expr_stmt><expr><name>again</name> <operator>=</operator> <call><name>handle_check</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>bit</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>Constbuf_mode</name><operator>::</operator><name>GOTO</name></expr>:</case>
<expr_stmt><expr><name>again</name> <operator>=</operator> <call><name>count_goto</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>bit</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>Constbuf_mode</name><operator>::</operator><name>HEX</name></expr>:</case>
<expr_stmt><expr><name>again</name> <operator>=</operator> <call><name>handle_hex</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>bit</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>Constbuf_mode</name><operator>::</operator><name>BIN</name></expr>:</case>
<expr_stmt><expr><name>again</name> <operator>=</operator> <call><name>handle_bin</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>bit</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<expr_stmt/>}</block_content>
}
}
return n</block><empty_stmt>;</empty_stmt></switch>
<expr_stmt/>}</block_content>

<namespace><specifier>inline</specifier> namespace <name>literals</name> <block>{
<decl_stmt><decl><type><specifier>inline</specifier> <name>namespace</name></type> <name>cbuf_literals</name> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_EXPR_IN_ARRAY_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A</name></expr></argument>, <argument><expr><name>A</name> <modifier>...</modifier><name>a</name></expr></argument>&gt;</argument_list></name>
<name>constexpr</name> <name>auto</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A</name></expr></argument>, <argument><expr><name>A</name> <modifier>...</modifier><name>a</name></expr></argument>&gt;</argument_list></name>
<name>auto</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>operator</name> <literal type="string">""</literal><macro><name>_cbuf</name><argument_list>()</argument_list></macro>
<block>{
<return>return <expr><name>test</name><operator>::</operator><call><name><name>constbuf</name><argument_list type="generic">&lt;<argument><expr><name>A</name></expr></argument>, <argument><expr><name>a</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

}
}

}</expr></expr_stmt></block_content></block></decl></decl_stmt></block></namespace></block></for></block_content></block></for></block></expr></expr_stmt></for></block_content></block></for></block></expr></expr_stmt></block_content></block></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
