<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bsnmp/snmp_vacm/vacm_snmp.c">





























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;syslog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asn1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snmp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snmpmod.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMPTREE_TYPES</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vacm_tree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vacm_oid.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>lmodule</name></name> <modifier>*</modifier></type><name>vacm_module</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name></type> <name>oid_vacm</name> <init>= <expr><name>OIDX_snmpVacmMIB</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint</name></type> <name>reg_vacm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>vacm_lock</name></decl>;</decl_stmt>




<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>vacm_append_userindex</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>uint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vacm_user</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vacm_user_index_decode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>uint</name></type></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>vacm_user</name></name> <modifier>*</modifier></type><name>vacm_get_user</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>uint</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>vacm_user</name></name> <modifier>*</modifier></type><name>vacm_get_next_user</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>uint</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>vacm_append_access_rule_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>uint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vacm_access</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vacm_access_rule_index_decode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>uint</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>vacm_access</name></name> <modifier>*</modifier></type> <name>vacm_get_access_rule</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>uint</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>vacm_access</name></name> <modifier>*</modifier></type> <name>vacm_get_next_access_rule</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>uint</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vacm_view_index_decode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint</name></type></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>vacm_append_viewindex</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint</name></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vacm_view</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>vacm_view</name></name> <modifier>*</modifier></type><name>vacm_get_view</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>vacm_view</name></name> <modifier>*</modifier></type><name>vacm_get_next_view</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>vacm_view</name></name> <modifier>*</modifier></type><name>vacm_get_view_by_name</name><parameter_list>(<parameter><decl><type><name>u_char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>u_int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>vacm_context</name></name> <modifier>*</modifier></type><name>vacm_get_context</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>vacm_context</name></name> <modifier>*</modifier></type><name>vacm_get_next_context</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>uint</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>vacm_append_ctxindex</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint</name></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vacm_context</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type>
<name>op_vacm_context</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier><name>ctx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <name>iidx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>snmp_op</name></name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>cname</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cnamelen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vacm_context</name></name> <modifier>*</modifier></type><name>vacm_ctx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>LEAF_vacmContextName</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SNMP_OP_GET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>vacm_ctx</name> <operator>=</operator> <call><name>vacm_get_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_OP_GETNEXT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>vacm_ctx</name> <operator>=</operator> <call><name>vacm_get_next_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vacm_append_ctxindex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>vacm_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_OP_SET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>vacm_ctx</name> <operator>=</operator> <call><name>vacm_get_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_WRONG_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>community</name> <operator>!=</operator> <name>COMM_INITIALIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOT_WRITEABLE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name></expr>]</index></name> <operator>&gt;=</operator> <name>SNMP_ADM_STR32_SIZ</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_WRONG_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>index_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>iidx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cnamelen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cname</name><index>[<expr><name>cnamelen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>vacm_ctx</name> <operator>=</operator> <call><name>vacm_add_context</name><argument_list>(<argument><expr><name>cname</name></expr></argument>, <argument><expr><name>reg_vacm</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>SNMP_OP_COMMIT</name></expr>:</case>

<case>case <expr><name>SNMP_OP_ROLLBACK</name></expr>:</case>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><call><name>string_get</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>vacm_ctx</name><operator>-&gt;</operator><name>ctxname</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>op_vacm_security_to_group</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <name>iidx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>snmp_op</name></name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>smodel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>uname</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vacm_user</name></name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SNMP_OP_GET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>user</name> <operator>=</operator> <call><name>vacm_get_user</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_OP_GETNEXT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>user</name> <operator>=</operator> <call><name>vacm_get_next_user</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vacm_append_userindex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_OP_SET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>user</name> <operator>=</operator> <call><name>vacm_get_user</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>LEAF_vacmSecurityToGroupStatus</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>user</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>community</name> <operator>!=</operator> <name>COMM_INITIALIZE</name> <operator>&amp;&amp;</operator>
<name><name>user</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>StorageType_readOnly</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOT_WRITEABLE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>user</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>RowStatus_active</name> <operator>&amp;&amp;</operator>
<name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>RowStatus_destroy</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LEAF_vacmGroupName</name></expr>:</case>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name> <operator>=</operator> <name><name>user</name><operator>-&gt;</operator><name>group</name><operator>-&gt;</operator><name>groupname</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>user</name><operator>-&gt;</operator><name>group</name><operator>-&gt;</operator><name>groupname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>vacm_user_set_group</name><argument_list>(<argument><expr><name>user</name></expr></argument>,
<argument><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>octets</name></name></expr></argument>,<argument><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><name>LEAF_vacmSecurityToGroupStorageType</name></expr>:</case>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return>

<case>case <expr><name>LEAF_vacmSecurityToGroupStatus</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>user</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>RowStatus_createAndGo</name> <operator>||</operator>
<call><name>vacm_user_index_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>smodel</name></expr></argument>, <argument><expr><name>uname</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>user</name> <operator>=</operator> <call><name>vacm_new_user</name><argument_list>(<argument><expr><name>smodel</name></expr></argument>, <argument><expr><name>uname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>user</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>user</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RowStatus_destroy</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>community</name> <operator>!=</operator> <name>COMM_INITIALIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>user</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>StorageType_volatile</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>user</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>StorageType_readOnly</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>RowStatus_active</name> <operator>&amp;&amp;</operator>
<name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>RowStatus_destroy</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>=</operator> <name><name>user</name><operator>-&gt;</operator><name>status</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>user</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>SNMP_OP_COMMIT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>LEAF_vacmSecurityToGroupStatus</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>user</name> <operator>=</operator> <call><name>vacm_get_user</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>RowStatus_destroy</name></expr>:</case>
<return>return <expr><operator>(</operator><call><name>vacm_delete_user</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><name>RowStatus_createAndGo</name></expr>:</case>
<expr_stmt><expr><name><name>user</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RowStatus_active</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>SNMP_OP_ROLLBACK</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>user</name> <operator>=</operator> <call><name>vacm_get_user</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LEAF_vacmGroupName</name></expr>:</case>
<return>return <expr><operator>(</operator><call><name>vacm_user_set_group</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><name>LEAF_vacmSecurityToGroupStatus</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>==</operator> <name>RowStatus_destroy</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>vacm_delete_user</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>user</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<default>default:</default>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LEAF_vacmGroupName</name></expr>:</case>
<return>return <expr><operator>(</operator><call><name>string_get</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>user</name><operator>-&gt;</operator><name>group</name><operator>-&gt;</operator><name>groupname</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><name>LEAF_vacmSecurityToGroupStorageType</name></expr>:</case>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>user</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_vacmSecurityToGroupStatus</name></expr>:</case>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>user</name><operator>-&gt;</operator><name>status</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>op_vacm_access</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>sub</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <name>iidx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>snmp_op</name></name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>smodel</name></decl>, <decl><type ref="prev"/><name>slevel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>gname</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>cprefix</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vacm_access</name></name> <modifier>*</modifier></type><name>acl</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SNMP_OP_GET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>acl</name> <operator>=</operator> <call><name>vacm_get_access_rule</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_OP_GETNEXT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>acl</name> <operator>=</operator> <call><name>vacm_get_next_access_rule</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vacm_append_access_rule_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>acl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_OP_SET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>acl</name> <operator>=</operator> <call><name>vacm_get_access_rule</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>LEAF_vacmAccessStatus</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>acl</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>community</name> <operator>!=</operator> <name>COMM_INITIALIZE</name> <operator>&amp;&amp;</operator>
<name><name>acl</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>StorageType_readOnly</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOT_WRITEABLE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LEAF_vacmAccessContextMatch</name></expr>:</case>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>=</operator> <name><name>acl</name><operator>-&gt;</operator><name>ctx_match</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>==</operator> <name>vacmAccessContextMatch_exact</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>ctx_match</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>==</operator> <name>vacmAccessContextMatch_prefix</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>ctx_match</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_WRONG_VALUE</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_vacmAccessReadViewName</name></expr>:</case>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name> <operator>=</operator> <name><name>acl</name><operator>-&gt;</operator><name>read_view</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>read_view</name></name> <operator>=</operator> <call><name>vacm_get_view_by_name</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>octets</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>acl</name><operator>-&gt;</operator><name>read_view</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>read_view</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>LEAF_vacmAccessWriteViewName</name></expr>:</case>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name> <operator>=</operator> <name><name>acl</name><operator>-&gt;</operator><name>write_view</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>acl</name><operator>-&gt;</operator><name>write_view</name></name> <operator>=</operator>
<call><name>vacm_get_view_by_name</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>octets</name></name></expr></argument>,
<argument><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>write_view</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_vacmAccessNotifyViewName</name></expr>:</case>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name> <operator>=</operator> <name><name>acl</name><operator>-&gt;</operator><name>notify_view</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>acl</name><operator>-&gt;</operator><name>notify_view</name></name> <operator>=</operator>
<call><name>vacm_get_view_by_name</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>octets</name></name></expr></argument>,
<argument><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>notify_view</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_vacmAccessStorageType</name></expr>:</case>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return>

<case>case <expr><name>LEAF_vacmAccessStatus</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>acl</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>RowStatus_createAndGo</name> <operator>||</operator>
<call><name>vacm_access_rule_index_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>,
<argument><expr><name>sub</name></expr></argument>, <argument><expr><name>gname</name></expr></argument>, <argument><expr><name>cprefix</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>smodel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slevel</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>acl</name> <operator>=</operator> <call><name>vacm_new_access_rule</name><argument_list>(<argument><expr><name>gname</name></expr></argument>, <argument><expr><name>cprefix</name></expr></argument>,
<argument><expr><name>smodel</name></expr></argument>, <argument><expr><name>slevel</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RowStatus_destroy</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>community</name> <operator>!=</operator> <name>COMM_INITIALIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>StorageType_volatile</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>StorageType_readOnly</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>RowStatus_active</name> <operator>&amp;&amp;</operator>
<name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>RowStatus_destroy</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>=</operator> <name><name>acl</name><operator>-&gt;</operator><name>status</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>SNMP_OP_COMMIT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>LEAF_vacmAccessStatus</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>acl</name> <operator>=</operator> <call><name>vacm_get_access_rule</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>==</operator> <name>RowStatus_destroy</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>vacm_delete_access_rule</name><argument_list>(<argument><expr><name>acl</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RowStatus_active</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>SNMP_OP_ROLLBACK</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>acl</name> <operator>=</operator> <call><name>vacm_get_access_rule</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LEAF_vacmAccessContextMatch</name></expr>:</case>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>ctx_match</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_vacmAccessReadViewName</name></expr>:</case>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>read_view</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_vacmAccessWriteViewName</name></expr>:</case>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>write_view</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_vacmAccessNotifyViewName</name></expr>:</case>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>notify_view</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_vacmAccessStatus</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>==</operator> <name>RowStatus_destroy</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>vacm_delete_access_rule</name><argument_list>(<argument><expr><name>acl</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<default>default:</default>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LEAF_vacmAccessContextMatch</name></expr>:</case>
<return>return <expr><operator>(</operator><call><name>string_get</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>acl</name><operator>-&gt;</operator><name>ctx_prefix</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><name>LEAF_vacmAccessReadViewName</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>acl</name><operator>-&gt;</operator><name>read_view</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>string_get</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>acl</name><operator>-&gt;</operator><name>read_view</name><operator>-&gt;</operator><name>viewname</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>string_get</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
<case>case <expr><name>LEAF_vacmAccessWriteViewName</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>acl</name><operator>-&gt;</operator><name>write_view</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>string_get</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>acl</name><operator>-&gt;</operator><name>write_view</name><operator>-&gt;</operator><name>viewname</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>string_get</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
<case>case <expr><name>LEAF_vacmAccessNotifyViewName</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>acl</name><operator>-&gt;</operator><name>notify_view</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>string_get</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>acl</name><operator>-&gt;</operator><name>notify_view</name><operator>-&gt;</operator><name>viewname</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>string_get</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
<case>case <expr><name>LEAF_vacmAccessStorageType</name></expr>:</case>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>acl</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_vacmAccessStatus</name></expr>:</case>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>acl</name><operator>-&gt;</operator><name>status</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>op_vacm_view_lock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier><name>ctx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <name>iidx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>snmp_op</name></name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>LEAF_vacmViewSpinLock</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SNMP_OP_GET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>vacm_lock</name> <operator>==</operator> <name>INT32_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vacm_lock</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name>vacm_lock</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_OP_GETNEXT</name></expr>:</case>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>SNMP_OP_SET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>vacm_lock</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_OP_ROLLBACK</name></expr>:</case>

<case>case <expr><name>SNMP_OP_COMMIT</name></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>op_vacm_view</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>sub</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <name>iidx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>snmp_op</name></name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>vname</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>asn_oid</name></name></type> <name>oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vacm_view</name></name> <modifier>*</modifier></type><name>view</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SNMP_OP_GET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>view</name> <operator>=</operator> <call><name>vacm_get_view</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_OP_GETNEXT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>view</name> <operator>=</operator> <call><name>vacm_get_next_view</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vacm_append_viewindex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_OP_SET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>view</name> <operator>=</operator> <call><name>vacm_get_view</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>LEAF_vacmViewTreeFamilyStatus</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>view</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>community</name> <operator>!=</operator> <name>COMM_INITIALIZE</name> <operator>&amp;&amp;</operator>
<name><name>view</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>StorageType_readOnly</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOT_WRITEABLE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>view</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>RowStatus_active</name> <operator>&amp;&amp;</operator>
<name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>RowStatus_destroy</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LEAF_vacmViewTreeFamilyMask</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>view</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>view</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>view</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name></expr></argument>, <argument><expr><name><name>view</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>view</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>view</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>view</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>view</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>octets</name></name></expr></argument>,
<argument><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_vacmViewTreeFamilyType</name></expr>:</case>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>=</operator> <name><name>view</name><operator>-&gt;</operator><name>exclude</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>==</operator> <name>vacmViewTreeFamilyType_included</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>view</name><operator>-&gt;</operator><name>exclude</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>==</operator> <name>vacmViewTreeFamilyType_excluded</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>view</name><operator>-&gt;</operator><name>exclude</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_WRONG_VALUE</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_vacmViewTreeFamilyStorageType</name></expr>:</case>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return>

<case>case <expr><name>LEAF_vacmViewTreeFamilyStatus</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>view</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>RowStatus_createAndGo</name> <operator>||</operator>
<call><name>vacm_view_index_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>vname</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>view</name> <operator>=</operator> <call><name>vacm_new_view</name><argument_list>(<argument><expr><name>vname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>view</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RowStatus_destroy</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>community</name> <operator>!=</operator> <name>COMM_INITIALIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>view</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>StorageType_volatile</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>view</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>StorageType_readOnly</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>RowStatus_active</name> <operator>&amp;&amp;</operator>
<name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>RowStatus_destroy</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>=</operator> <name><name>view</name><operator>-&gt;</operator><name>status</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>view</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>SNMP_OP_COMMIT</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LEAF_vacmViewTreeFamilyMask</name></expr>:</case>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_vacmViewTreeFamilyStatus</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>view</name> <operator>=</operator> <call><name>vacm_get_view</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>RowStatus_destroy</name></expr>:</case>
<return>return <expr><operator>(</operator><call><name>vacm_delete_view</name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><name>RowStatus_createAndGo</name></expr>:</case>
<expr_stmt><expr><name><name>view</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RowStatus_active</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>

<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>SNMP_OP_ROLLBACK</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>view</name> <operator>=</operator> <call><name>vacm_get_view</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LEAF_vacmViewTreeFamilyMask</name></expr>:</case>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>view</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>view</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_vacmViewTreeFamilyType</name></expr>:</case>
<expr_stmt><expr><name><name>view</name><operator>-&gt;</operator><name>exclude</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_vacmViewTreeFamilyStatus</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>==</operator> <name>RowStatus_destroy</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>vacm_delete_view</name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<default>default:</default>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LEAF_vacmViewTreeFamilyMask</name></expr>:</case>
<return>return <expr><operator>(</operator><call><name>string_get</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>view</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>view</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><name>LEAF_vacmViewTreeFamilyType</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>view</name><operator>-&gt;</operator><name>exclude</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name>vacmViewTreeFamilyType_excluded</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name>vacmViewTreeFamilyType_included</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_vacmViewTreeFamilyStorageType</name></expr>:</case>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>view</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_vacmViewTreeFamilyStatus</name></expr>:</case>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>view</name><operator>-&gt;</operator><name>status</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>vacm_append_userindex</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>sub</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vacm_user</name></name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>sub</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>user</name><operator>-&gt;</operator><name>secname</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>user</name><operator>-&gt;</operator><name>sec_model</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name></expr>]</index></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>user</name><operator>-&gt;</operator><name>secname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>user</name><operator>-&gt;</operator><name>secname</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>user</name><operator>-&gt;</operator><name>secname</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vacm_user_index_decode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>sub</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>smodel</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>uname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>smodel</name> <operator>=</operator> <name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name></expr>]</index></name> <operator>&gt;=</operator> <name>SNMP_ADM_STR32_SIZ</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>uname</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>uname</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>vacm_user</name></name> <modifier>*</modifier></type>
<name>vacm_get_user</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>sub</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>smodel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>uname</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vacm_user</name></name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vacm_user_index_decode</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>smodel</name></expr></argument>, <argument><expr><name>uname</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>user</name> <operator>=</operator> <call><name>vacm_first_user</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>user</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>user</name> <operator>=</operator> <call><name>vacm_next_user</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>uname</name></expr></argument>, <argument><expr><name><name>user</name><operator>-&gt;</operator><name>secname</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>user</name><operator>-&gt;</operator><name>sec_model</name></name> <operator>==</operator> <name>smodel</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>user</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>vacm_user</name></name> <modifier>*</modifier></type>
<name>vacm_get_next_user</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>sub</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>smodel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>uname</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vacm_user</name></name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>sub</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>vacm_first_user</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vacm_user_index_decode</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>smodel</name></expr></argument>, <argument><expr><name>uname</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>user</name> <operator>=</operator> <call><name>vacm_first_user</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>user</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>user</name> <operator>=</operator> <call><name>vacm_next_user</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>uname</name></expr></argument>, <argument><expr><name><name>user</name><operator>-&gt;</operator><name>secname</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>user</name><operator>-&gt;</operator><name>sec_model</name></name> <operator>==</operator> <name>smodel</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>vacm_next_user</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>vacm_append_access_rule_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>sub</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vacm_access</name></name> <modifier>*</modifier></type><name>acl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>sub</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>acl</name><operator>-&gt;</operator><name>group</name><operator>-&gt;</operator><name>groupname</name></name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>strlen</name><argument_list>(<argument><expr><name><name>acl</name><operator>-&gt;</operator><name>ctx_prefix</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name></expr>]</index></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>acl</name><operator>-&gt;</operator><name>group</name><operator>-&gt;</operator><name>groupname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>acl</name><operator>-&gt;</operator><name>group</name><operator>-&gt;</operator><name>groupname</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>acl</name><operator>-&gt;</operator><name>group</name><operator>-&gt;</operator><name>groupname</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>sub</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>acl</name><operator>-&gt;</operator><name>group</name><operator>-&gt;</operator><name>groupname</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name></expr>]</index></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>acl</name><operator>-&gt;</operator><name>ctx_prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>acl</name><operator>-&gt;</operator><name>ctx_prefix</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>acl</name><operator>-&gt;</operator><name>ctx_prefix</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>sub</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>acl</name><operator>-&gt;</operator><name>ctx_prefix</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>acl</name><operator>-&gt;</operator><name>sec_model</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name></expr>]</index></name> <operator>=</operator> <name><name>acl</name><operator>-&gt;</operator><name>sec_level</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vacm_access_rule_index_decode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>gname</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cprefix</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>smodel</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>slevel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name></expr>]</index></name> <operator>&gt;=</operator> <name>SNMP_ADM_STR32_SIZ</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>gname</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>gname</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sub</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>gname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name></expr>]</index></name> <operator>&gt;=</operator> <name>SNMP_ADM_STR32_SIZ</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cprefix</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>cprefix</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sub</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>cprefix</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>smodel</name> <operator>=</operator> <name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>slevel</name> <operator>=</operator> <name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>vacm_access</name></name> <modifier>*</modifier></type>
<name>vacm_get_access_rule</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>sub</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>smodel</name></decl>, <decl><type ref="prev"/><name>slevel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>gname</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>prefix</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vacm_access</name></name> <modifier>*</modifier></type><name>acl</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vacm_access_rule_index_decode</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>gname</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>smodel</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>slevel</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>acl</name> <operator>=</operator> <call><name>vacm_first_access_rule</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>acl</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>acl</name> <operator>=</operator> <call><name>vacm_next_access_rule</name><argument_list>(<argument><expr><name>acl</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>gname</name></expr></argument>, <argument><expr><name><name>acl</name><operator>-&gt;</operator><name>group</name><operator>-&gt;</operator><name>groupname</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>acl</name><operator>-&gt;</operator><name>ctx_prefix</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>smodel</name> <operator>==</operator> <name><name>acl</name><operator>-&gt;</operator><name>sec_model</name></name> <operator>&amp;&amp;</operator> <name>slevel</name> <operator>==</operator> <name><name>acl</name><operator>-&gt;</operator><name>sec_level</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>acl</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>vacm_access</name></name> <modifier>*</modifier></type>
<name>vacm_get_next_access_rule</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier><name>oid</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name>uint</name> <name>sub</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>smodel</name></decl>, <decl><type ref="prev"/><name>slevel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>gname</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>prefix</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vacm_access</name></name> <modifier>*</modifier></type><name>acl</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>sub</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>vacm_first_access_rule</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vacm_access_rule_index_decode</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>gname</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>smodel</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>slevel</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>acl</name> <operator>=</operator> <call><name>vacm_first_access_rule</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>acl</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>acl</name> <operator>=</operator> <call><name>vacm_next_access_rule</name><argument_list>(<argument><expr><name>acl</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>gname</name></expr></argument>, <argument><expr><name><name>acl</name><operator>-&gt;</operator><name>group</name><operator>-&gt;</operator><name>groupname</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>acl</name><operator>-&gt;</operator><name>ctx_prefix</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>smodel</name> <operator>==</operator> <name><name>acl</name><operator>-&gt;</operator><name>sec_model</name></name> <operator>&amp;&amp;</operator> <name>slevel</name> <operator>==</operator> <name><name>acl</name><operator>-&gt;</operator><name>sec_model</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>vacm_next_access_rule</name><argument_list>(<argument><expr><name>acl</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vacm_view_index_decode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>vname</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>view_oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>viod_off</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name></expr>]</index></name> <operator>&gt;=</operator> <name>SNMP_ADM_STR32_SIZ</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vname</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>vname</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>viod_off</name> <operator>=</operator> <name>sub</name> <operator>+</operator> <name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>view_oid</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>viod_off</name></expr>]</index></name><operator>)</operator> <operator>&gt;</operator> <name>ASN_MAXOIDLEN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>view_oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>viod_off</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>view_oid</name><operator>-&gt;</operator><name>len</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>view_oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>vacm_append_viewindex</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vacm_view</name></name> <modifier>*</modifier></type><name>view</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>sub</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>view</name><operator>-&gt;</operator><name>viewname</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name></expr>]</index></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>view</name><operator>-&gt;</operator><name>viewname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>view</name><operator>-&gt;</operator><name>viewname</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>view</name><operator>-&gt;</operator><name>viewname</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>sub</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>view</name><operator>-&gt;</operator><name>viewname</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name></expr>]</index></name> <operator>=</operator> <name><name>view</name><operator>-&gt;</operator><name>subtree</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>asn_append_oid</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>view</name><operator>-&gt;</operator><name>subtree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>vacm_view</name></name> <modifier>*</modifier></type>
<name>vacm_get_view</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>sub</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>vname</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>asn_oid</name></name></type> <name>subtree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vacm_view</name></name> <modifier>*</modifier></type><name>view</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vacm_view_index_decode</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>vname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subtree</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>view</name> <operator>=</operator> <call><name>vacm_first_view</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>view</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>view</name> <operator>=</operator> <call><name>vacm_next_view</name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>vname</name></expr></argument>, <argument><expr><name><name>view</name><operator>-&gt;</operator><name>viewname</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>asn_compare_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>subtree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>view</name><operator>-&gt;</operator><name>subtree</name></name></expr></argument>)</argument_list></call><operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>view</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>vacm_view</name></name> <modifier>*</modifier></type>
<name>vacm_get_next_view</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>sub</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>vname</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>asn_oid</name></name></type> <name>subtree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vacm_view</name></name> <modifier>*</modifier></type><name>view</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>sub</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>vacm_first_view</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vacm_view_index_decode</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>vname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subtree</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>view</name> <operator>=</operator> <call><name>vacm_first_view</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>view</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>view</name> <operator>=</operator> <call><name>vacm_next_view</name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>vname</name></expr></argument>, <argument><expr><name><name>view</name><operator>-&gt;</operator><name>viewname</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>asn_compare_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>subtree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>view</name><operator>-&gt;</operator><name>subtree</name></name></expr></argument>)</argument_list></call><operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>vacm_next_view</name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>vacm_view</name></name> <modifier>*</modifier></type>
<name>vacm_get_view_by_name</name><parameter_list>(<parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>octets</name></decl></parameter>, <parameter><decl><type><name>u_int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vacm_view</name></name> <modifier>*</modifier></type><name>view</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>view</name> <operator>=</operator> <call><name>vacm_first_view</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>view</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>view</name> <operator>=</operator> <call><name>vacm_next_view</name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>view</name><operator>-&gt;</operator><name>viewname</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>len</name> <operator>&amp;&amp;</operator>
<call><name>memcmp</name><argument_list>(<argument><expr><name>octets</name></expr></argument>, <argument><expr><name><name>view</name><operator>-&gt;</operator><name>viewname</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>view</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>vacm_context</name></name> <modifier>*</modifier></type>
<name>vacm_get_context</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>sub</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>cname</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cnamelen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>index_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vacm_context</name></name> <modifier>*</modifier></type><name>vacm_ctx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name></expr>]</index></name> <operator>&gt;=</operator> <name>SNMP_ADM_STR32_SIZ</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>index_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>index_count</name> <operator>=</operator> <call><name>SNMP_INDEX</name><argument_list>(<argument><expr><name>index_count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>index_decode</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>index_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cnamelen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>vacm_ctx</name> <operator>=</operator> <call><name>vacm_first_context</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>vacm_ctx</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>vacm_ctx</name> <operator>=</operator> <call><name>vacm_next_context</name><argument_list>(<argument><expr><name>vacm_ctx</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cname</name></expr></argument>, <argument><expr><name><name>vacm_ctx</name><operator>-&gt;</operator><name>ctxname</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>vacm_ctx</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>vacm_context</name></name> <modifier>*</modifier></type>
<name>vacm_get_next_context</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>sub</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>cname</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cnamelen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>index_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vacm_context</name></name> <modifier>*</modifier></type><name>vacm_ctx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>sub</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>vacm_first_context</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name></expr>]</index></name> <operator>&gt;=</operator> <name>SNMP_ADM_STR32_SIZ</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>index_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>index_count</name> <operator>=</operator> <call><name>SNMP_INDEX</name><argument_list>(<argument><expr><name>index_count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>index_decode</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>index_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cnamelen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>vacm_ctx</name> <operator>=</operator> <call><name>vacm_first_context</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>vacm_ctx</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>vacm_ctx</name> <operator>=</operator> <call><name>vacm_next_context</name><argument_list>(<argument><expr><name>vacm_ctx</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cname</name></expr></argument>, <argument><expr><name><name>vacm_ctx</name><operator>-&gt;</operator><name>ctxname</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>vacm_next_context</name><argument_list>(<argument><expr><name>vacm_ctx</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>vacm_append_ctxindex</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>sub</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vacm_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>sub</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctxname</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name></expr>]</index></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctxname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctxname</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ctxname</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>vacm_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lmodule</name></name> <modifier>*</modifier></type><name>mod</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>argc</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><name><name>argv</name><index>[]</index></name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>vacm_module</name> <operator>=</operator> <name>mod</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vacm_lock</name> <operator>=</operator> <call><name>random</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vacm_groups_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>vacm_fini</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>vacm_flush_contexts</name><argument_list>(<argument><expr><name>reg_vacm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>or_unregister</name><argument_list>(<argument><expr><name>reg_vacm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>vacm_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>dflt_ctx</name><index>[]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>reg_vacm</name> <operator>=</operator> <call><name>or_register</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid_vacm</name></expr></argument>,
<argument><expr><literal type="string">"The MIB module for managing SNMP View-based Access Control Model."</literal></expr></argument>,
<argument><expr><name>vacm_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>vacm_add_context</name><argument_list>(<argument><expr><name>dflt_ctx</name></expr></argument>, <argument><expr><name>reg_vacm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>vacm_dump</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vacm_context</name></name> <modifier>*</modifier></type><name>vacmctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vacm_user</name></name> <modifier>*</modifier></type><name>vuser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vacm_access</name></name> <modifier>*</modifier></type><name>vacl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vacm_view</name></name> <modifier>*</modifier></type><name>view</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>oidbuf</name><index>[<expr><name>ASN_OIDSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"Context list:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>vacmctx</name> <operator>=</operator> <call><name>vacm_first_context</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>vacmctx</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>vacmctx</name> <operator>=</operator> <call><name>vacm_next_context</name><argument_list>(<argument><expr><name>vacmctx</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"Context \"%s\", module id %d"</literal></expr></argument>,
<argument><expr><name><name>vacmctx</name><operator>-&gt;</operator><name>ctxname</name></name></expr></argument>, <argument><expr><name><name>vacmctx</name><operator>-&gt;</operator><name>regid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"VACM users:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>vuser</name> <operator>=</operator> <call><name>vacm_first_user</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>vuser</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>vuser</name> <operator>=</operator> <call><name>vacm_next_user</name><argument_list>(<argument><expr><name>vuser</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"Uname %s, Group %s, model %d"</literal></expr></argument>, <argument><expr><name><name>vuser</name><operator>-&gt;</operator><name>secname</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>vuser</name><operator>-&gt;</operator><name>group</name></name><operator>!=</operator> <name>NULL</name></expr>?</condition><then><expr><name><name>vuser</name><operator>-&gt;</operator><name>group</name><operator>-&gt;</operator><name>groupname</name></name></expr></then><else>:<expr><literal type="string">"Unknown"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>vuser</name><operator>-&gt;</operator><name>sec_model</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"VACM Access rules:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>vacl</name> <operator>=</operator> <call><name>vacm_first_access_rule</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>vacl</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>vacl</name> <operator>=</operator> <call><name>vacm_next_access_rule</name><argument_list>(<argument><expr><name>vacl</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"Group %s, CtxPrefix %s, Model %d, Level %d, "</literal>
<literal type="string">"RV %s, WR %s, NV %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>vacl</name><operator>-&gt;</operator><name>group</name></name><operator>!=</operator><name>NULL</name></expr>?</condition><then>
<expr><name><name>vacl</name><operator>-&gt;</operator><name>group</name><operator>-&gt;</operator><name>groupname</name></name></expr></then><else>:<expr><literal type="string">"Unknown"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>vacl</name><operator>-&gt;</operator><name>ctx_prefix</name></name></expr></argument>,
<argument><expr><name><name>vacl</name><operator>-&gt;</operator><name>sec_model</name></name></expr></argument>, <argument><expr><name><name>vacl</name><operator>-&gt;</operator><name>sec_level</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>vacl</name><operator>-&gt;</operator><name>read_view</name></name><operator>!=</operator><name>NULL</name></expr>?</condition><then>
<expr><name><name>vacl</name><operator>-&gt;</operator><name>read_view</name><operator>-&gt;</operator><name>viewname</name></name></expr></then><else>:<expr><literal type="string">"None"</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name><name>vacl</name><operator>-&gt;</operator><name>write_view</name></name><operator>!=</operator><name>NULL</name></expr>?</condition><then>
<expr><name><name>vacl</name><operator>-&gt;</operator><name>write_view</name><operator>-&gt;</operator><name>viewname</name></name></expr></then><else>:<expr><literal type="string">"None"</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name><name>vacl</name><operator>-&gt;</operator><name>notify_view</name></name><operator>!=</operator><name>NULL</name></expr>?</condition><then>
<expr><name><name>vacl</name><operator>-&gt;</operator><name>notify_view</name><operator>-&gt;</operator><name>viewname</name></name></expr></then><else>:<expr><literal type="string">"None"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"VACM Views:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>view</name> <operator>=</operator> <call><name>vacm_first_view</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>view</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>view</name> <operator>=</operator> <call><name>vacm_next_view</name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"View %s, Tree %s - %s"</literal></expr></argument>, <argument><expr><name><name>view</name><operator>-&gt;</operator><name>viewname</name></name></expr></argument>,
<argument><expr><call><name>asn_oid2str_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>view</name><operator>-&gt;</operator><name>subtree</name></name></expr></argument>, <argument><expr><name>oidbuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name><name>view</name><operator>-&gt;</operator><name>exclude</name></name></expr>?</condition><then>
<expr><literal type="string">"excluded"</literal></expr></then><else>:<expr><literal type="string">"included"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>vacm_comment</name><index>[]</index></name> <init>=
<expr><literal type="string">"This module implements SNMP View-based Access Control Model defined in RFC 3415."</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>snmp_module</name></name></type> <name>config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_module</name></name></type> <name>config</name> <init>= <expr><block>{
<expr><operator>.</operator><name>comment</name> <operator>=</operator> <name>vacm_comment</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>vacm_init</name></expr>,
<expr><operator>.</operator><name>fini</name> <operator>=</operator> <name>vacm_fini</name></expr>,
<expr><operator>.</operator><name>start</name> <operator>=</operator> <name>vacm_start</name></expr>,
<expr><operator>.</operator><name>tree</name> <operator>=</operator> <name>vacm_ctree</name></expr>,
<expr><operator>.</operator><name>dump</name> <operator>=</operator> <name>vacm_dump</name></expr>,
<expr><operator>.</operator><name>tree_size</name> <operator>=</operator> <name>vacm_CTREE_SIZE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
