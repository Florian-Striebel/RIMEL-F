<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bsnmp/snmp_usm/usm_snmp.c">





























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;syslog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asn1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snmp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snmpmod.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMPTREE_TYPES</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"usm_tree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"usm_oid.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>lmodule</name></name> <modifier>*</modifier></type><name>usm_module</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name></type> <name>oid_usm</name> <init>= <expr><name>OIDX_snmpUsmMIB</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name></type> <name>oid_usmNoAuthProtocol</name> <init>= <expr><name>OIDX_usmNoAuthProtocol</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name></type> <name>oid_usmHMACMD5AuthProtocol</name> <init>= \
<expr><name>OIDX_usmHMACMD5AuthProtocol</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name></type> <name>oid_usmHMACSHAAuthProtocol</name> <init>= \
<expr><name>OIDX_usmHMACSHAAuthProtocol</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name></type> <name>oid_usmNoPrivProtocol</name> <init>= <expr><name>OIDX_usmNoPrivProtocol</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name></type> <name>oid_usmDESPrivProtocol</name> <init>= <expr><name>OIDX_usmDESPrivProtocol</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name></type> <name>oid_usmAesCfb128Protocol</name> <init>= <expr><name>OIDX_usmAesCfb128Protocol</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name></type> <name>oid_usmUserSecurityName</name> <init>= <expr><name>OIDX_usmUserSecurityName</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>uint</name></type> <name>reg_usm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>usm_lock</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>usm_user</name></name> <modifier>*</modifier></type> <name>usm_get_user</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>usm_user</name></name> <modifier>*</modifier></type> <name>usm_get_next_user</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>usm_append_userindex</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint</name></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>usm_user</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>usm_user_index_decode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint</name></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type>
<name>op_usm_stats</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier><name>ctx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <name>sub</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <name>iidx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>snmp_op</name></name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>snmpd_usmstat</name></name> <modifier>*</modifier></type><name>usmstats</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>SNMP_OP_SET</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOT_WRITEABLE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>usmstats</name> <operator>=</operator> <call><name>bsnmpd_get_usm_stats</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>SNMP_OP_GET</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LEAF_usmStatsUnsupportedSecLevels</name></expr>:</case>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name><name>usmstats</name><operator>-&gt;</operator><name>unsupported_seclevels</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_usmStatsNotInTimeWindows</name></expr>:</case>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name><name>usmstats</name><operator>-&gt;</operator><name>not_in_time_windows</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_usmStatsUnknownUserNames</name></expr>:</case>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name><name>usmstats</name><operator>-&gt;</operator><name>unknown_users</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_usmStatsUnknownEngineIDs</name></expr>:</case>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name><name>usmstats</name><operator>-&gt;</operator><name>unknown_engine_ids</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_usmStatsWrongDigests</name></expr>:</case>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name><name>usmstats</name><operator>-&gt;</operator><name>wrong_digests</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_usmStatsDecryptionErrors</name></expr>:</case>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name><name>usmstats</name><operator>-&gt;</operator><name>decrypt_errors</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>op_usm_lock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier><name>ctx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <name>iidx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>snmp_op</name></name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>LEAF_usmUserSpinLock</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SNMP_OP_GET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>usm_lock</name> <operator>==</operator> <name>INT32_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>usm_lock</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name>usm_lock</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SNMP_OP_GETNEXT</name></expr>:</case>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>SNMP_OP_SET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>usm_lock</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>SNMP_OP_ROLLBACK</name></expr>:</case>

<case>case <expr><name>SNMP_OP_COMMIT</name></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>op_usm_users</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <name>iidx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>snmp_op</name></name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>elen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>usm_user</name></name> <modifier>*</modifier></type><name>uuser</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>clone</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>uname</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>eid</name><index>[<expr><name>SNMP_ENGINE_ID_SIZ</name></expr>]</index></name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SNMP_OP_GET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uuser</name> <operator>=</operator> <call><name>usm_get_user</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_OP_GETNEXT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uuser</name> <operator>=</operator> <call><name>usm_get_next_user</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>usm_append_userindex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>uuser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_OP_SET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uuser</name> <operator>=</operator> <call><name>usm_get_user</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>LEAF_usmUserStatus</name> <operator>&amp;&amp;</operator>
<name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>LEAF_usmUserCloneFrom</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>community</name> <operator>!=</operator> <name>COMM_INITIALIZE</name> <operator>&amp;&amp;</operator>
<name>uuser</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>uuser</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>StorageType_readOnly</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOT_WRITEABLE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LEAF_usmUserSecurityName</name></expr>:</case>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOT_WRITEABLE</name><operator>)</operator></expr>;</return>

<case>case <expr><name>LEAF_usmUserCloneFrom</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>uuser</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <call><name>usm_user_index_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>,
<argument><expr><name>sub</name></expr></argument>, <argument><expr><name>eid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elen</name></expr></argument>, <argument><expr><name>uname</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>!</operator><operator>(</operator><call><name>asn_is_suboid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid_usmUserSecurityName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_WRONG_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>clone</name> <operator>=</operator> <call><name>usm_get_user</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uuser</name> <operator>=</operator> <call><name>usm_new_user</name><argument_list>(<argument><expr><name>eid</name></expr></argument>, <argument><expr><name>elen</name></expr></argument>, <argument><expr><name>uname</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>uuser</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RowStatus_notReady</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>community</name> <operator>!=</operator> <name>COMM_INITIALIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>uuser</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>StorageType_volatile</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>uuser</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>StorageType_readOnly</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>uuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>auth_proto</name></name> <operator>=</operator> <name><name>clone</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>auth_proto</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>priv_proto</name></name> <operator>=</operator> <name><name>clone</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>priv_proto</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>uuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>auth_key</name></name></expr></argument>, <argument><expr><name><name>clone</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>auth_key</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>uuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>auth_key</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>uuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>priv_key</name></name></expr></argument>, <argument><expr><name><name>clone</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>priv_key</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>uuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>priv_key</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>=</operator> <name>RowStatus_createAndWait</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_usmUserAuthProtocol</name></expr>:</case>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>=</operator> <name><name>uuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>auth_proto</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>asn_compare_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid_usmNoAuthProtocol</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>uuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>auth_proto</name></name> <operator>=</operator> <name>SNMP_AUTH_NOAUTH</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>asn_compare_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid_usmHMACMD5AuthProtocol</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>uuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>auth_proto</name></name> <operator>=</operator> <name>SNMP_AUTH_HMAC_MD5</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>asn_compare_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid_usmHMACSHAAuthProtocol</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>uuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>auth_proto</name></name> <operator>=</operator> <name>SNMP_AUTH_HMAC_SHA</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_WRONG_VALUE</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_usmUserAuthKeyChange</name></expr>:</case>
<case>case <expr><name>LEAF_usmUserOwnAuthKeyChange</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator>
<name>LEAF_usmUserOwnAuthKeyChange</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>usm_user</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>uuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>sec_name</name></name></expr></argument>,
<argument><expr><name><name>usm_user</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>sec_name</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NO_ACCESS</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <name>SNMP_AUTH_KEY_SIZ</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>SNMP_AUTH_KEY_SIZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name></expr></argument>, <argument><expr><name><name>uuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>auth_key</name></name></expr></argument>,
<argument><expr><name>SNMP_AUTH_KEY_SIZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>uuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>auth_key</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>octets</name></name></expr></argument>,
<argument><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_usmUserPrivProtocol</name></expr>:</case>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>=</operator> <name><name>uuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>priv_proto</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>asn_compare_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid_usmNoPrivProtocol</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>uuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>priv_proto</name></name> <operator>=</operator> <name>SNMP_PRIV_NOPRIV</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>asn_compare_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid_usmDESPrivProtocol</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>uuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>priv_proto</name></name> <operator>=</operator> <name>SNMP_PRIV_DES</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>asn_compare_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid_usmAesCfb128Protocol</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>uuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>priv_proto</name></name> <operator>=</operator> <name>SNMP_PRIV_AES</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_WRONG_VALUE</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_usmUserPrivKeyChange</name></expr>:</case>
<case>case <expr><name>LEAF_usmUserOwnPrivKeyChange</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator>
<name>LEAF_usmUserOwnPrivKeyChange</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>usm_user</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>uuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>sec_name</name></name></expr></argument>,
<argument><expr><name><name>usm_user</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>sec_name</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NO_ACCESS</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <name>SNMP_PRIV_KEY_SIZ</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>SNMP_PRIV_KEY_SIZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name></expr></argument>, <argument><expr><name><name>uuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>priv_key</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>uuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>priv_key</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>uuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>priv_key</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>octets</name></name></expr></argument>,
<argument><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_usmUserPublic</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <name>SNMP_ADM_STR32_SIZ</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>uuser</name><operator>-&gt;</operator><name>user_public_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr2</name></name> <operator>=</operator>
<call><name>malloc</name><argument_list>(<argument><expr><name><name>uuser</name><operator>-&gt;</operator><name>user_public_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr2</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr2</name></name></expr></argument>, <argument><expr><name><name>uuser</name><operator>-&gt;</operator><name>user_public</name></name></expr></argument>,
<argument><expr><name><name>uuser</name><operator>-&gt;</operator><name>user_public_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int2</name></name> <operator>=</operator> <name><name>uuser</name><operator>-&gt;</operator><name>user_public_len</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>uuser</name><operator>-&gt;</operator><name>user_public</name></name></expr></argument>,
<argument><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>octets</name></name></expr></argument>,
<argument><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uuser</name><operator>-&gt;</operator><name>user_public_len</name></name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>uuser</name><operator>-&gt;</operator><name>user_public</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>uuser</name><operator>-&gt;</operator><name>user_public</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uuser</name><operator>-&gt;</operator><name>user_public_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_usmUserStorageType</name></expr>:</case>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return>

<case>case <expr><name>LEAF_usmUserStatus</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>uuser</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>RowStatus_createAndWait</name> <operator>||</operator>
<call><name>usm_user_index_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>eid</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>elen</name></expr></argument>, <argument><expr><name>uname</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>uuser</name> <operator>=</operator> <call><name>usm_new_user</name><argument_list>(<argument><expr><name>eid</name></expr></argument>, <argument><expr><name>elen</name></expr></argument>, <argument><expr><name>uname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uuser</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>uuser</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RowStatus_notReady</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>community</name> <operator>!=</operator> <name>COMM_INITIALIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>uuser</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>StorageType_volatile</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>uuser</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>StorageType_readOnly</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>RowStatus_active</name> <operator>&amp;&amp;</operator>
<name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>RowStatus_destroy</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>uuser</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>SNMP_OP_COMMIT</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LEAF_usmUserAuthKeyChange</name></expr>:</case>
<case>case <expr><name>LEAF_usmUserOwnAuthKeyChange</name></expr>:</case>
<case>case <expr><name>LEAF_usmUserPrivKeyChange</name></expr>:</case>
<case>case <expr><name>LEAF_usmUserOwnPrivKeyChange</name></expr>:</case>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_usmUserPublic</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr2</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_usmUserStatus</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <name>RowStatus_destroy</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uuser</name> <operator>=</operator> <call><name>usm_get_user</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>usm_delete_user</name><argument_list>(<argument><expr><name>uuser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>SNMP_OP_ROLLBACK</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uuser</name> <operator>=</operator> <call><name>usm_get_user</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LEAF_usmUserAuthProtocol</name></expr>:</case>
<expr_stmt><expr><name><name>uuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>auth_proto</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_usmUserAuthKeyChange</name></expr>:</case>
<case>case <expr><name>LEAF_usmUserOwnAuthKeyChange</name></expr>:</case>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>uuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>auth_key</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>uuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>auth_key</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_usmUserPrivProtocol</name></expr>:</case>
<expr_stmt><expr><name><name>uuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>priv_proto</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_usmUserPrivKeyChange</name></expr>:</case>
<case>case <expr><name>LEAF_usmUserOwnPrivKeyChange</name></expr>:</case>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>uuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>priv_key</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>uuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>priv_key</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_usmUserPublic</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr2</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>uuser</name><operator>-&gt;</operator><name>user_public</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr2</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uuser</name><operator>-&gt;</operator><name>user_public_len</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>ptr2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>uuser</name><operator>-&gt;</operator><name>user_public</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>uuser</name><operator>-&gt;</operator><name>user_public</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uuser</name><operator>-&gt;</operator><name>user_public_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_usmUserCloneFrom</name></expr>:</case>
<case>case <expr><name>LEAF_usmUserStatus</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>==</operator> <name>RowStatus_createAndWait</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usm_delete_user</name><argument_list>(<argument><expr><name>uuser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<default>default:</default>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LEAF_usmUserSecurityName</name></expr>:</case>
<return>return <expr><operator>(</operator><call><name>string_get</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>uuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>sec_name</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><name>LEAF_usmUserCloneFrom</name></expr>:</case>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid_zeroDotZero</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>oid_zeroDotZero</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_usmUserAuthProtocol</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>uuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>auth_proto</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SNMP_AUTH_HMAC_MD5</name></expr>:</case>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid_usmHMACMD5AuthProtocol</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>oid_usmHMACMD5AuthProtocol</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SNMP_AUTH_HMAC_SHA</name></expr>:</case>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid_usmHMACSHAAuthProtocol</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>oid_usmHMACSHAAuthProtocol</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid_usmNoAuthProtocol</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>oid_usmNoAuthProtocol</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>LEAF_usmUserAuthKeyChange</name></expr>:</case>
<case>case <expr><name>LEAF_usmUserOwnAuthKeyChange</name></expr>:</case>
<return>return <expr><operator>(</operator><call><name>string_get</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>uuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>auth_key</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><name>LEAF_usmUserPrivProtocol</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>uuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>priv_proto</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SNMP_PRIV_DES</name></expr>:</case>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid_usmDESPrivProtocol</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>oid_usmDESPrivProtocol</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SNMP_PRIV_AES</name></expr>:</case>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid_usmAesCfb128Protocol</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>oid_usmAesCfb128Protocol</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid_usmNoPrivProtocol</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>oid_usmNoPrivProtocol</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>LEAF_usmUserPrivKeyChange</name></expr>:</case>
<case>case <expr><name>LEAF_usmUserOwnPrivKeyChange</name></expr>:</case>
<return>return <expr><operator>(</operator><call><name>string_get</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>uuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>priv_key</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><name>LEAF_usmUserPublic</name></expr>:</case>
<return>return <expr><operator>(</operator><call><name>string_get</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>uuser</name><operator>-&gt;</operator><name>user_public</name></name></expr></argument>,
<argument><expr><name><name>uuser</name><operator>-&gt;</operator><name>user_public_len</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><name>LEAF_usmUserStorageType</name></expr>:</case>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>uuser</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LEAF_usmUserStatus</name></expr>:</case>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>uuser</name><operator>-&gt;</operator><name>status</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>usm_user_index_decode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>engine</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>elen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>uname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>uname_off</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name></expr>]</index></name> <operator>&gt;</operator> <name>SNMP_ENGINE_ID_SIZ</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>engine</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>elen</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>uname_off</name> <operator>=</operator> <name>sub</name> <operator>+</operator> <name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nlen</name> <operator>=</operator> <name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>uname_off</name></expr>]</index></name><operator>)</operator> <operator>&gt;=</operator> <name>SNMP_ADM_STR32_SIZ</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nlen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>uname</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>uname_off</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>uname</name><index>[<expr><name>nlen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>usm_append_userindex</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>sub</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>usm_user</name></name> <modifier>*</modifier></type><name>uuser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>sub</name> <operator>+</operator> <name><name>uuser</name><operator>-&gt;</operator><name>user_engine_len</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>uuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>sec_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name></expr>]</index></name> <operator>=</operator> <name><name>uuser</name><operator>-&gt;</operator><name>user_engine_len</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>uuser</name><operator>-&gt;</operator><name>user_engine_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>uuser</name><operator>-&gt;</operator><name>user_engine_id</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>sub</name> <operator>+=</operator> <name><name>uuser</name><operator>-&gt;</operator><name>user_engine_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name></expr>]</index></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>uuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>sec_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>uuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>sec_name</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>usm_user</name></name> <modifier>*</modifier></type>
<name>usm_get_user</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>sub</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>enginelen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>username</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>engineid</name><index>[<expr><name>SNMP_ENGINE_ID_SIZ</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>usm_user_index_decode</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>engineid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enginelen</name></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>usm_find_user</name><argument_list>(<argument><expr><name>engineid</name></expr></argument>, <argument><expr><name>enginelen</name></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>usm_user</name></name> <modifier>*</modifier></type>
<name>usm_get_next_user</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>sub</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>enginelen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>username</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>engineid</name><index>[<expr><name>SNMP_ENGINE_ID_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>usm_user</name></name> <modifier>*</modifier></type><name>uuser</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>sub</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>usm_first_user</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>usm_user_index_decode</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>engineid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enginelen</name></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uuser</name> <operator>=</operator> <call><name>usm_find_user</name><argument_list>(<argument><expr><name>engineid</name></expr></argument>, <argument><expr><name>enginelen</name></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>usm_next_user</name><argument_list>(<argument><expr><name>uuser</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>usm_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lmodule</name></name> <modifier>*</modifier></type> <name>mod</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>argc</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><name><name>argv</name><index>[]</index></name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>usm_module</name> <operator>=</operator> <name>mod</name></expr>;</expr_stmt>
<expr_stmt><expr><name>usm_lock</name> <operator>=</operator> <call><name>random</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bsnmpd_reset_usm_stats</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>usm_fini</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>usm_flush_users</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>or_unregister</name><argument_list>(<argument><expr><name>reg_usm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>usm_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>reg_usm</name> <operator>=</operator> <call><name>or_register</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid_usm</name></expr></argument>,
<argument><expr><literal type="string">"The MIB module for managing SNMP User-Based Security Model."</literal></expr></argument>,
<argument><expr><name>usm_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>usm_dump</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>usm_user</name></name> <modifier>*</modifier></type><name>uuser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>snmpd_usmstat</name></name> <modifier>*</modifier></type><name>usmstats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>authstr</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"noauth"</literal></expr>,
<expr><literal type="string">"md5"</literal></expr>,
<expr><literal type="string">"sha"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>privstr</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"nopriv"</literal></expr>,
<expr><literal type="string">"des"</literal></expr>,
<expr><literal type="string">"aes"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>usmstats</name> <operator>=</operator> <call><name>bsnmpd_get_usm_stats</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"UnsupportedSecLevels\t\t%u"</literal></expr></argument>,
<argument><expr><name><name>usmstats</name><operator>-&gt;</operator><name>unsupported_seclevels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"NotInTimeWindows\t\t%u"</literal></expr></argument>,
<argument><expr><name><name>usmstats</name><operator>-&gt;</operator><name>not_in_time_windows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"UnknownUserNames\t\t%u"</literal></expr></argument>,
<argument><expr><name><name>usmstats</name><operator>-&gt;</operator><name>unknown_users</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"UnknownEngineIDs\t\t%u"</literal></expr></argument>,
<argument><expr><name><name>usmstats</name><operator>-&gt;</operator><name>unknown_engine_ids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"WrongDigests\t\t%u"</literal></expr></argument>,
<argument><expr><name><name>usmstats</name><operator>-&gt;</operator><name>wrong_digests</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"DecryptionErrors\t\t%u"</literal></expr></argument>,
<argument><expr><name><name>usmstats</name><operator>-&gt;</operator><name>decrypt_errors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"USM users"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>uuser</name> <operator>=</operator> <call><name>usm_first_user</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>uuser</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><operator>(</operator><name>uuser</name> <operator>=</operator> <call><name>usm_next_user</name><argument_list>(<argument><expr><name>uuser</name></expr></argument>)</argument_list></call><operator>)</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"user %s\t\t%s, %s"</literal></expr></argument>, <argument><expr><name><name>uuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>sec_name</name></name></expr></argument>,
<argument><expr><name><name>authstr</name><index>[<expr><name><name>uuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>auth_proto</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>privstr</name><index>[<expr><name><name>uuser</name><operator>-&gt;</operator><name>suser</name><operator>.</operator><name>priv_proto</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>usm_comment</name><index>[]</index></name> <init>=
<expr><literal type="string">"This module implements SNMP User-based Security Model defined in RFC 3414."</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>snmp_module</name></name></type> <name>config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_module</name></name></type> <name>config</name> <init>= <expr><block>{
<expr><operator>.</operator><name>comment</name> <operator>=</operator> <name>usm_comment</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>usm_init</name></expr>,
<expr><operator>.</operator><name>fini</name> <operator>=</operator> <name>usm_fini</name></expr>,
<expr><operator>.</operator><name>start</name> <operator>=</operator> <name>usm_start</name></expr>,
<expr><operator>.</operator><name>tree</name> <operator>=</operator> <name>usm_ctree</name></expr>,
<expr><operator>.</operator><name>dump</name> <operator>=</operator> <name>usm_dump</name></expr>,
<expr><operator>.</operator><name>tree_size</name> <operator>=</operator> <name>usm_CTREE_SIZE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
