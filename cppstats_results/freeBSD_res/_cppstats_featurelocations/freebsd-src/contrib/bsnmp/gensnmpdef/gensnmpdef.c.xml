<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bsnmp/gensnmpdef/gensnmpdef.c">





























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;smi.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>usgtxt</name><index>[]</index></name> <init>=
<expr><literal type="string">"Usage: gensnmpdef [-hEe] [-c &lt;cut&gt;] MIB [MIB ...]\n"</literal>
<literal type="string">"Options:\n"</literal>
<literal type="string">" -c specify the number of initial sub-oids to cut from the oids\n"</literal>
<literal type="string">" -E extract named enum types. Print a typedef for all enums defined\n"</literal>
<literal type="string">" in syntax clauses of normal objects. Suppress normal output.\n"</literal>
<literal type="string">" -e extract unnamed enum types. Print a typedef for all enums defined\n"</literal>
<literal type="string">" as textual conventions. Suppress normal output.\n"</literal>
<literal type="string">" -h print this help\n"</literal>
<literal type="string">"MIBs are searched according to the libsmi(3) search rules and can\n"</literal>
<literal type="string">"be specified either by path or module name\n"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>SmiNode</name> <modifier>*</modifier></type><name>last_node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>u_int</name></type> <name>cut</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>tdef</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<macro><name>SLIST_ENTRY</name><argument_list>(<argument>tdef</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>
}</block>;</struct>

<expr_stmt><expr><specifier>static</specifier> <macro><name>SLIST_HEAD</name><argument_list>(<argument/>, <argument>tdef</argument>)</argument_list></macro> <name>tdefs</name> <operator>=</operator> <call><name>SLIST_HEAD_INITIALIZER</name><argument_list>(<argument><expr><name>tdefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>do_typedef</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>print_node</name><parameter_list>(<parameter><decl><type><name>SmiNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>u_int</name></type> <name>level</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>save_node</name><parameter_list>(<parameter><decl><type><name>SmiNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>last_node</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>pindent</name><parameter_list>(<parameter><decl><type><name>u_int</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;=</operator> <name>cut</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%*s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>level</name> <operator>-</operator> <name>cut</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_name</name><parameter_list>(<parameter><decl><type><name>SmiNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>name</name></name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"_"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>u_int</name></type>
<name>close_node</name><parameter_list>(<parameter><decl><type><name>u_int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>u_int</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>n</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pindent</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>level</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;=</operator> <name>cut</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">")\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>level</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>u_int</name></type>
<name>open_node</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SmiNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>u_int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>SmiNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>last</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SmiNode</name> <modifier>*</modifier></type><name>n1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>last</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><operator>(</operator><operator>*</operator><name>last</name><operator>)</operator><operator>-&gt;</operator><name>oidlen</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>n</name><operator>-&gt;</operator><name>oidlen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>close_node</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>last</name><operator>)</operator><operator>-&gt;</operator><name>oidlen</name></name> <operator>-</operator>
<name><name>n</name><operator>-&gt;</operator><name>oidlen</name></name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>last</name><operator>)</operator><operator>-&gt;</operator><name>oid</name></name><index>[<expr><name>i</name></expr>]</index> <operator>!=</operator> <name><name>n</name><operator>-&gt;</operator><name>oid</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><operator>(</operator><operator>*</operator><name>last</name><operator>)</operator><operator>-&gt;</operator><name>oidlen</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>close_node</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>last</name><operator>)</operator><operator>-&gt;</operator><name>oidlen</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr></argument>,
<argument><expr><name>level</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>level</name> <operator>&lt;</operator> <name><name>n</name><operator>-&gt;</operator><name>oidlen</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;=</operator> <name>cut</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n1</name> <operator>=</operator> <call><name>smiGetNodeByOID</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n1</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>pindent</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(%u"</literal></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>oid</name><index>[<expr><name>level</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_name</name><argument_list>(<argument><expr><name>n1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>level</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>level</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>type_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>SMI_BASETYPE_UNKNOWN</name></expr>]</index> <operator>=</operator> <literal type="string">"UNKNOWN_TYPE"</literal></expr>,
<expr><index>[<expr><name>SMI_BASETYPE_INTEGER32</name></expr>]</index> <operator>=</operator> <literal type="string">"INTEGER"</literal></expr>,
<expr><index>[<expr><name>SMI_BASETYPE_OCTETSTRING</name></expr>]</index> <operator>=</operator> <literal type="string">"OCTETSTRING"</literal></expr>,
<expr><index>[<expr><name>SMI_BASETYPE_OBJECTIDENTIFIER</name></expr>]</index> <operator>=</operator> <literal type="string">"OID"</literal></expr>,
<expr><index>[<expr><name>SMI_BASETYPE_UNSIGNED32</name></expr>]</index> <operator>=</operator> <literal type="string">"UNSIGNED32"</literal></expr>,
<expr><index>[<expr><name>SMI_BASETYPE_INTEGER64</name></expr>]</index> <operator>=</operator> <literal type="string">"INTEGER64"</literal></expr>,
<expr><index>[<expr><name>SMI_BASETYPE_UNSIGNED64</name></expr>]</index> <operator>=</operator> <literal type="string">"UNSIGNED64"</literal></expr>,
<expr><index>[<expr><name>SMI_BASETYPE_FLOAT32</name></expr>]</index> <operator>=</operator> <literal type="string">"FLOAT32"</literal></expr>,
<expr><index>[<expr><name>SMI_BASETYPE_FLOAT64</name></expr>]</index> <operator>=</operator> <literal type="string">"FLOAT64"</literal></expr>,
<expr><index>[<expr><name>SMI_BASETYPE_FLOAT128</name></expr>]</index> <operator>=</operator> <literal type="string">"FLOAT128"</literal></expr>,
<expr><index>[<expr><name>SMI_BASETYPE_ENUM</name></expr>]</index> <operator>=</operator> <literal type="string">"ENUM"</literal></expr>,
<expr><index>[<expr><name>SMI_BASETYPE_BITS</name></expr>]</index> <operator>=</operator> <literal type="string">"BITS"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>type_map</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"Gauge32"</literal></expr>, <expr><literal type="string">"GAUGE"</literal></expr>,
<expr><literal type="string">"Gauge"</literal></expr>, <expr><literal type="string">"GAUGE"</literal></expr>,
<expr><literal type="string">"TimeTicks"</literal></expr>, <expr><literal type="string">"TIMETICKS"</literal></expr>,
<expr><literal type="string">"Counter32"</literal></expr>, <expr><literal type="string">"COUNTER"</literal></expr>,
<expr><literal type="string">"Counter"</literal></expr>, <expr><literal type="string">"COUNTER"</literal></expr>,
<expr><literal type="string">"Counter64"</literal></expr>, <expr><literal type="string">"COUNTER64"</literal></expr>,
<expr><literal type="string">"Integer32"</literal></expr>, <expr><literal type="string">"INTEGER32"</literal></expr>,
<expr><literal type="string">"IpAddress"</literal></expr>, <expr><literal type="string">"IPADDRESS"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_enum</name><parameter_list>(<parameter><decl><type><name>SmiType</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SmiNamedNumber</name> <modifier>*</modifier></type><name>nnum</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>nnum</name> <operator>=</operator> <call><name>smiGetFirstNamedNumber</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>nnum</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>nnum</name> <operator>=</operator> <call><name>smiGetNextNamedNumber</name><argument_list>(<argument><expr><name>nnum</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %ld %s"</literal></expr></argument>, <argument><expr><name><name>nnum</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>value</name><operator>.</operator><name>integer32</name></name></expr></argument>, <argument><expr><name><name>nnum</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" )"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_type</name><parameter_list>(<parameter><decl><type><name>SmiNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SmiType</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>m</name></decl>;</decl_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>smiGetNodeType</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>type</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>type</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>type_map</name><index>[<expr><name>m</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>m</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>type_map</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>type_map</name><index>[<expr><name>m</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>type_names</name><index>[<expr><name><name>type</name><operator>-&gt;</operator><name>basetype</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>type</name><operator>-&gt;</operator><name>basetype</name></name> <operator>==</operator> <name>SMI_BASETYPE_ENUM</name> <operator>||</operator>
<name><name>type</name><operator>-&gt;</operator><name>basetype</name></name> <operator>==</operator> <name>SMI_BASETYPE_BITS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_enum</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>type</name><operator>-&gt;</operator><name>basetype</name></name> <operator>==</operator> <name>SMI_BASETYPE_OCTETSTRING</name> <operator>&amp;&amp;</operator>
<name><name>type</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" | %s"</literal></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_access</name><parameter_list>(<parameter><decl><type><name>SmiAccess</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>SMI_ACCESS_READ_ONLY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" GET"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>a</name> <operator>==</operator> <name>SMI_ACCESS_READ_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" GET SET"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_scalar</name><parameter_list>(<parameter><decl><type><name>SmiNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>u_int</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SmiNode</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nodekind</name></name> <operator>==</operator> <name>SMI_NODEKIND_SCALAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>save_node</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pindent</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(%u "</literal></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>oid</name><index>[<expr><name>level</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_name</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_type</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>smiGetParentNode</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" op_%s"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_access</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>access</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">")\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_notification</name><parameter_list>(<parameter><decl><type><name>SmiNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>u_int</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nodekind</name></name> <operator>==</operator> <name>SMI_NODEKIND_NOTIFICATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>save_node</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pindent</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(%u "</literal></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>oid</name><index>[<expr><name>level</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_name</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" OID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" op_%s)\n"</literal></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_col</name><parameter_list>(<parameter><decl><type><name>SmiNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>u_int</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nodekind</name></name> <operator>==</operator> <name>SMI_NODEKIND_COLUMN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>save_node</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pindent</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(%u "</literal></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>oid</name><index>[<expr><name>level</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_name</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_type</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_access</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>access</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">")\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_index</name><parameter_list>(<parameter><decl><type><name>SmiNode</name> <modifier>*</modifier></type><name>row</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SmiElement</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>smiGetFirstElement</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_type</name><argument_list>(<argument><expr><call><name>smiGetElementNode</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>smiGetNextElement</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_table</name><parameter_list>(<parameter><decl><type><name>SmiNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>u_int</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SmiNode</name> <modifier>*</modifier></type><name>row</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>col</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rel</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nodekind</name></name> <operator>==</operator> <name>SMI_NODEKIND_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>save_node</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pindent</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(%u "</literal></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>oid</name><index>[<expr><name>level</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_name</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>smiGetFirstChildNode</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>row</name><operator>-&gt;</operator><name>nodekind</name></name> <operator>!=</operator> <name>SMI_NODEKIND_ROW</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: kind %u, not row"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name><name>row</name><operator>-&gt;</operator><name>nodekind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>save_node</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pindent</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(%u "</literal></expr></argument>, <argument><expr><name><name>row</name><operator>-&gt;</operator><name>oid</name><index>[<expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_name</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" :"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>smiGetRelatedNode</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>row</name><operator>-&gt;</operator><name>indexkind</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SMI_INDEX_INDEX</name></expr>:</case>
<expr_stmt><expr><call><name>print_index</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SMI_INDEX_AUGMENT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>rel</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: cannot find augemented table"</literal></expr></argument>, <argument><expr><name><name>row</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>print_index</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: cannot handle index kind %u"</literal></expr></argument>, <argument><expr><name><name>row</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><name><name>row</name><operator>-&gt;</operator><name>indexkind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" op_%s"</literal></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>smiGetFirstChildNode</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>col</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_col</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>smiGetNextChildNode</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>pindent</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">")\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pindent</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">")\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_it</name><parameter_list>(<parameter><decl><type><name>SmiNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>u_int</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>nodekind</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SMI_NODEKIND_NODE</name></expr>:</case>
<expr_stmt><expr><call><name>print_node</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SMI_NODEKIND_SCALAR</name></expr>:</case>
<expr_stmt><expr><call><name>print_scalar</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SMI_NODEKIND_TABLE</name></expr>:</case>
<expr_stmt><expr><call><name>print_table</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SMI_NODEKIND_COMPLIANCE</name></expr>:</case>
<case>case <expr><name>SMI_NODEKIND_GROUP</name></expr>:</case>
<expr_stmt><expr><call><name>save_node</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SMI_NODEKIND_NOTIFICATION</name></expr>:</case>
<expr_stmt><expr><call><name>print_notification</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"cannot handle %u nodes"</literal></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>nodekind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_node</name><parameter_list>(<parameter><decl><type><name>SmiNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>u_int</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nodekind</name></name> <operator>==</operator> <name>SMI_NODEKIND_NODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>save_node</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pindent</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(%u "</literal></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>oid</name><index>[<expr><name>level</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_name</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>smiGetFirstChildNode</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>n</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_it</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>smiGetNextChildNode</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>pindent</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">")\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>save_typdef</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tdef</name></name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>tdef</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLIST_INSERT_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tdefs</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>tdefs_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tdef</name></name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call><name>SLIST_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tdefs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SLIST_REMOVE_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tdefs</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_enum_typedef</name><parameter_list>(<parameter><decl><type><name>SmiType</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SmiNamedNumber</name> <modifier>*</modifier></type><name>nnum</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>nnum</name> <operator>=</operator> <call><name>smiGetFirstNamedNumber</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>nnum</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>nnum</name> <operator>=</operator> <call><name>smiGetNextNamedNumber</name><argument_list>(<argument><expr><name>nnum</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t%ld %s\n"</literal></expr></argument> , <argument><expr><name><name>nnum</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>value</name><operator>.</operator><name>integer32</name></name></expr></argument>, <argument><expr><name><name>nnum</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_stype</name><parameter_list>(<parameter><decl><type><name>SmiNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SmiType</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tdef</name></name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>smiGetNodeType</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>type</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>type</name><operator>-&gt;</operator><name>basetype</name></name> <operator>==</operator> <name>SMI_BASETYPE_ENUM</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>do_typedef</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>&amp;&amp;</operator> <name><name>type</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<macro><name>SLIST_FOREACH</name><argument_list>(<argument>t</argument>, <argument>&amp;tdefs</argument>, <argument>link</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>save_typdef</name><argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"typedef %s ENUM (\n"</literal></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>do_typedef</name> <operator>==</operator> <literal type="char">'E'</literal> <operator>&amp;&amp;</operator> <name><name>type</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"typedef %sType ENUM (\n"</literal></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>print_enum_typedef</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">")\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>type</name><operator>-&gt;</operator><name>basetype</name></name> <operator>==</operator> <name>SMI_BASETYPE_BITS</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>do_typedef</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>&amp;&amp;</operator> <name><name>type</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<macro><name>SLIST_FOREACH</name><argument_list>(<argument>t</argument>, <argument>&amp;tdefs</argument>, <argument>link</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>save_typdef</name><argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"typedef %s BITS (\n"</literal></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>do_typedef</name> <operator>==</operator> <literal type="char">'E'</literal> <operator>&amp;&amp;</operator> <name><name>type</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"typedef %sType BITS (\n"</literal></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>print_enum_typedef</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">")\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_typdefs</name><parameter_list>(<parameter><decl><type><name>SmiNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SmiNode</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>smiGetFirstChildNode</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>n</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>nodekind</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SMI_NODEKIND_SCALAR</name></expr>:</case>
<case>case <expr><name>SMI_NODEKIND_COLUMN</name></expr>:</case>
<expr_stmt><expr><call><name>print_stype</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SMI_NODEKIND_COMPLIANCE</name></expr>:</case>
<case>case <expr><name>SMI_NODEKIND_GROUP</name></expr>:</case>
<expr_stmt><expr><call><name>save_node</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>smiGetNextChildNode</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>save_node</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>opt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SmiModule</name> <modifier>*</modifier><modifier>*</modifier></type><name>mods</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SmiNode</name> <modifier>*</modifier></type><name>n</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>u</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>smiInit</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"c:Eeh"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><name>opt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"argument to -c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: not a number"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>u</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>u</name></expr></argument> &gt;</argument_list></name> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: out of range"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cut</name> <operator>=</operator> <operator>(</operator><name>u_int</name><operator>)</operator><name>u</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'E'</literal></expr>:</case>
<expr_stmt><expr><name>do_typedef</name> <operator>=</operator> <literal type="char">'E'</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'e'</literal></expr>:</case>
<expr_stmt><expr><name>do_typedef</name> <operator>=</operator> <literal type="char">'e'</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>usgtxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch></block_content></block></while>

<expr_stmt><expr><name>argc</name> <operator>-=</operator> <name>optind</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name> <operator>+=</operator> <name>optind</name></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>smiGetFlags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SMI_FLAG_ERRORS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>smiSetFlags</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mods</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mods</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mods</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>opt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>opt</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>opt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>name</name> <operator>=</operator> <call><name>smiLoadModule</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>opt</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: cannot load"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>opt</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>mods</name><index>[<expr><name>opt</name></expr>]</index></name> <operator>=</operator> <call><name>smiGetModule</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>level</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>opt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>opt</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>opt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mods</name><index>[<expr><name>opt</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>smiGetFirstNode</name><argument_list>(<argument><expr><name><name>mods</name><index>[<expr><name>opt</name></expr>]</index></name></expr></argument>, <argument><expr><name>SMI_NODEKIND_ANY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>do_typedef</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>open_node</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_it</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_typdefs</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>last_node</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name>n</name> <operator>=</operator> <call><name>smiGetNextNode</name><argument_list>(<argument><expr><name>last_node</name></expr></argument>, <argument><expr><name>SMI_NODEKIND_ANY</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>last</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>do_typedef</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>close_node</name><argument_list>(<argument><expr><name><name>last</name><operator>-&gt;</operator><name>oidlen</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>level</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>do_typedef</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tdefs_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
