<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bsnmp/lib/asn1.c">































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDINT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INTTYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"support.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asn1.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>asn_error_func</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>asn_error</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>asn_error_func</name></expr></init>;</function_decl>







<function><type><name><name>enum</name> <name>asn_err</name></name></type>
<name>asn_get_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>asn_len_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_int</name></type> <name>length</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"no identifier for header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_EOBUF</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>asn_cptr</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>type</name> <operator>&amp;</operator> <name>ASN_TYPE_MASK</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0x1e</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"tags &gt; 0x1e not supported (%#x)"</literal></expr></argument>,
<argument><expr><operator>*</operator><name>type</name> <operator>&amp;</operator> <name>ASN_TYPE_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_cptr</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"no length field"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_EOBUF</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>asn_cptr</name></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>asn_cptr</name></name><operator>++</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"indefinite length not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <name>ASN_MAXLENLEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"long length too long (%u)"</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"long length truncated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_EOBUF</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>length</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>len</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>asn_cptr</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>asn_cptr</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BOGUS_CVE_2019_5610_FIX</name></expr></argument>)</argument_list></call></expr></cpp:if>






<if_stmt><if>if <condition>(<expr><operator>*</operator><name>len</name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"lenen %u exceeding asn_len %u"</literal></expr></argument>, <argument><expr><operator>*</operator><name>len</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_EOBUF</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><name>ASN_ERR_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>u_int</name></type>
<name>asn_put_len</name><parameter_list>(<parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>asn_len_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_int</name></type> <name>lenlen</name></decl>, <decl><type ref="prev"/><name>lenlen1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asn_len_t</name></type> <name>tmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>ASN_MAXLEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"encoding length too long: (%u)"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">127</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>u_char</name><operator>)</operator><name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>lenlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name>len</name></expr>;</init> <condition><expr><name>tmp</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>tmp</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>lenlen</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>u_char</name><operator>)</operator><name>lenlen</name> <operator>|</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lenlen1</name> <operator>=</operator> <name>lenlen</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>lenlen1</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>lenlen1</name></expr>]</index></name> <operator>=</operator> <name>len</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>lenlen</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>






<function><type><name><name>enum</name> <name>asn_err</name></name></type>
<name>asn_put_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>u_char</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>asn_len_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_int</name></type> <name>lenlen</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>ASN_TYPE_MASK</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0x1e</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"types &gt; 0x1e not supported (%#x)"</literal></expr></argument>,
<argument><expr><name>type</name> <operator>&amp;</operator> <name>ASN_TYPE_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ASN_ERR_EOBUF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>asn_ptr</name></name><operator>++</operator> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name><operator>--</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>lenlen</name> <operator>=</operator> <call><name>asn_put_len</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ASN_ERR_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>&lt;</operator> <name>lenlen</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ASN_ERR_EOBUF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>asn_put_len</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>asn_ptr</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_ptr</name></name> <operator>+=</operator> <name>lenlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>-=</operator> <name>lenlen</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMP_LEN</name></cpp:macro> <cpp:value>(1 + ASN_MAXLENLEN + 1)</cpp:value></cpp:define>
<function><type><name><name>enum</name> <name>asn_err</name></name></type>
<name>asn_put_temp_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>u_char</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>&lt;</operator> <name>TEMP_LEN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ASN_ERR_EOBUF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>asn_ptr</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>asn_put_header</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>ASN_MAXLEN</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>asn_ptr</name></name> <operator>==</operator> <operator>*</operator><name>ptr</name> <operator>+</operator> <name>TEMP_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name><name>enum</name> <name>asn_err</name></name></type>
<name>asn_commit_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>moved</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>asn_len_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>lenlen</name></decl>, <decl><type ref="prev"/><name>shift</name></decl>;</decl_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>asn_ptr</name></name> <operator>-</operator> <operator>(</operator><name>ptr</name> <operator>+</operator> <name>TEMP_LEN</name><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>lenlen</name> <operator>=</operator> <call><name>asn_put_len</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lenlen</name> <operator>&gt;</operator> <name>TEMP_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ASN_ERR_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lenlen</name> <operator>&lt;</operator> <name>TEMP_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <operator>(</operator><name>TEMP_LEN</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>lenlen</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>lenlen</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>TEMP_LEN</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_ptr</name></name> <operator>-=</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>+=</operator> <name>shift</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>moved</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>moved</name> <operator>=</operator> <name>shift</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEMP_LEN</name></cpp:undef>








<function><type><specifier>static</specifier> <name><name>enum</name> <name>asn_err</name></name></type>
<name>asn_get_real_integer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>asn_len_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>neg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>asn_err</name></name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"truncated integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_EOBUF</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"zero-length integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>vp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_BADLEN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>ASN_ERR_OK</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"integer too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>ASN_ERR_RANGE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>asn_cptr</name></name> <operator>==</operator> <literal type="number">0x00</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>asn_cptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>asn_cptr</name></name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>asn_cptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"non-minimal integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>ASN_ERR_BADLEN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>asn_cptr</name></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>neg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>|=</operator> <ternary><condition><expr><name>neg</name></expr> ?</condition><then> <expr><operator>(</operator><name>u_char</name><operator>)</operator><operator>~</operator><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>asn_cptr</name></name></expr> </then><else>: <expr><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>asn_cptr</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_cptr</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>neg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>vp</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>val</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>vp</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>val</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name><name>enum</name> <name>asn_err</name></name></type>
<name>asn_put_real_integer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>u_char</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ival</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>neg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OCTETS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<decl_stmt><decl><type><name>u_char</name></type> <name><name>buf</name><index>[<expr><name>OCTETS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>asn_err</name></name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ival</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>-</operator><operator>(</operator><name>ival</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>neg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>ival</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>OCTETS</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>val</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>neg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>~</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>val</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>OCTETS</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x00</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>asn_put_header</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>OCTETS</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>OCTETS</name> <operator>-</operator> <operator>(</operator><name>u_int</name><operator>)</operator><name>i</name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ASN_ERR_EOBUF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>OCTETS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>asn_ptr</name></name><operator>++</operator> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>ASN_ERR_OK</name><operator>)</operator></expr>;</return>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OCTETS</name></cpp:undef>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name><name>enum</name> <name>asn_err</name></name></type>
<name>asn_get_real_unsigned</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>asn_len_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>vp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"truncated integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_EOBUF</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"zero-length integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_BADLEN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>asn_cptr</name></name> <operator>==</operator> <literal type="number">0x00</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>asn_cptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"non-minimal unsigned"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_cptr</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_BADLEN</name><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>asn_err</name></name></type> <name>err</name> <init>= <expr><name>ASN_ERR_OK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>asn_cptr</name></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>||</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">9</literal> <operator>||</operator>
<operator>(</operator><name>len</name> <operator>==</operator> <literal type="number">9</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>asn_cptr</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>vp</name> <operator>=</operator> <literal type="number">0xffffffffffffffffULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"unsigned too large or negative"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_cptr</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_RANGE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>vp</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>vp</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>asn_cptr</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>asn_put_real_unsigned</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>u_char</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OCTETS</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<decl_stmt><decl><type><name>u_char</name></type> <name><name>buf</name><index>[<expr><name>OCTETS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>asn_err</name></name></type> <name>ret</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>OCTETS</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>val</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>OCTETS</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x00</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>asn_put_header</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>OCTETS</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>OCTETS</name> <operator>-</operator> <operator>(</operator><name>u_int</name><operator>)</operator><name>i</name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ASN_ERR_EOBUF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>OCTETS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>asn_ptr</name></name><operator>++</operator> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OCTETS</name></cpp:undef>
<return>return <expr><operator>(</operator><name>ASN_ERR_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name><name>enum</name> <name>asn_err</name></name></type>
<name>asn_get_integer_raw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>asn_len_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>asn_err</name></name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>asn_get_real_integer</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"integer too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASN_ERR_BADLEN</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>val</name> <operator>&gt;</operator> <name>INT32_MAX</name> <operator>||</operator> <name>val</name> <operator>&lt;</operator> <name>INT32_MIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"integer out of range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASN_ERR_RANGE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>vp</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>val</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>asn_err</name></name></type>
<name>asn_get_integer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>asn_len_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>asn_err</name></name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>asn_get_header</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>ASN_TYPE_INTEGER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"bad type for integer (%u)"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_TAG</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>asn_get_integer_raw</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>asn_err</name></name></type>
<name>asn_put_integer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>asn_put_real_integer</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>ASN_TYPE_INTEGER</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>










<function><type><name><name>enum</name> <name>asn_err</name></name></type>
<name>asn_get_octetstring_raw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>asn_len_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>octets</name></decl></parameter>,
<parameter><decl><type><name>u_int</name> <modifier>*</modifier></type><name>noctets</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>asn_err</name></name></type> <name>err</name> <init>= <expr><name>ASN_ERR_OK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>noctets</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"octetstring truncated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>ASN_ERR_RANGE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"truncatet octetstring"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_EOBUF</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>noctets</name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>octets</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>asn_cptr</name></name></expr></argument>, <argument><expr><operator>*</operator><name>noctets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>octets</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>asn_cptr</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>noctets</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_cptr</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>asn_err</name></name></type>
<name>asn_get_octetstring</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>octets</name></decl></parameter>, <parameter><decl><type><name>u_int</name> <modifier>*</modifier></type><name>noctets</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>asn_err</name></name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asn_len_t</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>asn_get_header</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>ASN_TYPE_OCTETSTRING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"bad type for octetstring (%u)"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_TAG</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>asn_get_octetstring_raw</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>octets</name></expr></argument>, <argument><expr><name>noctets</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>asn_err</name></name></type>
<name>asn_put_octetstring</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type><name>octets</name></decl></parameter>, <parameter><decl><type><name>u_int</name></type> <name>noctets</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>asn_err</name></name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>asn_put_header</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>ASN_TYPE_OCTETSTRING</name></expr></argument>, <argument><expr><name>noctets</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>&lt;</operator> <name>noctets</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ASN_ERR_EOBUF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>asn_ptr</name></name></expr></argument>, <argument><expr><name>octets</name></expr></argument>, <argument><expr><name>noctets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_ptr</name></name> <operator>+=</operator> <name>noctets</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>-=</operator> <name>noctets</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name><name>enum</name> <name>asn_err</name></name></type>
<name>asn_get_null_raw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>asn_len_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"truncated NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_EOBUF</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"bad length for NULL (%u)"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_ptr</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_BADLEN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>asn_err</name></name></type>
<name>asn_get_null</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_char</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asn_len_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>asn_err</name></name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>asn_get_header</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>ASN_TYPE_NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"bad type for NULL (%u)"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_TAG</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>asn_get_null_raw</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>asn_err</name></name></type>
<name>asn_put_null</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>asn_put_header</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>ASN_TYPE_NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>asn_err</name></name></type>
<name>asn_put_exception</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>u_int</name></type> <name>except</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>asn_put_header</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>ASN_CLASS_CONTEXT</name> <operator>|</operator> <name>except</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name><name>enum</name> <name>asn_err</name></name></type>
<name>asn_get_objid_raw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>asn_len_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>asn_subid_t</name></type> <name>subid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>asn_err</name></name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"truncated OBJID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_EOBUF</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"short OBJID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_BADLEN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>ASN_ERR_OK</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <name>ASN_MAXOIDLEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"OID too long (%u)"</literal></expr></argument>, <argument><expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_cptr</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_BADLEN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>subid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"unterminated subid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_EOBUF</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>subid</name> <operator>&gt;</operator> <operator>(</operator><name>ASN_MAXID</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"OID subid too larger"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>ASN_ERR_RANGE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>subid</name> <operator>=</operator> <operator>(</operator><name>subid</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>asn_cptr</name></name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>asn_cptr</name></name><operator>++</operator> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>subid</name> <operator>&lt;</operator> <literal type="number">80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>subid</name> <operator>/</operator> <literal type="number">40</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>subid</name> <operator>%</operator> <literal type="number">40</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>subid</name> <operator>-</operator> <literal type="number">80</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>subid</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>asn_err</name></name></type>
<name>asn_get_objid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_char</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asn_len_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>asn_err</name></name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>asn_get_header</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>ASN_TYPE_OBJID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"bad type for OBJID (%u)"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_TAG</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>asn_get_objid_raw</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>asn_err</name></name></type>
<name>asn_put_objid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>asn_subid_t</name></type> <name>first</name></decl>, <decl><type ref="prev"/><name>sub</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>asn_err</name></name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>err1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>oidlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asn_len_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>ASN_ERR_OK</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"short oid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>ASN_ERR_RANGE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>oidlen</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"short oid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"oid[0] too large (%u)"</literal></expr></argument>, <argument><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>ASN_ERR_RANGE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">40</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>oidlen</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>ASN_MAXOIDLEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"oid too long %u"</literal></expr></argument>, <argument><expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>ASN_ERR_RANGE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>||</operator>
<operator>(</operator><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">40</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name>ASN_MAXID</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">40</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"oid out of range (%u,%u)"</literal></expr></argument>,
<argument><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>ASN_ERR_RANGE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">40</literal> <operator>*</operator> <name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>oidlen</name> <operator>=</operator> <name><name>oid</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>oidlen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>sub</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>first</name></expr> </then><else>: <expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sub</name> <operator>&gt;</operator> <name>ASN_MAXID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"oid subid too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>ASN_ERR_RANGE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>sub</name> <operator>&lt;=</operator> <literal type="number">0x7f</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr>
</then><else>: <expr><ternary><condition><expr><operator>(</operator><name>sub</name> <operator>&lt;=</operator> <literal type="number">0x3fff</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr>
</then><else>: <expr><ternary><condition><expr><operator>(</operator><name>sub</name> <operator>&lt;=</operator> <literal type="number">0x1fffff</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">3</literal></expr>
</then><else>: <expr><ternary><condition><expr><operator>(</operator><name>sub</name> <operator>&lt;=</operator> <literal type="number">0xfffffff</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr>
</then><else>: <expr><literal type="number">5</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err1</name> <operator>=</operator> <call><name>asn_put_header</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>ASN_TYPE_OBJID</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>err1</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ASN_ERR_EOBUF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>oidlen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>sub</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>first</name></expr> </then><else>: <expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sub</name> <operator>&lt;=</operator> <literal type="number">0x7f</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>asn_ptr</name></name><operator>++</operator> <operator>=</operator> <name>sub</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sub</name> <operator>&lt;=</operator> <literal type="number">0x3fff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>asn_ptr</name></name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>sub</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>asn_ptr</name></name><operator>++</operator> <operator>=</operator> <name>sub</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sub</name> <operator>&lt;=</operator> <literal type="number">0x1fffff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>asn_ptr</name></name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>sub</name> <operator>&gt;&gt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>asn_ptr</name></name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>sub</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>asn_ptr</name></name><operator>++</operator> <operator>=</operator> <name>sub</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sub</name> <operator>&lt;=</operator> <literal type="number">0xfffffff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>asn_ptr</name></name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>sub</name> <operator>&gt;&gt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>asn_ptr</name></name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>sub</name> <operator>&gt;&gt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>asn_ptr</name></name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>sub</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>asn_ptr</name></name><operator>++</operator> <operator>=</operator> <name>sub</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>asn_ptr</name></name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>sub</name> <operator>&gt;&gt;</operator> <literal type="number">28</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>asn_ptr</name></name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>sub</name> <operator>&gt;&gt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>asn_ptr</name></name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>sub</name> <operator>&gt;&gt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>asn_ptr</name></name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>sub</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>asn_ptr</name></name><operator>++</operator> <operator>=</operator> <name>sub</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>-=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name><name>enum</name> <name>asn_err</name></name></type>
<name>asn_get_sequence</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>asn_len_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_char</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>asn_err</name></name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>asn_get_header</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <operator>(</operator><name>ASN_TYPE_SEQUENCE</name><operator>|</operator><name>ASN_TYPE_CONSTRUCTED</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"bad sequence type %u"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_TAG</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>len</name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"truncated sequence"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_EOBUF</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name><name>enum</name> <name>asn_err</name></name></type>
<name>asn_get_ipaddress_raw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>asn_len_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"truncated ip-address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_EOBUF</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"short length for ip-Address %u"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>addr</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>asn_cptr</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
<while>while <condition>(<expr><name>i</name><operator>++</operator> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>addr</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_BADLEN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>addr</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>asn_cptr</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_cptr</name></name> <operator>+=</operator> <name>len</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>asn_err</name></name></type>
<name>asn_get_ipaddress</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_char</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asn_len_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>asn_err</name></name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>asn_get_header</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <operator>(</operator><name>ASN_CLASS_APPLICATION</name><operator>|</operator><name>ASN_APP_IPADDRESS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"bad type for ip-address %u"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_TAG</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>asn_get_ipaddress_raw</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>asn_err</name></name></type>
<name>asn_put_ipaddress</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>asn_err</name></name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>asn_put_header</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>ASN_CLASS_APPLICATION</name><operator>|</operator><name>ASN_APP_IPADDRESS</name></expr></argument>,
<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ASN_ERR_EOBUF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>asn_ptr</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_ptr</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><name><name>enum</name> <name>asn_err</name></name></type>
<name>asn_get_uint32_raw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>asn_len_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>asn_err</name></name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>asn_get_real_unsigned</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <name>UINT32_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"uint32 too large %llu"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>ASN_ERR_RANGE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>vp</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>v</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>asn_err</name></name></type>
<name>asn_put_uint32</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>u_char</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>v</name> <init>= <expr><name>val</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><call><name>asn_put_real_unsigned</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>ASN_CLASS_APPLICATION</name><operator>|</operator><name>type</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name><name>enum</name> <name>asn_err</name></name></type>
<name>asn_get_counter64_raw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>asn_len_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>asn_get_real_unsigned</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>asn_err</name></name></type>
<name>asn_put_counter64</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>asn_put_real_unsigned</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
<argument><expr><name>ASN_CLASS_APPLICATION</name> <operator>|</operator> <name>ASN_APP_COUNTER64</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name><name>enum</name> <name>asn_err</name></name></type>
<name>asn_get_timeticks</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>asn_len_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>asn_err</name></name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>asn_get_header</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <operator>(</operator><name>ASN_CLASS_APPLICATION</name><operator>|</operator><name>ASN_APP_TIMETICKS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"bad type for timeticks %u"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_TAG</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>asn_get_uint32_raw</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>asn_err</name></name></type>
<name>asn_put_timeticks</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>v</name> <init>= <expr><name>val</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><call><name>asn_put_real_unsigned</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
<argument><expr><name>ASN_CLASS_APPLICATION</name> <operator>|</operator> <name>ASN_APP_TIMETICKS</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>asn_slice_oid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>u_int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>u_int</name></type> <name>to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>from</name> <operator>&gt;=</operator> <name>to</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>to</name> <operator>-</operator> <name>from</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dest</name><operator>-&gt;</operator><name>subs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>from</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dest</name><operator>-&gt;</operator><name>len</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>dest</name><operator>-&gt;</operator><name>subs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>asn_append_oid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>to</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name><name>to</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>from</name><operator>-&gt;</operator><name>subs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>from</name><operator>-&gt;</operator><name>len</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>subs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name><name>from</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name><name>enum</name> <name>asn_err</name></name></type>
<name>asn_skip</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>asn_len_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ASN_ERR_EOBUF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_cptr</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name><name>enum</name> <name>asn_err</name></name></type>
<name>asn_pad</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>asn_len_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ASN_ERR_EOBUF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_ptr</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ASN_ERR_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type>
<name>asn_compare_oid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>o1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>o2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_long</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>o1</name><operator>-&gt;</operator><name>len</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>o2</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>o1</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>o2</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>o1</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>o2</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>o1</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name><name>o2</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>o1</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name><name>o2</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>asn_is_suboid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>o1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>o2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_long</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>o1</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>o2</name><operator>-&gt;</operator><name>len</name></name> <operator>||</operator> <name><name>o1</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>o2</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><name>char</name> <modifier>*</modifier></type>
<name>asn_oid2str_r</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <name><name>oid</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator> <operator>&gt;</operator> <name>ASN_MAXOIDLEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>ASN_MAXOIDLEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>ptr</name> <operator>=</operator> <name>buf</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>buf</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>char</name> <modifier>*</modifier></type>
<name>asn_oid2str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>str</name><index>[<expr><name>ASN_OIDSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><call><name>asn_oid2str_r</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>asn_error_func</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ASN.1: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" at"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>&gt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" %02x"</literal></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>asn_cptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
