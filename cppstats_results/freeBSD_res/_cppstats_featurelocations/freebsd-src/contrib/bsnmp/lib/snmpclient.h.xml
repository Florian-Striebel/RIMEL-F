<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bsnmp/lib/snmpclient.h">






























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_BSNMP_SNMPCLIENT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_BSNMP_SNMPCLIENT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_STRERROR_LEN</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_LOCAL_PATH</name></cpp:macro> <cpp:value>"/tmp/snmpXXXXXXXXXXXXXX"</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_TRANS_UDP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_TRANS_LOC_DGRAM</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_TRANS_LOC_STREAM</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_TRANS_UDP6</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>




<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>snmp_send_cb_f</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>


<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>snmp_timeout_cb_f</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl></typedef>


<typedef>typedef <function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>snmp_timeout_start_f</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>timeout</name></decl></parameter>,
<parameter><decl><type><name>snmp_timeout_cb_f</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>


<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>snmp_timeout_stop_f</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>timeout_id</name></decl></parameter>)</parameter_list>;</function_decl></typedef>




<struct>struct <name>snmp_client</name> <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>snmp_version</name></name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>trans</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cport</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>chost</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>read_community</name><index>[<expr><name>SNMP_COMMUNITY_MAXLEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>write_community</name><index>[<expr><name>SNMP_COMMUNITY_MAXLEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int32_t</name></type> <name>identifier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>security_model</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>snmp_engine</name></name></type> <name>engine</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>snmp_user</name></name></type> <name>user</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>clen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cengine</name><index>[<expr><name>SNMP_ENGINE_ID_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>cname</name><index>[<expr><name>SNMP_CONTEXT_NAME_SIZ</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>retries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dump_pdus</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>txbuflen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>rxbuflen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>next_reqid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>max_reqid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>min_reqid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>error</name><index>[<expr><name>SNMP_STRERROR_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>snmp_timeout_start_f</name></type> <name>timeout_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>snmp_timeout_stop_f</name></type> <name>timeout_stop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>local_path</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>SNMP_LOCAL_PATH</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>


<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>snmp_client</name></name></type> <name>snmp_client</name></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>snmp_client_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_client</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>snmp_client_set_host</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_client</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>snmp_client_set_port</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_client</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>snmp_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_hostname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_portname</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_read_community</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_write_community</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>snmp_close</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>snmp_pdu_create</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>u_int</name></type> <name>_op</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>snmp_add_binding</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>snmp_pdu_check</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>_req</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>_resp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int32_t</name></type> <name>snmp_pdu_send</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>_pdu</name></decl></parameter>, <parameter><decl><type><name>snmp_send_cb_f</name></type> <name>_func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_arg</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>snmp_oid_append</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>_oid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>snmp_receive</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_blocking</name></decl></parameter>)</parameter_list>;</function_decl>






<struct>struct <name>snmp_table</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>asn_oid</name></name></type> <name>table</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>asn_oid</name></name></type> <name>last_change</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>u_int</name></type> <name>max_iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>entry_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>u_int</name></type> <name>index_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>req_mask</name></decl>;</decl_stmt>


<struct>struct <name>snmp_table_entry</name> <block>{

<decl_stmt><decl><type><name>asn_subid_t</name></type> <name>subid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>snmp_syntax</name></name></type> <name>syntax</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>off_t</name></type> <name>offset</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__GNUC__</name> <operator>&lt;</operator> <literal type="number">3</literal></expr></cpp:if>
}</block> <decl><name><name>entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></decl>;</struct>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
}</block> <decl><name><name>entries</name><index>[]</index></name></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
};


<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>snmp_table_cb_f</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_list</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_res</name></decl></parameter>)</parameter_list>;</function_decl></typedef>


<function_decl><type><name>int</name></type> <name>snmp_table_fetch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_table</name></name> <modifier>*</modifier></type><name>descr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>snmp_table_fetch_async</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_table</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>snmp_table_cb_f</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>snmp_dialog</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>_req</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>_resp</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>snmp_discover_engine</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>snmp_parse_server</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_client</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
