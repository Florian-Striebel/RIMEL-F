<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bsnmp/lib/snmp.c">





































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDINT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INTTYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asn1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snmp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snmppriv.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>snmp_error_func</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>snmp_printf_func</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>snmp_error</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>snmp_error_func</name></expr></init>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>snmp_printf</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>snmp_printf_func</name></expr></init>;</function_decl>





<function><type><specifier>static</specifier> <name><name>enum</name> <name>asn_err</name></name></type>
<name>get_var_binding</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>binding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_char</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asn_len_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>trailer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>asn_err</name></name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asn_get_sequence</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot parse varbind header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>trailer</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>-</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asn_get_objid</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>binding</name><operator>-&gt;</operator><name>var</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot parse binding objid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>asn_get_header</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot parse binding value header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ASN_TYPE_NULL</name></expr>:</case>
<expr_stmt><expr><name><name>binding</name><operator>-&gt;</operator><name>syntax</name></name> <operator>=</operator> <name>SNMP_SYNTAX_NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>asn_get_null_raw</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ASN_TYPE_INTEGER</name></expr>:</case>
<expr_stmt><expr><name><name>binding</name><operator>-&gt;</operator><name>syntax</name></name> <operator>=</operator> <name>SNMP_SYNTAX_INTEGER</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>asn_get_integer_raw</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>binding</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ASN_TYPE_OCTETSTRING</name></expr>:</case>
<expr_stmt><expr><name><name>binding</name><operator>-&gt;</operator><name>syntax</name></name> <operator>=</operator> <name>SNMP_SYNTAX_OCTETSTRING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>binding</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>octets</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>binding</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>octets</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>binding</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>asn_get_octetstring_raw</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><name><name>binding</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>octets</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>binding</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ASN_ERR_STOPPED</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>binding</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>octets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>binding</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>octets</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>ASN_TYPE_OBJID</name></expr>:</case>
<expr_stmt><expr><name><name>binding</name><operator>-&gt;</operator><name>syntax</name></name> <operator>=</operator> <name>SNMP_SYNTAX_OID</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>asn_get_objid_raw</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>binding</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ASN_CLASS_APPLICATION</name><operator>|</operator><name>ASN_APP_IPADDRESS</name></expr>:</case>
<expr_stmt><expr><name><name>binding</name><operator>-&gt;</operator><name>syntax</name></name> <operator>=</operator> <name>SNMP_SYNTAX_IPADDRESS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>asn_get_ipaddress_raw</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>binding</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>ipaddress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ASN_CLASS_APPLICATION</name><operator>|</operator><name>ASN_APP_TIMETICKS</name></expr>:</case>
<expr_stmt><expr><name><name>binding</name><operator>-&gt;</operator><name>syntax</name></name> <operator>=</operator> <name>SNMP_SYNTAX_TIMETICKS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>asn_get_uint32_raw</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>binding</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ASN_CLASS_APPLICATION</name><operator>|</operator><name>ASN_APP_COUNTER</name></expr>:</case>
<expr_stmt><expr><name><name>binding</name><operator>-&gt;</operator><name>syntax</name></name> <operator>=</operator> <name>SNMP_SYNTAX_COUNTER</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>asn_get_uint32_raw</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>binding</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ASN_CLASS_APPLICATION</name><operator>|</operator><name>ASN_APP_GAUGE</name></expr>:</case>
<expr_stmt><expr><name><name>binding</name><operator>-&gt;</operator><name>syntax</name></name> <operator>=</operator> <name>SNMP_SYNTAX_GAUGE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>asn_get_uint32_raw</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>binding</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ASN_CLASS_APPLICATION</name><operator>|</operator><name>ASN_APP_COUNTER64</name></expr>:</case>
<expr_stmt><expr><name><name>binding</name><operator>-&gt;</operator><name>syntax</name></name> <operator>=</operator> <name>SNMP_SYNTAX_COUNTER64</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>asn_get_counter64_raw</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>binding</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>counter64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ASN_CLASS_CONTEXT</name> <operator>|</operator> <name>ASN_EXCEPT_NOSUCHOBJECT</name></expr>:</case>
<expr_stmt><expr><name><name>binding</name><operator>-&gt;</operator><name>syntax</name></name> <operator>=</operator> <name>SNMP_SYNTAX_NOSUCHOBJECT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>asn_get_null_raw</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ASN_CLASS_CONTEXT</name> <operator>|</operator> <name>ASN_EXCEPT_NOSUCHINSTANCE</name></expr>:</case>
<expr_stmt><expr><name><name>binding</name><operator>-&gt;</operator><name>syntax</name></name> <operator>=</operator> <name>SNMP_SYNTAX_NOSUCHINSTANCE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>asn_get_null_raw</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ASN_CLASS_CONTEXT</name> <operator>|</operator> <name>ASN_EXCEPT_ENDOFMIBVIEW</name></expr>:</case>
<expr_stmt><expr><name><name>binding</name><operator>-&gt;</operator><name>syntax</name></name> <operator>=</operator> <name>SNMP_SYNTAX_ENDOFMIBVIEW</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>asn_get_null_raw</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>asn_skip</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>ASN_ERR_TAG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"bad binding value type 0x%x"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>ASN_ERR_STOPPED</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot parse binding value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"ignoring junk at end of binding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>=</operator> <name>trailer</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><name><name>enum</name> <name>asn_err</name></name></type>
<name>snmp_parse_pdus_hdr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>, <parameter><decl><type><name>asn_len_t</name> <modifier>*</modifier></type><name>lenp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SNMP_PDU_TRAP</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>asn_get_objid</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>enterprise</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot parse trap enterprise"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>asn_get_ipaddress</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>agent_addr</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot parse trap agent address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>asn_get_integer</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>generic_trap</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot parse 'generic-trap'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>asn_get_integer</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>specific_trap</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot parse 'specific-trap'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>asn_get_timeticks</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>time_stamp</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot parse trap 'time-stamp'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>asn_get_integer</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>request_id</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot parse 'request-id'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>asn_get_integer</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>error_status</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot parse 'error_status'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>asn_get_integer</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>error_index</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot parse 'error_index'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asn_get_sequence</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>lenp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot get varlist header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ASN_ERR_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>asn_err</name></name></type>
<name>parse_pdus</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>asn_len_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>trailer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>asn_err</name></name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>err1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>snmp_parse_pdus_hdr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>pdu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ASN_ERR_STOPPED</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>trailer</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>-</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>pdu</name><operator>-&gt;</operator><name>bindings</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>ASN_ERR_OK</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>nbindings</name></name> <operator>==</operator> <name>SNMP_MAX_BINDINGS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"too many bindings (&gt; %u) in PDU"</literal></expr></argument>,
<argument><expr><name>SNMP_MAX_BINDINGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>err1</name> <operator>=</operator> <call><name>get_var_binding</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ASN_ERR_STOPPED</name><argument_list>(<argument><expr><name>err1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ASN_ERR_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>err1</name> <operator>!=</operator> <name>ASN_ERR_OK</name> <operator>&amp;&amp;</operator> <name>err</name> <operator>==</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>err1</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ip</name> <operator>=</operator> <name><name>pdu</name><operator>-&gt;</operator><name>nbindings</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>nbindings</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>=</operator> <name>trailer</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name><name>enum</name> <name>asn_err</name></name></type>
<name>parse_secparams</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>asn_len_t</name></type> <name>octs_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>asn_buf</name></name></type> <name>tb</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tb</name><operator>.</operator><name>asn_ptr</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tb</name><operator>.</operator><name>asn_len</name></name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>len</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asn_get_octetstring</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot parse usm header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tb</name><operator>.</operator><name>asn_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asn_get_sequence</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>octs_len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot decode usm header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>octs_len</name> <operator>=</operator> <name>SNMP_ENGINE_ID_SIZ</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>asn_get_octetstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tb</name></expr></argument>, <argument><expr><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>engine</name><operator>.</operator><name>engine_id</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>octs_len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot decode msg engine id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>engine</name><operator>.</operator><name>engine_len</name></name> <operator>=</operator> <name>octs_len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asn_get_integer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>engine</name><operator>.</operator><name>engine_boots</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot decode msg engine boots"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asn_get_integer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>engine</name><operator>.</operator><name>engine_time</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot decode msg engine time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>octs_len</name> <operator>=</operator> <name>SNMP_ADM_STR32_SIZ</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>asn_get_octetstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tb</name></expr></argument>, <argument><expr><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>sec_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>octs_len</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot decode msg user name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>sec_name</name><index>[<expr><name>octs_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>octs_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>msg_digest</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>asn_get_octetstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tb</name></expr></argument>, <argument><expr><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>msg_digest</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>octs_len</name></expr></argument>)</argument_list></call> <operator>!=</operator>
<name>ASN_ERR_OK</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>pdu</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SNMP_MSG_AUTH_FLAG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>octs_len</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>msg_digest</name></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot decode msg authentication param"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>octs_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>msg_salt</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>asn_get_octetstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tb</name></expr></argument>, <argument><expr><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>msg_salt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>octs_len</name></expr></argument>)</argument_list></call> <operator>!=</operator>
<name>ASN_ERR_OK</name> <operator>||</operator><operator>(</operator><operator>(</operator><name><name>pdu</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SNMP_MSG_PRIV_FLAG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>octs_len</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>msg_salt</name></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot decode msg authentication param"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ASN_ERR_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pdu</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SNMP_MSG_AUTH_FLAG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>digest_ptr</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>asn_ptr</name></name> <operator>-</operator> <name>SNMP_USM_AUTH_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>digest_ptr</name></name> <operator>-=</operator> <name>octs_len</name> <operator>+</operator> <name>ASN_MAXLENLEN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ASN_ERR_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>snmp_code</name></name></type>
<name>pdu_encode_secparams</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>asn_buf</name></name></type> <name>tb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>auth_off</name></decl>, <decl><type ref="prev"/><name>moved</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>auth_off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tb</name><operator>.</operator><name>asn_ptr</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tb</name><operator>.</operator><name>asn_len</name></name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asn_put_temp_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tb</name></expr></argument>, <argument><expr><operator>(</operator><name>ASN_TYPE_SEQUENCE</name><operator>|</operator><name>ASN_TYPE_CONSTRUCTED</name><operator>)</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><name>sptr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asn_put_octetstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tb</name></expr></argument>, <argument><expr><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name><name>pdu</name><operator>-&gt;</operator><name>engine</name><operator>.</operator><name>engine_id</name></name></expr></argument>,
<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>engine</name><operator>.</operator><name>engine_len</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asn_put_integer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tb</name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>engine</name><operator>.</operator><name>engine_boots</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asn_put_integer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tb</name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>engine</name><operator>.</operator><name>engine_time</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asn_put_octetstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tb</name></expr></argument>, <argument><expr><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name><name>pdu</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>sec_name</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>sec_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pdu</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SNMP_MSG_AUTH_FLAG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>auth_off</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name><name>tb</name><operator>.</operator><name>asn_len</name></name> <operator>+</operator> <name>ASN_MAXLENLEN</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>asn_put_octetstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tb</name></expr></argument>, <argument><expr><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name><name>pdu</name><operator>-&gt;</operator><name>msg_digest</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>msg_digest</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>asn_put_octetstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tb</name></expr></argument>, <argument><expr><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name><name>pdu</name><operator>-&gt;</operator><name>msg_digest</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pdu</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SNMP_MSG_PRIV_FLAG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>asn_put_octetstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tb</name></expr></argument>, <argument><expr><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name><name>pdu</name><operator>-&gt;</operator><name>msg_salt</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>msg_salt</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>asn_put_octetstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tb</name></expr></argument>, <argument><expr><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name><name>pdu</name><operator>-&gt;</operator><name>msg_salt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asn_commit_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tb</name></expr></argument>, <argument><expr><name>sptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>moved</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pdu</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SNMP_MSG_AUTH_FLAG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>digest_ptr</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>asn_ptr</name></name> <operator>+</operator> <name>auth_off</name> <operator>-</operator> <name>moved</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asn_put_octetstring</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name><name>tb</name><operator>.</operator><name>asn_len</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>digest_ptr</name></name> <operator>+=</operator> <name>ASN_MAXLENLEN</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pdu</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SNMP_MSG_PRIV_FLAG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>asn_put_temp_header</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
<argument><expr><name>ASN_TYPE_OCTETSTRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>encrypted_ptr</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>SNMP_CODE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><name><name>enum</name> <name>snmp_code</name></name></type>
<name>snmp_pdu_decode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>snmp_code</name></name></type> <name>code</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>=</operator> <call><name>snmp_pdu_decode_header</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>pdu</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SNMP_CODE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>code</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <name>SNMP_V3</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>security_model</name></name> <operator>!=</operator> <name>SNMP_SECMODEL_USM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>=</operator> <call><name>snmp_pdu_decode_secmode</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>pdu</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SNMP_CODE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>code</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>snmp_pdu_decode_scoped</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>pdu</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SNMP_CODE_FAILED</name></expr>:</case>
<expr_stmt><expr><call><name>snmp_pdu_free</name><argument_list>(<argument><expr><name>pdu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_CODE_BADENC</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <name>SNMP_Verr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_BADVERS</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>code</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>snmp_code</name></name></type>
<name>snmp_pdu_decode_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>octs_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asn_len_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>outer_ptr</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>asn_ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>outer_len</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asn_get_sequence</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot decode pdu header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"outer sequence value too short"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>!=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"ignoring trailing junk in message"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asn_get_integer</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>version</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot decode version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>SNMP_V1</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>SNMP_V2c</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>SNMP_V3</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>SNMP_Verr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"unsupported SNMP version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_CODE_BADENC</name><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <name>SNMP_V3</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>asn_get_sequence</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot decode pdu global data header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asn_get_integer</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>identifier</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot decode msg indetifier"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asn_get_integer</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>engine</name><operator>.</operator><name>max_msg_size</name></name></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot decode msg size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>octs_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>asn_get_octetstring</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>octs_len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot decode msg flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asn_get_integer</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>security_model</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot decode msg size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>security_model</name></name> <operator>!=</operator> <name>SNMP_SECMODEL_USM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_secparams</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>pdu</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>octs_len</name> <operator>=</operator> <name>SNMP_COMMUNITY_MAXLEN</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>asn_get_octetstring</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name><name>pdu</name><operator>-&gt;</operator><name>community</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>octs_len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot decode community"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>community</name><index>[<expr><name>octs_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>SNMP_CODE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>snmp_code</name></name></type>
<name>snmp_pdu_decode_scoped</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_char</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asn_len_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>trailer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>asn_err</name></name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <name>SNMP_V3</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>asn_get_sequence</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot decode scoped pdu header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>SNMP_ENGINE_ID_SIZ</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>asn_get_octetstring</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>context_engine</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot decode msg context engine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>context_engine_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>SNMP_CONTEXT_NAME_SIZ</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>asn_get_octetstring</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>context_name</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot decode msg context name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>context_name</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asn_get_header</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot get pdu header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <operator>~</operator><name>ASN_TYPE_MASK</name><operator>)</operator> <operator>!=</operator>
<operator>(</operator><name>ASN_TYPE_CONSTRUCTED</name> <operator>|</operator> <name>ASN_CLASS_CONTEXT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"bad pdu header tag"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name> <operator>&amp;</operator> <name>ASN_TYPE_MASK</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SNMP_PDU_GET</name></expr>:</case>
<case>case <expr><name>SNMP_PDU_GETNEXT</name></expr>:</case>
<case>case <expr><name>SNMP_PDU_RESPONSE</name></expr>:</case>
<case>case <expr><name>SNMP_PDU_SET</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>SNMP_PDU_TRAP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>version</name></name> <operator>!=</operator> <name>SNMP_V1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"bad pdu type %u"</literal></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_PDU_GETBULK</name></expr>:</case>
<case>case <expr><name>SNMP_PDU_INFORM</name></expr>:</case>
<case>case <expr><name>SNMP_PDU_TRAP2</name></expr>:</case>
<case>case <expr><name>SNMP_PDU_REPORT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <name>SNMP_V1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"bad pdu type %u"</literal></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"bad pdu type %u"</literal></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><name>trailer</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>-</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>parse_pdus</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>pdu</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ASN_ERR_STOPPED</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"ignoring trailing junk after pdu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>=</operator> <name>trailer</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>SNMP_CODE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>snmp_code</name></name></type>
<name>snmp_pdu_decode_secmode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_char</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>snmp_code</name></name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>digest</name><index>[<expr><name>SNMP_USM_AUTH_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>auth_proto</name></name> <operator>!=</operator> <name>SNMP_AUTH_NOAUTH</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>pdu</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SNMP_MSG_AUTH_FLAG</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_BADSECLEVEL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>=</operator> <call><name>snmp_pdu_calc_digest</name><argument_list>(<argument><expr><name>pdu</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator>
<name>SNMP_CODE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>auth_proto</name></name> <operator>!=</operator> <name>SNMP_AUTH_NOAUTH</name> <operator>&amp;&amp;</operator>
<call><name>memcmp</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>msg_digest</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>msg_digest</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_BADDIGEST</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>priv_proto</name></name> <operator>!=</operator> <name>SNMP_PRIV_NOPRIV</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>asn_get_header</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>scoped_len</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name> <operator>||</operator> <name>type</name> <operator>!=</operator> <name>ASN_TYPE_OCTETSTRING</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot decode encrypted pdu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>scoped_ptr</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>asn_ptr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>priv_proto</name></name> <operator>!=</operator> <name>SNMP_PRIV_NOPRIV</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>pdu</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SNMP_MSG_PRIV_FLAG</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_BADSECLEVEL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>=</operator> <call><name>snmp_pdu_decrypt</name><argument_list>(<argument><expr><name>pdu</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SNMP_CODE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>code</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type>
<name>snmp_pdu_snoop</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_int</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asn_len_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>asn_buf</name></name></type> <name>b</name> <init>= <expr><operator>*</operator><name>b0</name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>.</operator><name>asn_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>.</operator><name>asn_cptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <operator>(</operator><name>ASN_TYPE_SEQUENCE</name> <operator>|</operator> <name>ASN_TYPE_CONSTRUCTED</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="string">"bad sequence type %u"</literal></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>asn_cptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>b</name><operator>.</operator><name>asn_len</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>.</operator><name>asn_cptr</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>.</operator><name>asn_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>b</name><operator>.</operator><name>asn_cptr</name></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>length</name> <operator>=</operator> <operator>*</operator><name><name>b</name><operator>.</operator><name>asn_cptr</name></name><operator>++</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>.</operator><name>asn_len</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="string">"indefinite length not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <name>ASN_MAXLENLEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asn_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="string">"long length too long (%u)"</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>asn_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>length</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>*</operator><name><name>b</name><operator>.</operator><name>asn_cptr</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>.</operator><name>asn_len</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>*</operator><name><name>b</name><operator>.</operator><name>asn_cptr</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>.</operator><name>asn_len</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>asn_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>len</name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>asn_cptr</name></name> <operator>-</operator> <name><name>b0</name><operator>-&gt;</operator><name>asn_cptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><name><name>enum</name> <name>snmp_code</name></name></type>
<name>snmp_pdu_encode_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>asn_err</name></name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>v3_hdr_ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asn_put_temp_header</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>ASN_TYPE_SEQUENCE</name><operator>|</operator><name>ASN_TYPE_CONSTRUCTED</name><operator>)</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>outer_ptr</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <name>SNMP_V1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>asn_put_integer</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <name>SNMP_V2c</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>asn_put_integer</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <name>SNMP_V3</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>asn_put_integer</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_BADVERS</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <name>SNMP_V3</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>asn_put_temp_header</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>ASN_TYPE_SEQUENCE</name> <operator>|</operator>
<name>ASN_TYPE_CONSTRUCTED</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>v3_hdr_ptr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asn_put_integer</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>identifier</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asn_put_integer</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>engine</name><operator>.</operator><name>max_msg_size</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>SNMP_PDU_RESPONSE</name> <operator>&amp;&amp;</operator>
<name><name>pdu</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>SNMP_PDU_TRAP</name> <operator>&amp;&amp;</operator>
<name><name>pdu</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>SNMP_PDU_TRAP2</name> <operator>&amp;&amp;</operator>
<name><name>pdu</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>SNMP_PDU_REPORT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SNMP_MSG_REPORT_FLAG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asn_put_octetstring</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asn_put_integer</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>security_model</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asn_commit_header</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v3_hdr_ptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>security_model</name></name> <operator>!=</operator> <name>SNMP_SECMODEL_USM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pdu_encode_secparams</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>pdu</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SNMP_CODE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>asn_put_temp_header</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>ASN_TYPE_SEQUENCE</name> <operator>|</operator>
<name>ASN_TYPE_CONSTRUCTED</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>scoped_ptr</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asn_put_octetstring</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name><name>pdu</name><operator>-&gt;</operator><name>context_engine</name></name></expr></argument>,
<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>context_engine_len</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asn_put_octetstring</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name><name>pdu</name><operator>-&gt;</operator><name>context_name</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>context_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>asn_put_octetstring</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name><name>pdu</name><operator>-&gt;</operator><name>community</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>community</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asn_put_temp_header</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>ASN_TYPE_CONSTRUCTED</name> <operator>|</operator> <name>ASN_CLASS_CONTEXT</name> <operator>|</operator>
<name><name>pdu</name><operator>-&gt;</operator><name>type</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>pdu_ptr</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SNMP_PDU_TRAP</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>version</name></name> <operator>!=</operator> <name>SNMP_V1</name> <operator>||</operator>
<call><name>asn_put_objid</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>enterprise</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name> <operator>||</operator>
<call><name>asn_put_ipaddress</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>agent_addr</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name> <operator>||</operator>
<call><name>asn_put_integer</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>generic_trap</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name> <operator>||</operator>
<call><name>asn_put_integer</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>specific_trap</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name> <operator>||</operator>
<call><name>asn_put_timeticks</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>time_stamp</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <name>SNMP_V1</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pdu</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SNMP_PDU_GETBULK</name> <operator>||</operator>
<name><name>pdu</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SNMP_PDU_INFORM</name> <operator>||</operator>
<name><name>pdu</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SNMP_PDU_TRAP2</name> <operator>||</operator>
<name><name>pdu</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SNMP_PDU_REPORT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asn_put_integer</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>request_id</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name> <operator>||</operator>
<call><name>asn_put_integer</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_status</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name> <operator>||</operator>
<call><name>asn_put_integer</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_index</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asn_put_temp_header</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>ASN_TYPE_SEQUENCE</name><operator>|</operator><name>ASN_TYPE_CONSTRUCTED</name><operator>)</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>vars_ptr</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>SNMP_CODE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>asn_err</name></name></type>
<name>snmp_pdu_fix_padd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>asn_len_t</name></type> <name>padlen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>priv_proto</name></name> <operator>==</operator> <name>SNMP_PRIV_DES</name> <operator>&amp;&amp;</operator> <name><name>pdu</name><operator>-&gt;</operator><name>scoped_len</name></name> <operator>%</operator> <literal type="number">8</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>padlen</name> <operator>=</operator> <literal type="number">8</literal> <operator>-</operator> <operator>(</operator><name><name>pdu</name><operator>-&gt;</operator><name>scoped_len</name></name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>asn_pad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>padlen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ASN_ERR_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>scoped_len</name></name> <operator>+=</operator> <name>padlen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ASN_ERR_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>snmp_code</name></name></type>
<name>snmp_fix_encoding</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>moved</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>snmp_code</name></name></type> <name>code</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asn_commit_header</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>vars_ptr</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name> <operator>||</operator>
<call><name>asn_commit_header</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>pdu_ptr</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <name>SNMP_V3</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>asn_commit_header</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>scoped_ptr</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>scoped_len</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>asn_ptr</name></name> <operator>-</operator> <name><name>pdu</name><operator>-&gt;</operator><name>scoped_ptr</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>snmp_pdu_fix_padd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>pdu</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>security_model</name></name> <operator>!=</operator> <name>SNMP_SECMODEL_USM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>snmp_pdu_encrypt</name><argument_list>(<argument><expr><name>pdu</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SNMP_CODE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>priv_proto</name></name> <operator>!=</operator> <name>SNMP_PRIV_NOPRIV</name> <operator>&amp;&amp;</operator>
<call><name>asn_commit_header</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>encrypted_ptr</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asn_commit_header</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>outer_ptr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>moved</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>outer_len</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>asn_ptr</name></name> <operator>-</operator> <name><name>pdu</name><operator>-&gt;</operator><name>outer_ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>digest_ptr</name></name> <operator>-=</operator> <name>moved</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <name>SNMP_V3</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>=</operator> <call><name>snmp_pdu_calc_digest</name><argument_list>(<argument><expr><name>pdu</name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>msg_digest</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator>
<name>SNMP_CODE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pdu</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SNMP_MSG_AUTH_FLAG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>digest_ptr</name></name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>msg_digest</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>msg_digest</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>SNMP_CODE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name><name>enum</name> <name>asn_err</name></name></type>
<name>snmp_binding_encode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>binding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>asn_err</name></name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>asn_buf</name></name></type> <name>save</name> <init>= <expr><operator>*</operator><name>b</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>asn_put_temp_header</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>ASN_TYPE_SEQUENCE</name> <operator>|</operator>
<name>ASN_TYPE_CONSTRUCTED</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <name>save</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>asn_put_objid</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>binding</name><operator>-&gt;</operator><name>var</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <name>save</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>binding</name><operator>-&gt;</operator><name>syntax</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SNMP_SYNTAX_NULL</name></expr>:</case>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>asn_put_null</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_INTEGER</name></expr>:</case>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>asn_put_integer</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>binding</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_OCTETSTRING</name></expr>:</case>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>asn_put_octetstring</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>binding</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>octets</name></name></expr></argument>,
<argument><expr><name><name>binding</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_OID</name></expr>:</case>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>asn_put_objid</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>binding</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_IPADDRESS</name></expr>:</case>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>asn_put_ipaddress</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>binding</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>ipaddress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_TIMETICKS</name></expr>:</case>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>asn_put_uint32</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>ASN_APP_TIMETICKS</name></expr></argument>, <argument><expr><name><name>binding</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_COUNTER</name></expr>:</case>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>asn_put_uint32</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>ASN_APP_COUNTER</name></expr></argument>, <argument><expr><name><name>binding</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_GAUGE</name></expr>:</case>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>asn_put_uint32</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>ASN_APP_GAUGE</name></expr></argument>, <argument><expr><name><name>binding</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_COUNTER64</name></expr>:</case>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>asn_put_counter64</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>binding</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>counter64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_NOSUCHOBJECT</name></expr>:</case>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>asn_put_exception</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>ASN_EXCEPT_NOSUCHOBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_NOSUCHINSTANCE</name></expr>:</case>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>asn_put_exception</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>ASN_EXCEPT_NOSUCHINSTANCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_ENDOFMIBVIEW</name></expr>:</case>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>asn_put_exception</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>ASN_EXCEPT_ENDOFMIBVIEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <name>save</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>asn_commit_header</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <name>save</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ASN_ERR_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name><name>enum</name> <name>snmp_code</name></name></type>
<name>snmp_pdu_encode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>resp_b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_int</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>snmp_code</name></name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>snmp_pdu_encode_header</name><argument_list>(<argument><expr><name>resp_b</name></expr></argument>, <argument><expr><name>pdu</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SNMP_CODE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>pdu</name><operator>-&gt;</operator><name>nbindings</name></name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>snmp_binding_encode</name><argument_list>(<argument><expr><name>resp_b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><operator>(</operator><call><name>snmp_fix_encoding</name><argument_list>(<argument><expr><name>resp_b</name></expr></argument>, <argument><expr><name>pdu</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_binding</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>ASN_OIDSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snmp_printf</name><argument_list>(<argument><expr><literal type="string">"%s="</literal></expr></argument>, <argument><expr><call><name>asn_oid2str_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>syntax</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SNMP_SYNTAX_NULL</name></expr>:</case>
<expr_stmt><expr><call><name>snmp_printf</name><argument_list>(<argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_INTEGER</name></expr>:</case>
<expr_stmt><expr><call><name>snmp_printf</name><argument_list>(<argument><expr><literal type="string">"INTEGER %d"</literal></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_OCTETSTRING</name></expr>:</case>
<expr_stmt><expr><call><name>snmp_printf</name><argument_list>(<argument><expr><literal type="string">"OCTET STRING %lu:"</literal></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_printf</name><argument_list>(<argument><expr><literal type="string">" %02x"</literal></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>octets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_OID</name></expr>:</case>
<expr_stmt><expr><call><name>snmp_printf</name><argument_list>(<argument><expr><literal type="string">"OID %s"</literal></expr></argument>, <argument><expr><call><name>asn_oid2str_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_IPADDRESS</name></expr>:</case>
<expr_stmt><expr><call><name>snmp_printf</name><argument_list>(<argument><expr><literal type="string">"IPADDRESS %u.%u.%u.%u"</literal></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>ipaddress</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>b</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>ipaddress</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>ipaddress</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>ipaddress</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_COUNTER</name></expr>:</case>
<expr_stmt><expr><call><name>snmp_printf</name><argument_list>(<argument><expr><literal type="string">"COUNTER %u"</literal></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_GAUGE</name></expr>:</case>
<expr_stmt><expr><call><name>snmp_printf</name><argument_list>(<argument><expr><literal type="string">"GAUGE %u"</literal></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_TIMETICKS</name></expr>:</case>
<expr_stmt><expr><call><name>snmp_printf</name><argument_list>(<argument><expr><literal type="string">"TIMETICKS %u"</literal></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_COUNTER64</name></expr>:</case>
<expr_stmt><expr><call><name>snmp_printf</name><argument_list>(<argument><expr><literal type="string">"COUNTER64 %lld"</literal></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>counter64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_NOSUCHOBJECT</name></expr>:</case>
<expr_stmt><expr><call><name>snmp_printf</name><argument_list>(<argument><expr><literal type="string">"NoSuchObject"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_NOSUCHINSTANCE</name></expr>:</case>
<expr_stmt><expr><call><name>snmp_printf</name><argument_list>(<argument><expr><literal type="string">"NoSuchInstance"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_ENDOFMIBVIEW</name></expr>:</case>
<expr_stmt><expr><call><name>snmp_printf</name><argument_list>(<argument><expr><literal type="string">"EndOfMibView"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>snmp_printf</name><argument_list>(<argument><expr><literal type="string">"UNKNOWN SYNTAX %u"</literal></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline</name> <name>void</name></type>
<name>dump_bindings</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pdu</name><operator>-&gt;</operator><name>nbindings</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_printf</name><argument_list>(<argument><expr><literal type="string">" [%u]: "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_binding</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snmp_printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline</name> <name>void</name></type>
<name>dump_notrap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>snmp_printf</name><argument_list>(<argument><expr><literal type="string">" request_id=%d"</literal></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>request_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snmp_printf</name><argument_list>(<argument><expr><literal type="string">" error_status=%d"</literal></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snmp_printf</name><argument_list>(<argument><expr><literal type="string">" error_index=%d\n"</literal></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_bindings</name><argument_list>(<argument><expr><name>pdu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>snmp_pdu_dump</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>ASN_OIDSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>types</name><index>[]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>SNMP_PDU_GET</name></expr>]</index> <operator>=</operator> <literal type="string">"GET"</literal></expr>,
<expr><index>[<expr><name>SNMP_PDU_GETNEXT</name></expr>]</index> <operator>=</operator> <literal type="string">"GETNEXT"</literal></expr>,
<expr><index>[<expr><name>SNMP_PDU_RESPONSE</name></expr>]</index> <operator>=</operator> <literal type="string">"RESPONSE"</literal></expr>,
<expr><index>[<expr><name>SNMP_PDU_SET</name></expr>]</index> <operator>=</operator> <literal type="string">"SET"</literal></expr>,
<expr><index>[<expr><name>SNMP_PDU_TRAP</name></expr>]</index> <operator>=</operator> <literal type="string">"TRAPv1"</literal></expr>,
<expr><index>[<expr><name>SNMP_PDU_GETBULK</name></expr>]</index> <operator>=</operator> <literal type="string">"GETBULK"</literal></expr>,
<expr><index>[<expr><name>SNMP_PDU_INFORM</name></expr>]</index> <operator>=</operator> <literal type="string">"INFORM"</literal></expr>,
<expr><index>[<expr><name>SNMP_PDU_TRAP2</name></expr>]</index> <operator>=</operator> <literal type="string">"TRAPv2"</literal></expr>,
<expr><index>[<expr><name>SNMP_PDU_REPORT</name></expr>]</index> <operator>=</operator> <literal type="string">"REPORT"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <name>SNMP_V1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vers</name> <operator>=</operator> <literal type="string">"SNMPv1"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <name>SNMP_V2c</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vers</name> <operator>=</operator> <literal type="string">"SNMPv2c"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <name>SNMP_V3</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vers</name> <operator>=</operator> <literal type="string">"SNMPv3"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>vers</name> <operator>=</operator> <literal type="string">"v?"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<switch>switch <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SNMP_PDU_TRAP</name></expr>:</case>
<expr_stmt><expr><call><name>snmp_printf</name><argument_list>(<argument><expr><literal type="string">"%s %s '%s'"</literal></expr></argument>, <argument><expr><name><name>types</name><index>[<expr><name><name>pdu</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>vers</name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>community</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snmp_printf</name><argument_list>(<argument><expr><literal type="string">" enterprise=%s"</literal></expr></argument>, <argument><expr><call><name>asn_oid2str_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>enterprise</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snmp_printf</name><argument_list>(<argument><expr><literal type="string">" agent_addr=%u.%u.%u.%u"</literal></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>agent_addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>agent_addr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>agent_addr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>agent_addr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snmp_printf</name><argument_list>(<argument><expr><literal type="string">" generic_trap=%d"</literal></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>generic_trap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snmp_printf</name><argument_list>(<argument><expr><literal type="string">" specific_trap=%d"</literal></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>specific_trap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snmp_printf</name><argument_list>(<argument><expr><literal type="string">" time-stamp=%u\n"</literal></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>time_stamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_bindings</name><argument_list>(<argument><expr><name>pdu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_PDU_GET</name></expr>:</case>
<case>case <expr><name>SNMP_PDU_GETNEXT</name></expr>:</case>
<case>case <expr><name>SNMP_PDU_RESPONSE</name></expr>:</case>
<case>case <expr><name>SNMP_PDU_SET</name></expr>:</case>
<case>case <expr><name>SNMP_PDU_GETBULK</name></expr>:</case>
<case>case <expr><name>SNMP_PDU_INFORM</name></expr>:</case>
<case>case <expr><name>SNMP_PDU_TRAP2</name></expr>:</case>
<case>case <expr><name>SNMP_PDU_REPORT</name></expr>:</case>
<expr_stmt><expr><call><name>snmp_printf</name><argument_list>(<argument><expr><literal type="string">"%s %s '%s'"</literal></expr></argument>, <argument><expr><name><name>types</name><index>[<expr><name><name>pdu</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>vers</name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>community</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_notrap</name><argument_list>(<argument><expr><name>pdu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>snmp_printf</name><argument_list>(<argument><expr><literal type="string">"bad pdu type %u\n"</literal></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>snmp_value_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>syntax</name></name> <operator>==</operator> <name>SNMP_SYNTAX_OCTETSTRING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>octets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>octets</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>syntax</name></name> <operator>=</operator> <name>SNMP_SYNTAX_NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>snmp_value_copy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>var</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>var</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>syntax</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>syntax</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>from</name><operator>-&gt;</operator><name>syntax</name></name> <operator>==</operator> <name>SNMP_SYNTAX_OCTETSTRING</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>to</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>octets</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>octets</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>to</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>to</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>octets</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memcpy</name><argument_list>(<argument><expr><name><name>to</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>octets</name></name></expr></argument>,
<argument><expr><name><name>from</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>octets</name></name></expr></argument>, <argument><expr><name><name>to</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>v</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>snmp_pdu_init_secparams</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>rval</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>auth_proto</name></name> <operator>!=</operator> <name>SNMP_AUTH_NOAUTH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SNMP_MSG_AUTH_FLAG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>priv_proto</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SNMP_PRIV_DES</name></expr>:</case>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>msg_salt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>engine</name><operator>.</operator><name>engine_boots</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>engine</name><operator>.</operator><name>engine_boots</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <call><name>random</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>msg_salt</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>engine</name><operator>.</operator><name>engine_boots</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>rval</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SNMP_MSG_PRIV_FLAG</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SNMP_PRIV_AES</name></expr>:</case>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <call><name>random</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>msg_salt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rval</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <call><name>random</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>msg_salt</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>rval</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SNMP_MSG_PRIV_FLAG</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>snmp_pdu_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pdu</name><operator>-&gt;</operator><name>nbindings</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_value_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>nbindings</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>snmp_value_parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>snmp_syntax</name></name></type> <name>syntax</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>snmp_values</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>syntax</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SNMP_SYNTAX_NULL</name></expr>:</case>
<case>case <expr><name>SNMP_SYNTAX_NOSUCHOBJECT</name></expr>:</case>
<case>case <expr><name>SNMP_SYNTAX_NOSUCHINSTANCE</name></expr>:</case>
<case>case <expr><name>SNMP_SYNTAX_ENDOFMIBVIEW</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>

<case>case <expr><name>SNMP_SYNTAX_INTEGER</name></expr>:</case>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>integer</name></name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>

<case>case <expr><name>SNMP_SYNTAX_OCTETSTRING</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>u_long</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>octs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>oct</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>nocts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name></type> <name>c</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STUFFC</name><parameter_list>(<parameter><type><name>C</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (alloc == len) { alloc += 100; if ((nocts = realloc(octs, alloc)) == NULL) { free(octs); return (-1); } octs = nocts; } octs[len++] = (C);</cpp:value></cpp:define>










<expr_stmt><expr><name>len</name> <operator>=</operator> <name>alloc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>octs</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>str</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>octs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>c</name> <operator>=</operator> <operator>*</operator><name>str</name><operator>++</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
<break>break;</break>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\a'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\b'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\f'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\v'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isxdigit</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>str</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>isupper</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>str</name><operator>++</operator> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>str</name><operator>++</operator> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isxdigit</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>*</operator><name>str</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>isupper</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>*</operator><name>str</name><operator>++</operator> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>*</operator><name>str</name><operator>++</operator> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'0'</literal></expr>:</case> <case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case>
<case>case <expr><literal type="char">'3'</literal></expr>:</case> <case>case <expr><literal type="char">'4'</literal></expr>:</case> <case>case <expr><literal type="char">'5'</literal></expr>:</case>
<case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>str</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>str</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <operator>*</operator><name>str</name></expr></argument> &gt;</argument_list></name> <literal type="char">'7'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>str</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>str</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <operator>*</operator><name>str</name></expr></argument> &gt;</argument_list></name> <literal type="char">'7'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>str</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>STUFFC</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>str</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>oct</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>oct</name> <operator>&gt;</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>octs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>STUFFC</name><argument_list>(<argument><expr><name>oct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><operator>*</operator><name>str</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>octs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>octetstring</name><operator>.</operator><name>octets</name></name> <operator>=</operator> <name>octs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>octetstring</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STUFFC</name></cpp:undef>
</block_content>}</block>

<case>case <expr><name>SNMP_SYNTAX_OID</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>u_long</name></type> <name>subid</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>len</name></name> <operator>==</operator> <name>ASN_MAXOIDLEN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>subid</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>subid</name> <operator>&gt;</operator> <name>ASN_MAXID</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>subs</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>asn_subid_t</name><operator>)</operator><name>subid</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block>

<case>case <expr><name>SNMP_SYNTAX_IPADDRESS</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier></type><name>he</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ipaddress</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>he</name> <operator>=</operator> <call><name>gethostbyname2</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>AF_INET</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>he</name><operator>-&gt;</operator><name>h_addrtype</name></name> <operator>!=</operator> <name>AF_INET</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>ipaddress</name></name></expr></argument>, <argument><expr><name><name>he</name><operator>-&gt;</operator><name>h_addr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>ipaddress</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block>

<case>case <expr><name>SNMP_SYNTAX_COUNTER</name></expr>:</case>
<case>case <expr><name>SNMP_SYNTAX_GAUGE</name></expr>:</case>
<case>case <expr><name>SNMP_SYNTAX_TIMETICKS</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>sub</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sub</name> <operator>=</operator> <call><name>strtoull</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name>sub</name> <operator>&gt;</operator> <literal type="number">0xffffffff</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>uint32</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>sub</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block>

<case>case <expr><name>SNMP_SYNTAX_COUNTER64</name></expr>:</case>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>counter64</name></name> <operator>=</operator> <call><name>strtoull</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>snmp_error_func</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"SNMP: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>snmp_printf_func</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
