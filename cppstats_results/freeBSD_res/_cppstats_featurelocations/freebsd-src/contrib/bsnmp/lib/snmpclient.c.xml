<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bsnmp/lib/snmpclient.c">



































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/un.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/if.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDINT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INTTYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ERR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;err.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"support.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asn1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snmp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snmpclient.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snmppriv.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_PARSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>


<decl_stmt><decl><type><name><name>struct</name> <name>snmp_client</name></name></type> <name>snmp_client</name></decl>;</decl_stmt>


<struct>struct <name>sent_pdu</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>reqid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>retrycount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>snmp_send_cb_f</name></type> <name>callback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>timeout_id</name></decl>;</decl_stmt>
<macro><name>LIST_ENTRY</name><argument_list>(<argument>sent_pdu</argument>)</argument_list></macro> <expr_stmt><expr><name>entries</name></expr>;</expr_stmt>
}</block>;</struct>
<expr_stmt><expr><call><name>LIST_HEAD</name><argument_list>(<argument><expr><name>sent_pdu_list</name></expr></argument>, <argument><expr><name>sent_pdu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>sent_pdu_list</name></name></type> <name>sent_pdus</name></decl>;</decl_stmt>






<struct>struct <name>entry</name> <block>{
<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>entry</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>found</name></decl>;</decl_stmt>
}</block>;</struct>
<expr_stmt><expr><call><name>TAILQ_HEAD</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<struct>struct <name>work</name> <block>{
<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>work</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>asn_oid</name></name></type> <name>index</name></decl>;</decl_stmt>
}</block>;</struct>
<expr_stmt><expr><call><name>TAILQ_HEAD</name><argument_list>(<argument><expr><name>worklist</name></expr></argument>, <argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<struct>struct <name>tabwork</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_table</name></name> <modifier>*</modifier></type><name>descr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>table</name></name> <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>worklist</name></name></type> <name>worklist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>last_change</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>snmp_table_cb_f</name></type> <name>callback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>snmp_pdu</name></name></type> <name>pdu</name></decl>;</decl_stmt>
}</block>;</struct>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>seterr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_client</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>error</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>error</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>table_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tabwork</name></name> <modifier>*</modifier></type><name>work</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>all</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>work</name></name> <modifier>*</modifier></type><name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>entry</name></name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_table_entry</name></name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>i</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>w</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>work</name><operator>-&gt;</operator><name>worklist</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>work</name><operator>-&gt;</operator><name>worklist</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>all</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><name><name>work</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>work</name><operator>-&gt;</operator><name>descr</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>syntax</name> <operator>!=</operator> <name>SNMP_SYNTAX_NULL</name></expr>;</condition>
<incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>&amp;</operator><name><name>work</name><operator>-&gt;</operator><name>descr</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>syntax</name></name> <operator>==</operator> <name>SNMP_SYNTAX_OCTETSTRING</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>found</name></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator>
<operator>(</operator><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name>e</name> <operator>+</operator> <name><name>d</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><name><name>work</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name><name>struct</name> <name>entry</name></name> <modifier>*</modifier></type>
<name>table_find</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tabwork</name></name> <modifier>*</modifier></type><name>work</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>entry</name></name> <modifier>*</modifier></type><name>e</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>work</name></name> <modifier>*</modifier></type><name>w</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>w1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>asn_oid</name></name></type> <name>oid</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>asn_slice_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name><name>work</name><operator>-&gt;</operator><name>descr</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>len</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><name><name>work</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>work</name><operator>-&gt;</operator><name>worklist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>asn_compare_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>e</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>TAILQ_NEXT</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>TAILQ_NEXT</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>work</name><operator>-&gt;</operator><name>descr</name><operator>-&gt;</operator><name>entry_size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"no memory for table entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>w</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>w</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"no memory for table entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>oid</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>work</name><operator>-&gt;</operator><name>descr</name><operator>-&gt;</operator><name>entry_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>work</name><operator>-&gt;</operator><name>descr</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>len</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>work</name><operator>-&gt;</operator><name>descr</name><operator>-&gt;</operator><name>index_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>work</name><operator>-&gt;</operator><name>descr</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>syntax</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SNMP_SYNTAX_INTEGER</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"bad index: need integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>p</name></expr>]</index></name> <operator>&gt;</operator> <name>INT32_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>,
<argument><expr><literal type="string">"bad index: integer too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name>e</name> <operator>+</operator>
<name><name>work</name><operator>-&gt;</operator><name>descr</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name><operator>)</operator> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>p</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_OCTETSTRING</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>,
<argument><expr><literal type="string">"bad index: need string length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>p</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name>p</name> <operator>+</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>,
<argument><expr><literal type="string">"bad index: string too short"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>,
<argument><expr><literal type="string">"no memory for index string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>p</name></expr>]</index></name> <operator>&gt;</operator> <name>UCHAR_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>,
<argument><expr><literal type="string">"bad index: char too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>p</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>u_char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name>e</name> <operator>+</operator>
<name><name>work</name><operator>-&gt;</operator><name>descr</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name><operator>)</operator> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>size_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name>e</name> <operator>+</operator>
<name><name>work</name><operator>-&gt;</operator><name>descr</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u_char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator>
<operator>=</operator> <name>len</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_OID</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>,
<argument><expr><literal type="string">"bad index: need oid length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>oid</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>p</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name>p</name> <operator>+</operator> <name><name>oid</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>,
<argument><expr><literal type="string">"bad index: oid too short"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>oid</name><operator>.</operator><name>len</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>oid</name><operator>.</operator><name>subs</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>p</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><operator>(</operator>struct <name>asn_oid</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name>e</name> <operator>+</operator>
<name><name>work</name><operator>-&gt;</operator><name>descr</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name><operator>)</operator> <operator>=</operator> <name>oid</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_IPADDRESS</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name>p</name> <operator>+</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>,
<argument><expr><literal type="string">"bad index: need ip-address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>p</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>,
<argument><expr><literal type="string">"bad index: ipaddress too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name>e</name> <operator>+</operator>
<name><name>work</name><operator>-&gt;</operator><name>descr</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index> <operator>=</operator>
<name><name>var</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>p</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_GAUGE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>,
<argument><expr><literal type="string">"bad index: need unsigned"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>p</name></expr>]</index></name> <operator>&gt;</operator> <name>UINT32_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>,
<argument><expr><literal type="string">"bad index: unsigned too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name>e</name> <operator>+</operator>
<name><name>work</name><operator>-&gt;</operator><name>descr</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name><operator>)</operator> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>p</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_COUNTER</name></expr>:</case>
<case>case <expr><name>SNMP_SYNTAX_TIMETICKS</name></expr>:</case>
<case>case <expr><name>SNMP_SYNTAX_COUNTER64</name></expr>:</case>
<case>case <expr><name>SNMP_SYNTAX_NULL</name></expr>:</case>
<case>case <expr><name>SNMP_SYNTAX_NOSUCHOBJECT</name></expr>:</case>
<case>case <expr><name>SNMP_SYNTAX_NOSUCHINSTANCE</name></expr>:</case>
<case>case <expr><name>SNMP_SYNTAX_ENDOFMIBVIEW</name></expr>:</case>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>found</name></name> <operator>|=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>e1</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><name><name>work</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w1</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>work</name><operator>-&gt;</operator><name>worklist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>e1</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>asn_compare_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w1</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>e1</name> <operator>=</operator> <call><name>TAILQ_NEXT</name><argument_list>(<argument><expr><name>e1</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w1</name> <operator>=</operator> <call><name>TAILQ_NEXT</name><argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>e1</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>work</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>work</name><operator>-&gt;</operator><name>worklist</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>TAILQ_INSERT_BEFORE</name><argument_list>(<argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_INSERT_BEFORE</name><argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>e</name><operator>)</operator></expr>;</return>

<label><name>err</name>:</label>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>work</name><operator>-&gt;</operator><name>descr</name><operator>-&gt;</operator><name>index_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>work</name><operator>-&gt;</operator><name>descr</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>syntax</name> <operator>==</operator> <name>SNMP_SYNTAX_OCTETSTRING</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>found</name></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name>e</name> <operator>+</operator>
<name><name>work</name><operator>-&gt;</operator><name>descr</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>table_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_table</name></name> <modifier>*</modifier></type><name>descr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>entry</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>descr</name><operator>-&gt;</operator><name>index_size</name></name></expr>;</init>
<condition><expr><name><name>descr</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>syntax</name> <operator>!=</operator> <name>SNMP_SYNTAX_NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>descr</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>subid</name> <operator>==</operator>
<name><name>b</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name><name>descr</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>descr</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>syntax</name> <operator>==</operator> <name>SNMP_SYNTAX_NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>syntax</name></name> <operator>!=</operator> <name><name>descr</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>syntax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"bad syntax (%u instead of %u)"</literal></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>,
<argument><expr><name><name>descr</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>syntax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>syntax</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SNMP_SYNTAX_INTEGER</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name>e</name> <operator>+</operator> <name><name>descr</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name><operator>)</operator> <operator>=</operator>
<name><name>b</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_OCTETSTRING</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"no memory for string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>octets</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>u_char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name>e</name> <operator>+</operator> <name><name>descr</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name><operator>)</operator> <operator>=</operator>
<name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>size_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name>e</name> <operator>+</operator> <name><name>descr</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>+</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>u_char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>octetstring</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_OID</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator>struct <name>asn_oid</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name>e</name> <operator>+</operator> <name><name>descr</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name><operator>)</operator> <operator>=</operator>
<name><name>b</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>oid</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_IPADDRESS</name></expr>:</case>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name>e</name> <operator>+</operator> <name><name>descr</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr></argument>,
<argument><expr><name><name>b</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>ipaddress</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_COUNTER</name></expr>:</case>
<case>case <expr><name>SNMP_SYNTAX_GAUGE</name></expr>:</case>
<case>case <expr><name>SNMP_SYNTAX_TIMETICKS</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name>e</name> <operator>+</operator> <name><name>descr</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name><operator>)</operator> <operator>=</operator>
<name><name>b</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_COUNTER64</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name>e</name> <operator>+</operator> <name><name>descr</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name><operator>)</operator> <operator>=</operator>
<name><name>b</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>counter64</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_SYNTAX_NULL</name></expr>:</case>
<case>case <expr><name>SNMP_SYNTAX_NOSUCHOBJECT</name></expr>:</case>
<case>case <expr><name>SNMP_SYNTAX_NOSUCHINSTANCE</name></expr>:</case>
<case>case <expr><name>SNMP_SYNTAX_ENDOFMIBVIEW</name></expr>:</case>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>found</name></name> <operator>|=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>table_init_pdu</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_table</name></name> <modifier>*</modifier></type><name>descr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>snmp_client</name><operator>.</operator><name>version</name></name> <operator>==</operator> <name>SNMP_V1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_pdu_create</name><argument_list>(<argument><expr><name>pdu</name></expr></argument>, <argument><expr><name>SNMP_PDU_GETNEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>snmp_pdu_create</name><argument_list>(<argument><expr><name>pdu</name></expr></argument>, <argument><expr><name>SNMP_PDU_GETBULK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_index</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>descr</name><operator>-&gt;</operator><name>last_change</name><operator>.</operator><name>len</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name><name>pdu</name><operator>-&gt;</operator><name>nbindings</name></name></expr>]</index></name><operator>.</operator><name>syntax</name> <operator>=</operator> <name>SNMP_SYNTAX_NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name><name>pdu</name><operator>-&gt;</operator><name>nbindings</name></name></expr>]</index></name><operator>.</operator><name>var</name> <operator>=</operator> <name><name>descr</name><operator>-&gt;</operator><name>last_change</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>nbindings</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>version</name></name> <operator>!=</operator> <name>SNMP_V1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_status</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name><name>pdu</name><operator>-&gt;</operator><name>nbindings</name></name></expr>]</index></name><operator>.</operator><name>var</name> <operator>=</operator> <name><name>descr</name><operator>-&gt;</operator><name>table</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name><name>pdu</name><operator>-&gt;</operator><name>nbindings</name></name></expr>]</index></name><operator>.</operator><name>syntax</name> <operator>=</operator> <name>SNMP_SYNTAX_NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>nbindings</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>table_check_response</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tabwork</name></name> <modifier>*</modifier></type><name>work</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>resp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>entry</name></name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>resp</name><operator>-&gt;</operator><name>error_status</name></name> <operator>!=</operator> <name>SNMP_ERR_NOERROR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>snmp_client</name><operator>.</operator><name>version</name></name> <operator>==</operator> <name>SNMP_V1</name> <operator>&amp;&amp;</operator>
<name><name>resp</name><operator>-&gt;</operator><name>error_status</name></name> <operator>==</operator> <name>SNMP_ERR_NOSUCHNAME</name> <operator>&amp;&amp;</operator>
<name><name>resp</name><operator>-&gt;</operator><name>error_index</name></name> <operator>==</operator>
<operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>work</name><operator>-&gt;</operator><name>descr</name><operator>-&gt;</operator><name>last_change</name><operator>.</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"error fetching table: status=%d index=%d"</literal></expr></argument>,
<argument><expr><name><name>resp</name><operator>-&gt;</operator><name>error_status</name></name></expr></argument>, <argument><expr><name><name>resp</name><operator>-&gt;</operator><name>error_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <name><name>resp</name><operator>-&gt;</operator><name>bindings</name></name></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name><name>resp</name><operator>-&gt;</operator><name>bindings</name></name> <operator>+</operator> <name><name>resp</name><operator>-&gt;</operator><name>nbindings</name></name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>work</name><operator>-&gt;</operator><name>descr</name><operator>-&gt;</operator><name>last_change</name><operator>.</operator><name>len</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>==</operator> <name><name>resp</name><operator>-&gt;</operator><name>bindings</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>asn_is_suboid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>work</name><operator>-&gt;</operator><name>descr</name><operator>-&gt;</operator><name>last_change</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>var</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<name><name>b</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>len</name></name> <operator>!=</operator> <name><name>work</name><operator>-&gt;</operator><name>descr</name><operator>-&gt;</operator><name>last_change</name><operator>.</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>||</operator>
<name><name>b</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name><name>work</name><operator>-&gt;</operator><name>descr</name><operator>-&gt;</operator><name>last_change</name><operator>.</operator><name>len</name></name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>,
<argument><expr><literal type="string">"last_change: bad response"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>syntax</name></name> <operator>!=</operator> <name>SNMP_SYNTAX_TIMETICKS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>,
<argument><expr><literal type="string">"last_change: bad syntax %u"</literal></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>work</name><operator>-&gt;</operator><name>first</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>last_change</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>work</name><operator>-&gt;</operator><name>last_change</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>work</name><operator>-&gt;</operator><name>iter</name></name> <operator>&gt;=</operator> <name><name>work</name><operator>-&gt;</operator><name>descr</name><operator>-&gt;</operator><name>max_iter</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>,
<argument><expr><literal type="string">"max iteration count exceeded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>table_free</name><argument_list>(<argument><expr><name>work</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">2</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>asn_is_suboid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>work</name><operator>-&gt;</operator><name>descr</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>var</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<name><name>b</name><operator>-&gt;</operator><name>syntax</name></name> <operator>==</operator> <name>SNMP_SYNTAX_ENDOFMIBVIEW</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>table_find</name><argument_list>(<argument><expr><name>work</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>var</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>table_value</name><argument_list>(<argument><expr><name><name>work</name><operator>-&gt;</operator><name>descr</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>table_check_cons</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tabwork</name></name> <modifier>*</modifier></type><name>work</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>entry</name></name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>e</argument>, <argument>work-&gt;table</argument>, <argument>link</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>found</name></name> <operator>&amp;</operator> <name><name>work</name><operator>-&gt;</operator><name>descr</name><operator>-&gt;</operator><name>req_mask</name></name><operator>)</operator> <operator>!=</operator>
<name><name>work</name><operator>-&gt;</operator><name>descr</name><operator>-&gt;</operator><name>req_mask</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>work</name><operator>-&gt;</operator><name>descr</name><operator>-&gt;</operator><name>last_change</name><operator>.</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>work</name><operator>-&gt;</operator><name>iter</name></name> <operator>&gt;=</operator> <name><name>work</name><operator>-&gt;</operator><name>descr</name><operator>-&gt;</operator><name>max_iter</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>,
<argument><expr><literal type="string">"max iteration count exceeded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">2</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"inconsistency detected %llx %llx"</literal></expr></argument>,
<argument><expr><name><name>e</name><operator>-&gt;</operator><name>found</name></name></expr></argument>, <argument><expr><name><name>work</name><operator>-&gt;</operator><name>descr</name><operator>-&gt;</operator><name>req_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>snmp_table_fetch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_table</name></name> <modifier>*</modifier></type><name>descr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>snmp_pdu</name></name></type> <name>resp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tabwork</name></name></type> <name>work</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>work</name><operator>.</operator><name>descr</name></name> <operator>=</operator> <name>descr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>work</name><operator>.</operator><name>table</name></name> <operator>=</operator> <operator>(</operator>struct <name>table</name> <operator>*</operator><operator>)</operator><name>list</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>work</name><operator>.</operator><name>iter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><name><name>work</name><operator>.</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>work</name><operator>.</operator><name>worklist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>work</name><operator>.</operator><name>callback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>work</name><operator>.</operator><name>arg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<label><name>again</name>:</label>




<expr_stmt><expr><name><name>work</name><operator>.</operator><name>first</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>work</name><operator>.</operator><name>last_change</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>table_init_pdu</name><argument_list>(<argument><expr><name>descr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>work</name><operator>.</operator><name>pdu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>snmp_dialog</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>work</name><operator>.</operator><name>pdu</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>table_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>work</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>table_check_response</name><argument_list>(<argument><expr><operator>&amp;</operator><name>work</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_pdu_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_pdu_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>table_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>work</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_pdu_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>work</name><operator>.</operator><name>pdu</name><operator>.</operator><name>bindings</name><index>[<expr><name><name>work</name><operator>.</operator><name>pdu</name><operator>.</operator><name>nbindings</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>var</name> <operator>=</operator>
<name><name>resp</name><operator>.</operator><name>bindings</name><index>[<expr><name><name>resp</name><operator>.</operator><name>nbindings</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>var</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snmp_pdu_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>table_check_cons</name><argument_list>(<argument><expr><operator>&amp;</operator><name>work</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>table_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>work</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>table_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>work</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>table_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>work</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>table_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier><name>req</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>resp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tabwork</name></name> <modifier>*</modifier></type><name>work</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>resp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"no response to fetch table request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>table_free</name><argument_list>(<argument><expr><name>work</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>work</name><operator>-&gt;</operator><name>callback</name></name><argument_list>(<argument><expr><name><name>work</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>work</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>table_check_response</name><argument_list>(<argument><expr><name>work</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snmp_pdu_free</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>table_check_cons</name><argument_list>(<argument><expr><name>work</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>table_free</name><argument_list>(<argument><expr><name>work</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>work</name><operator>-&gt;</operator><name>callback</name></name><argument_list>(<argument><expr><name><name>work</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>work</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<label><name>again</name>:</label>
<expr_stmt><expr><call><name>table_free</name><argument_list>(<argument><expr><name>work</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>last_change</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>table_init_pdu</name><argument_list>(<argument><expr><name><name>work</name><operator>-&gt;</operator><name>descr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>work</name><operator>-&gt;</operator><name>pdu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>snmp_pdu_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>work</name><operator>-&gt;</operator><name>pdu</name></name></expr></argument>, <argument><expr><name>table_cb</name></expr></argument>, <argument><expr><name>work</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>work</name><operator>-&gt;</operator><name>callback</name></name><argument_list>(<argument><expr><name><name>work</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>work</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>table_free</name><argument_list>(<argument><expr><name>work</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>work</name><operator>-&gt;</operator><name>callback</name></name><argument_list>(<argument><expr><name><name>work</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>work</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snmp_pdu_free</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>table_free</name><argument_list>(<argument><expr><name>work</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>work</name><operator>-&gt;</operator><name>callback</name></name><argument_list>(<argument><expr><name><name>work</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>work</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snmp_pdu_free</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>pdu</name><operator>.</operator><name>bindings</name><index>[<expr><name><name>work</name><operator>-&gt;</operator><name>pdu</name><operator>.</operator><name>nbindings</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>var</name> <operator>=</operator>
<name><name>resp</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name><name>resp</name><operator>-&gt;</operator><name>nbindings</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>var</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snmp_pdu_free</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>snmp_pdu_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>work</name><operator>-&gt;</operator><name>pdu</name></name></expr></argument>, <argument><expr><name>table_cb</name></expr></argument>, <argument><expr><name>work</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>table_free</name><argument_list>(<argument><expr><name>work</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>work</name><operator>-&gt;</operator><name>callback</name></name><argument_list>(<argument><expr><name><name>work</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>work</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>snmp_table_fetch_async</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_table</name></name> <modifier>*</modifier></type><name>descr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>list</name></decl></parameter>,
<parameter><decl><type><name>snmp_table_cb_f</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tabwork</name></name> <modifier>*</modifier></type><name>work</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>work</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>work</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>descr</name></name> <operator>=</operator> <name>descr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator> <operator>(</operator>struct <name>table</name> <operator>*</operator><operator>)</operator><name>list</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>iter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><name><name>work</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>work</name><operator>-&gt;</operator><name>worklist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>callback</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>




<expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>last_change</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>table_init_pdu</name><argument_list>(<argument><expr><name>descr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>work</name><operator>-&gt;</operator><name>pdu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>snmp_pdu_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>work</name><operator>-&gt;</operator><name>pdu</name></name></expr></argument>, <argument><expr><name>table_cb</name></expr></argument>, <argument><expr><name>work</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>work</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>snmp_oid_append</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>va</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nextptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>ina</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>fmt</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>fmt</name><operator>++</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>ASN_MAXOIDLEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s: OID too long for integer"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>asn_subid_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'a'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>&gt;</operator> <name>ASN_MAXOIDLEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s: OID too long for ip-addr"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ina</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ina</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>ina</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>ina</name><operator>.</operator><name>s_addr</name></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>ina</name><operator>.</operator><name>s_addr</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>ina</name><operator>.</operator><name>s_addr</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>ina</name><operator>.</operator><name>s_addr</name></name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>


<expr_stmt><expr><name>str</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>u_char</name> <operator>*</operator><operator>)</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>ASN_MAXOIDLEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s: OID too long for string"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>str</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<break>break;</break>

<case>case <expr><literal type="char">'('</literal></expr>:</case>


<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>nextptr</name> <operator>!=</operator> <literal type="char">')'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>fmt</name> <operator>=</operator> <operator>++</operator><name>nextptr</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'b'</literal></expr>:</case>

<expr_stmt><expr><name>str</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>u_char</name> <operator>*</operator><operator>)</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name>size</name> <operator>&gt;</operator> <name>ASN_MAXOIDLEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s: OID too long for string"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>size</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>str</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>u_char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name>size</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>ASN_MAXOIDLEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s: OID too long for string"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>size</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>str</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></while>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>snmp_client_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_client</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>SNMP_V2c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>trans</name></name> <operator>=</operator> <name>SNMP_TRANS_UDP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chost</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cport</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>read_community</name></name></expr></argument>, <argument><expr><literal type="string">"public"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>write_community</name></name></expr></argument>, <argument><expr><literal type="string">"private"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>security_model</name></name> <operator>=</operator> <name>SNMP_SECMODEL_USM</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cname</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>retries</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dump_pdus</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>txbuflen</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>rxbuflen</name></name> <operator>=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>max_reqid</name></name> <operator>=</operator> <name>INT32_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>min_reqid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>next_reqid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>engine</name><operator>.</operator><name>max_msg_size</name></name> <operator>=</operator> <literal type="number">1500</literal></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>open_client_udp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>res0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>snmp_client</name><operator>.</operator><name>chost</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>snmp_client</name><operator>.</operator><name>chost</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DEFAULT_HOST</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator>
<operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>chost</name></name></expr></argument>, <argument><expr><name>DEFAULT_HOST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>host</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>chost</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snmp_client</name><operator>.</operator><name>chost</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>chost</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>snmp_client</name><operator>.</operator><name>cport</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>snmp_client</name><operator>.</operator><name>cport</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DEFAULT_PORT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator>
<operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>cport</name></name></expr></argument>, <argument><expr><name>DEFAULT_PORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>port</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>cport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snmp_client</name><operator>.</operator><name>cport</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>cport</name></name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <name>AI_CANONNAME</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <ternary><condition><expr><name><name>snmp_client</name><operator>.</operator><name>trans</name></name> <operator>==</operator> <name>SNMP_TRANS_UDP</name></expr> ?</condition><then> <expr><name>AF_INET</name></expr> </then><else>:
<expr><name>AF_INET6</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_DGRAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_protocol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>chost</name></name></expr></argument>, <argument><expr><name><name>snmp_client</name><operator>.</operator><name>cport</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name><name>snmp_client</name><operator>.</operator><name>chost</name></name></expr></argument>,
<argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>res0</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>snmp_client</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr></argument>,
<argument><expr><name><name>res</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>ai_next</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>connect</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>,
<argument><expr><name><name>res</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>ai_next</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snmp_client</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>remove_local</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>remove</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>local_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>open_client_local</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_un</name></name></type> <name>sa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stype</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>snmp_client</name><operator>.</operator><name>chost</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>snmp_client</name><operator>.</operator><name>chost</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DEFAULT_LOCAL</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator>
<operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>chost</name></name></expr></argument>, <argument><expr><name>DEFAULT_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>chost</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snmp_client</name><operator>.</operator><name>chost</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>chost</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>snmp_client</name><operator>.</operator><name>trans</name></name> <operator>==</operator> <name>SNMP_TRANS_LOC_DGRAM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>stype</name> <operator>=</operator> <name>SOCK_DGRAM</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>stype</name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>snmp_client</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>PF_LOCAL</name></expr></argument>, <argument><expr><name>stype</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>local_path</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>local_path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>SNMP_LOCAL_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mktemp</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>local_path</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snmp_client</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sun_family</name></name> <operator>=</operator> <name>AF_LOCAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sun_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>sa</name><operator>.</operator><name>sun_path</name></name></expr></argument>, <argument><expr><name><name>snmp_client</name><operator>.</operator><name>local_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snmp_client</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>remove</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>local_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>remove_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sun_family</name></name> <operator>=</operator> <name>AF_LOCAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sun_len</name></name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sockaddr_un</name></expr></argument>, <argument><expr><name>sun_path</name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>strlen</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>chost</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>sa</name><operator>.</operator><name>sun_path</name></name></expr></argument>, <argument><expr><name><name>snmp_client</name><operator>.</operator><name>chost</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sa</name><operator>.</operator><name>sun_path</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sun_path</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sa</name><operator>.</operator><name>sun_path</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>connect</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><name><name>sa</name><operator>.</operator><name>sun_len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snmp_client</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>remove</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>local_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>snmp_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>readcomm</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>writecomm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tout</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>snmp_client</name><operator>.</operator><name>fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBUSY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>readcomm</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>read_community</name></name></expr></argument>, <argument><expr><name>readcomm</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>read_community</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>writecomm</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>write_community</name></name></expr></argument>, <argument><expr><name>writecomm</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>write_community</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>snmp_client</name><operator>.</operator><name>trans</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SNMP_TRANS_UDP</name></expr>:</case>
<case>case <expr><name>SNMP_TRANS_UDP6</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>open_client_udp</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_TRANS_LOC_DGRAM</name></expr>:</case>
<case>case <expr><name>SNMP_TRANS_LOC_STREAM</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>open_client_local</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"bad transport mapping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>tout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_SNDTIMEO</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>tout</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>timeval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snmp_client</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>snmp_client</name><operator>.</operator><name>local_path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>remove</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>local_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>LIST_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sent_pdus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>















<function><type><name>void</name></type>
<name>snmp_close</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sent_pdu</name></name> <modifier>*</modifier></type><name>p1</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>snmp_client</name><operator>.</operator><name>fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snmp_client</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>snmp_client</name><operator>.</operator><name>local_path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>remove</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>local_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<while>while<condition>(<expr><operator>!</operator><call><name>LIST_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sent_pdus</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>p1</name> <operator>=</operator> <call><name>LIST_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sent_pdus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>timeout_id</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>snmp_client</name><operator>.</operator><name>timeout_stop</name></name><argument_list>(<argument><expr><name><name>p1</name><operator>-&gt;</operator><name>timeout_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>LIST_REMOVE</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>chost</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>cport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>snmp_pdu_create</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>, <parameter><decl><type><name>u_int</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pdu</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>snmp_pdu</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>SNMP_PDU_SET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>community</name></name></expr></argument>, <argument><expr><name><name>snmp_client</name><operator>.</operator><name>write_community</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>community</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>community</name></name></expr></argument>, <argument><expr><name><name>snmp_client</name><operator>.</operator><name>read_community</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>community</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name><name>snmp_client</name><operator>.</operator><name>version</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>nbindings</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>snmp_client</name><operator>.</operator><name>version</name></name> <operator>!=</operator> <name>SNMP_V3</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>identifier</name></name> <operator>=</operator> <operator>++</operator><name><name>snmp_client</name><operator>.</operator><name>identifier</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>engine</name><operator>.</operator><name>max_msg_size</name></name> <operator>=</operator> <name><name>snmp_client</name><operator>.</operator><name>engine</name><operator>.</operator><name>max_msg_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>security_model</name></name> <operator>=</operator> <name><name>snmp_client</name><operator>.</operator><name>security_model</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>snmp_client</name><operator>.</operator><name>security_model</name></name> <operator>==</operator> <name>SNMP_SECMODEL_USM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>snmp_client</name><operator>.</operator><name>engine</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>snmp_client</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snmp_pdu_init_secparams</name><argument_list>(<argument><expr><name>pdu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"unknown security model"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>snmp_client</name><operator>.</operator><name>clen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>context_engine</name></name></expr></argument>, <argument><expr><name><name>snmp_client</name><operator>.</operator><name>cengine</name></name></expr></argument>,
<argument><expr><name><name>snmp_client</name><operator>.</operator><name>clen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>context_engine_len</name></name> <operator>=</operator> <name><name>snmp_client</name><operator>.</operator><name>clen</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>context_engine</name></name></expr></argument>, <argument><expr><name><name>snmp_client</name><operator>.</operator><name>engine</name><operator>.</operator><name>engine_id</name></name></expr></argument>,
<argument><expr><name><name>snmp_client</name><operator>.</operator><name>engine</name><operator>.</operator><name>engine_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>context_engine_len</name></name> <operator>=</operator> <name><name>snmp_client</name><operator>.</operator><name>engine</name><operator>.</operator><name>engine_len</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>context_name</name></name></expr></argument>, <argument><expr><name><name>snmp_client</name><operator>.</operator><name>cname</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>context_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>int</name></type>
<name>snmp_add_binding</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_v1_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>pdu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>pdu</name><operator>-&gt;</operator><name>nbindings</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>oid</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> struct <name>asn_oid</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>nbindings</name></name> <operator>&gt;=</operator> <name>SNMP_MAX_BINDINGS</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name><name>pdu</name><operator>-&gt;</operator><name>nbindings</name></name></expr>]</index></name><operator>.</operator><name>var</name> <operator>=</operator> <operator>*</operator><name>oid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name><name>pdu</name><operator>-&gt;</operator><name>nbindings</name></name></expr>]</index></name><operator>.</operator><name>syntax</name> <operator>=</operator>
<call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr>enum <name>snmp_syntax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>nbindings</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int32_t</name></type>
<name>snmp_next_reqid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_client</name></name> <modifier>*</modifier></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>next_reqid</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>next_reqid</name></name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>max_reqid</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>next_reqid</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>min_reqid</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>next_reqid</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>i</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int32_t</name></type>
<name>snmp_send_packet</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type> <name>pdu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>asn_buf</name></name></type> <name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>snmp_client</name><operator>.</operator><name>txbuflen</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>request_id</name></name> <operator>=</operator> <call><name>snmp_next_reqid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>.</operator><name>asn_ptr</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>.</operator><name>asn_len</name></name> <operator>=</operator> <name><name>snmp_client</name><operator>.</operator><name>txbuflen</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>snmp_pdu_encode</name><argument_list>(<argument><expr><name>pdu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>snmp_client</name><operator>.</operator><name>dump_pdus</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_pdu_dump</name><argument_list>(<argument><expr><name>pdu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>send</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>asn_ptr</name></name> <operator>-</operator> <name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name><name>pdu</name><operator>-&gt;</operator><name>request_id</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>snmp_timeout</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>listentry_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sent_pdu</name></name> <modifier>*</modifier></type><name>listentry</name> <init>= <expr><name>listentry_ptr</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
warnx("snmp request %i timed out, attempt (%i/%i)",
listentry-&gt;reqid, listentry-&gt;retrycount, snmp_client.retries);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>listentry</name><operator>-&gt;</operator><name>retrycount</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>listentry</name><operator>-&gt;</operator><name>retrycount</name></name> <operator>&gt;</operator> <name><name>snmp_client</name><operator>.</operator><name>retries</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LIST_REMOVE</name><argument_list>(<argument><expr><name>listentry</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>listentry</name><operator>-&gt;</operator><name>callback</name></name><argument_list>(<argument><expr><name><name>listentry</name><operator>-&gt;</operator><name>pdu</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>listentry</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>listentry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name><name>listentry</name><operator>-&gt;</operator><name>reqid</name></name> <operator>=</operator> <call><name>snmp_send_packet</name><argument_list>(<argument><expr><name><name>listentry</name><operator>-&gt;</operator><name>pdu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>listentry</name><operator>-&gt;</operator><name>timeout_id</name></name> <operator>=</operator>
<call><name><name>snmp_client</name><operator>.</operator><name>timeout_start</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>snmp_client</name><operator>.</operator><name>timeout</name></name></expr></argument>,
<argument><expr><name>snmp_timeout</name></expr></argument>, <argument><expr><name>listentry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type>
<name>snmp_pdu_send</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>, <parameter><decl><type><name>snmp_send_cb_f</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sent_pdu</name></name> <modifier>*</modifier></type><name>listentry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>id</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>listentry</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sent_pdu</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>id</name> <operator>=</operator> <call><name>snmp_send_packet</name><argument_list>(<argument><expr><name>pdu</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>listentry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>listentry</name><operator>-&gt;</operator><name>pdu</name></name> <operator>=</operator> <name>pdu</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>listentry</name><operator>-&gt;</operator><name>time</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"gettimeofday() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>listentry</name><operator>-&gt;</operator><name>reqid</name></name> <operator>=</operator> <name><name>pdu</name><operator>-&gt;</operator><name>request_id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>listentry</name><operator>-&gt;</operator><name>callback</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>listentry</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>listentry</name><operator>-&gt;</operator><name>retrycount</name></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>listentry</name><operator>-&gt;</operator><name>timeout_id</name></name> <operator>=</operator>
<call><name><name>snmp_client</name><operator>.</operator><name>timeout_start</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>snmp_client</name><operator>.</operator><name>timeout</name></name></expr></argument>, <argument><expr><name>snmp_timeout</name></expr></argument>,
<argument><expr><name>listentry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LIST_INSERT_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sent_pdus</name></expr></argument>, <argument><expr><name>listentry</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>id</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>int</name></type>
<name>snmp_receive_packet</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dopoll</name></decl>, <decl><type ref="prev"/><name>setpoll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>saved_errno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>asn_buf</name></name></type> <name>abuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>ip</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>bsdi</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>optlen</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>optlen</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>snmp_client</name><operator>.</operator><name>rxbuflen</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dopoll</name> <operator>=</operator> <name>setpoll</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tv</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>tv</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_RCVTIMEO</name></expr></argument>,
<argument><expr><name>tv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"setsockopt: %s"</literal></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>optlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tv</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getsockopt</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_RCVTIMEO</name></expr></argument>,
<argument><expr><name>tv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>optlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"getsockopt: %s"</literal></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>







</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>tv</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dopoll</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"fcntl: %s"</literal></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>O_NONBLOCK</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>setpoll</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>O_NONBLOCK</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"fcntl: %s"</literal></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>recv</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>snmp_client</name><operator>.</operator><name>rxbuflen</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>saved_errno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tv</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dopoll</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>setpoll</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>O_NONBLOCK</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fcntl</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_RCVTIMEO</name></expr></argument>,
<argument><expr><name>tv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EAGAIN</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"recv: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>saved_errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"recv: socket closed by peer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EPIPE</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>abuf</name><operator>.</operator><name>asn_ptr</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>abuf</name><operator>.</operator><name>asn_len</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pdu</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pdu</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>snmp_client</name><operator>.</operator><name>security_model</name></name> <operator>==</operator> <name>SNMP_SECMODEL_USM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>snmp_client</name><operator>.</operator><name>engine</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>snmp_client</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snmp_pdu_init_secparams</name><argument_list>(<argument><expr><name>pdu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>SNMP_CODE_OK</name> <operator>!=</operator> <operator>(</operator><name>ret</name> <operator>=</operator> <call><name>snmp_pdu_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>abuf</name></expr></argument>, <argument><expr><name>pdu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"snmp_decode_pdu: failed %d"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>snmp_client</name><operator>.</operator><name>dump_pdus</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_pdu_dump</name><argument_list>(<argument><expr><name>pdu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>snmp_client</name><operator>.</operator><name>engine</name><operator>.</operator><name>engine_time</name></name> <operator>=</operator> <name><name>pdu</name><operator>-&gt;</operator><name>engine</name><operator>.</operator><name>engine_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snmp_client</name><operator>.</operator><name>engine</name><operator>.</operator><name>engine_boots</name></name> <operator>=</operator> <name><name>pdu</name><operator>-&gt;</operator><name>engine</name><operator>.</operator><name>engine_boots</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>snmp_deliver_packet</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type> <name>resp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sent_pdu</name></name> <modifier>*</modifier></type><name>listentry</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>resp</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>SNMP_PDU_RESPONSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"ignoring snmp pdu %u"</literal></expr></argument>, <argument><expr><name><name>resp</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<macro><name>LIST_FOREACH</name><argument_list>(<argument>listentry</argument>, <argument>&amp;sent_pdus</argument>, <argument>entries</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>listentry</name><operator>-&gt;</operator><name>reqid</name></name> <operator>==</operator> <name><name>resp</name><operator>-&gt;</operator><name>request_id</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>listentry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>LIST_REMOVE</name><argument_list>(<argument><expr><name>listentry</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>listentry</name><operator>-&gt;</operator><name>callback</name></name><argument_list>(<argument><expr><name><name>listentry</name><operator>-&gt;</operator><name>pdu</name></name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr><name><name>listentry</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>snmp_client</name><operator>.</operator><name>timeout_stop</name></name><argument_list>(<argument><expr><name><name>listentry</name><operator>-&gt;</operator><name>timeout_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>listentry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>snmp_receive</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>blocking</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type> <name>resp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>resp</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>snmp_pdu</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>resp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"no memory for returning PDU"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>snmp_receive_packet</name><argument_list>(<argument><expr><name>resp</name></expr></argument>, <argument><expr><ternary><condition><expr><name>blocking</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>&amp;</operator><name>tv</name></expr></else></ternary></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>snmp_deliver_packet</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snmp_pdu_free</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int</name></type>
<name>ok_getnext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type> <name>req</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type> <name>resp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>resp</name><operator>-&gt;</operator><name>version</name></name> <operator>!=</operator> <name><name>req</name><operator>-&gt;</operator><name>version</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"SNMP GETNEXT: response has wrong version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>resp</name><operator>-&gt;</operator><name>error_status</name></name> <operator>==</operator> <name>SNMP_ERR_NOSUCHNAME</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>resp</name><operator>-&gt;</operator><name>error_status</name></name> <operator>!=</operator> <name>SNMP_ERR_NOERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"SNMP GETNEXT: error %d"</literal></expr></argument>, <argument><expr><name><name>resp</name><operator>-&gt;</operator><name>error_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>resp</name><operator>-&gt;</operator><name>nbindings</name></name> <operator>!=</operator> <name><name>req</name><operator>-&gt;</operator><name>nbindings</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"SNMP GETNEXT: bad number of bindings in response"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>req</name><operator>-&gt;</operator><name>nbindings</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>asn_is_suboid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>var</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>resp</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>var</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"SNMP GETNEXT: inconsistent table "</literal>
<literal type="string">"response"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>resp</name><operator>-&gt;</operator><name>version</name></name> <operator>!=</operator> <name>SNMP_V1</name> <operator>&amp;&amp;</operator>
<name><name>resp</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>syntax</name> <operator>==</operator> <name>SNMP_SYNTAX_ENDOFMIBVIEW</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>resp</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>syntax</name> <operator>!=</operator> <name><name>req</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>syntax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"SNMP GETNEXT: bad syntax in response"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>ok_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type> <name>req</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type> <name>resp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>resp</name><operator>-&gt;</operator><name>version</name></name> <operator>!=</operator> <name><name>req</name><operator>-&gt;</operator><name>version</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"SNMP GET: response has wrong version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>resp</name><operator>-&gt;</operator><name>error_status</name></name> <operator>==</operator> <name>SNMP_ERR_NOSUCHNAME</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>resp</name><operator>-&gt;</operator><name>error_status</name></name> <operator>!=</operator> <name>SNMP_ERR_NOERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"SNMP GET: error %d"</literal></expr></argument>, <argument><expr><name><name>resp</name><operator>-&gt;</operator><name>error_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>resp</name><operator>-&gt;</operator><name>nbindings</name></name> <operator>!=</operator> <name><name>req</name><operator>-&gt;</operator><name>nbindings</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"SNMP GET: bad number of bindings in response"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>req</name><operator>-&gt;</operator><name>nbindings</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>asn_compare_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>var</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>resp</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>var</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"SNMP GET: bad OID in response"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>snmp_client</name><operator>.</operator><name>version</name></name> <operator>!=</operator> <name>SNMP_V1</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>resp</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>syntax</name> <operator>==</operator> <name>SNMP_SYNTAX_NOSUCHOBJECT</name> <operator>||</operator>
<name><name>resp</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>syntax</name> <operator>==</operator> <name>SNMP_SYNTAX_NOSUCHINSTANCE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>resp</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>syntax</name> <operator>!=</operator> <name><name>req</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>syntax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"SNMP GET: bad syntax in response"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>ok_set</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type> <name>req</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type> <name>resp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>resp</name><operator>-&gt;</operator><name>version</name></name> <operator>!=</operator> <name><name>req</name><operator>-&gt;</operator><name>version</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"SNMP SET: response has wrong version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>resp</name><operator>-&gt;</operator><name>error_status</name></name> <operator>==</operator> <name>SNMP_ERR_NOSUCHNAME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"SNMP SET: error %d"</literal></expr></argument>, <argument><expr><name><name>resp</name><operator>-&gt;</operator><name>error_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>resp</name><operator>-&gt;</operator><name>error_status</name></name> <operator>!=</operator> <name>SNMP_ERR_NOERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"SNMP SET: error %d"</literal></expr></argument>, <argument><expr><name><name>resp</name><operator>-&gt;</operator><name>error_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>resp</name><operator>-&gt;</operator><name>nbindings</name></name> <operator>!=</operator> <name><name>req</name><operator>-&gt;</operator><name>nbindings</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"SNMP SET: bad number of bindings in response"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>req</name><operator>-&gt;</operator><name>nbindings</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>asn_compare_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>var</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>resp</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>var</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"SNMP SET: wrong OID in response to SET"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>resp</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>syntax</name> <operator>!=</operator> <name><name>req</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>syntax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"SNMP SET: bad syntax in response"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>snmp_pdu_check</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>resp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>resp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">2</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SNMP_PDU_GET</name></expr>:</case>
<return>return <expr><operator>(</operator><call><name>ok_get</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><name>SNMP_PDU_SET</name></expr>:</case>
<return>return <expr><operator>(</operator><call><name>ok_set</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><name>SNMP_PDU_GETNEXT</name></expr>:</case>
<return>return <expr><operator>(</operator><call><name>ok_getnext</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></switch>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: bad pdu type %i"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>snmp_dialog</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_v1_pdu</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_v1_pdu</name></name> <modifier>*</modifier></type><name>resp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name> <init>= <expr><name><name>snmp_client</name><operator>.</operator><name>timeout</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>snmp_pdu</name></name></type> <name>pdu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>reqid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>i</name></decl>;</decl_stmt>





<expr_stmt><expr><name>pdu</name> <operator>=</operator> <operator>*</operator><name>req</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>SNMP_PDU_GET</name> <operator>||</operator> <name><name>pdu</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>SNMP_PDU_GETNEXT</name> <operator>||</operator>
<name><name>pdu</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>SNMP_PDU_GETBULK</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pdu</name><operator>.</operator><name>nbindings</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pdu</name><operator>.</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>syntax</name> <operator>=</operator> <name>SNMP_SYNTAX_NULL</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>snmp_client</name><operator>.</operator><name>retries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>timeradd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>snmp_client</name><operator>.</operator><name>timeout</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reqid</name> <operator>=</operator> <call><name>snmp_send_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pdu</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>timercmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><operator>&lt;=</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>timersub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>snmp_receive_packet</name><argument_list>(<argument><expr><name>resp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>reqid</name> <operator>==</operator> <name><name>resp</name><operator>-&gt;</operator><name>request_id</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snmp_deliver_packet</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EPIPE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ETIMEDOUT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"retry count exceeded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>snmp_discover_engine</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>passwd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>cname</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>snmp_authentication</name></name></type> <name>cap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>snmp_privacy</name></name></type> <name>cpp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>snmp_pdu</name></name></type> <name>req</name></decl>, <decl><type ref="prev"/><name>resp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>snmp_client</name><operator>.</operator><name>version</name></name> <operator>!=</operator> <name>SNMP_V3</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"wrong version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>cname</name></expr></argument>, <argument><expr><name><name>snmp_client</name><operator>.</operator><name>user</name><operator>.</operator><name>sec_name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cap</name> <operator>=</operator> <name><name>snmp_client</name><operator>.</operator><name>user</name><operator>.</operator><name>auth_proto</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cpp</name> <operator>=</operator> <name><name>snmp_client</name><operator>.</operator><name>user</name><operator>.</operator><name>priv_proto</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>snmp_client</name><operator>.</operator><name>engine</name><operator>.</operator><name>engine_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snmp_client</name><operator>.</operator><name>engine</name><operator>.</operator><name>engine_boots</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snmp_client</name><operator>.</operator><name>engine</name><operator>.</operator><name>engine_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snmp_client</name><operator>.</operator><name>user</name><operator>.</operator><name>auth_proto</name></name> <operator>=</operator> <name>SNMP_AUTH_NOAUTH</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snmp_client</name><operator>.</operator><name>user</name><operator>.</operator><name>priv_proto</name></name> <operator>=</operator> <name>SNMP_PRIV_NOPRIV</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>user</name><operator>.</operator><name>sec_name</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>user</name><operator>.</operator><name>sec_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snmp_pdu_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><name>SNMP_PDU_GET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>snmp_dialog</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>resp</name><operator>.</operator><name>version</name></name> <operator>!=</operator> <name><name>req</name><operator>.</operator><name>version</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"wrong version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>resp</name><operator>.</operator><name>error_status</name></name> <operator>!=</operator> <name>SNMP_ERR_NOERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"Error %d in responce"</literal></expr></argument>, <argument><expr><name><name>resp</name><operator>.</operator><name>error_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>snmp_client</name><operator>.</operator><name>engine</name><operator>.</operator><name>engine_len</name></name> <operator>=</operator> <name><name>resp</name><operator>.</operator><name>engine</name><operator>.</operator><name>engine_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snmp_client</name><operator>.</operator><name>engine</name><operator>.</operator><name>max_msg_size</name></name> <operator>=</operator> <name><name>resp</name><operator>.</operator><name>engine</name><operator>.</operator><name>max_msg_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>engine</name><operator>.</operator><name>engine_id</name></name></expr></argument>, <argument><expr><name><name>resp</name><operator>.</operator><name>engine</name><operator>.</operator><name>engine_id</name></name></expr></argument>,
<argument><expr><name><name>resp</name><operator>.</operator><name>engine</name><operator>.</operator><name>engine_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>user</name><operator>.</operator><name>sec_name</name></name></expr></argument>, <argument><expr><name>cname</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>snmp_client</name><operator>.</operator><name>user</name><operator>.</operator><name>sec_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snmp_client</name><operator>.</operator><name>user</name><operator>.</operator><name>auth_proto</name></name> <operator>=</operator> <name>cap</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snmp_client</name><operator>.</operator><name>user</name><operator>.</operator><name>priv_proto</name></name> <operator>=</operator> <name>cpp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>snmp_client</name><operator>.</operator><name>user</name><operator>.</operator><name>auth_proto</name></name> <operator>==</operator> <name>SNMP_AUTH_NOAUTH</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>passwd</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>snmp_passwd_to_keys</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>snmp_client</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>passwd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SNMP_CODE_OK</name> <operator>||</operator>
<call><name>snmp_get_local_keys</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>snmp_client</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>snmp_client</name><operator>.</operator><name>engine</name><operator>.</operator><name>engine_id</name></name></expr></argument>,
<argument><expr><name><name>snmp_client</name><operator>.</operator><name>engine</name><operator>.</operator><name>engine_len</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SNMP_CODE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>resp</name><operator>.</operator><name>engine</name><operator>.</operator><name>engine_boots</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>snmp_client</name><operator>.</operator><name>engine</name><operator>.</operator><name>engine_boots</name></name> <operator>=</operator> <name><name>resp</name><operator>.</operator><name>engine</name><operator>.</operator><name>engine_boots</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>resp</name><operator>.</operator><name>engine</name><operator>.</operator><name>engine_time</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>snmp_client</name><operator>.</operator><name>engine</name><operator>.</operator><name>engine_time</name></name> <operator>=</operator> <name><name>resp</name><operator>.</operator><name>engine</name><operator>.</operator><name>engine_time</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snmp_pdu_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snmp_pdu_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><name>SNMP_PDU_GET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>.</operator><name>engine</name><operator>.</operator><name>engine_boots</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>.</operator><name>engine</name><operator>.</operator><name>engine_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>snmp_dialog</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>resp</name><operator>.</operator><name>version</name></name> <operator>!=</operator> <name><name>req</name><operator>.</operator><name>version</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"wrong version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>resp</name><operator>.</operator><name>error_status</name></name> <operator>!=</operator> <name>SNMP_ERR_NOERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snmp_client</name></expr></argument>, <argument><expr><literal type="string">"Error %d in responce"</literal></expr></argument>, <argument><expr><name><name>resp</name><operator>.</operator><name>error_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>snmp_client</name><operator>.</operator><name>engine</name><operator>.</operator><name>engine_boots</name></name> <operator>=</operator> <name><name>resp</name><operator>.</operator><name>engine</name><operator>.</operator><name>engine_boots</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snmp_client</name><operator>.</operator><name>engine</name><operator>.</operator><name>engine_time</name></name> <operator>=</operator> <name><name>resp</name><operator>.</operator><name>engine</name><operator>.</operator><name>engine_time</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snmp_pdu_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snmp_pdu_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>snmp_client_set_host</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_client</name></name> <modifier>*</modifier></type><name>cl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cl</name><operator>-&gt;</operator><name>chost</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cl</name><operator>-&gt;</operator><name>chost</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>chost</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>np</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>np</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cl</name><operator>-&gt;</operator><name>chost</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cl</name><operator>-&gt;</operator><name>chost</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>chost</name></name> <operator>=</operator> <name>np</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>snmp_client_set_port</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_client</name></name> <modifier>*</modifier></type><name>cl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cl</name><operator>-&gt;</operator><name>cport</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cl</name><operator>-&gt;</operator><name>cport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>cport</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>np</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>np</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cl</name><operator>-&gt;</operator><name>cport</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cl</name><operator>-&gt;</operator><name>cport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>cport</name></name> <operator>=</operator> <name>np</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>trans_list</name><index>[]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>SNMP_TRANS_UDP</name></expr>]</index> <operator>=</operator> <literal type="string">"udp::"</literal></expr>,
<expr><index>[<expr><name>SNMP_TRANS_LOC_DGRAM</name></expr>]</index> <operator>=</operator> <literal type="string">"dgram::"</literal></expr>,
<expr><index>[<expr><name>SNMP_TRANS_LOC_STREAM</name></expr>]</index> <operator>=</operator> <literal type="string">"stream::"</literal></expr>,
<expr><index>[<expr><name>SNMP_TRANS_UDP6</name></expr>]</index> <operator>=</operator> <literal type="string">"udp6::"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>













<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>get_transp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_client</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>strp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>nitems</name><argument_list>(<argument><expr><name>trans_list</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><operator>*</operator><name>strp</name></expr></argument>, <argument><expr><name><name>trans_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <operator>*</operator><name>strp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>strp</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>trans_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>i</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><operator>*</operator><name>strp</name></expr></argument>, <argument><expr><literal type="string">"::"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <operator>*</operator><name>strp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><literal type="string">"empty transport specifier"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>SNMP_TRANS_UDP</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ob</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><operator>*</operator><name>strp</name></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ob</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&gt;</operator> <name>ob</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>SNMP_TRANS_UDP</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><literal type="string">"unknown transport specifier '%.*s'"</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <operator>*</operator><name>strp</name></expr></argument>, <argument><expr><operator>*</operator><name>strp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>get_comm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_client</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>strp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><operator>*</operator><name>strp</name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><operator>*</operator><name>strp</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>-</operator> <operator>*</operator><name>strp</name> <operator>&gt;</operator> <name>SNMP_COMMUNITY_MAXLEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><literal type="string">"community string too long '%.*s'"</literal></expr></argument>,
<argument><expr><name>p</name> <operator>-</operator> <operator>*</operator><name>strp</name></expr></argument>, <argument><expr><operator>*</operator><name>strp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>strp</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>get_ipv6</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_client</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>strp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>INET6_ADDRSTRLEN</name> <operator>+</operator> <name>IF_NAMESIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>strp</name> <operator>!=</operator> <literal type="char">'['</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>*</operator><name>strp</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>strp</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">']'</literal></expr> )</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><literal type="string">"unterminated IPv6 address '%.*s'"</literal></expr></argument>,
<argument><expr><name>p</name> <operator>-</operator> <operator>*</operator><name>strp</name></expr></argument>, <argument><expr><operator>*</operator><name>strp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>-</operator> <operator>*</operator><name>strp</name> <operator>&gt;</operator> <name>INET6_ADDRSTRLEN</name> <operator>+</operator> <name>IF_NAMESIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><literal type="string">"IPv6 address too long '%.*s'"</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <operator>*</operator><name>strp</name></expr></argument>, <argument><expr><operator>*</operator><name>strp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>*</operator><name>strp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <operator>(</operator><operator>*</operator><name>strp</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>p</name> <operator>-</operator> <operator>(</operator><operator>*</operator><name>strp</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <name>AI_CANONNAME</name> <operator>|</operator> <name>AI_NUMERICHOST</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_DGRAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_protocol</name></name> <operator>=</operator> <name>IPPROTO_UDP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>strp</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>get_ipv4</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_client</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>strp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>strp</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>isascii</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>-</operator> <operator>*</operator><name>strp</name> <operator>&gt;</operator> <name>INET_ADDRSTRLEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><literal type="string">"IPv4 address too long '%.*s'"</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <operator>*</operator><name>strp</name></expr></argument>, <argument><expr><operator>*</operator><name>strp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>strp</name> <operator>==</operator> <name>p</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>*</operator><name>strp</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>INET_ADDRSTRLEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>*</operator><name>strp</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <operator>*</operator><name>strp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>p</name> <operator>-</operator> <operator>*</operator><name>strp</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>inet_aton</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><literal type="string">"illegal IPv4 address '%s'"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>strp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>get_host</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_client</name></name> <modifier>*</modifier><name>sc</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>strp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><operator>*</operator><name>strp</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>strp</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>strp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>*</operator><name>strp</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>strp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>get_port</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_client</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>strp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>strp</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>*</operator><name>strp</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>strp</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><literal type="string">"empty port name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>strp</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>strp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>*</operator><name>strp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type>
<name>save_str</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_client</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><index>[<expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>m</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
































<function><type><name>int</name></type>
<name>snmp_parse_server</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_client</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>orig</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>def_trans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>trans</name> <init>= <expr><call><name>get_transp</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>trans</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>orig</name> <operator>==</operator> <name>str</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>def_trans</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>comm</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name>str</name></expr>,
<expr><call><name>get_comm</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>comm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ipv6</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr>,
<expr><call><name>get_ipv6</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ipv6</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ipv4</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name>str</name></expr>,
<expr><name>str</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>host</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name>str</name></expr>,
<expr><name>str</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ipv6</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>ipv6</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ipv4</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_ipv4</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ipv4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>ipv4</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>host</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_host</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>port</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr>,
<expr><call><name>get_port</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>port</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seterr</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><literal type="string">"junk at end of server specification '%s'"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG_PARSE</name></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"transp: %d (def=%d)\n"</literal></expr></argument>, <argument><expr><name>trans</name></expr></argument>, <argument><expr><name>def_trans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"comm: %zu %zu\n"</literal></expr></argument>, <argument><expr><name><name>comm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>orig</name></expr></argument>, <argument><expr><name><name>comm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ipv6: %zu %zu\n"</literal></expr></argument>, <argument><expr><name><name>ipv6</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>orig</name></expr></argument>, <argument><expr><name><name>ipv6</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ipv4: %zu %zu\n"</literal></expr></argument>, <argument><expr><name><name>ipv4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>orig</name></expr></argument>, <argument><expr><name><name>ipv4</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"host: %zu %zu\n"</literal></expr></argument>, <argument><expr><name><name>host</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>orig</name></expr></argument>, <argument><expr><name><name>host</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"port: %zu %zu\n"</literal></expr></argument>, <argument><expr><name><name>port</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>orig</name></expr></argument>, <argument><expr><name><name>port</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>chost</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ipv6</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>ipv6</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>chost</name> <operator>=</operator> <call><name>save_str</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>ipv6</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>def_trans</name> <operator>||</operator> <name>trans</name> <operator>==</operator> <name>SNMP_TRANS_UDP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>trans</name> <operator>=</operator> <name>SNMP_TRANS_UDP6</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ipv4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>ipv4</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>chost</name> <operator>=</operator> <call><name>save_str</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>ipv4</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>def_trans</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>trans</name> <operator>=</operator> <name>SNMP_TRANS_UDP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>chost</name> <operator>=</operator> <call><name>save_str</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>def_trans</name></expr>)</condition> <block>{<block_content>




<for>for <control>(<init><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>host</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>host</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>trans</name> <operator>=</operator> <name>SNMP_TRANS_LOC_DGRAM</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cport</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>port</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>port</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator>
<name>trans</name> <operator>==</operator> <name>SNMP_TRANS_UDP</name> <operator>||</operator> <name>trans</name> <operator>==</operator> <name>SNMP_TRANS_UDP6</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cport</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"snmp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cport</name> <operator>=</operator> <call><name>save_str</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cport</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>chost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>trans</name></name> <operator>=</operator> <name>trans</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>comm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>comm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name><name>comm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>read_community</name></name></expr></argument>, <argument><expr><name><name>comm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>comm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>comm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>read_community</name><index>[<expr><name><name>comm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>comm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>write_community</name></name></expr></argument>, <argument><expr><name><name>comm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>comm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>comm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>write_community</name><index>[<expr><name><name>comm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>comm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>chost</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>chost</name></name> <operator>=</operator> <name>chost</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>cport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>cport</name></name> <operator>=</operator> <name>cport</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG_PARSE</name></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Committed values:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"trans: %d\n"</literal></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>trans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"comm: '%s'/'%s'\n"</literal></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>read_community</name></name></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>write_community</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"host: '%s'\n"</literal></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>chost</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"port: '%s'\n"</literal></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>cport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
