<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bsnmp/lib/snmpcrypto.c">





























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDINT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INTTYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBCRYPTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/evp.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asn1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snmp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snmppriv.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_PRIV_AES_IV_SIZ</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_EXTENDED_KEY_SIZ</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_AUTH_KEY_LOOPCNT</name></cpp:macro> <cpp:value>1048576</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_AUTH_BUF_SIZE</name></cpp:macro> <cpp:value>72</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBCRYPTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name>ipad</name> <init>= <expr><literal type="number">0x36</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name>opad</name> <init>= <expr><literal type="number">0x5c</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type>
<name>snmp_digest_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_user</name></name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>EVP_MD_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>EVP_MD</name> <modifier>*</modifier><modifier>*</modifier></type><name>dtype</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>keylen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>user</name><operator>-&gt;</operator><name>auth_proto</name></name> <operator>==</operator> <name>SNMP_AUTH_HMAC_MD5</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dtype</name> <operator>=</operator> <call><name>EVP_md5</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>keylen</name> <operator>=</operator> <name>SNMP_AUTH_HMACMD5_KEY_SIZ</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>user</name><operator>-&gt;</operator><name>auth_proto</name></name> <operator>==</operator> <name>SNMP_AUTH_HMAC_SHA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dtype</name> <operator>=</operator> <call><name>EVP_sha1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>keylen</name> <operator>=</operator> <name>SNMP_AUTH_HMACSHA_KEY_SIZ</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>user</name><operator>-&gt;</operator><name>auth_proto</name></name> <operator>==</operator> <name>SNMP_AUTH_NOAUTH</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"unknown authentication option - %d"</literal></expr></argument>,
<argument><expr><name><name>user</name><operator>-&gt;</operator><name>auth_proto</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EVP_DigestInit</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>*</operator><name>dtype</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>snmp_code</name></name></type>
<name>snmp_pdu_calc_digest</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>md</name><index>[<expr><name>EVP_MAX_MD_SIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>extkey</name><index>[<expr><name>SNMP_EXTENDED_KEY_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>key1</name><index>[<expr><name>SNMP_EXTENDED_KEY_SIZ</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>key2</name><index>[<expr><name>SNMP_EXTENDED_KEY_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>keylen</name></decl>, <decl><type ref="prev"/><name>olen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>EVP_MD</name> <modifier>*</modifier></type><name>dtype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EVP_MD_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>EVP_MD_CTX_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>snmp_digest_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dtype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EVP_MD_CTX_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_BADDIGEST</name><operator>)</operator></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>digest_ptr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>msg_digest</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>extkey</name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>auth_key</name></name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>extkey</name> <operator>+</operator> <name>keylen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>extkey</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SNMP_EXTENDED_KEY_SIZ</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>key1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>extkey</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name>ipad</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>extkey</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name>opad</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>EVP_DigestUpdate</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>key1</name></expr></argument>, <argument><expr><name>SNMP_EXTENDED_KEY_SIZ</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator>
<call><name>EVP_DigestUpdate</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>outer_ptr</name></name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>outer_len</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator>
<call><name>EVP_DigestFinal</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>md</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EVP_DigestInit</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dtype</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator>
<call><name>EVP_DigestUpdate</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>key2</name></expr></argument>, <argument><expr><name>SNMP_EXTENDED_KEY_SIZ</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator>
<call><name>EVP_DigestUpdate</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>md</name></expr></argument>, <argument><expr><name>olen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator>
<call><name>EVP_DigestFinal</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>md</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>olen</name> <operator>&lt;</operator> <name>SNMP_USM_AUTH_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"bad digest size - %d"</literal></expr></argument>, <argument><expr><name>olen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVP_MD_CTX_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_CODE_BADDIGEST</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name>md</name></expr></argument>, <argument><expr><name>SNMP_USM_AUTH_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVP_MD_CTX_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_CODE_OK</name><operator>)</operator></expr>;</return>

<label><name>failed</name>:</label>
<expr_stmt><expr><call><name>EVP_MD_CTX_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_CODE_BADDIGEST</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type>
<name>snmp_pdu_cipher_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>EVP_CIPHER</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctype</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>piv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>netint</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>priv_proto</name></name> <operator>==</operator> <name>SNMP_PRIV_DES</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>%</operator> <literal type="number">8</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>ctype</name> <operator>=</operator> <call><name>EVP_des_cbc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>piv</name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>msg_salt</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>msg_salt</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>piv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>piv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>pdu</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>priv_key</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>priv_proto</name></name> <operator>==</operator> <name>SNMP_PRIV_AES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ctype</name> <operator>=</operator> <call><name>EVP_aes_128_cfb128</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>netint</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>engine</name><operator>.</operator><name>engine_boots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>piv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>netint</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>netint</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>piv</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>netint</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>netint</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>engine</name><operator>.</operator><name>engine_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>piv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>netint</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>netint</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>piv</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>netint</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>piv</name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>msg_salt</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>msg_salt</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>priv_proto</name></name> <operator>==</operator> <name>SNMP_PRIV_NOPRIV</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"unknown privacy option - %d"</literal></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>priv_proto</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>snmp_code</name></name></type>
<name>snmp_pdu_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>olen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>iv</name><index>[<expr><name>SNMP_PRIV_AES_IV_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>EVP_CIPHER</name> <modifier>*</modifier></type><name>ctype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EVP_CIPHER_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>snmp_pdu_cipher_init</name><argument_list>(<argument><expr><name>pdu</name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>scoped_len</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctype</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_EDECRYPT</name><operator>)</operator></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>EVP_CIPHER_CTX_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EVP_EncryptInit</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>priv_key</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EVP_EncryptUpdate</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>scoped_ptr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>scoped_ptr</name></name></expr></argument>,
<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>scoped_len</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator>
<call><name>EVP_EncryptFinal</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>scoped_ptr</name></name> <operator>+</operator> <name>olen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EVP_CIPHER_CTX_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_CODE_OK</name><operator>)</operator></expr>;</return>

<label><name>failed</name>:</label>
<expr_stmt><expr><call><name>EVP_CIPHER_CTX_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>snmp_code</name></name></type>
<name>snmp_pdu_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>olen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>iv</name><index>[<expr><name>SNMP_PRIV_AES_IV_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>EVP_CIPHER</name> <modifier>*</modifier></type><name>ctype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EVP_CIPHER_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>snmp_pdu_cipher_init</name><argument_list>(<argument><expr><name>pdu</name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>scoped_len</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctype</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_EDECRYPT</name><operator>)</operator></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>EVP_CIPHER_CTX_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EVP_DecryptInit</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>priv_key</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator>
<call><name>EVP_CIPHER_CTX_set_padding</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EVP_DecryptUpdate</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>scoped_ptr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>scoped_ptr</name></name></expr></argument>,
<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>scoped_len</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator>
<call><name>EVP_DecryptFinal</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>scoped_ptr</name></name> <operator>+</operator> <name>olen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EVP_CIPHER_CTX_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_CODE_OK</name><operator>)</operator></expr>;</return>

<label><name>failed</name>:</label>
<expr_stmt><expr><call><name>EVP_CIPHER_CTX_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_CODE_EDECRYPT</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name><name>enum</name> <name>snmp_code</name></name></type>
<name>snmp_passwd_to_keys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_user</name></name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>passwd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>loop</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>pwdlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>keylen</name></decl>, <decl><type ref="prev"/><name>olen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>EVP_MD</name> <modifier>*</modifier></type><name>dtype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EVP_MD_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>authbuf</name><index>[<expr><name>SNMP_AUTH_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>passwd</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>user</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>EVP_MD_CTX_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>snmp_digest_init</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dtype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EVP_MD_CTX_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_BADDIGEST</name><operator>)</operator></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>user</name><operator>-&gt;</operator><name>auth_key</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>user</name><operator>-&gt;</operator><name>auth_key</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pwdlen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>passwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>loop</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>loop</name> <operator>&lt;</operator> <name>SNMP_AUTH_KEY_LOOPCNT</name></expr>;</condition> <incr><expr><name>loop</name> <operator>+=</operator> <name>i</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SNMP_EXTENDED_KEY_SIZ</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>authbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>passwd</name><index>[<expr><operator>(</operator><name>loop</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>%</operator> <name>pwdlen</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><call><name>EVP_DigestUpdate</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>authbuf</name></expr></argument>, <argument><expr><name>SNMP_EXTENDED_KEY_SIZ</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>EVP_DigestFinal</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>user</name><operator>-&gt;</operator><name>auth_key</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EVP_MD_CTX_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_CODE_OK</name><operator>)</operator></expr>;</return>

<label><name>failed</name>:</label>
<expr_stmt><expr><call><name>EVP_MD_CTX_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_CODE_BADDIGEST</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name><name>enum</name> <name>snmp_code</name></name></type>
<name>snmp_get_local_keys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_user</name></name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>eid</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>elen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>keylen</name></decl>, <decl><type ref="prev"/><name>olen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>EVP_MD</name> <modifier>*</modifier></type><name>dtype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EVP_MD_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>authbuf</name><index>[<expr><name>SNMP_AUTH_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>user</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>eid</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>elen</name> <operator>&gt;</operator> <name>SNMP_ENGINE_ID_SIZ</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>EVP_MD_CTX_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>user</name><operator>-&gt;</operator><name>priv_key</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>user</name><operator>-&gt;</operator><name>priv_key</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>authbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>snmp_digest_init</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dtype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EVP_MD_CTX_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_BADDIGEST</name><operator>)</operator></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>authbuf</name></expr></argument>, <argument><expr><name><name>user</name><operator>-&gt;</operator><name>auth_key</name></name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>authbuf</name> <operator>+</operator> <name>keylen</name></expr></argument>, <argument><expr><name>eid</name></expr></argument>, <argument><expr><name>elen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>authbuf</name> <operator>+</operator> <name>keylen</name> <operator>+</operator> <name>elen</name></expr></argument>, <argument><expr><name><name>user</name><operator>-&gt;</operator><name>auth_key</name></name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EVP_DigestUpdate</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>authbuf</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>keylen</name> <operator>+</operator> <name>elen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator>
<call><name>EVP_DigestFinal</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>user</name><operator>-&gt;</operator><name>auth_key</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVP_MD_CTX_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_CODE_BADDIGEST</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>EVP_MD_CTX_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>user</name><operator>-&gt;</operator><name>priv_proto</name></name> <operator>!=</operator> <name>SNMP_PRIV_NOPRIV</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>user</name><operator>-&gt;</operator><name>priv_key</name></name></expr></argument>, <argument><expr><name><name>user</name><operator>-&gt;</operator><name>auth_key</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>user</name><operator>-&gt;</operator><name>priv_key</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>SNMP_CODE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>snmp_code</name></name></type>
<name>snmp_calc_keychange</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_user</name></name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>keychange</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name><name>rvalue</name><index>[<expr><name>SNMP_AUTH_HMACSHA_KEY_SIZ</name> <operator>/</operator> <literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>keylen</name></decl>, <decl><type ref="prev"/><name>olen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>EVP_MD</name> <modifier>*</modifier></type><name>dtype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EVP_MD_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>EVP_MD_CTX_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>snmp_digest_init</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dtype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EVP_MD_CTX_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_BADDIGEST</name><operator>)</operator></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keylen</name> <operator>/</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rvalue</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>random</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>keychange</name></expr></argument>, <argument><expr><name><name>user</name><operator>-&gt;</operator><name>auth_key</name></name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>keychange</name> <operator>+</operator> <name>keylen</name></expr></argument>, <argument><expr><name>rvalue</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EVP_DigestUpdate</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>keychange</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>keylen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator>
<call><name>EVP_DigestFinal</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>keychange</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVP_MD_CTX_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_CODE_BADDIGEST</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EVP_MD_CTX_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_CODE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name><name>enum</name> <name>snmp_code</name></name></type>
<name>snmp_pdu_calc_digest</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><name>digest</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>auth_proto</name></name> <operator>!=</operator> <name>SNMP_AUTH_NOAUTH</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_BADSECLEVEL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><operator>(</operator><name>SNMP_CODE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>snmp_code</name></name></type>
<name>snmp_pdu_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>priv_proto</name></name> <operator>!=</operator> <name>SNMP_PRIV_NOPRIV</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_BADSECLEVEL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>SNMP_CODE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>snmp_code</name></name></type>
<name>snmp_pdu_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>priv_proto</name></name> <operator>!=</operator> <name>SNMP_PRIV_NOPRIV</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_BADSECLEVEL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>SNMP_CODE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>snmp_code</name></name></type>
<name>snmp_passwd_to_keys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_user</name></name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><name>passwd</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>user</name><operator>-&gt;</operator><name>auth_proto</name></name> <operator>==</operator> <name>SNMP_AUTH_NOAUTH</name> <operator>&amp;&amp;</operator>
<name><name>user</name><operator>-&gt;</operator><name>priv_proto</name></name> <operator>==</operator> <name>SNMP_PRIV_NOPRIV</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EPROTONOSUPPORT</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>snmp_code</name></name></type>
<name>snmp_get_local_keys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_user</name></name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><name>eid</name></type> <name>__unused</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <name>elen</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>user</name><operator>-&gt;</operator><name>auth_proto</name></name> <operator>==</operator> <name>SNMP_AUTH_NOAUTH</name> <operator>&amp;&amp;</operator>
<name><name>user</name><operator>-&gt;</operator><name>priv_proto</name></name> <operator>==</operator> <name>SNMP_PRIV_NOPRIV</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_CODE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EPROTONOSUPPORT</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>snmp_code</name></name></type>
<name>snmp_calc_keychange</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_user</name></name> <modifier>*</modifier><name>user</name></type> <name>__unused</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><name>keychange</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EPROTONOSUPPORT</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_CODE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
