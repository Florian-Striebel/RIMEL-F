<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bsnmp/lib/snmpagent.c">































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDINT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INTTYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asn1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snmp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snmppriv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snmpagent.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>snmp_debug_func</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>snmp_debug</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>snmp_debug_func</name></expr></init>;</function_decl>

<decl_stmt><decl><type><name><name>struct</name> <name>snmp_node</name></name> <modifier>*</modifier></type><name>tree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>tree_size</name></decl>;</decl_stmt>






<struct>struct <name>depend</name> <block>{
<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>depend</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>snmp_depop_t</name></type> <name>func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>snmp_dependency</name></name></type> <name>dep</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__GNUC__</name> <operator>&lt;</operator> <literal type="number">3</literal></expr></cpp:if>
<decl_stmt><decl><type><name>u_char</name></type> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>u_char</name></type> <name><name>data</name><index>[]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>
<expr_stmt><expr><call><name>TAILQ_HEAD</name><argument_list>(<argument><expr><name>depend_list</name></expr></argument>, <argument><expr><name>depend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<struct>struct <name>context</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>snmp_context</name></name></type> <name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>depend_list</name></name></type> <name>dlist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_node</name></name> <modifier>*</modifier></type><name><name>node</name><index>[<expr><name>SNMP_MAX_BINDINGS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>snmp_scratch</name></name></type> <name><name>scratch</name><index>[<expr><name>SNMP_MAX_BINDINGS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>depend</name></name> <modifier>*</modifier></type><name>depend</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TR</name><parameter_list>(<parameter><type><name>W</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(snmp_trace &amp; SNMP_TRACE_##W)</cpp:value></cpp:define>
<decl_stmt><decl><type><name>u_int</name></type> <name>snmp_trace</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>oidbuf</name><index>[<expr><name>ASN_OIDSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>




<function><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type>
<name>snmp_init_context</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>context</name></name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>context</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>context</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>context</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>dlist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>ctx</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name><name>struct</name> <name>snmp_node</name></name> <modifier>*</modifier></type>
<name>find_node</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>snmp_syntax</name></name> <modifier>*</modifier></type><name>errp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>snmp_node</name></name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TR</name><argument_list>(<argument><expr><name>FIND</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_debug</name><argument_list>(<argument><expr><literal type="string">"find: searching %s"</literal></expr></argument>,
<argument><expr><call><name>asn_oid2str_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>oidbuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>






<for>for <control>(<init><expr><name>tp</name> <operator>=</operator> <name>tree</name></expr>;</init> <condition><expr><name>tp</name> <operator>&lt;</operator> <name>tree</name> <operator>+</operator> <name>tree_size</name></expr>;</condition> <incr><expr><name>tp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>asn_is_suboid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>var</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>found</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>asn_compare_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>var</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>TR</name><argument_list>(<argument><expr><name>FIND</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_debug</name><argument_list>(<argument><expr><literal type="string">"find: no match"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>errp</name> <operator>=</operator> <name>SNMP_SYNTAX_NOSUCHOBJECT</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>

<label><name>found</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SNMP_NODE_LEAF</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>value</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>len</name></name> <operator>!=</operator> <name><name>tp</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>||</operator>
<name><name>value</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name><name>tp</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>len</name></name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>TR</name><argument_list>(<argument><expr><name>FIND</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_debug</name><argument_list>(<argument><expr><literal type="string">"find: bad leaf index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>errp</name> <operator>=</operator> <name>SNMP_SYNTAX_NOSUCHINSTANCE</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TR</name><argument_list>(<argument><expr><name>FIND</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_debug</name><argument_list>(<argument><expr><literal type="string">"find: found %s"</literal></expr></argument>,
<argument><expr><call><name>asn_oid2str_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>oidbuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>tp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>snmp_node</name></name> <modifier>*</modifier></type>
<name>find_subnode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>snmp_node</name></name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>tp</name> <operator>=</operator> <name>tree</name></expr>;</init> <condition><expr><name>tp</name> <operator>&lt;</operator> <name>tree</name> <operator>+</operator> <name>tree_size</name></expr>;</condition> <incr><expr><name>tp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>asn_is_suboid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>tp</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>snmp_pdu_create_response</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>resp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>resp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>resp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>resp</name><operator>-&gt;</operator><name>community</name></name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>community</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resp</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name><name>pdu</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SNMP_MSG_AUTODISCOVER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>resp</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>SNMP_PDU_REPORT</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>resp</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>SNMP_PDU_RESPONSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>resp</name><operator>-&gt;</operator><name>request_id</name></name> <operator>=</operator> <name><name>pdu</name><operator>-&gt;</operator><name>request_id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resp</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name><name>pdu</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>resp</name><operator>-&gt;</operator><name>version</name></name> <operator>!=</operator> <name>SNMP_V3</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>resp</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>resp</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snmp_pdu_init_secparams</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resp</name><operator>-&gt;</operator><name>identifier</name></name> <operator>=</operator> <name><name>pdu</name><operator>-&gt;</operator><name>identifier</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resp</name><operator>-&gt;</operator><name>security_model</name></name> <operator>=</operator> <name><name>pdu</name><operator>-&gt;</operator><name>security_model</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resp</name><operator>-&gt;</operator><name>context_engine_len</name></name> <operator>=</operator> <name><name>pdu</name><operator>-&gt;</operator><name>context_engine_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>resp</name><operator>-&gt;</operator><name>context_engine</name></name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>context_engine</name></name></expr></argument>,
<argument><expr><name><name>resp</name><operator>-&gt;</operator><name>context_engine_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>resp</name><operator>-&gt;</operator><name>context_name</name></name></expr></argument>, <argument><expr><name><name>pdu</name><operator>-&gt;</operator><name>context_name</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>resp</name><operator>-&gt;</operator><name>context_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name><name>enum</name> <name>snmp_ret</name></name></type>
<name>snmp_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>resp_b</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>resp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>snmp_node</name></name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>snmp_syntax</name></name></type> <name>except</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>context</name></name></type> <name>context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>asn_err</name></name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>context</name><operator>.</operator><name>ctx</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snmp_pdu_create_response</name><argument_list>(<argument><expr><name>pdu</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>snmp_pdu_encode_header</name><argument_list>(<argument><expr><name>resp_b</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SNMP_CODE_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>SNMP_RET_IGN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pdu</name><operator>-&gt;</operator><name>nbindings</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>resp</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>=</operator> <name><name>pdu</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>var</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tp</name> <operator>=</operator> <call><name>find_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>except</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <name>SNMP_V1</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>TR</name><argument_list>(<argument><expr><name>GET</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_debug</name><argument_list>(<argument><expr><literal type="string">"get: nosuchname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_status</name></name> <operator>=</operator> <name>SNMP_ERR_NOSUCHNAME</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_index</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snmp_pdu_free</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_RET_ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TR</name><argument_list>(<argument><expr><name>GET</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_debug</name><argument_list>(<argument><expr><literal type="string">"get: exception %u"</literal></expr></argument>, <argument><expr><name>except</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>resp</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>syntax</name> <operator>=</operator> <name>except</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>resp</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>syntax</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>syntax</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>tp</name><operator>-&gt;</operator><name>op</name></name>)<argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>.</operator><name>ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>resp</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>SNMP_OP_GET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TR</name><argument_list>(<argument><expr><name>GET</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_debug</name><argument_list>(<argument><expr><literal type="string">"get: action returns %d"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>SNMP_ERR_NOSUCHNAME</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <name>SNMP_V1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_status</name></name> <operator>=</operator> <name>SNMP_ERR_NOSUCHNAME</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_index</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snmp_pdu_free</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_RET_ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TR</name><argument_list>(<argument><expr><name>GET</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_debug</name><argument_list>(<argument><expr><literal type="string">"get: exception noSuchInstance"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>resp</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>syntax</name> <operator>=</operator> <name>SNMP_SYNTAX_NOSUCHINSTANCE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>SNMP_ERR_NOERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_status</name></name> <operator>=</operator> <name>SNMP_ERR_GENERR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_index</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snmp_pdu_free</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_RET_ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>resp</name><operator>-&gt;</operator><name>nbindings</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>snmp_binding_encode</name><argument_list>(<argument><expr><name>resp_b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>resp</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>ASN_ERR_EOBUF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_status</name></name> <operator>=</operator> <name>SNMP_ERR_TOOBIG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snmp_pdu_free</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_RET_ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>TR</name><argument_list>(<argument><expr><name>GET</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_debug</name><argument_list>(<argument><expr><literal type="string">"get: binding encoding: %u"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_status</name></name> <operator>=</operator> <name>SNMP_ERR_GENERR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_index</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snmp_pdu_free</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_RET_ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>snmp_fix_encoding</name><argument_list>(<argument><expr><name>resp_b</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SNMP_CODE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_debug</name><argument_list>(<argument><expr><literal type="string">"get: failed to encode PDU"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_RET_ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>SNMP_RET_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>snmp_node</name></name> <modifier>*</modifier></type>
<name>next_node</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>snmp_node</name></name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TR</name><argument_list>(<argument><expr><name>FIND</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_debug</name><argument_list>(<argument><expr><literal type="string">"next: searching %s"</literal></expr></argument>,
<argument><expr><call><name>asn_oid2str_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>oidbuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pnext</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>tp</name> <operator>=</operator> <name>tree</name></expr>;</init> <condition><expr><name>tp</name> <operator>&lt;</operator> <name>tree</name> <operator>+</operator> <name>tree_size</name></expr>;</condition> <incr><expr><name>tp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>asn_is_suboid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>var</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SNMP_NODE_LEAF</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>len</name></name> <operator>==</operator> <name><name>value</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>TR</name><argument_list>(<argument><expr><name>FIND</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_debug</name><argument_list>(<argument><expr><literal type="string">"next: found scalar %s"</literal></expr></argument>,
<argument><expr><call><name>asn_oid2str_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>oidbuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>tp</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>TR</name><argument_list>(<argument><expr><name>FIND</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_debug</name><argument_list>(<argument><expr><literal type="string">"next: found column %s"</literal></expr></argument>,
<argument><expr><call><name>asn_oid2str_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>oidbuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>tp</name><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>asn_is_suboid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>asn_compare_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>var</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>TR</name><argument_list>(<argument><expr><name>FIND</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_debug</name><argument_list>(<argument><expr><literal type="string">"next: found %s"</literal></expr></argument>,
<argument><expr><call><name>asn_oid2str_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>oidbuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pnext</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>tp</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>TR</name><argument_list>(<argument><expr><name>FIND</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_debug</name><argument_list>(<argument><expr><literal type="string">"next: failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>snmp_ret</name></name></type>
<name>do_getnext</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>inb</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>outb</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_node</name></name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>next</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tp</name> <operator>=</operator> <call><name>next_node</name><argument_list>(<argument><expr><name>inb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>eofMib</name>;</goto></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SNMP_NODE_LEAF</name> <operator>||</operator> <name>next</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>outb</name><operator>-&gt;</operator><name>var</name></name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>oid</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>outb</name><operator>-&gt;</operator><name>var</name></name> <operator>=</operator> <name><name>inb</name><operator>-&gt;</operator><name>var</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>outb</name><operator>-&gt;</operator><name>syntax</name></name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>syntax</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SNMP_NODE_LEAF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>outb</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name><name>outb</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>tp</name><operator>-&gt;</operator><name>op</name></name>)<argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>outb</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>len</name></name></expr></argument>,
<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>SNMP_OP_GET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>tp</name><operator>-&gt;</operator><name>op</name></name>)<argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>outb</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>len</name></name></expr></argument>,
<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>SNMP_OP_GETNEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>SNMP_ERR_NOSUCHNAME</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>SNMP_ERR_NOERROR</name> <operator>&amp;&amp;</operator> <call><name>TR</name><argument_list>(<argument><expr><name>GETNEXT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_debug</name><argument_list>(<argument><expr><literal type="string">"getnext: %s returns %u"</literal></expr></argument>,
<argument><expr><call><name>asn_oid2str</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>outb</name><operator>-&gt;</operator><name>var</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>++</operator><name>tp</name> <operator>==</operator> <name>tree</name> <operator>+</operator> <name>tree_size</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TR</name><argument_list>(<argument><expr><name>GETNEXT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_debug</name><argument_list>(<argument><expr><literal type="string">"getnext: no data - avancing to %s"</literal></expr></argument>,
<argument><expr><call><name>asn_oid2str</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>outb</name><operator>-&gt;</operator><name>var</name></name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>oid</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>SNMP_ERR_NOSUCHNAME</name></expr>)</condition> <block>{<block_content>
<label><name>eofMib</name>:</label>
<expr_stmt><expr><name><name>outb</name><operator>-&gt;</operator><name>var</name></name> <operator>=</operator> <name><name>inb</name><operator>-&gt;</operator><name>var</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <name>SNMP_V1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_status</name></name> <operator>=</operator> <name>SNMP_ERR_NOSUCHNAME</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_RET_ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>outb</name><operator>-&gt;</operator><name>syntax</name></name> <operator>=</operator> <name>SNMP_SYNTAX_ENDOFMIBVIEW</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>SNMP_ERR_NOERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_status</name></name> <operator>=</operator> <name>SNMP_ERR_GENERR</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_RET_ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>SNMP_RET_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name><name>enum</name> <name>snmp_ret</name></name></type>
<name>snmp_getnext</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>resp_b</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>resp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>context</name></name></type> <name>context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>asn_err</name></name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>snmp_ret</name></name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>context</name><operator>.</operator><name>ctx</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snmp_pdu_create_response</name><argument_list>(<argument><expr><name>pdu</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>snmp_pdu_encode_header</name><argument_list>(<argument><expr><name>resp_b</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_RET_IGN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pdu</name><operator>-&gt;</operator><name>nbindings</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>do_getnext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>resp</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pdu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>SNMP_RET_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_index</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snmp_pdu_free</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>resp</name><operator>-&gt;</operator><name>nbindings</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>snmp_binding_encode</name><argument_list>(<argument><expr><name>resp_b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>resp</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>ASN_ERR_EOBUF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_status</name></name> <operator>=</operator> <name>SNMP_ERR_TOOBIG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snmp_pdu_free</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_RET_ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>TR</name><argument_list>(<argument><expr><name>GET</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_debug</name><argument_list>(<argument><expr><literal type="string">"getnext: binding encoding: %u"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_status</name></name> <operator>=</operator> <name>SNMP_ERR_GENERR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_index</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snmp_pdu_free</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_RET_ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>snmp_fix_encoding</name><argument_list>(<argument><expr><name>resp_b</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SNMP_CODE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_debug</name><argument_list>(<argument><expr><literal type="string">"getnext: failed to encode PDU"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_RET_ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>SNMP_RET_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>snmp_ret</name></name></type>
<name>snmp_getbulk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>resp_b</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>resp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>context</name></name></type> <name>context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>non_rep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>eomib</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>snmp_ret</name></name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>asn_err</name></name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>context</name><operator>.</operator><name>ctx</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snmp_pdu_create_response</name><argument_list>(<argument><expr><name>pdu</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>snmp_pdu_encode_header</name><argument_list>(<argument><expr><name>resp_b</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SNMP_CODE_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>SNMP_RET_IGN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>non_rep</name> <operator>=</operator> <name><name>pdu</name><operator>-&gt;</operator><name>error_status</name></name><operator>)</operator> <operator>&gt;</operator> <name><name>pdu</name><operator>-&gt;</operator><name>nbindings</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>non_rep</name> <operator>=</operator> <name><name>pdu</name><operator>-&gt;</operator><name>nbindings</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>non_rep</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>do_getnext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>resp</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name><name>resp</name><operator>-&gt;</operator><name>nbindings</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>pdu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>SNMP_RET_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_index</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snmp_pdu_free</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>snmp_binding_encode</name><argument_list>(<argument><expr><name>resp_b</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>resp</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name><name>resp</name><operator>-&gt;</operator><name>nbindings</name></name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>ASN_ERR_EOBUF</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>TR</name><argument_list>(<argument><expr><name>GET</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_debug</name><argument_list>(<argument><expr><literal type="string">"getnext: binding encoding: %u"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_status</name></name> <operator>=</operator> <name>SNMP_ERR_GENERR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_index</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snmp_pdu_free</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_RET_ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>non_rep</name> <operator>==</operator> <name><name>pdu</name><operator>-&gt;</operator><name>nbindings</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cnt</name> <operator>&lt;</operator> <name><name>pdu</name><operator>-&gt;</operator><name>error_index</name></name></expr>;</condition> <incr><expr><name>cnt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>eomib</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>non_rep</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pdu</name><operator>-&gt;</operator><name>nbindings</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>resp</name><operator>-&gt;</operator><name>nbindings</name></name> <operator>==</operator> <name>SNMP_MAX_BINDINGS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>do_getnext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>resp</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name><name>resp</name><operator>-&gt;</operator><name>nbindings</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>pdu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>do_getnext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>resp</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name><name>resp</name><operator>-&gt;</operator><name>nbindings</name></name> <operator>-</operator>
<operator>(</operator><name><name>pdu</name><operator>-&gt;</operator><name>nbindings</name></name> <operator>-</operator> <name>non_rep</name><operator>)</operator></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>resp</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name><name>resp</name><operator>-&gt;</operator><name>nbindings</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>pdu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>SNMP_RET_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_index</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snmp_pdu_free</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>resp</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name><name>resp</name><operator>-&gt;</operator><name>nbindings</name></name></expr>]</index></name><operator>.</operator><name>syntax</name> <operator>!=</operator>
<name>SNMP_SYNTAX_ENDOFMIBVIEW</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>eomib</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>snmp_binding_encode</name><argument_list>(<argument><expr><name>resp_b</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>resp</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name><name>resp</name><operator>-&gt;</operator><name>nbindings</name></name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>ASN_ERR_EOBUF</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>TR</name><argument_list>(<argument><expr><name>GET</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_debug</name><argument_list>(<argument><expr><literal type="string">"getnext: binding encoding: %u"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_status</name></name> <operator>=</operator> <name>SNMP_ERR_GENERR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_index</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snmp_pdu_free</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_RET_ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>eomib</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<label><name>done</name>:</label>
<if_stmt><if>if <condition>(<expr><call><name>snmp_fix_encoding</name><argument_list>(<argument><expr><name>resp_b</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SNMP_CODE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_debug</name><argument_list>(<argument><expr><literal type="string">"getnext: failed to encode PDU"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_RET_ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>SNMP_RET_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>rollback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>, <parameter><decl><type><name>u_int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_node</name></name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>i</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>node</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>scratch</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>scratch</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>np</name><operator>-&gt;</operator><name>op</name></name>)<argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>index</name></name></expr></argument>,
<argument><expr><name>SNMP_OP_ROLLBACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>SNMP_ERR_NOERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"set: rollback failed (%d) on variable %s "</literal>
<literal type="string">"index %u"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>asn_oid2str</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>var</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>version</name></name> <operator>!=</operator> <name>SNMP_V1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_status</name></name> <operator>=</operator> <name>SNMP_ERR_UNDO_FAILED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>snmp_dep_commit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>context</name></name> <modifier>*</modifier></type><name>context</name> <init>= <expr><operator>(</operator>struct <name>context</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>context-&gt;depend</argument>, <argument>&amp;context-&gt;dlist</argument>, <argument>link</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>dep</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>depend</name><operator>-&gt;</operator><name>dep</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TR</name><argument_list>(<argument><expr><name>SET</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_debug</name><argument_list>(<argument><expr><literal type="string">"set: dependency commit %s"</literal></expr></argument>,
<argument><expr><call><name>asn_oid2str</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>dep</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>context</name><operator>-&gt;</operator><name>depend</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dep</name></name></expr></argument>, <argument><expr><name>SNMP_DEPOP_COMMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>SNMP_ERR_NOERROR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>TR</name><argument_list>(<argument><expr><name>SET</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_debug</name><argument_list>(<argument><expr><literal type="string">"set: dependency failed %d"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>snmp_dep_rollback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>context</name></name> <modifier>*</modifier></type><name>context</name> <init>= <expr><operator>(</operator>struct <name>context</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>ret1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>objbuf</name><index>[<expr><name>ASN_OIDSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>idxbuf</name><index>[<expr><name>ASN_OIDSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret1</name> <operator>=</operator> <name>SNMP_ERR_NOERROR</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>depend</name></name> <operator>=</operator>
<call><name>TAILQ_PREV</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>depend</name></name></expr></argument>, <argument><expr><name>depend_list</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>dep</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>depend</name><operator>-&gt;</operator><name>dep</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TR</name><argument_list>(<argument><expr><name>SET</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_debug</name><argument_list>(<argument><expr><literal type="string">"set: dependency rollback %s"</literal></expr></argument>,
<argument><expr><call><name>asn_oid2str</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>dep</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>context</name><operator>-&gt;</operator><name>depend</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dep</name></name></expr></argument>, <argument><expr><name>SNMP_DEPOP_ROLLBACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>SNMP_ERR_NOERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_debug</name><argument_list>(<argument><expr><literal type="string">"set: dep rollback returns %u: %s %s"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>,
<argument><expr><call><name>asn_oid2str_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>dep</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name>objbuf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>asn_oid2str_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>dep</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>, <argument><expr><name>idxbuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret1</name> <operator>==</operator> <name>SNMP_ERR_NOERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret1</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>ret1</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>snmp_dep_finish</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>context</name></name> <modifier>*</modifier></type><name>context</name> <init>= <expr><operator>(</operator>struct <name>context</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>depend</name></name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>d</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>dlist</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>dep</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>dep</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>d</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dep</name></name></expr></argument>, <argument><expr><name>SNMP_DEPOP_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>dlist</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>




<function><type><name><name>enum</name> <name>snmp_ret</name></name></type>
<name>snmp_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>resp_b</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>resp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>asn_err</name></name></type> <name>asnerr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>context</name></name></type> <name>context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_node</name></name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>snmp_syntax</name></name></type> <name>except</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>.</operator><name>dlist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>context</name><operator>.</operator><name>ctx</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snmp_pdu_create_response</name><argument_list>(<argument><expr><name>pdu</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>snmp_pdu_encode_header</name><argument_list>(<argument><expr><name>resp_b</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_RET_IGN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>





<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pdu</name><operator>-&gt;</operator><name>nbindings</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>np</name> <operator>=</operator> <name><name>context</name><operator>.</operator><name>node</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>find_node</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>except</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>TR</name><argument_list>(<argument><expr><name>SET</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_debug</name><argument_list>(<argument><expr><literal type="string">"set: node not found %s"</literal></expr></argument>,
<argument><expr><call><name>asn_oid2str_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>oidbuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <name>SNMP_V1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_index</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_status</name></name> <operator>=</operator> <name>SNMP_ERR_NOSUCHNAME</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>np</name> <operator>=</operator> <call><name>find_subnode</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_index</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_status</name></name> <operator>=</operator> <name>SNMP_ERR_NOT_WRITEABLE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>except</name> <operator>==</operator> <name>SNMP_SYNTAX_NOSUCHOBJECT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_index</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_status</name></name> <operator>=</operator> <name>SNMP_ERR_NO_ACCESS</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_index</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_status</name></name> <operator>=</operator> <name>SNMP_ERR_NO_CREATION</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>snmp_pdu_free</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_RET_ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SNMP_NODE_LEAF</name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>np</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SNMP_NODE_CANSET</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <name>SNMP_V1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_index</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_status</name></name> <operator>=</operator> <name>SNMP_ERR_NOSUCHNAME</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_index</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_status</name></name> <operator>=</operator> <name>SNMP_ERR_NOT_WRITEABLE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>snmp_pdu_free</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_RET_ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>syntax</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>syntax</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <name>SNMP_V1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_index</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_status</name></name> <operator>=</operator> <name>SNMP_ERR_BADVALUE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_index</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_status</name></name> <operator>=</operator> <name>SNMP_ERR_WRONG_TYPE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>snmp_pdu_free</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_RET_ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>snmp_value_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>resp</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_index</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_status</name></name> <operator>=</operator> <name>SNMP_ERR_GENERR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snmp_pdu_free</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_RET_ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>asnerr</name> <operator>=</operator> <call><name>snmp_binding_encode</name><argument_list>(<argument><expr><name>resp_b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>resp</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>asnerr</name> <operator>==</operator> <name>ASN_ERR_EOBUF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_index</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_status</name></name> <operator>=</operator> <name>SNMP_ERR_TOOBIG</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snmp_pdu_free</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_RET_ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>asnerr</name> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_index</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_status</name></name> <operator>=</operator> <name>SNMP_ERR_GENERR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snmp_pdu_free</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_RET_ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>resp</name><operator>-&gt;</operator><name>nbindings</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>context</name><operator>.</operator><name>ctx</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>SNMP_RET_OK</name></expr>;</expr_stmt>





<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pdu</name><operator>-&gt;</operator><name>nbindings</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>&amp;</operator><name><name>pdu</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>context</name><operator>.</operator><name>node</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>.</operator><name>ctx</name><operator>.</operator><name>var_index</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>context</name><operator>.</operator><name>ctx</name><operator>.</operator><name>scratch</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>context</name><operator>.</operator><name>scratch</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>np</name><operator>-&gt;</operator><name>op</name></name>)<argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>.</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>index</name></name></expr></argument>,
<argument><expr><name>SNMP_OP_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TR</name><argument_list>(<argument><expr><name>SET</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_debug</name><argument_list>(<argument><expr><literal type="string">"set: action %s returns %d"</literal></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <name>SNMP_V1</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SNMP_ERR_NO_ACCESS</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>SNMP_ERR_NOSUCHNAME</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SNMP_ERR_WRONG_TYPE</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>SNMP_ERR_BADVALUE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SNMP_ERR_WRONG_LENGTH</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>SNMP_ERR_BADVALUE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SNMP_ERR_WRONG_ENCODING</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>SNMP_ERR_BADVALUE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SNMP_ERR_WRONG_VALUE</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>SNMP_ERR_BADVALUE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SNMP_ERR_NO_CREATION</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>SNMP_ERR_NOSUCHNAME</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SNMP_ERR_INCONS_VALUE</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>SNMP_ERR_BADVALUE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SNMP_ERR_RES_UNAVAIL</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>SNMP_ERR_GENERR</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SNMP_ERR_COMMIT_FAILED</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>SNMP_ERR_GENERR</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SNMP_ERR_UNDO_FAILED</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>SNMP_ERR_GENERR</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SNMP_ERR_AUTH_ERR</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>SNMP_ERR_GENERR</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SNMP_ERR_NOT_WRITEABLE</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>SNMP_ERR_NOSUCHNAME</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SNMP_ERR_INCONS_NAME</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>SNMP_ERR_BADVALUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>SNMP_ERR_NOERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_index</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_status</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rollback</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>pdu</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snmp_pdu_free</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>.</operator><name>ctx</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>SNMP_RET_ERR</name></expr>;</expr_stmt>

<goto>goto <name>errout</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>




<if_stmt><if>if <condition>(<expr><call><name>TR</name><argument_list>(<argument><expr><name>SET</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_debug</name><argument_list>(<argument><expr><literal type="string">"set: set operations ok"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>snmp_dep_commit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>.</operator><name>ctx</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SNMP_ERR_NOERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_status</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_index</name></name> <operator>=</operator> <name><name>context</name><operator>.</operator><name>ctx</name><operator>.</operator><name>var_index</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>snmp_dep_rollback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>.</operator><name>ctx</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SNMP_ERR_NOERROR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>version</name></name> <operator>!=</operator> <name>SNMP_V1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_status</name></name> <operator>=</operator> <name>SNMP_ERR_UNDO_FAILED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdu</name><operator>-&gt;</operator><name>error_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rollback</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>pdu</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snmp_pdu_free</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>.</operator><name>ctx</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>SNMP_RET_ERR</name></expr>;</expr_stmt>

<goto>goto <name>errout</name>;</goto>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><call><name>TR</name><argument_list>(<argument><expr><name>SET</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_debug</name><argument_list>(<argument><expr><literal type="string">"set: commiting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pdu</name><operator>-&gt;</operator><name>nbindings</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>&amp;</operator><name><name>resp</name><operator>-&gt;</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>context</name><operator>.</operator><name>node</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>.</operator><name>ctx</name><operator>.</operator><name>var_index</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>context</name><operator>.</operator><name>ctx</name><operator>.</operator><name>scratch</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>context</name><operator>.</operator><name>scratch</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>np</name><operator>-&gt;</operator><name>op</name></name>)<argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>.</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>index</name></name></expr></argument>,
<argument><expr><name>SNMP_OP_COMMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>SNMP_ERR_NOERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"set: commit failed (%d) on"</literal>
<literal type="string">" variable %s index %u"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>,
<argument><expr><call><name>asn_oid2str_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>oidbuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>snmp_fix_encoding</name><argument_list>(<argument><expr><name>resp_b</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SNMP_CODE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"set: fix_encoding failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snmp_pdu_free</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>context</name><operator>.</operator><name>ctx</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>SNMP_RET_IGN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<label><name>errout</name>:</label>
<expr_stmt><expr><call><name>snmp_dep_finish</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>.</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TR</name><argument_list>(<argument><expr><name>SET</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_debug</name><argument_list>(<argument><expr><literal type="string">"set: returning %d"</literal></expr></argument>, <argument><expr><name><name>context</name><operator>.</operator><name>ctx</name><operator>.</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>context</name><operator>.</operator><name>ctx</name><operator>.</operator><name>code</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>



<function><type><name><name>struct</name> <name>snmp_dependency</name></name> <modifier>*</modifier></type>
<name>snmp_dep_lookup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>idx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>snmp_depop_t</name></type> <name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>context</name></name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>depend</name></name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>context</name> <operator>=</operator> <operator>(</operator>struct <name>context</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator>
<operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>ctx</name> <operator>-</operator> <call><name>offsetof</name><argument_list>(<argument><expr>struct <name>context</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TR</name><argument_list>(<argument><expr><name>DEPEND</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_debug</name><argument_list>(<argument><expr><literal type="string">"depend: looking for %s"</literal></expr></argument>, <argument><expr><call><name>asn_oid2str</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_debug</name><argument_list>(<argument><expr><literal type="string">"depend: index is %s"</literal></expr></argument>, <argument><expr><call><name>asn_oid2str</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>d</argument>, <argument>&amp;context-&gt;dlist</argument>, <argument>link</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><call><name>asn_compare_oid</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>dep</name><operator>.</operator><name>obj</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>idx</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>dep</name><operator>.</operator><name>idx</name><operator>.</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>idx</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>asn_compare_oid</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>dep</name><operator>.</operator><name>idx</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>TR</name><argument_list>(<argument><expr><name>DEPEND</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_debug</name><argument_list>(<argument><expr><literal type="string">"depend: found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>dep</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>TR</name><argument_list>(<argument><expr><name>DEPEND</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snmp_debug</name><argument_list>(<argument><expr><literal type="string">"depend: creating"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>d</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>depend</name></expr></argument>, <argument><expr><name>dep</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>dep</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>dep</name><operator>.</operator><name>obj</name></name> <operator>=</operator> <operator>*</operator><name>obj</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>dep</name><operator>.</operator><name>idx</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>dep</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <operator>*</operator><name>idx</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>dlist</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>dep</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name><name>enum</name> <name>snmp_ret</name></name></type>
<name>snmp_make_errresp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>pdu_b</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>resp_b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_char</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asn_len_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>snmp_pdu</name></name></type> <name>resp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>asn_err</name></name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>snmp_code</name></name></type> <name>code</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snmp_pdu_create_response</name><argument_list>(<argument><expr><name>pdu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>=</operator> <call><name>snmp_pdu_decode_header</name><argument_list>(<argument><expr><name>pdu_b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SNMP_CODE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_RET_IGN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pdu</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <name>SNMP_V3</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>resp</name><operator>.</operator><name>user</name><operator>.</operator><name>priv_proto</name></name> <operator>!=</operator> <name>SNMP_PRIV_NOPRIV</name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>asn_get_header</name><argument_list>(<argument><expr><name>pdu_b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>resp</name><operator>.</operator><name>scoped_len</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name>
<operator>||</operator> <name>type</name> <operator>!=</operator> <name>ASN_TYPE_OCTETSTRING</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot decode encrypted pdu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_RET_IGN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asn_get_sequence</name><argument_list>(<argument><expr><name>pdu_b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot decode scoped pdu header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_RET_IGN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>SNMP_ENGINE_ID_SIZ</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>asn_get_octetstring</name><argument_list>(<argument><expr><name>pdu_b</name></expr></argument>, <argument><expr><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name><name>resp</name><operator>.</operator><name>context_engine</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot decode msg context engine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_RET_IGN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>resp</name><operator>.</operator><name>context_engine_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>SNMP_CONTEXT_NAME_SIZ</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>asn_get_octetstring</name><argument_list>(<argument><expr><name>pdu_b</name></expr></argument>, <argument><expr><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name><name>resp</name><operator>.</operator><name>context_name</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot decode msg context name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_RET_IGN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>resp</name><operator>.</operator><name>context_name</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>asn_get_header</name><argument_list>(<argument><expr><name>pdu_b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ASN_ERR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"cannot get pdu header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_RET_IGN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <operator>~</operator><name>ASN_TYPE_MASK</name><operator>)</operator> <operator>!=</operator>
<operator>(</operator><name>ASN_TYPE_CONSTRUCTED</name> <operator>|</operator> <name>ASN_CLASS_CONTEXT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snmp_error</name><argument_list>(<argument><expr><literal type="string">"bad pdu header tag"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_RET_IGN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>snmp_parse_pdus_hdr</name><argument_list>(<argument><expr><name>pdu_b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ASN_ERR_STOPPED</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_RET_IGN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pdu_b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_RET_IGN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pdu_b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>resp</name><operator>.</operator><name>error_status</name></name> <operator>=</operator> <name><name>pdu</name><operator>-&gt;</operator><name>error_status</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resp</name><operator>.</operator><name>error_index</name></name> <operator>=</operator> <name><name>pdu</name><operator>-&gt;</operator><name>error_index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resp</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>SNMP_PDU_RESPONSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>snmp_pdu_encode_header</name><argument_list>(<argument><expr><name>resp_b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>SNMP_CODE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_RET_IGN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pdu_b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>&gt;</operator> <name><name>resp_b</name><operator>-&gt;</operator><name>asn_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>SNMP_RET_IGN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memcpy</name><argument_list>(<argument><expr><name><name>resp_b</name><operator>-&gt;</operator><name>asn_ptr</name></name></expr></argument>, <argument><expr><name><name>pdu_b</name><operator>-&gt;</operator><name>asn_cptr</name></name></expr></argument>, <argument><expr><name><name>pdu_b</name><operator>-&gt;</operator><name>asn_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resp_b</name><operator>-&gt;</operator><name>asn_len</name></name> <operator>-=</operator> <name><name>pdu_b</name><operator>-&gt;</operator><name>asn_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resp_b</name><operator>-&gt;</operator><name>asn_ptr</name></name> <operator>+=</operator> <name><name>pdu_b</name><operator>-&gt;</operator><name>asn_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>snmp_fix_encoding</name><argument_list>(<argument><expr><name>resp_b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>SNMP_CODE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_RET_IGN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>SNMP_RET_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>snmp_debug_func</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
