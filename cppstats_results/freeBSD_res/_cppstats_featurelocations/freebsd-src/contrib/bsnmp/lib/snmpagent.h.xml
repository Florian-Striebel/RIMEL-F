<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bsnmp/lib/snmpagent.h">































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>snmp_agent_h_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snmp_agent_h_</name></cpp:macro></cpp:define>

<struct_decl>struct <name>snmp_dependency</name>;</struct_decl>

<enum>enum <name>snmp_ret</name> <block>{

<decl><name>SNMP_RET_OK</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>SNMP_RET_IGN</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>SNMP_RET_ERR</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block>;</enum>


<struct>struct <name>snmp_context</name> <block>{
<decl_stmt><decl><type><name>u_int</name></type> <name>var_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>snmp_scratch</name></name> <modifier>*</modifier></type><name>scratch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>snmp_dependency</name></name> <modifier>*</modifier></type><name>dep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>snmp_ret</name></name></type> <name>code</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>snmp_scratch</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>int1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>int2</name></decl>;</decl_stmt>
}</block>;</struct>

<enum>enum <name>snmp_depop</name> <block>{
<decl><name>SNMP_DEPOP_COMMIT</name></decl>,
<decl><name>SNMP_DEPOP_ROLLBACK</name></decl>,
<decl><name>SNMP_DEPOP_FINISH</name></decl>
}</block>;</enum>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>snmp_depop_t</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_dependency</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>snmp_depop</name></name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>snmp_dependency</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>asn_oid</name></name></type> <name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>asn_oid</name></name></type> <name>idx</name></decl>;</decl_stmt>
}</block>;</struct>




<enum>enum <name>snmp_node_type</name> <block>{
<decl><name>SNMP_NODE_LEAF</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>SNMP_NODE_COLUMN</name></decl>
}</block>;</enum>

<enum>enum <name>snmp_op</name> <block>{
<decl><name>SNMP_OP_GET</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>SNMP_OP_GETNEXT</name></decl>,
<decl><name>SNMP_OP_SET</name></decl>,
<decl><name>SNMP_OP_COMMIT</name></decl>,
<decl><name>SNMP_OP_ROLLBACK</name></decl>,
}</block>;</enum>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>snmp_op_t</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>u_int</name></type></decl></parameter>, <parameter><decl><type><name>u_int</name></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>snmp_op</name></name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>snmp_node</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>asn_oid</name></name></type> <name>oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>snmp_node_type</name></name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>snmp_syntax</name></name></type> <name>syntax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>snmp_op_t</name></type> <name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tree_data</name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>snmp_node</name></name> <modifier>*</modifier></type><name>tree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>u_int</name></type> <name>tree_size</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_NODE_CANSET</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_INDEXES_MAX</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_INDEX_SHIFT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_INDEX_MASK</name></cpp:macro> <cpp:value>0xf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_INDEX_COUNT</name><parameter_list>(<parameter><type><name>V</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((V) &amp; SNMP_INDEX_MASK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_INDEX</name><parameter_list>(<parameter><type><name>V</name></type></parameter>,<parameter><type><name>I</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((V) &gt;&gt; (((I) + 1) * SNMP_INDEX_SHIFT)) &amp; SNMP_INDEX_MASK)</cpp:value></cpp:define>


<enum>enum <block>{
<decl><name>SNMP_TRACE_GET</name> <init>= <expr><literal type="number">0x00000001</literal></expr></init></decl>,
<decl><name>SNMP_TRACE_GETNEXT</name> <init>= <expr><literal type="number">0x00000002</literal></expr></init></decl>,
<decl><name>SNMP_TRACE_SET</name> <init>= <expr><literal type="number">0x00000004</literal></expr></init></decl>,
<decl><name>SNMP_TRACE_DEPEND</name> <init>= <expr><literal type="number">0x00000008</literal></expr></init></decl>,
<decl><name>SNMP_TRACE_FIND</name> <init>= <expr><literal type="number">0x00000010</literal></expr></init></decl>,
}</block>;</enum>

<decl_stmt><decl><type><specifier>extern</specifier> <name>u_int</name></type> <name>snmp_trace</name></decl>;</decl_stmt>


<function_decl><type><specifier>extern</specifier> <name>void</name></type> (<modifier>*</modifier><name>snmp_debug</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>enum</name> <name>snmp_ret</name></name></type> <name>snmp_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>resp_b</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>resp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>enum</name> <name>snmp_ret</name></name></type> <name>snmp_getnext</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>resp_b</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>resp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>enum</name> <name>snmp_ret</name></name></type> <name>snmp_getbulk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>resp_b</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>resp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>enum</name> <name>snmp_ret</name></name></type> <name>snmp_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>resp_b</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>resp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>enum</name> <name>snmp_ret</name></name></type> <name>snmp_make_errresp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>snmp_dependency</name></name> <modifier>*</modifier></type><name>snmp_dep_lookup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>snmp_depop_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type><name>snmp_init_context</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>snmp_dep_commit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>snmp_dep_rollback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>snmp_dep_finish</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
