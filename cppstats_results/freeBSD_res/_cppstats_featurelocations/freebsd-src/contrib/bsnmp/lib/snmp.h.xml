<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bsnmp/lib/snmp.h">






































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>snmp_h_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snmp_h_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BSNMP_MAJOR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BSNMP_MINOR</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_COMMUNITY_MAXLEN</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_MAX_BINDINGS</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_CONTEXT_NAME_SIZ</name></cpp:macro> <cpp:value>(32 + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_ENGINE_ID_SIZ</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_TIME_WINDOW</name></cpp:macro> <cpp:value>150</cpp:value></cpp:define>

<enum>enum <name>snmp_syntax</name> <block>{
<decl><name>SNMP_SYNTAX_NULL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>SNMP_SYNTAX_INTEGER</name></decl>,
<decl><name>SNMP_SYNTAX_OCTETSTRING</name></decl>,
<decl><name>SNMP_SYNTAX_OID</name></decl>,
<decl><name>SNMP_SYNTAX_IPADDRESS</name></decl>,
<decl><name>SNMP_SYNTAX_COUNTER</name></decl>,
<decl><name>SNMP_SYNTAX_GAUGE</name></decl>,
<decl><name>SNMP_SYNTAX_TIMETICKS</name></decl>,


<decl><name>SNMP_SYNTAX_COUNTER64</name></decl>,
<decl><name>SNMP_SYNTAX_NOSUCHOBJECT</name></decl>,
<decl><name>SNMP_SYNTAX_NOSUCHINSTANCE</name></decl>,
<decl><name>SNMP_SYNTAX_ENDOFMIBVIEW</name></decl>,
}</block>;</enum>

<struct>struct <name>snmp_value</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>asn_oid</name></name></type> <name>var</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>snmp_syntax</name></name></type> <name>syntax</name></decl>;</decl_stmt>
<union>union <name>snmp_values</name> <block>{
<decl_stmt><decl><type><name>int32_t</name></type> <name>integer</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>u_int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>octets</name></decl>;</decl_stmt>
}</block> <decl><name>octetstring</name></decl>;</struct>
<decl_stmt><decl><type><name><name>struct</name> <name>asn_oid</name></name></type> <name>oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name></type> <name><name>ipaddress</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>uint32</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>counter64</name></decl>;</decl_stmt>
}</block> <decl><name>v</name></decl>;</union>
}</block>;</struct>

<enum>enum <name>snmp_version</name> <block>{
<decl><name>SNMP_Verr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>SNMP_V1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>SNMP_V2c</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>SNMP_V3</name></decl>,
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_MPM_SNMP_V1</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_MPM_SNMP_V2c</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_MPM_SNMP_V3</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_ADM_STR32_SIZ</name></cpp:macro> <cpp:value>(32 + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_AUTH_KEY_SIZ</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_PRIV_KEY_SIZ</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_USM_AUTH_SIZE</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_USM_PRIV_SIZE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_AUTH_HMACMD5_KEY_SIZ</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_AUTH_HMACSHA_KEY_SIZ</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_PRIV_AES_KEY_SIZ</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_PRIV_DES_KEY_SIZ</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>


<enum>enum <name>snmp_secmodel</name> <block>{
<decl><name>SNMP_SECMODEL_ANY</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>SNMP_SECMODEL_SNMPv1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>SNMP_SECMODEL_SNMPv2c</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>SNMP_SECMODEL_USM</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>SNMP_SECMODEL_UNKNOWN</name></decl>
}</block>;</enum>

<enum>enum <name>snmp_usm_level</name> <block>{
<decl><name>SNMP_noAuthNoPriv</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>SNMP_authNoPriv</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>SNMP_authPriv</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>snmp_authentication</name> <block>{
<decl><name>SNMP_AUTH_NOAUTH</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>SNMP_AUTH_HMAC_MD5</name></decl>,
<decl><name>SNMP_AUTH_HMAC_SHA</name></decl>
}</block>;</enum>

<enum>enum <name>snmp_privacy</name> <block>{
<decl><name>SNMP_PRIV_NOPRIV</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>SNMP_PRIV_DES</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>SNMP_PRIV_AES</name></decl>
}</block>;</enum>

<struct>struct <name>snmp_engine</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>engine_id</name><index>[<expr><name>SNMP_ENGINE_ID_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>engine_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>engine_boots</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>engine_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>max_msg_size</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>snmp_user</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>sec_name</name><index>[<expr><name>SNMP_ADM_STR32_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>snmp_authentication</name></name></type> <name>auth_proto</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>snmp_privacy</name></name></type> <name>priv_proto</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>auth_key</name><index>[<expr><name>SNMP_AUTH_KEY_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>priv_key</name><index>[<expr><name>SNMP_PRIV_KEY_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>snmp_pdu</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>community</name><index>[<expr><name>SNMP_COMMUNITY_MAXLEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>snmp_version</name></name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>type</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int32_t</name></type> <name>identifier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>security_model</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>snmp_engine</name></name></type> <name>engine</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>snmp_user</name></name></type> <name>user</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>msg_digest</name><index>[<expr><name>SNMP_USM_AUTH_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>msg_salt</name><index>[<expr><name>SNMP_USM_PRIV_SIZE</name></expr>]</index></name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>uint32_t</name></type> <name>context_engine_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>context_engine</name><index>[<expr><name>SNMP_ENGINE_ID_SIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>context_name</name><index>[<expr><name>SNMP_CONTEXT_NAME_SIZ</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>asn_oid</name></name></type> <name>enterprise</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name></type> <name><name>agent_addr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>generic_trap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>specific_trap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>time_stamp</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int32_t</name></type> <name>request_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>error_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>error_index</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>outer_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asn_len_t</name></type> <name>scoped_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>outer_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>digest_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>encrypted_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>scoped_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>pdu_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>vars_ptr</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>snmp_value</name></name></type> <name><name>bindings</name><index>[<expr><name>SNMP_MAX_BINDINGS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>nbindings</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snmp_v1_pdu</name></cpp:macro> <cpp:value>snmp_pdu</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_PDU_GET</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_PDU_GETNEXT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_PDU_RESPONSE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_PDU_SET</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_PDU_TRAP</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_PDU_GETBULK</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_PDU_INFORM</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_PDU_TRAP2</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_PDU_REPORT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_ERR_NOERROR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_ERR_TOOBIG</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_ERR_NOSUCHNAME</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_ERR_BADVALUE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_ERR_READONLY</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_ERR_GENERR</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_ERR_NO_ACCESS</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_ERR_WRONG_TYPE</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_ERR_WRONG_LENGTH</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_ERR_WRONG_ENCODING</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_ERR_WRONG_VALUE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_ERR_NO_CREATION</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_ERR_INCONS_VALUE</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_ERR_RES_UNAVAIL</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_ERR_COMMIT_FAILED</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_ERR_UNDO_FAILED</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_ERR_AUTH_ERR</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_ERR_NOT_WRITEABLE</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_ERR_INCONS_NAME</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_TRAP_COLDSTART</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_TRAP_WARMSTART</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_TRAP_LINKDOWN</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_TRAP_LINKUP</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_TRAP_AUTHENTICATION_FAILURE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_TRAP_EGP_NEIGHBOR_LOSS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_TRAP_ENTERPRISE</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<enum>enum <name>snmp_code</name> <block>{
<decl><name>SNMP_CODE_OK</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>SNMP_CODE_FAILED</name></decl>,
<decl><name>SNMP_CODE_BADVERS</name></decl>,
<decl><name>SNMP_CODE_BADLEN</name></decl>,
<decl><name>SNMP_CODE_BADENC</name></decl>,
<decl><name>SNMP_CODE_OORANGE</name></decl>,
<decl><name>SNMP_CODE_BADSECLEVEL</name></decl>,
<decl><name>SNMP_CODE_NOTINTIME</name></decl>,
<decl><name>SNMP_CODE_BADUSER</name></decl>,
<decl><name>SNMP_CODE_BADENGINE</name></decl>,
<decl><name>SNMP_CODE_BADDIGEST</name></decl>,
<decl><name>SNMP_CODE_EDECRYPT</name></decl>
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_MSG_AUTH_FLAG</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_MSG_PRIV_FLAG</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_MSG_REPORT_FLAG</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNMP_MSG_AUTODISCOVER</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>snmp_value_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>snmp_value_parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>snmp_syntax</name></name></type></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>snmp_values</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>snmp_value_copy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>snmp_pdu_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>snmp_pdu_init_secparams</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>enum</name> <name>snmp_code</name></name></type> <name>snmp_pdu_decode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>enum</name> <name>snmp_code</name></name></type> <name>snmp_pdu_decode_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>enum</name> <name>snmp_code</name></name></type> <name>snmp_pdu_decode_scoped</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>enum</name> <name>snmp_code</name></name></type> <name>snmp_pdu_encode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>enum</name> <name>snmp_code</name></name></type> <name>snmp_pdu_decode_secmode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>snmp_pdu_snoop</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_buf</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>snmp_pdu_dump</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_pdu</name></name> <modifier>*</modifier></type><name>pdu</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>enum</name> <name>snmp_code</name></name></type> <name>snmp_passwd_to_keys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_user</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>enum</name> <name>snmp_code</name></name></type> <name>snmp_get_local_keys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_user</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>enum</name> <name>snmp_code</name></name></type> <name>snmp_calc_keychange</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_user</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> (<modifier>*</modifier><name>snmp_error</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> (<modifier>*</modifier><name>snmp_printf</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRUTH_MK</name><parameter_list>(<parameter><type><name>F</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((F) ? 1 : 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRUTH_GET</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((T) == 1) ? 1 : 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRUTH_OK</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((T) == 1 || (T) == 2)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
