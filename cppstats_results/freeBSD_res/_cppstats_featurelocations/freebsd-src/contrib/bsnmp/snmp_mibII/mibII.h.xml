<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bsnmp/snmp_mibII/mibII.h">































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sockio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/syslog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/if.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/if_dl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/if_mib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/route.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asn1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snmp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snmpmod.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snmp_mibII.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mibII_tree.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIBIF_ALIAS_SIZE</name></cpp:macro> <cpp:value>(64 + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIBIF_ALIAS_SIZE_MAX</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>




<expr_stmt><expr><call><name>TAILQ_HEAD</name><argument_list>(<argument><expr><name>mibif_list</name></expr></argument>, <argument><expr><name>mibif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<enum>enum <block>{
<decl><name>MIBIF_FOUND</name> <init>= <expr><literal type="number">0x0001</literal></expr></init></decl>,
<decl><name>MIBIF_HIGHSPEED</name> <init>= <expr><literal type="number">0x0002</literal></expr></init></decl>,
<decl><name>MIBIF_VERYHIGHSPEED</name> <init>= <expr><literal type="number">0x0004</literal></expr></init></decl>,
}</block>;</enum>




<struct>struct <name>mibif_private</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>hc_inoctets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>hc_outoctets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>hc_omcasts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>hc_opackets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>hc_imcasts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>hc_ipackets</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIBIF_PRIV</name><parameter_list>(<parameter><type><name>IFP</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((struct mibif_private *)((IFP)-&gt;private))</cpp:value></cpp:define>




<expr_stmt><expr><call><name>TAILQ_HEAD</name><argument_list>(<argument><expr><name>mibifa_list</name></expr></argument>, <argument><expr><name>mibifa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<enum>enum <block>{
<decl><name>MIBIFA_FOUND</name> <init>= <expr><literal type="number">0x0001</literal></expr></init></decl>,
<decl><name>MIBIFA_DESTROYED</name> <init>= <expr><literal type="number">0x0002</literal></expr></init></decl>,
}</block>;</enum>




<expr_stmt><expr><call><name>TAILQ_HEAD</name><argument_list>(<argument><expr><name>mibrcvaddr_list</name></expr></argument>, <argument><expr><name>mibrcvaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<enum>enum <block>{
<decl><name>MIBRCVADDR_FOUND</name> <init>= <expr><literal type="number">0x00010000</literal></expr></init></decl>,
}</block>;</enum>












<struct>struct <name>mibdynif</name> <block>{
<macro><name>SLIST_ENTRY</name><argument_list>(<argument>mibdynif</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>IFNAMSIZ</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<expr_stmt><expr><call><name>SLIST_HEAD</name><argument_list>(<argument><expr><name>mibdynif_list</name></expr></argument>, <argument><expr><name>mibdynif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<struct>struct <name>mibindexmap</name> <block>{
<macro><name>STAILQ_ENTRY</name><argument_list>(<argument>mibindexmap</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>u_short</name></type> <name>sysindex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>ifindex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>mibif</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>IFNAMSIZ</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<expr_stmt><expr><call><name>STAILQ_HEAD</name><argument_list>(<argument><expr><name>mibindexmap_list</name></expr></argument>, <argument><expr><name>mibindexmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<struct>struct <name>mibifstack</name> <block>{
<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>mibifstack</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>asn_oid</name></name></type> <name>index</name></decl>;</decl_stmt>
}</block>;</struct>
<expr_stmt><expr><call><name>TAILQ_HEAD</name><argument_list>(<argument><expr><name>mibifstack_list</name></expr></argument>, <argument><expr><name>mibifstack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<struct>struct <name>mibarp</name> <block>{
<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>mibarp</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>asn_oid</name></name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name></type> <name><name>phys</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>physlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>flags</name></decl>;</decl_stmt>
}</block>;</struct>
<expr_stmt><expr><call><name>TAILQ_HEAD</name><argument_list>(<argument><expr><name>mibarp_list</name></expr></argument>, <argument><expr><name>mibarp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<enum>enum <block>{
<decl><name>MIBARP_FOUND</name> <init>= <expr><literal type="number">0x00010000</literal></expr></init></decl>,
<decl><name>MIBARP_PERM</name> <init>= <expr><literal type="number">0x00000001</literal></expr></init></decl>,
}</block>;</enum>




<struct>struct <name>newifreg</name> <block>{
<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>newifreg</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>lmodule</name></name> <modifier>*</modifier></type><name>mod</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>
<expr_stmt><expr><call><name>TAILQ_HEAD</name><argument_list>(<argument><expr><name>newifreg_list</name></expr></argument>, <argument><expr><name>newifreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>mibifa_list</name></name></type> <name>mibifa_list</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>mibif_list</name></name></type> <name>mibif_list</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>mibdynif_list</name></name></type> <name>mibdynif_list</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>mibindexmap_list</name></name></type> <name>mibindexmap_list</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>mibifstack_list</name></name></type> <name>mibifstack_list</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>mibrcvaddr_list</name></name></type> <name>mibrcvaddr_list</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>mibarp_list</name></name></type> <name>mibarp_list</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>int32_t</name></type> <name>mib_if_number</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>uint64_t</name></type> <name>mib_iftable_last_change</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>uint64_t</name></type> <name>mib_ifstack_last_change</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>mib_iflist_bad</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>uint64_t</name></type> <name>mibarpticks</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>clockinfo</name></name></type> <name>clockinfo</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>uint64_t</name></type> <name>mibif_maxspeed</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>u_int</name></type> <name>mibif_force_hc_update_interval</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>u_int</name></type> <name>mibif_hc_update_interval</name></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>mibif_reset_hc_timer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>extern</specifier> <name>u_int</name></type> <name>mibII_poll_ticks</name></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>mibif_restart_mibII_poll_timer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIBII_POLL_TICKS</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>


<function_decl><type><name>void</name></type> <name>mib_fetch_interfaces</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>mib_if_is_dyn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>mib_destroy_ifa</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mibifa</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>mib_undestroy_ifa</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mibifa</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>mib_modify_ifa</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mibifa</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>mib_unmodify_ifa</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mibifa</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name><name>struct</name> <name>mibifa</name></name> <modifier>*</modifier></type> <name>mib_create_ifa</name><parameter_list>(<parameter><decl><type><name>u_int</name></type> <name>ifindex</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>bcast</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>mib_uncreate_ifa</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mibifa</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name><name>struct</name> <name>mibarp</name></name> <modifier>*</modifier></type><name>mib_arp_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>mib_arp_delete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mibarp</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name><name>struct</name> <name>mibarp</name></name> <modifier>*</modifier></type><name>mib_find_arp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>mib_arp_update</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>u_char</name> <modifier>*</modifier></type><name>mib_fetch_rtab</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>af</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>lenp</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>mib_sroute_process</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rt_msghdr</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>mib_send_rtmsg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rt_msghdr</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>mib_extract_addrs</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>mib_fetch_route</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
</unit>
