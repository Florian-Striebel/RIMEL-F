<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bsnmp/snmp_mibII/mibII.c">































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mibII.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mibII_oid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/if.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/if_types.h&gt;</cpp:file></cpp:include>





<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>lmodule</name></name> <modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>route</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>route_fd</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>next_if_index</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>in_update_arp</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>u_int</name></type> <name>ifmib_reg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>u_int</name></type> <name>ipmib_reg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>u_int</name></type> <name>tcpmib_reg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>u_int</name></type> <name>udpmib_reg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>u_int</name></type> <name>ipForward_reg</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name><name>struct</name> <name>mibifa_list</name></name></type> <name>mibifa_list</name> <init>= <expr><call><name>TAILQ_HEAD_INITIALIZER</name><argument_list>(<argument><expr><name>mibifa_list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>mibif_list</name></name></type> <name>mibif_list</name> <init>= <expr><call><name>TAILQ_HEAD_INITIALIZER</name><argument_list>(<argument><expr><name>mibif_list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>mibdynif_list</name></name></type> <name>mibdynif_list</name> <init>= <expr><call><name>SLIST_HEAD_INITIALIZER</name><argument_list>(<argument><expr><name>mibdynif_list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>mibindexmap_list</name></name></type> <name>mibindexmap_list</name> <init>= <expr><call><name>STAILQ_HEAD_INITIALIZER</name><argument_list>(<argument><expr><name>mibindexmap_list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>mibifstack_list</name></name></type> <name>mibifstack_list</name> <init>= <expr><call><name>TAILQ_HEAD_INITIALIZER</name><argument_list>(<argument><expr><name>mibifstack_list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>mibrcvaddr_list</name></name></type> <name>mibrcvaddr_list</name> <init>= <expr><call><name>TAILQ_HEAD_INITIALIZER</name><argument_list>(<argument><expr><name>mibrcvaddr_list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>mibarp_list</name></name></type> <name>mibarp_list</name> <init>= <expr><call><name>TAILQ_HEAD_INITIALIZER</name><argument_list>(<argument><expr><name>mibarp_list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int32_t</name></type> <name>mib_if_number</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>mib_iftable_last_change</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>mib_ifstack_last_change</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>mib_iflist_bad</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>mib_netsock</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>mibarpticks</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>clockinfo</name></name></type> <name>clockinfo</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>newifreg_list</name></name></type> <name>newifreg_list</name> <init>= <expr><call><name>TAILQ_HEAD_INITIALIZER</name><argument_list>(<argument><expr><name>newifreg_list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>mibif_maxspeed</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>u_int</name></type> <name>mibif_force_hc_update_interval</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>u_int</name></type> <name>mibif_hc_update_interval</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>hc_update_timer</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>mibII_poll_timer</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>u_int</name></type> <name>mibII_poll_ticks</name></decl>;</decl_stmt>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>mibII_idle</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>__unused</name></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name></type> <name>oid_ifMIB</name> <init>= <expr><name>OIDX_ifMIB</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name></type> <name>oid_ipMIB</name> <init>= <expr><name>OIDX_ipMIB</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name></type> <name>oid_tcpMIB</name> <init>= <expr><name>OIDX_tcpMIB</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name></type> <name>oid_udpMIB</name> <init>= <expr><name>OIDX_udpMIB</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name></type> <name>oid_ipForward</name> <init>= <expr><name>OIDX_ipForward</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name></type> <name>oid_linkDown</name> <init>= <expr><name>OIDX_linkDown</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name></type> <name>oid_linkUp</name> <init>= <expr><name>OIDX_linkUp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name></type> <name>oid_ifIndex</name> <init>= <expr><name>OIDX_ifIndex</name></expr></init></decl>;</decl_stmt>






<function><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type>
<name>mib_find_if</name><parameter_list>(<parameter><decl><type><name>u_int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>ifp</name></decl>;</decl_stmt>

<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>ifp</argument>, <argument>&amp;mibif_list</argument>, <argument>link</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>ifp</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <name>idx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ifp</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type>
<name>mib_find_if_sys</name><parameter_list>(<parameter><decl><type><name>u_int</name></type> <name>sysindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>ifp</name></decl>;</decl_stmt>

<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>ifp</argument>, <argument>&amp;mibif_list</argument>, <argument>link</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>ifp</name><operator>-&gt;</operator><name>sysindex</name></name> <operator>==</operator> <name>sysindex</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ifp</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type>
<name>mib_find_if_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>ifp</name></decl>;</decl_stmt>

<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>ifp</argument>, <argument>&amp;mibif_list</argument>, <argument>link</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ifp</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>mib_if_is_dyn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mibdynif</name></name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>name</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <call><name>isalpha</name><argument_list>(<argument><expr><name><name>name</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><name>len</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<macro><name>SLIST_FOREACH</name><argument_list>(<argument>d</argument>, <argument>&amp;mibdynif_list</argument>, <argument>link</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>len</name> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>mib_if_set_dyn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mibdynif</name></name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<macro><name>SLIST_FOREACH</name><argument_list>(<argument>d</argument>, <argument>&amp;mibdynif_list</argument>, <argument>link</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>d</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>d</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLIST_INSERT_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mibdynif_list</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>mib_register_newif</name><parameter_list>(<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>lmodule</name></name> <modifier>*</modifier></type><name>mod</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>newifreg</name></name> <modifier>*</modifier></type><name>reg</name></decl>;</decl_stmt>

<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>reg</argument>, <argument>&amp;newifreg_list</argument>, <argument>link</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>mod</name></name> <operator>==</operator> <name>mod</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>reg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"newifreg: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>mod</name></name> <operator>=</operator> <name>mod</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newifreg_list</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>mib_unregister_newif</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>lmodule</name></name> <modifier>*</modifier></type><name>mod</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>newifreg</name></name> <modifier>*</modifier></type><name>reg</name></decl>;</decl_stmt>

<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>reg</argument>, <argument>&amp;newifreg_list</argument>, <argument>link</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>mod</name></name> <operator>==</operator> <name>mod</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newifreg_list</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type>
<name>mib_first_if</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mibif_list</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type>
<name>mib_next_if</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>ifp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>TAILQ_NEXT</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>mib_if_admin</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>ifp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>up</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ifreq</name></name></type> <name>ifr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>mib_netsock</name></expr></argument>, <argument><expr><name>SIOCGIFFLAGS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"SIOCGIFFLAGS(%s): %m"</literal></expr></argument>, <argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>up</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ifr</name><operator>.</operator><name>ifr_flags</name></name> <operator>|=</operator> <name>IFF_UP</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ifr</name><operator>.</operator><name>ifr_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>IFF_UP</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>mib_netsock</name></expr></argument>, <argument><expr><name>SIOCSIFFLAGS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"SIOCSIFFLAGS(%s): %m"</literal></expr></argument>, <argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>mib_fetch_ifmib</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>link_trap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>ifp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>up</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>snmp_value</name></name></type> <name>ifindex</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ifindex</name><operator>.</operator><name>var</name></name> <operator>=</operator> <name>oid_ifIndex</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifindex</name><operator>.</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name><name>ifindex</name><operator>.</operator><name>var</name><operator>.</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifindex</name><operator>.</operator><name>syntax</name></name> <operator>=</operator> <name>SNMP_SYNTAX_INTEGER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifindex</name><operator>.</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snmp_send_trap</name><argument_list>(<argument><expr><ternary><condition><expr><name>up</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>oid_linkUp</name></expr> </then><else>: <expr><operator>&amp;</operator><name>oid_linkDown</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifindex</name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>snmp_value</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>fetch_generic_mib</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>ifp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ifmibdata</name></name> <modifier>*</modifier></type><name>old</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>name</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mibif_private</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>ifp</name><operator>-&gt;</operator><name>private</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CTL_NET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>PF_LINK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NETLINK_GENERIC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>IFMIB_IFDATA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>sysindex</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>IFDATA_GENERAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>mib</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sysctl</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>nitems</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ifp</name><operator>-&gt;</operator><name>mib</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"sysctl(ifmib, %s) failed %m"</literal></expr></argument>,
<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>ULONG_MAX</name> <operator>&gt;=</operator> <literal type="number">0xffffffffffffffffULL</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>hc_inoctets</name></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_ibytes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>hc_outoctets</name></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_obytes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>hc_omcasts</name></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_omcasts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>hc_opackets</name></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_opackets</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>hc_imcasts</name></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_imcasts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>hc_ipackets</name></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_ipackets</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ULONG_MAX</name> <operator>&gt;=</operator> <literal type="number">0xffffffff</literal></expr>)</condition> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPDATE</name><parameter_list>(<parameter><type><name>HC</name></type></parameter>, <parameter><type><name>MIB</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (old-&gt;ifmd_data.MIB &gt; ifp-&gt;mib.ifmd_data.MIB) p-&gt;HC += (0x100000000ULL + ifp-&gt;mib.ifmd_data.MIB) - old-&gt;ifmd_data.MIB; else p-&gt;HC += ifp-&gt;mib.ifmd_data.MIB - old-&gt;ifmd_data.MIB;</cpp:value></cpp:define>








<macro><name>UPDATE</name><argument_list>(<argument>hc_inoctets</argument>, <argument>ifi_ibytes</argument>)</argument_list></macro>
<macro><name>UPDATE</name><argument_list>(<argument>hc_outoctets</argument>, <argument>ifi_obytes</argument>)</argument_list></macro>
<macro><name>UPDATE</name><argument_list>(<argument>hc_omcasts</argument>, <argument>ifi_omcasts</argument>)</argument_list></macro>
<macro><name>UPDATE</name><argument_list>(<argument>hc_opackets</argument>, <argument>ifi_opackets</argument>)</argument_list></macro>
<macro><name>UPDATE</name><argument_list>(<argument>hc_imcasts</argument>, <argument>ifi_imcasts</argument>)</argument_list></macro>
<macro><name>UPDATE</name><argument_list>(<argument>hc_ipackets</argument>, <argument>ifi_ipackets</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>UPDATE</name></cpp:undef>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>update_hc_counters</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>ifp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ifmibdata</name></name></type> <name>oldmib</name></decl>;</decl_stmt>

<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>ifp</argument>, <argument>&amp;mibif_list</argument>, <argument>link</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>oldmib</name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>mib</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fetch_generic_mib</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldmib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>mibif_reset_hc_timer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_int</name></type> <name>ticks</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ticks</name> <operator>=</operator> <name>mibif_force_hc_update_interval</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mibif_maxspeed</name> <operator>&lt;=</operator> <call><name>IF_Mbps</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ticks</name> <operator>=</operator> <literal type="number">3000</literal> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mibif_maxspeed</name> <operator>&lt;=</operator> <call><name>IF_Mbps</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ticks</name> <operator>=</operator> <literal type="number">300</literal> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mibif_maxspeed</name> <operator>&lt;</operator> <call><name>IF_Mbps</name><argument_list>(<argument><expr><literal type="number">622</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ticks</name> <operator>=</operator> <literal type="number">40</literal> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mibif_maxspeed</name> <operator>&lt;=</operator> <call><name>IF_Mbps</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ticks</name> <operator>=</operator> <literal type="number">20</literal> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ticks</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ticks</name> <operator>==</operator> <name>mibif_hc_update_interval</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hc_update_timer</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>timer_stop</name><argument_list>(<argument><expr><name>hc_update_timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hc_update_timer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>update_hc_counters</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hc_update_timer</name> <operator>=</operator> <call><name>timer_start_repeat</name><argument_list>(<argument><expr><name>ticks</name></expr></argument>, <argument><expr><name>ticks</name></expr></argument>,
<argument><expr><name>update_hc_counters</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>module</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"timer_start(%u): %m"</literal></expr></argument>, <argument><expr><name>ticks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mibif_hc_update_interval</name> <operator>=</operator> <name>ticks</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>mibif_restart_mibII_poll_timer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mibII_poll_timer</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>timer_stop</name><argument_list>(<argument><expr><name>mibII_poll_timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mibII_poll_timer</name> <operator>=</operator> <call><name>timer_start_repeat</name><argument_list>(<argument><expr><name>mibII_poll_ticks</name> <operator>*</operator> <literal type="number">10</literal></expr></argument>,
<argument><expr><name>mibII_poll_ticks</name> <operator>*</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>mibII_idle</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>module</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"timer_start(%u): %m"</literal></expr></argument>, <argument><expr><name>mibII_poll_ticks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>mib_fetch_ifmib</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>ifp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>kmib</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>name</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>kmiblen</name> <init>= <expr><call><name>nitems</name><argument_list>(<argument><expr><name>kmib</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>newmib</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ifmibdata</name></name></type> <name>oldmib</name> <init>= <expr><name><name>ifp</name><operator>-&gt;</operator><name>mib</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ifreq</name></name></type> <name>irr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>alias_maxlen</name> <init>= <expr><name>MIBIF_ALIAS_SIZE_MAX</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fetch_generic_mib</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldmib</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name><name>ifp</name><operator>-&gt;</operator><name>trap_enable</name></name> <operator>&amp;&amp;</operator> <name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_link_state</name></name> <operator>!=</operator>
<name><name>oldmib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_link_state</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_link_state</name></name> <operator>==</operator> <name>LINK_STATE_DOWN</name> <operator>||</operator>
<name><name>oldmib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_link_state</name></name> <operator>==</operator> <name>LINK_STATE_DOWN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>link_trap</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_link_state</name></name> <operator>==</operator>
<name>LINK_STATE_UP</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>MIBIF_HIGHSPEED</name> <operator>|</operator> <name>MIBIF_VERYHIGHSPEED</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_baudrate</name></name> <operator>&gt;</operator> <literal type="number">20000000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>MIBIF_HIGHSPEED</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_baudrate</name></name> <operator>&gt;</operator> <literal type="number">650000000</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>MIBIF_VERYHIGHSPEED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_baudrate</name></name> <operator>&gt;</operator> <name>mibif_maxspeed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mibif_maxspeed</name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_baudrate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mibif_reset_hc_timer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CTL_NET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>PF_LINK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NETLINK_GENERIC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>IFMIB_IFDATA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>sysindex</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>IFDATA_LINKSPECIFIC</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sysctl</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>nitems</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"sysctl linkmib estimate (%s): %m"</literal></expr></argument>,
<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ifp</name><operator>-&gt;</operator><name>specmib</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>specmib</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>specmiblen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ifp</name><operator>-&gt;</operator><name>specmib</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>specmib</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>specmiblen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ifp</name><operator>-&gt;</operator><name>specmiblen</name></name> <operator>!=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newmib</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>specmib</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>specmib</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>specmiblen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>specmib</name></name> <operator>=</operator> <name>newmib</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>specmiblen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sysctl</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>nitems</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>specmib</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"sysctl linkmib (%s): %m"</literal></expr></argument>, <argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ifp</name><operator>-&gt;</operator><name>specmib</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>specmib</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>specmiblen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<label><name>out</name>:</label>






<if_stmt><if>if <condition>(<expr><name><name>kmib</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>sysctlnametomib</name><argument_list>(<argument><expr><literal type="string">"net.ifdescr_maxlen"</literal></expr></argument>, <argument><expr><name>kmib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kmiblen</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>kmib</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"sysctlnametomib net.ifdescr_maxlen: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>alias_maxlen</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>kmib</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>sysctl</name><argument_list>(<argument><expr><name>kmib</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>alias_maxlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>alias_maxlen</name> <operator>=</operator> <name>MIBIF_ALIAS_SIZE_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"sysctl net.ifdescr_maxlen: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>alias_maxlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>alias_maxlen</name> <operator>=</operator> <name>MIBIF_ALIAS_SIZE_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ifp</name><operator>-&gt;</operator><name>alias</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>alias_maxlen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"malloc(%d) failed: %m"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>alias_maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fin</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>irr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>irr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>irr</name><operator>.</operator><name>ifr_buffer</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>alias</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>irr</name><operator>.</operator><name>ifr_buffer</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>alias_maxlen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>mib_netsock</name></expr></argument>, <argument><expr><name>SIOCGIFDESCR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>irr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>alias</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOMSG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"SIOCGIFDESCR (%s): %m"</literal></expr></argument>, <argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>irr</name><operator>.</operator><name>ifr_buffer</name><operator>.</operator><name>buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>alias</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"SIOCGIFDESCR (%s): too long (%zu)"</literal></expr></argument>,
<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>irr</name><operator>.</operator><name>ifr_buffer</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>alias_size</name></name> <operator>=</operator> <call><name>strnlen</name><argument_list>(<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><name>alias_maxlen</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ifp</name><operator>-&gt;</operator><name>alias_size</name></name> <operator>&gt;</operator> <name>MIBIF_ALIAS_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>alias_size</name></name> <operator>=</operator> <name>MIBIF_ALIAS_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ifp</name><operator>-&gt;</operator><name>alias_size</name></name> <operator>&lt;</operator> <name>alias_maxlen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>alias</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>alias_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<label><name>fin</name>:</label>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>mibtick</name></name> <operator>=</operator> <call><name>get_ticks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name><name>struct</name> <name>mibifa</name></name> <modifier>*</modifier></type>
<name>mib_first_ififa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>ifp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mibifa</name></name> <modifier>*</modifier></type><name>ifa</name></decl>;</decl_stmt>

<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>ifa</argument>, <argument>&amp;mibifa_list</argument>, <argument>link</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>ifp</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <name><name>ifa</name><operator>-&gt;</operator><name>ifindex</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ifa</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>mibifa</name></name> <modifier>*</modifier></type>
<name>mib_next_ififa</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mibifa</name></name> <modifier>*</modifier></type><name>ifa0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mibifa</name></name> <modifier>*</modifier></type><name>ifa</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ifa</name> <operator>=</operator> <name>ifa0</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>ifa</name> <operator>=</operator> <call><name>TAILQ_NEXT</name><argument_list>(<argument><expr><name>ifa</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>ifa</name><operator>-&gt;</operator><name>ifindex</name></name> <operator>==</operator> <name><name>ifa0</name><operator>-&gt;</operator><name>ifindex</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ifa</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name><name>struct</name> <name>mibifa</name></name> <modifier>*</modifier></type>
<name>alloc_ifa</name><parameter_list>(<parameter><decl><type><name>u_int</name></type> <name>ifindex</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mibifa</name></name> <modifier>*</modifier></type><name>ifa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ha</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ifa</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>mibifa</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"ifa: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ifa</name><operator>-&gt;</operator><name>inaddr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifindex</name></name> <operator>=</operator> <name>ifindex</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ha</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>inaddr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifa</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifa</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>subs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ha</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifa</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>subs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ha</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifa</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>subs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ha</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifa</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>subs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ha</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ifa</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifa</name><operator>-&gt;</operator><name>inbcast</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifa</name><operator>-&gt;</operator><name>inmask</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_OBJECT_OID</name><argument_list>(<argument><expr><name>ifa</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mibifa_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ifa</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>destroy_ifa</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mibifa</name></name> <modifier>*</modifier></type><name>ifa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mibifa_list</name></expr></argument>, <argument><expr><name>ifa</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ifa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>mib_extract_addrs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>addrs</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>RTAX_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>addrs</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>info</name></expr>;</expr_stmt>
<expr_stmt><expr><name>info</name> <operator>+=</operator> <call><name>roundup</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><operator>-&gt;</operator><name>sa_len</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>out</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_physaddr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>ifp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr_dl</name></name> <modifier>*</modifier></type><name>sdl</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mibrcvaddr</name></name> <modifier>*</modifier></type><name>rcv</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sdl</name><operator>-&gt;</operator><name>sdl_alen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ifp</name><operator>-&gt;</operator><name>physaddrlen</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rcv</name> <operator>=</operator> <call><name>mib_find_rcvaddr</name><argument_list>(<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>physaddr</name></name></expr></argument>,
<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>physaddrlen</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mib_rcvaddr_delete</name><argument_list>(<argument><expr><name>rcv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>physaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>physaddr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>physaddrlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ifp</name><operator>-&gt;</operator><name>physaddrlen</name></name> <operator>!=</operator> <name><name>sdl</name><operator>-&gt;</operator><name>sdl_alen</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ifp</name><operator>-&gt;</operator><name>physaddrlen</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rcv</name> <operator>=</operator> <call><name>mib_find_rcvaddr</name><argument_list>(<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>physaddr</name></name></expr></argument>,
<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>physaddrlen</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mib_rcvaddr_delete</name><argument_list>(<argument><expr><name>rcv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>np</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>physaddr</name></name></expr></argument>, <argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>sdl_alen</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>physaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>physaddr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>physaddrlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>physaddr</name></name> <operator>=</operator> <name>np</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>physaddrlen</name></name> <operator>=</operator> <name><name>sdl</name><operator>-&gt;</operator><name>sdl_alen</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>physaddr</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>physaddrlen</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if> <else>else <block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rcv</name> <operator>=</operator> <call><name>mib_find_rcvaddr</name><argument_list>(<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>physaddr</name></name></expr></argument>,
<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>physaddrlen</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mib_rcvaddr_delete</name><argument_list>(<argument><expr><name>rcv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>physaddr</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>physaddrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rcv</name> <operator>=</operator> <call><name>mib_rcvaddr_create</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>, <argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>physaddr</name></name></expr></argument>, <argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>physaddrlen</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rcv</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>MIBRCVADDR_HW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>mibif_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>ifp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>ifp1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mibindexmap</name></name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mibifa</name></name> <modifier>*</modifier></type><name>ifa</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ifa1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mibrcvaddr</name></name> <modifier>*</modifier></type><name>rcv</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rcv1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mibarp</name></name> <modifier>*</modifier></type><name>at</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>at1</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ifp</name><operator>-&gt;</operator><name>xnotify</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>ifp</name><operator>-&gt;</operator><name>xnotify</name></name>)<argument_list>(<argument><expr><name>ifp</name></expr></argument>, <argument><expr><name>MIBIF_NOTIFY_DESTROY</name></expr></argument>, <argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>xnotify_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>mib_ifstack_delete</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>mib_ifstack_delete</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ifp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mibif_list</name></expr></argument>, <argument><expr><name>ifp</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_baudrate</name></name> <operator>==</operator> <name>mibif_maxspeed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mibif_maxspeed</name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_baudrate</name></name></expr>;</expr_stmt>
<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>ifp1</argument>, <argument>&amp;mibif_list</argument>, <argument>link</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>ifp1</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_baudrate</name></name> <operator>&gt;</operator> <name>mibif_maxspeed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mibif_maxspeed</name> <operator>=</operator>
<name><name>ifp1</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_baudrate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mibif_reset_hc_timer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ifp</name><operator>-&gt;</operator><name>alias</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>alias</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>private</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>private</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>physaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>physaddr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>specmib</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>specmib</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>map</argument>, <argument>&amp;mibindexmap_list</argument>, <argument>link</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>mibif</name></name> <operator>==</operator> <name>ifp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>mibif</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>ifa</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mibifa_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ifa</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ifa1</name> <operator>=</operator> <call><name>TAILQ_NEXT</name><argument_list>(<argument><expr><name>ifa</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ifa</name><operator>-&gt;</operator><name>ifindex</name></name> <operator>==</operator> <name><name>ifp</name><operator>-&gt;</operator><name>index</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>destroy_ifa</name><argument_list>(<argument><expr><name>ifa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ifa</name> <operator>=</operator> <name>ifa1</name></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><name>rcv</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mibrcvaddr_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>rcv</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rcv1</name> <operator>=</operator> <call><name>TAILQ_NEXT</name><argument_list>(<argument><expr><name>rcv</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rcv</name><operator>-&gt;</operator><name>ifindex</name></name> <operator>==</operator> <name><name>ifp</name><operator>-&gt;</operator><name>index</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mib_rcvaddr_delete</name><argument_list>(<argument><expr><name>rcv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rcv</name> <operator>=</operator> <name>rcv1</name></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><name>at</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mibarp_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>at</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>at1</name> <operator>=</operator> <call><name>TAILQ_NEXT</name><argument_list>(<argument><expr><name>at</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>subs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>ifp</name><operator>-&gt;</operator><name>index</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mib_arp_delete</name><argument_list>(<argument><expr><name>at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>at</name> <operator>=</operator> <name>at1</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ifp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mib_if_number</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>mib_iftable_last_change</name> <operator>=</operator> <name>this_tick</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type>
<name>mibif_create</name><parameter_list>(<parameter><decl><type><name>u_int</name></type> <name>sysindex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>ifp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mibindexmap</name></name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ifp</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ifp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"%s: %m"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ifp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ifp</name><operator>-&gt;</operator><name>private</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>mibif_private</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"%s: %m"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>private</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>mibif_private</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>sysindex</name></name> <operator>=</operator> <name>sysindex</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>descr</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>descr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>spec_oid</name></name> <operator>=</operator> <name>oid_zeroDotZero</name></expr>;</expr_stmt>

<expr_stmt><expr><name>map</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mib_if_is_dyn</name><argument_list>(<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>map</argument>, <argument>&amp;mibindexmap_list</argument>, <argument>link</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>ifindex</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>mibif</name></name> <operator>=</operator> <name>ifp</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>has_connector</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>trap_enable</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>map</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>next_if_index</name> <operator>&gt;</operator> <literal type="number">0x7fffffff</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"ifindex wrap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>map</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>map</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"ifmap: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>ifindex</name></name> <operator>=</operator> <name>next_if_index</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>sysindex</name></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>sysindex</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>mibif</name></name> <operator>=</operator> <name>ifp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mibindexmap_list</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>counter_disc</name></name> <operator>=</operator> <call><name>get_ticks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>ifindex</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_link_state</name></name> <operator>=</operator> <name>LINK_STATE_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_OBJECT_INT</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mibif_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mib_if_number</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>mib_iftable_last_change</name> <operator>=</operator> <name>this_tick</name></expr>;</expr_stmt>


<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>mib_ifstack_create</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>mib_ifstack_create</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ifp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ifp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>notify_newif</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>ifp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>newifreg</name></name> <modifier>*</modifier></type><name>reg</name></decl>;</decl_stmt>

<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>reg</argument>, <argument>&amp;newifreg_list</argument>, <argument>link</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name><name>reg</name><operator>-&gt;</operator><name>func</name></name>)<argument_list>(<argument><expr><name>ifp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_llbcast</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>ifp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>u_char</name></type> <name><name>ether_bcast</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mibrcvaddr</name></name> <modifier>*</modifier></type><name>rcv</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_flags</name></name> <operator>&amp;</operator> <name>IFF_BROADCAST</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>IFT_ETHER</name></expr>:</case>
<case>case <expr><name>IFT_FDDI</name></expr>:</case>
<case>case <expr><name>IFT_ISO88025</name></expr>:</case>
<case>case <expr><name>IFT_L2VLAN</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>mib_find_rcvaddr</name><argument_list>(<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>ether_bcast</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>rcv</name> <operator>=</operator> <call><name>mib_rcvaddr_create</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>, <argument><expr><name>ether_bcast</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rcv</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>MIBRCVADDR_BCAST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>mib_refresh_iflist</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>ifp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ifp1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_short</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>name</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ifmibdata</name></name></type> <name>mib</name></decl>;</decl_stmt>

<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>ifp</argument>, <argument>&amp;mibif_list</argument>, <argument>link</argument>)</argument_list></macro>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>MIBIF_FOUND</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sysctlbyname</name><argument_list>(<argument><expr><literal type="string">"net.link.generic.system.ifcount"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"ifcount: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CTL_NET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>PF_LINK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NETLINK_GENERIC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>IFMIB_IFDATA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>IFDATA_GENERAL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;=</operator> <name>count</name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mib</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sysctl</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>nitems</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>mib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"ifmib(%u): %m"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ifp</name> <operator>=</operator> <call><name>mib_find_if_sys</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>MIBIF_FOUND</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ifp</name> <operator>=</operator> <call><name>mibif_create</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name><name>mib</name><operator>.</operator><name>ifmd_name</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>MIBIF_FOUND</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>mib_fetch_ifmib</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_llbcast</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>notify_newif</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>




<expr_stmt><expr><name>ifp</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mibif_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ifp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ifp1</name> <operator>=</operator> <call><name>TAILQ_NEXT</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ifp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MIBIF_FOUND</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mibif_free</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ifp</name> <operator>=</operator> <name>ifp1</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>




<function><type><name><name>struct</name> <name>mibifa</name></name> <modifier>*</modifier></type>
<name>mib_find_ifa</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mibifa</name></name> <modifier>*</modifier></type><name>ifa</name></decl>;</decl_stmt>

<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>ifa</argument>, <argument>&amp;mibifa_list</argument>, <argument>link</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>ifa</name><operator>-&gt;</operator><name>inaddr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <name><name>addr</name><operator>.</operator><name>s_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ifa</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>process_arp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rt_msghdr</name></name> <modifier>*</modifier></type><name>rtm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_dl</name></name> <modifier>*</modifier></type><name>sdl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>ifp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mibarp</name></name> <modifier>*</modifier></type><name>at</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>sdl</name><operator>-&gt;</operator><name>sdl_alen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ifp</name> <operator>=</operator> <call><name>mib_find_if_sys</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>sdl_index</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>at</name> <operator>=</operator> <call><name>mib_find_arp</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>, <argument><expr><name><name>sa</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>at</name> <operator>=</operator> <call><name>mib_arp_create</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>, <argument><expr><name><name>sa</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>,
<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>sdl_data</name></name> <operator>+</operator> <name><name>sdl</name><operator>-&gt;</operator><name>sdl_nlen</name></name></expr></argument>, <argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>sdl_alen</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rtm</name><operator>-&gt;</operator><name>rtm_rmx</name><operator>.</operator><name>rmx_expire</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>MIBARP_PERM</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>MIBARP_PERM</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>MIBARP_FOUND</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>handle_rtmsg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rt_msghdr</name></name> <modifier>*</modifier></type><name>rtm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name><name>addrs</name><index>[<expr><name>RTAX_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>if_msghdr</name></name> <modifier>*</modifier></type><name>ifm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ifa_msghdr</name></name></type> <name>ifam</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ifamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ifma_msghdr</name></name> <modifier>*</modifier></type><name>ifmam</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RTM_IFANNOUNCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>if_announcemsghdr</name></name> <modifier>*</modifier></type><name>ifan</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>ifp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_dl</name></name> <modifier>*</modifier></type><name>sdl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>sa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mibifa</name></name> <modifier>*</modifier></type><name>ifa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mibrcvaddr</name></name> <modifier>*</modifier></type><name>rcv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rtm</name><operator>-&gt;</operator><name>rtm_version</name></name> <operator>!=</operator> <name>RTM_VERSION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"Bogus RTM version %u"</literal></expr></argument>, <argument><expr><name><name>rtm</name><operator>-&gt;</operator><name>rtm_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>rtm</name><operator>-&gt;</operator><name>rtm_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>RTM_NEWADDR</name></expr>:</case>
<expr_stmt><expr><name>ifamp</name> <operator>=</operator> <operator>(</operator>struct <name>ifa_msghdr</name> <operator>*</operator><operator>)</operator><name>rtm</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ifam</name></expr></argument>, <argument><expr><name>ifamp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ifam</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mib_extract_addrs</name><argument_list>(<argument><expr><name><name>ifam</name><operator>.</operator><name>ifam_addrs</name></name></expr></argument>, <argument><expr><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>ifamp</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>addrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>addrs</name><index>[<expr><name>RTAX_IFA</name></expr>]</index></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>addrs</name><index>[<expr><name>RTAX_NETMASK</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sa</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>addrs</name><index>[<expr><name>RTAX_IFA</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ifa</name> <operator>=</operator> <call><name>mib_find_ifa</name><argument_list>(<argument><expr><name><name>sa</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ifp</name> <operator>=</operator> <call><name>mib_find_if_sys</name><argument_list>(<argument><expr><name><name>ifam</name><operator>.</operator><name>ifam_index</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"RTM_NEWADDR for unknown "</literal>
<literal type="string">"interface %u"</literal></expr></argument>, <argument><expr><name><name>ifam</name><operator>.</operator><name>ifam_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ifa</name> <operator>=</operator> <call><name>alloc_ifa</name><argument_list>(<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>sa</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sa</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>addrs</name><index>[<expr><name>RTAX_NETMASK</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifa</name><operator>-&gt;</operator><name>inmask</name></name> <operator>=</operator> <name><name>sa</name><operator>-&gt;</operator><name>sin_addr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>addrs</name><index>[<expr><name>RTAX_BRD</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sa</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>addrs</name><index>[<expr><name>RTAX_BRD</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifa</name><operator>-&gt;</operator><name>inbcast</name></name> <operator>=</operator> <name><name>sa</name><operator>-&gt;</operator><name>sin_addr</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ifa</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>MIBIFA_FOUND</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>RTM_DELADDR</name></expr>:</case>
<expr_stmt><expr><name>ifamp</name> <operator>=</operator> <operator>(</operator>struct <name>ifa_msghdr</name> <operator>*</operator><operator>)</operator><name>rtm</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ifam</name></expr></argument>, <argument><expr><name>ifamp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ifam</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mib_extract_addrs</name><argument_list>(<argument><expr><name><name>ifam</name><operator>.</operator><name>ifam_addrs</name></name></expr></argument>, <argument><expr><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>ifamp</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>addrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>addrs</name><index>[<expr><name>RTAX_IFA</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sa</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>addrs</name><index>[<expr><name>RTAX_IFA</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ifa</name> <operator>=</operator> <call><name>mib_find_ifa</name><argument_list>(<argument><expr><name><name>sa</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ifa</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>MIBIFA_FOUND</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ifa</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MIBIFA_DESTROYED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>destroy_ifa</name><argument_list>(<argument><expr><name>ifa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>RTM_NEWMADDR</name></expr>:</case>
<expr_stmt><expr><name>ifmam</name> <operator>=</operator> <operator>(</operator>struct <name>ifma_msghdr</name> <operator>*</operator><operator>)</operator><name>rtm</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mib_extract_addrs</name><argument_list>(<argument><expr><name><name>ifmam</name><operator>-&gt;</operator><name>ifmam_addrs</name></name></expr></argument>, <argument><expr><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>ifmam</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>addrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>addrs</name><index>[<expr><name>RTAX_IFA</name></expr>]</index></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>addrs</name><index>[<expr><name>RTAX_IFA</name></expr>]</index></name><operator>-&gt;</operator><name>sa_family</name> <operator>!=</operator> <name>AF_LINK</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sdl</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_dl</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>addrs</name><index>[<expr><name>RTAX_IFA</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rcv</name> <operator>=</operator> <call><name>mib_find_rcvaddr</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>sdl_index</name></name></expr></argument>,
<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>sdl_data</name></name> <operator>+</operator> <name><name>sdl</name><operator>-&gt;</operator><name>sdl_nlen</name></name></expr></argument>, <argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>sdl_alen</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ifp</name> <operator>=</operator> <call><name>mib_find_if_sys</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>sdl_index</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"RTM_NEWMADDR for unknown "</literal>
<literal type="string">"interface %u"</literal></expr></argument>, <argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>sdl_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rcv</name> <operator>=</operator> <call><name>mib_rcvaddr_create</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>,
<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>sdl_data</name></name> <operator>+</operator> <name><name>sdl</name><operator>-&gt;</operator><name>sdl_nlen</name></name></expr></argument>, <argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>sdl_alen</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rcv</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>MIBRCVADDR_VOLATILE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rcv</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>MIBRCVADDR_FOUND</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>RTM_DELMADDR</name></expr>:</case>
<expr_stmt><expr><name>ifmam</name> <operator>=</operator> <operator>(</operator>struct <name>ifma_msghdr</name> <operator>*</operator><operator>)</operator><name>rtm</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mib_extract_addrs</name><argument_list>(<argument><expr><name><name>ifmam</name><operator>-&gt;</operator><name>ifmam_addrs</name></name></expr></argument>, <argument><expr><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>ifmam</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>addrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>addrs</name><index>[<expr><name>RTAX_IFA</name></expr>]</index></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>addrs</name><index>[<expr><name>RTAX_IFA</name></expr>]</index></name><operator>-&gt;</operator><name>sa_family</name> <operator>!=</operator> <name>AF_LINK</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sdl</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_dl</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>addrs</name><index>[<expr><name>RTAX_IFA</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rcv</name> <operator>=</operator> <call><name>mib_find_rcvaddr</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>sdl_index</name></name></expr></argument>,
<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>sdl_data</name></name> <operator>+</operator> <name><name>sdl</name><operator>-&gt;</operator><name>sdl_nlen</name></name></expr></argument>, <argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>sdl_alen</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mib_rcvaddr_delete</name><argument_list>(<argument><expr><name>rcv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>RTM_IFINFO</name></expr>:</case>
<expr_stmt><expr><name>ifm</name> <operator>=</operator> <operator>(</operator>struct <name>if_msghdr</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>rtm</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mib_extract_addrs</name><argument_list>(<argument><expr><name><name>ifm</name><operator>-&gt;</operator><name>ifm_addrs</name></name></expr></argument>, <argument><expr><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>ifm</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>addrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ifp</name> <operator>=</operator> <call><name>mib_find_if_sys</name><argument_list>(<argument><expr><name><name>ifm</name><operator>-&gt;</operator><name>ifm_index</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>addrs</name><index>[<expr><name>RTAX_IFP</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name><name>addrs</name><index>[<expr><name>RTAX_IFP</name></expr>]</index></name><operator>-&gt;</operator><name>sa_family</name> <operator>==</operator> <name>AF_LINK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sdl</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_dl</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>addrs</name><index>[<expr><name>RTAX_IFP</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>sdl</name><operator>-&gt;</operator><name>sdl_data</name></name> <operator>+</operator> <name><name>sdl</name><operator>-&gt;</operator><name>sdl_nlen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_physaddr</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>, <argument><expr><name>sdl</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>mib_fetch_ifmib</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RTM_IFANNOUNCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>RTM_IFANNOUNCE</name></expr>:</case>
<expr_stmt><expr><name>ifan</name> <operator>=</operator> <operator>(</operator>struct <name>if_announcemsghdr</name> <operator>*</operator><operator>)</operator><name>rtm</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ifp</name> <operator>=</operator> <call><name>mib_find_if_sys</name><argument_list>(<argument><expr><name><name>ifan</name><operator>-&gt;</operator><name>ifan_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>ifan</name><operator>-&gt;</operator><name>ifan_what</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>IFAN_ARRIVAL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>ifp</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ifp</name> <operator>=</operator> <call><name>mibif_create</name><argument_list>(<argument><expr><name><name>ifan</name><operator>-&gt;</operator><name>ifan_index</name></name></expr></argument>,
<argument><expr><name><name>ifan</name><operator>-&gt;</operator><name>ifan_name</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>mib_fetch_ifmib</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_llbcast</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>notify_newif</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>IFAN_DEPARTURE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>ifp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mibif_free</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>RTM_GET</name></expr>:</case>
<case>case <expr><name>RTM_ADD</name></expr>:</case>
<expr_stmt><expr><call><name>mib_extract_addrs</name><argument_list>(<argument><expr><name><name>rtm</name><operator>-&gt;</operator><name>rtm_addrs</name></name></expr></argument>, <argument><expr><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>rtm</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>addrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rtm</name><operator>-&gt;</operator><name>rtm_flags</name></name> <operator>&amp;</operator> <name>RTF_LLINFO</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>addrs</name><index>[<expr><name>RTAX_DST</name></expr>]</index></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>addrs</name><index>[<expr><name>RTAX_GATEWAY</name></expr>]</index></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>addrs</name><index>[<expr><name>RTAX_DST</name></expr>]</index></name><operator>-&gt;</operator><name>sa_family</name> <operator>!=</operator> <name>AF_INET</name> <operator>||</operator>
<name><name>addrs</name><index>[<expr><name>RTAX_GATEWAY</name></expr>]</index></name><operator>-&gt;</operator><name>sa_family</name> <operator>!=</operator> <name>AF_LINK</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>process_arp</name><argument_list>(<argument><expr><name>rtm</name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr_dl</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>addrs</name><index>[<expr><name>RTAX_GATEWAY</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>addrs</name><index>[<expr><name>RTAX_DST</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rtm</name><operator>-&gt;</operator><name>rtm_errno</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>rtm</name><operator>-&gt;</operator><name>rtm_flags</name></name> <operator>&amp;</operator> <name>RTF_UP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mib_sroute_process</name><argument_list>(<argument><expr><name>rtm</name></expr></argument>, <argument><expr><name><name>addrs</name><index>[<expr><name>RTAX_GATEWAY</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>addrs</name><index>[<expr><name>RTAX_DST</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>addrs</name><index>[<expr><name>RTAX_NETMASK</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>RTM_DELETE</name></expr>:</case>
<expr_stmt><expr><call><name>mib_extract_addrs</name><argument_list>(<argument><expr><name><name>rtm</name><operator>-&gt;</operator><name>rtm_addrs</name></name></expr></argument>, <argument><expr><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>rtm</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>addrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rtm</name><operator>-&gt;</operator><name>rtm_errno</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>rtm</name><operator>-&gt;</operator><name>rtm_flags</name></name> <operator>&amp;</operator> <name>RTF_UP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mib_sroute_process</name><argument_list>(<argument><expr><name>rtm</name></expr></argument>, <argument><expr><name><name>addrs</name><index>[<expr><name>RTAX_GATEWAY</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>addrs</name><index>[<expr><name>RTAX_DST</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>addrs</name><index>[<expr><name>RTAX_NETMASK</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>mib_send_rtmsg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rt_msghdr</name></name> <modifier>*</modifier></type><name>rtm</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>gw</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rt_msghdr</name></name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>sent</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rtm</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>SA_SIZE</name><argument_list>(<argument><expr><name>gw</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>SA_SIZE</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>SA_SIZE</name><argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>msg</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"%s: %m"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>msg</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>rtm_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>rtm_version</name></name> <operator>=</operator> <name>RTM_VERSION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>rtm_addrs</name></name> <operator>=</operator> <name>RTA_DST</name> <operator>|</operator> <name>RTA_GATEWAY</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>SA_SIZE</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>+=</operator> <call><name>SA_SIZE</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>gw</name></expr></argument>, <argument><expr><call><name>SA_SIZE</name><argument_list>(<argument><expr><name>gw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>+=</operator> <call><name>SA_SIZE</name><argument_list>(<argument><expr><name>gw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><call><name>SA_SIZE</name><argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>+=</operator> <call><name>SA_SIZE</name><argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>rtm_addrs</name></name> <operator>|=</operator> <name>RTA_NETMASK</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>rtm_msglen</name></name> <operator>=</operator> <name>cp</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>msg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>rtm_type</name></name> <operator>=</operator> <name>RTM_GET</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sent</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name>route</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>rtm_msglen</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"%s: write: %m"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sent</name> <operator>!=</operator> <name><name>msg</name><operator>-&gt;</operator><name>rtm_msglen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"%s: short write"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>u_char</name> <modifier>*</modifier></type>
<name>mib_fetch_rtab</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>af</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>lenp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>name</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>newbuf</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CTL_NET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>PF_ROUTE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>af</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>sysctl</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>nitems</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>lenp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"sysctl estimate (%d,%d,%d,%d,%d,%d): %m"</literal></expr></argument>,
<argument><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>name</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>name</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>name</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>lenp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newbuf</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>*</operator><name>lenp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"sysctl buffer: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>newbuf</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sysctl</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>nitems</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lenp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOMEM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"sysctl get: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>+=</operator> <operator>*</operator><name>lenp</name> <operator>/</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>buf</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>update_ifa_info</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rt_msghdr</name></name> <modifier>*</modifier></type><name>rtm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mibifa</name></name> <modifier>*</modifier></type><name>ifa</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ifa1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mibrcvaddr</name></name> <modifier>*</modifier></type><name>rcv</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rcv1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>needed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>infos</name><index>[]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NET_RT_IFLIST</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NET_RT_IFMALIST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><name>AF_LINK</name></expr>, <expr><name>NET_RT_IFMALIST</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>i</name></decl>;</decl_stmt>

<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>ifa</argument>, <argument>&amp;mibifa_list</argument>, <argument>link</argument>)</argument_list></macro>
<expr_stmt><expr><name><name>ifa</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>MIBIFA_FOUND</name></expr>;</expr_stmt>
<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>rcv</argument>, <argument>&amp;mibrcvaddr_list</argument>, <argument>link</argument>)</argument_list></macro>
<expr_stmt><expr><name><name>rcv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>MIBRCVADDR_FOUND</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>infos</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>infos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>mib_fetch_rtab</name><argument_list>(<argument><expr><name><name>infos</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>infos</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>infos</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>needed</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>next</name> <operator>&lt;</operator> <name>buf</name> <operator>+</operator> <name>needed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rtm</name> <operator>=</operator> <operator>(</operator>struct <name>rt_msghdr</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>+=</operator> <name><name>rtm</name><operator>-&gt;</operator><name>rtm_msglen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>handle_rtmsg</name><argument_list>(<argument><expr><name>rtm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>






<expr_stmt><expr><name>ifa</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mibifa_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ifa</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ifa1</name> <operator>=</operator> <call><name>TAILQ_NEXT</name><argument_list>(<argument><expr><name>ifa</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ifa</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MIBIFA_FOUND</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>destroy_ifa</name><argument_list>(<argument><expr><name>ifa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ifa</name> <operator>=</operator> <name>ifa1</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>rcv</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mibrcvaddr_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>rcv</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rcv1</name> <operator>=</operator> <call><name>TAILQ_NEXT</name><argument_list>(<argument><expr><name>rcv</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>rcv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>MIBRCVADDR_FOUND</name> <operator>|</operator> <name>MIBRCVADDR_BCAST</name> <operator>|</operator>
<name>MIBRCVADDR_HW</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mib_rcvaddr_delete</name><argument_list>(<argument><expr><name>rcv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rcv</name> <operator>=</operator> <name>rcv1</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>mib_arp_update</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mibarp</name></name> <modifier>*</modifier></type><name>at</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>at1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>needed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rt_msghdr</name></name> <modifier>*</modifier></type><name>rtm</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>in_update_arp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>in_update_arp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>at</argument>, <argument>&amp;mibarp_list</argument>, <argument>link</argument>)</argument_list></macro>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>MIBARP_FOUND</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>mib_fetch_rtab</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>NET_RT_FLAGS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>needed</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>in_update_arp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>next</name> <operator>&lt;</operator> <name>buf</name> <operator>+</operator> <name>needed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rtm</name> <operator>=</operator> <operator>(</operator>struct <name>rt_msghdr</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>+=</operator> <name><name>rtm</name><operator>-&gt;</operator><name>rtm_msglen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>handle_rtmsg</name><argument_list>(<argument><expr><name>rtm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>at</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mibarp_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>at</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>at1</name> <operator>=</operator> <call><name>TAILQ_NEXT</name><argument_list>(<argument><expr><name>at</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>at</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MIBARP_FOUND</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mib_arp_delete</name><argument_list>(<argument><expr><name>at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>at</name> <operator>=</operator> <name>at1</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>mibarpticks</name> <operator>=</operator> <call><name>get_ticks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in_update_arp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>route_input</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>udata</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rt_msghdr</name></name> <modifier>*</modifier></type><name>rtm</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"read(rt_socket)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"EOF on rt_socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rtm</name> <operator>=</operator> <operator>(</operator>struct <name>rt_msghdr</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>n</name> <operator>!=</operator> <name><name>rtm</name><operator>-&gt;</operator><name>rtm_msglen</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"n=%zu, rtm_msglen=%u"</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><name><name>rtm</name><operator>-&gt;</operator><name>rtm_msglen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>handle_rtmsg</name><argument_list>(<argument><expr><name>rtm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>siocaifaddr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ifname</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>mask</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>bcast</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ifaliasreq</name></name></type> <name>addreq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>sa</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addreq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addreq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>addreq</name><operator>.</operator><name>ifra_name</name></name></expr></argument>, <argument><expr><name>ifname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>addreq</name><operator>.</operator><name>ifra_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sa</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>addreq</name><operator>.</operator><name>ifra_addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>-&gt;</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>-&gt;</operator><name>sin_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sa</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>-&gt;</operator><name>sin_addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sa</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>addreq</name><operator>.</operator><name>ifra_mask</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>-&gt;</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>-&gt;</operator><name>sin_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sa</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>-&gt;</operator><name>sin_addr</name></name> <operator>=</operator> <name>mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sa</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>addreq</name><operator>.</operator><name>ifra_broadaddr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>-&gt;</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>-&gt;</operator><name>sin_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sa</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>-&gt;</operator><name>sin_addr</name></name> <operator>=</operator> <name>bcast</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>ioctl</name><argument_list>(<argument><expr><name>mib_netsock</name></expr></argument>, <argument><expr><name>SIOCAIFADDR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addreq</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>siocdifaddr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ifname</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ifreq</name></name></type> <name>delreq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>sa</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>delreq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>delreq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>delreq</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><name>ifname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>delreq</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sa</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>delreq</name><operator>.</operator><name>ifr_addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>-&gt;</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>-&gt;</operator><name>sin_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sa</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>-&gt;</operator><name>sin_addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>ioctl</name><argument_list>(<argument><expr><name>mib_netsock</name></expr></argument>, <argument><expr><name>SIOCDIFADDR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delreq</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>verify_ifa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mibifa</name></name> <modifier>*</modifier></type><name>ifa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ifreq</name></name></type> <name>req</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>sa</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sa</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>req</name><operator>.</operator><name>ifr_addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>-&gt;</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>-&gt;</operator><name>sin_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sa</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>-&gt;</operator><name>sin_addr</name></name> <operator>=</operator> <name><name>ifa</name><operator>-&gt;</operator><name>inaddr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>mib_netsock</name></expr></argument>, <argument><expr><name>SIOCGIFADDR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ifa</name><operator>-&gt;</operator><name>inaddr</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <name><name>sa</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"%s: address mismatch"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>mib_netsock</name></expr></argument>, <argument><expr><name>SIOCGIFNETMASK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ifa</name><operator>-&gt;</operator><name>inmask</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <name><name>sa</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"%s: netmask mismatch"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>mib_undestroy_ifa</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mibifa</name></name> <modifier>*</modifier></type><name>ifa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>ifp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ifp</name> <operator>=</operator> <call><name>mib_find_if</name><argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifindex</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>siocaifaddr</name><argument_list>(<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>inaddr</name></name></expr></argument>, <argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>inmask</name></name></expr></argument>, <argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>inbcast</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ifa</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>MIBIFA_DESTROYED</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>mib_destroy_ifa</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mibifa</name></name> <modifier>*</modifier></type><name>ifa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>ifp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ifp</name> <operator>=</operator> <call><name>mib_find_if</name><argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifindex</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mib_iflist_bad</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>siocdifaddr</name><argument_list>(<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>inaddr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"SIOCDIFADDR: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mib_iflist_bad</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ifa</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>MIBIFA_DESTROYED</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>mib_unmodify_ifa</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mibifa</name></name> <modifier>*</modifier></type><name>ifa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>ifp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ifp</name> <operator>=</operator> <call><name>mib_find_if</name><argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifindex</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mib_iflist_bad</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>siocaifaddr</name><argument_list>(<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>inaddr</name></name></expr></argument>, <argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>inmask</name></name></expr></argument>, <argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>inbcast</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mib_iflist_bad</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>mib_modify_ifa</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mibifa</name></name> <modifier>*</modifier></type><name>ifa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>ifp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ifp</name> <operator>=</operator> <call><name>mib_find_if</name><argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifindex</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mib_iflist_bad</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>siocaifaddr</name><argument_list>(<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>inaddr</name></name></expr></argument>, <argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>inmask</name></name></expr></argument>, <argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>inbcast</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mib_iflist_bad</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>verify_ifa</name><argument_list>(<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>ifa</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mib_iflist_bad</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>mib_uncreate_ifa</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mibifa</name></name> <modifier>*</modifier></type><name>ifa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>ifp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ifp</name> <operator>=</operator> <call><name>mib_find_if</name><argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifindex</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mib_iflist_bad</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>siocdifaddr</name><argument_list>(<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>inaddr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mib_iflist_bad</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>destroy_ifa</name><argument_list>(<argument><expr><name>ifa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name><name>struct</name> <name>mibifa</name></name> <modifier>*</modifier></type>
<name>mib_create_ifa</name><parameter_list>(<parameter><decl><type><name>u_int</name></type> <name>ifindex</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>mask</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>bcast</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>ifp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mibifa</name></name> <modifier>*</modifier></type><name>ifa</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ifp</name> <operator>=</operator> <call><name>mib_find_if</name><argument_list>(<argument><expr><name>ifindex</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ifa</name> <operator>=</operator> <call><name>alloc_ifa</name><argument_list>(<argument><expr><name>ifindex</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ifa</name><operator>-&gt;</operator><name>inmask</name></name> <operator>=</operator> <name>mask</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifa</name><operator>-&gt;</operator><name>inbcast</name></name> <operator>=</operator> <name>bcast</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>siocaifaddr</name><argument_list>(<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>inaddr</name></name></expr></argument>, <argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>inmask</name></name></expr></argument>, <argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>inbcast</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"%s: %m"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>destroy_ifa</name><argument_list>(<argument><expr><name>ifa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>verify_ifa</name><argument_list>(<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>ifa</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>destroy_ifa</name><argument_list>(<argument><expr><name>ifa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ifa</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_cloners</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>if_clonereq</name></name></type> <name>req</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>mib_netsock</name></expr></argument>, <argument><expr><name>SIOCIFGCLONERS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"get cloners: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>ifcr_total</name></name> <operator>*</operator> <name>IFNAMSIZ</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"%m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>req</name><operator>.</operator><name>ifcr_count</name></name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>ifcr_total</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>.</operator><name>ifcr_buffer</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>mib_netsock</name></expr></argument>, <argument><expr><name>SIOCIFGCLONERS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"get cloners: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>buf</name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>req</name><operator>.</operator><name>ifcr_total</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>cp</name> <operator>+=</operator> <name>IFNAMSIZ</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mib_if_set_dyn</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>mibII_idle</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mibifa</name></name> <modifier>*</modifier></type><name>ifa</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mib_iflist_bad</name></expr>)</condition> <block>{<block_content>
<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>ifa</argument>, <argument>&amp;mibifa_list</argument>, <argument>link</argument>)</argument_list></macro>
<expr_stmt><expr><name><name>ifa</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>MIBIFA_DESTROYED</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>get_cloners</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mib_refresh_iflist</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_ifa_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mib_arp_update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mib_iflist_bad</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mib_arp_update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>mibII_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>route_fd</name> <operator>=</operator> <call><name>fd_select</name><argument_list>(<argument><expr><name>route</name></expr></argument>, <argument><expr><name>route_input</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>module</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"fd_select(route): %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>mib_refresh_iflist</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_ifa_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mib_arp_update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>mib_fetch_route</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mib_iftable_last_change</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mib_ifstack_last_change</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ifmib_reg</name> <operator>=</operator> <call><name>or_register</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid_ifMIB</name></expr></argument>,
<argument><expr><literal type="string">"The MIB module to describe generic objects for network interface"</literal>
<literal type="string">" sub-layers."</literal></expr></argument>, <argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ipmib_reg</name> <operator>=</operator> <call><name>or_register</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid_ipMIB</name></expr></argument>,
<argument><expr><literal type="string">"The MIB module for managing IP and ICMP implementations, but "</literal>
<literal type="string">"excluding their management of IP routes."</literal></expr></argument>, <argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tcpmib_reg</name> <operator>=</operator> <call><name>or_register</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid_tcpMIB</name></expr></argument>,
<argument><expr><literal type="string">"The MIB module for managing TCP implementations."</literal></expr></argument>, <argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>udpmib_reg</name> <operator>=</operator> <call><name>or_register</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid_udpMIB</name></expr></argument>,
<argument><expr><literal type="string">"The MIB module for managing UDP implementations."</literal></expr></argument>, <argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ipForward_reg</name> <operator>=</operator> <call><name>or_register</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid_ipForward</name></expr></argument>,
<argument><expr><literal type="string">"The MIB module for the display of CIDR multipath IP Routes."</literal></expr></argument>,
<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mibII_poll_timer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mibII_poll_ticks</name> <operator>=</operator> <name>MIBII_POLL_TICKS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mibif_restart_mibII_poll_timer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>mibII_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lmodule</name></name> <modifier>*</modifier></type><name>mod</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>argc</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><name><name>argv</name><index>[]</index></name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>module</name> <operator>=</operator> <name>mod</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>clockinfo</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sysctlbyname</name><argument_list>(<argument><expr><literal type="string">"kern.clockrate"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>clockinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"kern.clockrate: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>clockinfo</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"kern.clockrate: wrong size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>route</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>PF_ROUTE</name></expr></argument>, <argument><expr><name>SOCK_RAW</name></expr></argument>, <argument><expr><name>AF_UNSPEC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"PF_ROUTE: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mib_netsock</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>PF_INET</name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"PF_INET: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name>route</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>shutdown</name><argument_list>(<argument><expr><name>mib_netsock</name></expr></argument>, <argument><expr><name>SHUT_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>get_cloners</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>mibII_fini</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mibII_poll_timer</name> <operator>!=</operator> <name>NULL</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>timer_stop</name><argument_list>(<argument><expr><name>mibII_poll_timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mibII_poll_timer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>route_fd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fd_deselect</name><argument_list>(<argument><expr><name>route_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>route</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name>route</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mib_netsock</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name>mib_netsock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>or_unregister</name><argument_list>(<argument><expr><name>ipForward_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>or_unregister</name><argument_list>(<argument><expr><name>udpmib_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>or_unregister</name><argument_list>(<argument><expr><name>tcpmib_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>or_unregister</name><argument_list>(<argument><expr><name>ipmib_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>or_unregister</name><argument_list>(<argument><expr><name>ifmib_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mibII_loading</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>lmodule</name></name> <modifier>*</modifier></type><name>mod</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>loaded</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>ifp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>loaded</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>ifp</argument>, <argument>&amp;mibif_list</argument>, <argument>link</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>ifp</name><operator>-&gt;</operator><name>xnotify_mod</name></name> <operator>==</operator> <name>mod</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>xnotify_mod</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>xnotify_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>xnotify</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mib_unregister_newif</name><argument_list>(<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>snmp_module</name></name></type> <name>config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snmp_module</name></name></type> <name>config</name> <init>= <expr><block>{
<expr><literal type="string">"This module implements the interface and ip groups."</literal></expr>,
<expr><name>mibII_init</name></expr>,
<expr><name>mibII_fini</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>mibII_start</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>mibII_ctree</name></expr>,
<expr><name>mibII_CTREE_SIZE</name></expr>,
<expr><name>mibII_loading</name></expr>
}</block></expr></init></decl>;</decl_stmt>




<function><type><name>void</name> <modifier>*</modifier></type>
<name>mibif_notify</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>ifp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>lmodule</name></name> <modifier>*</modifier></type><name>mod</name></decl></parameter>,
<parameter><decl><type><name>mibif_notify_f</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>xnotify</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>xnotify_data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>xnotify_mod</name></name> <operator>=</operator> <name>mod</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ifp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>mibif_unnotify</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>ifp</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>xnotify</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>xnotify_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>xnotify_mod</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
