<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bsnmp/snmp_mibII/mibII_interfaces.c">































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mibII.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mibII_oid.h"</cpp:file></cpp:include>




<struct>struct <name>ifchange</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>snmp_dependency</name></name></type> <name>dep</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>u_int</name></type> <name>ifindex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>promisc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>admin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>traps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>rb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rb_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rb_traps</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IFC_PROMISC</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IFC_ADMIN</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IFC_TRAPS</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IFRB_FLAGS</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IFRB_TRAPS</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name></type>
<name>oid_ifTable</name> <init>= <expr><name>OIDX_ifTable</name></expr></init></decl>;</decl_stmt>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>ifchange_func</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier><name>ctx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_dependency</name></name> <modifier>*</modifier></type><name>dep</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>snmp_depop</name></name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ifchange</name></name> <modifier>*</modifier></type><name>ifc</name> <init>= <expr><operator>(</operator>struct <name>ifchange</name> <operator>*</operator><operator>)</operator><name>dep</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>ifp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ifreq</name></name></type> <name>ifr</name></decl>, <decl><type ref="prev"/><name>ifr1</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ifp</name> <operator>=</operator> <call><name>mib_find_if</name><argument_list>(<argument><expr><name><name>ifc</name><operator>-&gt;</operator><name>ifindex</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NO_CREATION</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SNMP_DEPOP_COMMIT</name></expr>:</case>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>mib_netsock</name></expr></argument>, <argument><expr><name>SIOCGIFFLAGS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"GIFFLAGS(%s): %m"</literal></expr></argument>, <argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ifc</name><operator>-&gt;</operator><name>set</name></name> <operator>&amp;</operator> <name>IFC_PROMISC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ifr</name><operator>.</operator><name>ifr_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>IFF_PROMISC</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ifc</name><operator>-&gt;</operator><name>promisc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ifr</name><operator>.</operator><name>ifr_flags</name></name> <operator>|=</operator> <name>IFF_PROMISC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ifc</name><operator>-&gt;</operator><name>rb</name></name> <operator>|=</operator> <name>IFRB_FLAGS</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ifc</name><operator>-&gt;</operator><name>set</name></name> <operator>&amp;</operator> <name>IFC_ADMIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ifr</name><operator>.</operator><name>ifr_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>IFF_UP</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ifc</name><operator>-&gt;</operator><name>admin</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ifr</name><operator>.</operator><name>ifr_flags</name></name> <operator>|=</operator> <name>IFF_UP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ifc</name><operator>-&gt;</operator><name>rb</name></name> <operator>|=</operator> <name>IFRB_FLAGS</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ifc</name><operator>-&gt;</operator><name>rb</name></name> <operator>&amp;</operator> <name>IFRB_FLAGS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>ifr1</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ifr1</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>mib_netsock</name></expr></argument>, <argument><expr><name>SIOCGIFFLAGS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr1</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"GIFFLAGS(%s): %m"</literal></expr></argument>, <argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ifc</name><operator>-&gt;</operator><name>rb_flags</name></name> <operator>=</operator> <name><name>ifr1</name><operator>.</operator><name>ifr_flags</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>mib_netsock</name></expr></argument>, <argument><expr><name>SIOCSIFFLAGS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"SIFFLAGS(%s): %m"</literal></expr></argument>, <argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>mib_fetch_ifmib</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ifc</name><operator>-&gt;</operator><name>set</name></name> <operator>&amp;</operator> <name>IFC_TRAPS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ifc</name><operator>-&gt;</operator><name>rb</name></name> <operator>|=</operator> <name>IFRB_TRAPS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifc</name><operator>-&gt;</operator><name>rb_traps</name></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>trap_enable</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>trap_enable</name></name> <operator>=</operator> <name><name>ifc</name><operator>-&gt;</operator><name>traps</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>SNMP_DEPOP_ROLLBACK</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>ifc</name><operator>-&gt;</operator><name>rb</name></name> <operator>&amp;</operator> <name>IFRB_FLAGS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifr</name><operator>.</operator><name>ifr_flags</name></name> <operator>=</operator> <name><name>ifc</name><operator>-&gt;</operator><name>rb_flags</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>mib_netsock</name></expr></argument>, <argument><expr><name>SIOCSIFFLAGS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"SIFFLAGS(%s): %m"</literal></expr></argument>, <argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_UNDO_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>mib_fetch_ifmib</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ifc</name><operator>-&gt;</operator><name>rb</name></name> <operator>&amp;</operator> <name>IFRB_TRAPS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ifp</name><operator>-&gt;</operator><name>trap_enable</name></name> <operator>=</operator> <name><name>ifc</name><operator>-&gt;</operator><name>rb_traps</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>SNMP_DEPOP_FINISH</name></expr>:</case>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

</block_content>}</block></switch>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>ticks_get_timeval</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>v</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>tv</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">100ULL</literal> <operator>*</operator> <name><name>tv</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>+</operator> <name><name>tv</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>/</operator> <literal type="number">10000ULL</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <name>start_tick</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>v</name> <operator>-</operator> <name>start_tick</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>op_interfaces</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier><name>ctx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
<parameter><decl><type><name>u_int</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>u_int</name> <name>idx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>snmp_op</name></name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SNMP_OP_GETNEXT</name></expr>:</case>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>SNMP_OP_GET</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>SNMP_OP_SET</name></expr>:</case>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOT_WRITEABLE</name><operator>)</operator></expr>;</return>

<case>case <expr><name>SNMP_OP_ROLLBACK</name></expr>:</case>
<case>case <expr><name>SNMP_OP_COMMIT</name></expr>:</case>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LEAF_ifNumber</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name>mib_if_number</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>op_ifentry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
<parameter><decl><type><name>u_int</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>u_int</name> <name>iidx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>snmp_op</name></name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>ifp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ifchange</name></name> <modifier>*</modifier></type><name>ifc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>asn_oid</name></name></type> <name>idx</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SNMP_OP_GETNEXT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ifp</name> <operator>=</operator> <call><name>NEXT_OBJECT_INT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mibif_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>sub</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name></expr>]</index></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_OP_GET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>len</name></name> <operator>-</operator> <name>sub</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ifp</name> <operator>=</operator> <call><name>mib_find_if</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_OP_SET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>len</name></name> <operator>-</operator> <name>sub</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NO_CREATION</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ifp</name> <operator>=</operator> <call><name>mib_find_if</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NO_CREATION</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>LEAF_ifAdminStatus</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOT_WRITEABLE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>idx</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idx</name><operator>.</operator><name>subs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_WRONG_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ifc</name> <operator>=</operator> <operator>(</operator>struct <name>ifchange</name> <operator>*</operator><operator>)</operator><call><name>snmp_dep_lookup</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>oid_ifTable</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ifc</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ifchange_func</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_RES_UNAVAIL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ifc</name><operator>-&gt;</operator><name>ifindex</name></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ifc</name><operator>-&gt;</operator><name>set</name></name> <operator>&amp;</operator> <name>IFC_ADMIN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ifc</name><operator>-&gt;</operator><name>set</name></name> <operator>|=</operator> <name>IFC_ADMIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifc</name><operator>-&gt;</operator><name>admin</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>SNMP_OP_ROLLBACK</name></expr>:</case>
<case>case <expr><name>SNMP_OP_COMMIT</name></expr>:</case>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>ifp</name><operator>-&gt;</operator><name>mibtick</name></name> <operator>&lt;</operator> <name>this_tick</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>mib_fetch_ifmib</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>SNMP_ERR_NOERROR</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LEAF_ifIndex</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifDescr</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>string_get</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>descr</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifType</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_type</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifMtu</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_mtu</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifSpeed</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_baudrate</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifPhysAddress</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>string_get</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>physaddr</name></name></expr></argument>,
<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>physaddrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifAdminStatus</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator>
<ternary><condition><expr><operator>(</operator><name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_flags</name></name> <operator>&amp;</operator> <name>IFF_UP</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifOperStatus</name></expr>:</case>








<if_stmt><if>if <condition>(<expr><name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_flags</name></name> <operator>&amp;</operator> <name>IFF_RUNNING</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_link_state</name></name> <operator>!=</operator> <name>LINK_STATE_UP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifLastChange</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator>
<call><name>ticks_get_timeval</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_lastchange</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifInOctets</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_ibytes</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifInUcastPkts</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_ipackets</name></name> <operator>-</operator>
<name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_imcasts</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifInNUcastPkts</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_imcasts</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifInDiscards</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_iqdrops</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifInErrors</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_ierrors</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifInUnknownProtos</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_noproto</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifOutOctets</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_obytes</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifOutUcastPkts</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_opackets</name></name> <operator>-</operator>
<name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_omcasts</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifOutNUcastPkts</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_omcasts</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifOutDiscards</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_snd_drops</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifOutErrors</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_oerrors</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifOutQLen</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_snd_len</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifSpecific</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>oid</name></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>spec_oid</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>op_ifxtable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
<parameter><decl><type><name>u_int</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>u_int</name> <name>iidx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>snmp_op</name></name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>ifp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ifchange</name></name> <modifier>*</modifier></type><name>ifc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>asn_oid</name></name></type> <name>idx</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SNMP_OP_GETNEXT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ifp</name> <operator>=</operator> <call><name>NEXT_OBJECT_INT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mibif_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>sub</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name></expr>]</index></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_OP_GET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>len</name></name> <operator>-</operator> <name>sub</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ifp</name> <operator>=</operator> <call><name>mib_find_if</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_OP_SET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>len</name></name> <operator>-</operator> <name>sub</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NO_CREATION</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ifp</name> <operator>=</operator> <call><name>mib_find_if</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NO_CREATION</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>idx</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idx</name><operator>.</operator><name>subs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ifc</name> <operator>=</operator> <operator>(</operator>struct <name>ifchange</name> <operator>*</operator><operator>)</operator><call><name>snmp_dep_lookup</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>oid_ifTable</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ifc</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ifchange_func</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_RES_UNAVAIL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ifc</name><operator>-&gt;</operator><name>ifindex</name></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LEAF_ifLinkUpDownTrapEnable</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_WRONG_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ifc</name><operator>-&gt;</operator><name>set</name></name> <operator>&amp;</operator> <name>IFC_TRAPS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ifc</name><operator>-&gt;</operator><name>set</name></name> <operator>|=</operator> <name>IFC_TRAPS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifc</name><operator>-&gt;</operator><name>traps</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>LEAF_ifPromiscuousMode</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_WRONG_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ifc</name><operator>-&gt;</operator><name>set</name></name> <operator>&amp;</operator> <name>IFC_PROMISC</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ifc</name><operator>-&gt;</operator><name>set</name></name> <operator>|=</operator> <name>IFC_PROMISC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifc</name><operator>-&gt;</operator><name>promisc</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOT_WRITEABLE</name><operator>)</operator></expr>;</return>

<case>case <expr><name>SNMP_OP_ROLLBACK</name></expr>:</case>
<case>case <expr><name>SNMP_OP_COMMIT</name></expr>:</case>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>ifp</name><operator>-&gt;</operator><name>mibtick</name></name> <operator>&lt;</operator> <name>this_tick</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>mib_fetch_ifmib</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>SNMP_ERR_NOERROR</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LEAF_ifName</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>string_get</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifInMulticastPkts</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_imcasts</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifInBroadcastPkts</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifOutMulticastPkts</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_omcasts</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifOutBroadcastPkts</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifHCInOctets</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>counter64</name></name> <operator>=</operator> <call><name>MIBIF_PRIV</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>hc_inoctets</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifHCInUcastPkts</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>counter64</name></name> <operator>=</operator> <call><name>MIBIF_PRIV</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>hc_ipackets</name> <operator>-</operator>
<call><name>MIBIF_PRIV</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>hc_imcasts</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifHCInMulticastPkts</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>counter64</name></name> <operator>=</operator> <call><name>MIBIF_PRIV</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>hc_imcasts</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifHCInBroadcastPkts</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>counter64</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifHCOutOctets</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>counter64</name></name> <operator>=</operator> <call><name>MIBIF_PRIV</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>hc_outoctets</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifHCOutUcastPkts</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>counter64</name></name> <operator>=</operator> <call><name>MIBIF_PRIV</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>hc_opackets</name> <operator>-</operator>
<call><name>MIBIF_PRIV</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>hc_omcasts</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifHCOutMulticastPkts</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>counter64</name></name> <operator>=</operator> <call><name>MIBIF_PRIV</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>hc_omcasts</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifHCOutBroadcastPkts</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>counter64</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifLinkUpDownTrapEnable</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <ternary><condition><expr><name><name>ifp</name><operator>-&gt;</operator><name>trap_enable</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifHighSpeed</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator>
<operator>(</operator><name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_data</name><operator>.</operator><name>ifi_baudrate</name></name> <operator>+</operator> <literal type="number">499999</literal><operator>)</operator> <operator>/</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifPromiscuousMode</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator>
<ternary><condition><expr><operator>(</operator><name><name>ifp</name><operator>-&gt;</operator><name>mib</name><operator>.</operator><name>ifmd_flags</name></name> <operator>&amp;</operator> <name>IFF_PROMISC</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifConnectorPresent</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <ternary><condition><expr><name><name>ifp</name><operator>-&gt;</operator><name>has_connector</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifAlias</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>string_get</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>alias_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifCounterDiscontinuityTime</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>ifp</name><operator>-&gt;</operator><name>counter_disc</name></name> <operator>&gt;</operator> <name>start_tick</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>counter_disc</name></name> <operator>-</operator> <name>start_tick</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
