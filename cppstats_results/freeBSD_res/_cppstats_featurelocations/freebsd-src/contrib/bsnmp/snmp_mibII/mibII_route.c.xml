<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bsnmp/snmp_mibII/mibII_route.c">
































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_TREE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/tree.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mibII.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mibII_oid.h"</cpp:file></cpp:include>

<struct>struct <name>sroute</name> <block>{
<macro><name>RB_ENTRY</name><argument_list>(<argument>sroute</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ifindex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>index</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>proto</name></decl>;</decl_stmt>
}</block>;</struct>
<expr_stmt><expr><specifier>static</specifier> <macro><name>RB_HEAD</name><argument_list>(<argument>sroutes</argument>, <argument>sroute</argument>)</argument_list></macro> <name>sroutes</name> <operator>=</operator> <call><name>RB_INITIALIZER</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sroutes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RB_PROTOTYPE</name><argument_list>(<argument><expr><name>sroutes</name></expr></argument>, <argument><expr><name>sroute</name></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><name>sroute_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUTE_UPDATE_INTERVAL</name></cpp:macro> <cpp:value>(100 * 60 * 10)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>route_tick</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>u_int</name></type> <name>route_total</name></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>sroute_compare</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sroute</name></name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sroute</name></name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>s1</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>s2</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sroute_index_append</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>u_int</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sroute</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>sub</name> <operator>+</operator> <literal type="number">13</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">13</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>index</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static void
sroute_print(const struct sroute *r)
{
u_int i;

for (i = 0; i &lt; 13 - 1; i++)
printf("%u.", r-&gt;index[i]);
printf("%u proto=%u type=%u", r-&gt;index[i], r-&gt;proto, r-&gt;type);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>void</name></type>
<name>mib_sroute_process</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rt_msghdr</name></name> <modifier>*</modifier></type><name>rtm</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>gw</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>in_dst</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>in_gw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>in_mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>ifp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sroute</name></name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sroute</name></name> <modifier>*</modifier></type><name>r</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>r1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>in_addr_t</name></type> <name>ha</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>gw</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>dst</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>!=</operator> <name>AF_INET</name> <operator>||</operator>
<name><name>gw</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>!=</operator> <name>AF_INET</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>in_dst</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>dst</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in_gw</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>gw</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rtm</name><operator>-&gt;</operator><name>rtm_flags</name></name> <operator>&amp;</operator> <name>RTF_HOST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>in_mask</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>mask</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>mask</name><operator>-&gt;</operator><name>sa_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>in_mask</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>in_mask</name> <operator>=</operator> <operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>mask</name><operator>)</operator><operator>-&gt;</operator><name>sin_addr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name>ha</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>in_dst</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ha</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ha</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ha</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ha</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ha</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>in_mask</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ha</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ha</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ha</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ha</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ha</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>in_gw</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ha</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ha</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ha</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ha</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rtm</name><operator>-&gt;</operator><name>rtm_type</name></name> <operator>==</operator> <name>RTM_DELETE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>RB_FIND</name><argument_list>(<argument><expr><name>sroutes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sroutes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_ROUTE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"%s: DELETE: %u.%u.%u.%u "</literal>
<literal type="string">"%u.%u.%u.%u %u %u.%u.%u.%u not found"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>RB_REMOVE</name><argument_list>(<argument><expr><name>sroutes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sroutes</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>route_total</name><operator>--</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_ROUTE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: DELETE: %u.%u.%u.%u "</literal>
<literal type="string">"%u.%u.%u.%u %u %u.%u.%u.%u\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>ifp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ifp</name> <operator>=</operator> <call><name>mib_find_if_sys</name><argument_list>(<argument><expr><name><name>rtm</name><operator>-&gt;</operator><name>rtm_index</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rtm</name><operator>-&gt;</operator><name>rtm_type</name></name> <operator>==</operator> <name>RTM_ADD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mib_send_rtmsg</name><argument_list>(<argument><expr><name>rtm</name></expr></argument>, <argument><expr><name>gw</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mib_iflist_bad</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>r</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"%m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>index</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>ifindex</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>ifp</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>ifp</name><operator>-&gt;</operator><name>index</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>rtm</name><operator>-&gt;</operator><name>rtm_flags</name></name> <operator>&amp;</operator> <name>RTF_REJECT</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>


<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>proto</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>rtm</name><operator>-&gt;</operator><name>rtm_flags</name></name> <operator>&amp;</operator> <name>RTF_LOCAL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>:
<expr><ternary><condition><expr><operator>(</operator><name><name>rtm</name><operator>-&gt;</operator><name>rtm_flags</name></name> <operator>&amp;</operator> <name>RTF_STATIC</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>:
<expr><ternary><condition><expr><operator>(</operator><name><name>rtm</name><operator>-&gt;</operator><name>rtm_flags</name></name> <operator>&amp;</operator> <name>RTF_DYNAMIC</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">10</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>r1</name> <operator>=</operator> <call><name>RB_INSERT</name><argument_list>(<argument><expr><name>sroutes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sroutes</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r1</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_ROUTE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"%s: %u.%u.%u.%u "</literal>
<literal type="string">"%u.%u.%u.%u %u %u.%u.%u.%u duplicate route"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>r1</name><operator>-&gt;</operator><name>ifindex</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>ifindex</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r1</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r1</name><operator>-&gt;</operator><name>proto</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>proto</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>route_total</name><operator>++</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_ROUTE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: ADD/GET: %u.%u.%u.%u "</literal>
<literal type="string">"%u.%u.%u.%u %u %u.%u.%u.%u\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>mib_fetch_route</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>rtab</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sroute</name></name> <modifier>*</modifier></type><name>r</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>r1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rt_msghdr</name></name> <modifier>*</modifier></type><name>rtm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name><name>addrs</name><index>[<expr><name>RTAX_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>route_tick</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>route_tick</name> <operator>+</operator> <name>ROUTE_UPDATE_INTERVAL</name> <operator>&gt;</operator> <name>this_tick</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>RB_MIN</name><argument_list>(<argument><expr><name>sroutes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sroutes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>r</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <call><name>RB_NEXT</name><argument_list>(<argument><expr><name>sroutes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sroutes</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_REMOVE</name><argument_list>(<argument><expr><name>sroutes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sroutes</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>r1</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>route_total</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rtab</name> <operator>=</operator> <call><name>mib_fetch_rtab</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>NET_RT_DUMP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name>rtab</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>next</name> <operator>=</operator> <name>rtab</name></expr>;</init> <condition><expr><name>next</name> <operator>&lt;</operator> <name>rtab</name> <operator>+</operator> <name>len</name></expr>;</condition> <incr><expr><name>next</name> <operator>+=</operator> <name><name>rtm</name><operator>-&gt;</operator><name>rtm_msglen</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>rtm</name> <operator>=</operator> <operator>(</operator>struct <name>rt_msghdr</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>next</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rtm</name><operator>-&gt;</operator><name>rtm_type</name></name> <operator>!=</operator> <name>RTM_GET</name> <operator>||</operator>
<operator>!</operator><operator>(</operator><name><name>rtm</name><operator>-&gt;</operator><name>rtm_flags</name></name> <operator>&amp;</operator> <name>RTF_UP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mib_extract_addrs</name><argument_list>(<argument><expr><name><name>rtm</name><operator>-&gt;</operator><name>rtm_addrs</name></name></expr></argument>, <argument><expr><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>rtm</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>addrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mib_sroute_process</name><argument_list>(<argument><expr><name>rtm</name></expr></argument>, <argument><expr><name><name>addrs</name><index>[<expr><name>RTAX_GATEWAY</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>addrs</name><index>[<expr><name>RTAX_DST</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>addrs</name><index>[<expr><name>RTAX_NETMASK</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
u_int n = 0;
r = RB_MIN(sroutes, &amp;sroutes);
while (r != NULL) {
printf("%u: ", n++);
sroute_print(r);
printf("\n");
r = RB_NEXT(sroutes, &amp;sroutes, r);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rtab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>route_tick</name> <operator>=</operator> <call><name>get_ticks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name><name>struct</name> <name>sroute</name></name> <modifier>*</modifier></type>
<name>sroute_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>u_int</name></type> <name>sub</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sroute</name></name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>sub</name> <operator>!=</operator> <literal type="number">13</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">13</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sub</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><operator>(</operator><call><name>RB_FIND</name><argument_list>(<argument><expr><name>sroutes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sroutes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name><name>struct</name> <name>sroute</name></name> <modifier>*</modifier></type>
<name>sroute_getnext</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>u_int</name></type> <name>sub</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>comp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sroute</name></name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sroute</name></name> <modifier>*</modifier></type><name>best</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sroute</name></name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <name>sub</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>RB_MIN</name><argument_list>(<argument><expr><name>sroutes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sroutes</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name>sub</name> <operator>+</operator> <literal type="number">13</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>sub</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>oid</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>oid</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>RB_MIN</name><argument_list>(<argument><expr><name>sroutes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sroutes</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>






<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>oid</name><operator>-&gt;</operator><name>len</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sub</name> <operator>+</operator> <literal type="number">13</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>sub</name> <operator>+</operator> <literal type="number">13</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>sub</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>i</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>ASN_MAXID</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>sub</name> <operator>+</operator> <literal type="number">13</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>sub</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sub</name> <operator>+</operator> <literal type="number">13</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>key</name><operator>.</operator><name>index</name><index>[<expr><name>i</name> <operator>-</operator> <name>sub</name></expr>]</index></name> <operator>=</operator> <name><name>oid</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><name>best</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>RB_ROOT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sroutes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>comp</name> <operator>=</operator> <call><name>sroute_compare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>comp</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>RB_RIGHT</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>best</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>sroute_compare</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>best</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>best</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>RB_LEFT</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>best</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>op_route_table</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier><name>ctx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
<parameter><decl><type><name>u_int</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>u_int</name> <name>iidx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>snmp_op</name></name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sroute</name></name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mib_fetch_route</name><argument_list>()</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SNMP_OP_GETNEXT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>sroute_getnext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sroute_index_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_OP_GET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>sroute_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_OP_SET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>sroute_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOT_WRITEABLE</name><operator>)</operator></expr>;</return>

<case>case <expr><name>SNMP_OP_ROLLBACK</name></expr>:</case>
<case>case <expr><name>SNMP_OP_COMMIT</name></expr>:</case>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<default>default:</default>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LEAF_ipCidrRouteDest</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>ipaddress</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>ipaddress</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>index</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>ipaddress</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>index</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>ipaddress</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>index</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ipCidrRouteMask</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>ipaddress</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>index</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>ipaddress</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>index</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>ipaddress</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>index</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>ipaddress</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>index</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ipCidrRouteTos</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>index</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ipCidrRouteNextHop</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>ipaddress</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>index</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>ipaddress</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>index</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>ipaddress</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>index</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>ipaddress</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>index</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ipCidrRouteIfIndex</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>ifindex</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ipCidrRouteType</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ipCidrRouteProto</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>proto</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ipCidrRouteAge</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ipCidrRouteInfo</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>oid</name></name> <operator>=</operator> <name>oid_zeroDotZero</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ipCidrRouteNextHopAS</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ipCidrRouteMetric1</name></expr>:</case>
<case>case <expr><name>LEAF_ipCidrRouteMetric2</name></expr>:</case>
<case>case <expr><name>LEAF_ipCidrRouteMetric3</name></expr>:</case>
<case>case <expr><name>LEAF_ipCidrRouteMetric4</name></expr>:</case>
<case>case <expr><name>LEAF_ipCidrRouteMetric5</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ipCidrRouteStatus</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>op_route</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier><name>ctx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
<parameter><decl><type><name>u_int</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>u_int</name> <name>iidx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>snmp_op</name></name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SNMP_OP_GETNEXT</name></expr>:</case>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>SNMP_OP_GET</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>SNMP_OP_SET</name></expr>:</case>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOT_WRITEABLE</name><operator>)</operator></expr>;</return>

<case>case <expr><name>SNMP_OP_ROLLBACK</name></expr>:</case>
<case>case <expr><name>SNMP_OP_COMMIT</name></expr>:</case>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>mib_fetch_route</name><argument_list>()</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LEAF_ipCidrRouteNumber</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name>route_total</name></expr>;</expr_stmt>
<break>break;</break>

</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><call><name>RB_GENERATE</name><argument_list>(<argument><expr><name>sroutes</name></expr></argument>, <argument><expr><name>sroute</name></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><name>sroute_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>
