<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bsnmp/snmp_mibII/mibII_ip.c">































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mibII.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mibII_oid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in_systm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/ip.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/ip_var.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/ip_icmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/icmp_var.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>ipstat</name></name></type> <name>ipstat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>u_int</name></type> <name>ip_idrop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>icmpstat</name></name></type> <name>icmpstat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ip_forwarding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ip_defttl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>ip_tick</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>ipstat_tick</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fetch_ipstat</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ipstat</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sysctlbyname</name><argument_list>(<argument><expr><literal type="string">"net.inet.ip.stats"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ipstat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"net.inet.ip.stats: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ipstat</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"net.inet.ip.stats: wrong size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ip_idrop</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sysctlbyname</name><argument_list>(<argument><expr><literal type="string">"net.inet.ip.intr_queue_drops"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ip_idrop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"net.inet.ip.intr_queue_drops: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ip_idrop</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"net.inet.ip.intr_queue_drops: wrong size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ip_idrop</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>icmpstat</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sysctlbyname</name><argument_list>(<argument><expr><literal type="string">"net.inet.icmp.stats"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>icmpstat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"net.inet.icmp.stats: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>icmpstat</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"net.inet.icmp.stats: wrong size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ipstat_tick</name> <operator>=</operator> <call><name>get_ticks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fetch_ip</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ip_forwarding</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sysctlbyname</name><argument_list>(<argument><expr><literal type="string">"net.inet.ip.forwarding"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ip_forwarding</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"net.inet.ip.forwarding: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ip_forwarding</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"net.inet.ip.forwarding: wrong size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ip_defttl</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sysctlbyname</name><argument_list>(<argument><expr><literal type="string">"net.inet.ip.ttl"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ip_defttl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"net.inet.ip.ttl: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ip_defttl</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"net.inet.ip.ttl: wrong size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ip_tick</name> <operator>=</operator> <call><name>get_ticks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ip_forward</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>forw</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>old</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>olen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>olen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>old</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sysctlbyname</name><argument_list>(<argument><expr><literal type="string">"net.inet.ip.forwarding"</literal></expr></argument>, <argument><expr><name>old</name></expr></argument>, <argument><expr><ternary><condition><expr><name>old</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>olen</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,
<argument><expr><operator>&amp;</operator><name>forw</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>forw</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"set net.inet.ip.forwarding: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ip_forwarding</name> <operator>=</operator> <name>forw</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ip_setttl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ttl</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>old</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>olen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>olen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>old</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sysctlbyname</name><argument_list>(<argument><expr><literal type="string">"net.inet.ip.ttl"</literal></expr></argument>, <argument><expr><name>old</name></expr></argument>, <argument><expr><ternary><condition><expr><name>old</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>olen</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ttl</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ttl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"set net.inet.ip.ttl: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ip_defttl</name> <operator>=</operator> <name>ttl</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>op_ip</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
<parameter><decl><type><name>u_int</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>u_int</name> <name>idx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>snmp_op</name></name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>old</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SNMP_OP_GETNEXT</name></expr>:</case>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>SNMP_OP_GET</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>SNMP_OP_SET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>ip_tick</name> <operator>&lt;</operator> <name>this_tick</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>fetch_ip</name><argument_list>()</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LEAF_ipForwarding</name></expr>:</case>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>=</operator> <ternary><condition><expr><name>ip_forwarding</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int2</name></name> <operator>=</operator> <name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ip_forwarding</name> <operator>&amp;&amp;</operator> <call><name>ip_forward</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>old</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>=</operator> <ternary><condition><expr><name>old</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ip_forwarding</name> <operator>&amp;&amp;</operator> <call><name>ip_forward</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>old</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>=</operator> <name>old</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_WRONG_VALUE</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ipDefaultTTL</name></expr>:</case>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>=</operator> <name>ip_defttl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int2</name></name> <operator>=</operator> <name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_WRONG_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ip_defttl</name> <operator>!=</operator> <name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>&amp;&amp;</operator>
<call><name>ip_setttl</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>=</operator> <name>old</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>SNMP_OP_ROLLBACK</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LEAF_ipForwarding</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int2</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ip_forward</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int2</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ip_forward</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ipDefaultTTL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int2</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ip_setttl</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>SNMP_OP_COMMIT</name></expr>:</case>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ip_tick</name> <operator>&lt;</operator> <name>this_tick</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>fetch_ip</name><argument_list>()</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LEAF_ipForwarding</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <ternary><condition><expr><name>ip_forwarding</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ipDefaultTTL</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name>ip_defttl</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>op_ipstat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier><name>ctx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
<parameter><decl><type><name>u_int</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>u_int</name> <name>idx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>snmp_op</name></name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SNMP_OP_GETNEXT</name></expr>:</case>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>SNMP_OP_GET</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>SNMP_OP_SET</name></expr>:</case>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOT_WRITEABLE</name><operator>)</operator></expr>;</return>

<case>case <expr><name>SNMP_OP_ROLLBACK</name></expr>:</case>
<case>case <expr><name>SNMP_OP_COMMIT</name></expr>:</case>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ipstat_tick</name> <operator>&lt;</operator> <name>this_tick</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fetch_ipstat</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LEAF_ipInReceives</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name><name>ipstat</name><operator>.</operator><name>ips_total</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ipInHdrErrors</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name><name>ipstat</name><operator>.</operator><name>ips_badsum</name></name> <operator>+</operator> <name><name>ipstat</name><operator>.</operator><name>ips_tooshort</name></name>
<operator>+</operator> <name><name>ipstat</name><operator>.</operator><name>ips_toosmall</name></name> <operator>+</operator> <name><name>ipstat</name><operator>.</operator><name>ips_badhlen</name></name>
<operator>+</operator> <name><name>ipstat</name><operator>.</operator><name>ips_badlen</name></name> <operator>+</operator> <name><name>ipstat</name><operator>.</operator><name>ips_badvers</name></name> <operator>+</operator>
<operator>+</operator> <name><name>ipstat</name><operator>.</operator><name>ips_toolong</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ipInAddrErrors</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name><name>ipstat</name><operator>.</operator><name>ips_cantforward</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ipForwDatagrams</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name><name>ipstat</name><operator>.</operator><name>ips_forward</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ipInUnknownProtos</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name><name>ipstat</name><operator>.</operator><name>ips_noproto</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ipInDiscards</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name>ip_idrop</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ipInDelivers</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name><name>ipstat</name><operator>.</operator><name>ips_delivered</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ipOutRequests</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name><name>ipstat</name><operator>.</operator><name>ips_localout</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ipOutDiscards</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name><name>ipstat</name><operator>.</operator><name>ips_odropped</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ipOutNoRoutes</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name><name>ipstat</name><operator>.</operator><name>ips_noroute</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ipReasmTimeout</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name>IPFRAGTTL</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ipReasmReqds</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name><name>ipstat</name><operator>.</operator><name>ips_fragments</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ipReasmOKs</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name><name>ipstat</name><operator>.</operator><name>ips_reassembled</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ipReasmFails</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name><name>ipstat</name><operator>.</operator><name>ips_fragdropped</name></name>
<operator>+</operator> <name><name>ipstat</name><operator>.</operator><name>ips_fragtimeout</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ipFragOKs</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name><name>ipstat</name><operator>.</operator><name>ips_fragmented</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ipFragFails</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name><name>ipstat</name><operator>.</operator><name>ips_cantfrag</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ipFragCreates</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name><name>ipstat</name><operator>.</operator><name>ips_ofragments</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>op_icmpstat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier><name>ctx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
<parameter><decl><type><name>u_int</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>u_int</name> <name>idx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>snmp_op</name></name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_int</name></type> <name>i</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SNMP_OP_GETNEXT</name></expr>:</case>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>SNMP_OP_GET</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>SNMP_OP_SET</name></expr>:</case>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOT_WRITEABLE</name><operator>)</operator></expr>;</return>

<case>case <expr><name>SNMP_OP_ROLLBACK</name></expr>:</case>
<case>case <expr><name>SNMP_OP_COMMIT</name></expr>:</case>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ipstat_tick</name> <operator>&lt;</operator> <name>this_tick</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fetch_ipstat</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LEAF_icmpInMsgs</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>ICMP_MAXTYPE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>+=</operator> <name><name>icmpstat</name><operator>.</operator><name>icps_inhist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>+=</operator> <name><name>icmpstat</name><operator>.</operator><name>icps_tooshort</name></name> <operator>+</operator>
<name><name>icmpstat</name><operator>.</operator><name>icps_checksum</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LEAF_icmpInErrors</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>icmpstat</name><operator>.</operator><name>icps_tooshort</name></name> <operator>+</operator>
<name><name>icmpstat</name><operator>.</operator><name>icps_checksum</name></name> <operator>+</operator>
<name><name>icmpstat</name><operator>.</operator><name>icps_badlen</name></name> <operator>+</operator>
<name><name>icmpstat</name><operator>.</operator><name>icps_badcode</name></name> <operator>+</operator>
<name><name>icmpstat</name><operator>.</operator><name>icps_bmcastecho</name></name> <operator>+</operator>
<name><name>icmpstat</name><operator>.</operator><name>icps_bmcasttstamp</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_icmpInDestUnreachs</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>icmpstat</name><operator>.</operator><name>icps_inhist</name><index>[<expr><name>ICMP_UNREACH</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_icmpInTimeExcds</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>icmpstat</name><operator>.</operator><name>icps_inhist</name><index>[<expr><name>ICMP_TIMXCEED</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_icmpInParmProbs</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>icmpstat</name><operator>.</operator><name>icps_inhist</name><index>[<expr><name>ICMP_PARAMPROB</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_icmpInSrcQuenchs</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>icmpstat</name><operator>.</operator><name>icps_inhist</name><index>[<expr><name>ICMP_SOURCEQUENCH</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_icmpInRedirects</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>icmpstat</name><operator>.</operator><name>icps_inhist</name><index>[<expr><name>ICMP_REDIRECT</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_icmpInEchos</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>icmpstat</name><operator>.</operator><name>icps_inhist</name><index>[<expr><name>ICMP_ECHO</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_icmpInEchoReps</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>icmpstat</name><operator>.</operator><name>icps_inhist</name><index>[<expr><name>ICMP_ECHOREPLY</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_icmpInTimestamps</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>icmpstat</name><operator>.</operator><name>icps_inhist</name><index>[<expr><name>ICMP_TSTAMP</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_icmpInTimestampReps</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>icmpstat</name><operator>.</operator><name>icps_inhist</name><index>[<expr><name>ICMP_TSTAMPREPLY</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_icmpInAddrMasks</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>icmpstat</name><operator>.</operator><name>icps_inhist</name><index>[<expr><name>ICMP_MASKREQ</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_icmpInAddrMaskReps</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>icmpstat</name><operator>.</operator><name>icps_inhist</name><index>[<expr><name>ICMP_MASKREPLY</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_icmpOutMsgs</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>ICMP_MAXTYPE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>+=</operator> <name><name>icmpstat</name><operator>.</operator><name>icps_outhist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>+=</operator> <name><name>icmpstat</name><operator>.</operator><name>icps_badaddr</name></name> <operator>+</operator>
<name><name>icmpstat</name><operator>.</operator><name>icps_noroute</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_icmpOutErrors</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>icmpstat</name><operator>.</operator><name>icps_badaddr</name></name> <operator>+</operator>
<name><name>icmpstat</name><operator>.</operator><name>icps_noroute</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_icmpOutDestUnreachs</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>icmpstat</name><operator>.</operator><name>icps_outhist</name><index>[<expr><name>ICMP_UNREACH</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_icmpOutTimeExcds</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>icmpstat</name><operator>.</operator><name>icps_outhist</name><index>[<expr><name>ICMP_TIMXCEED</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_icmpOutParmProbs</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>icmpstat</name><operator>.</operator><name>icps_outhist</name><index>[<expr><name>ICMP_PARAMPROB</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_icmpOutSrcQuenchs</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>icmpstat</name><operator>.</operator><name>icps_outhist</name><index>[<expr><name>ICMP_SOURCEQUENCH</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_icmpOutRedirects</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>icmpstat</name><operator>.</operator><name>icps_outhist</name><index>[<expr><name>ICMP_REDIRECT</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_icmpOutEchos</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>icmpstat</name><operator>.</operator><name>icps_outhist</name><index>[<expr><name>ICMP_ECHO</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_icmpOutEchoReps</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>icmpstat</name><operator>.</operator><name>icps_outhist</name><index>[<expr><name>ICMP_ECHOREPLY</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_icmpOutTimestamps</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>icmpstat</name><operator>.</operator><name>icps_outhist</name><index>[<expr><name>ICMP_TSTAMP</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_icmpOutTimestampReps</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>icmpstat</name><operator>.</operator><name>icps_outhist</name><index>[<expr><name>ICMP_TSTAMPREPLY</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_icmpOutAddrMasks</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>icmpstat</name><operator>.</operator><name>icps_outhist</name><index>[<expr><name>ICMP_MASKREQ</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_icmpOutAddrMaskReps</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>icmpstat</name><operator>.</operator><name>icps_outhist</name><index>[<expr><name>ICMP_MASKREPLY</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
