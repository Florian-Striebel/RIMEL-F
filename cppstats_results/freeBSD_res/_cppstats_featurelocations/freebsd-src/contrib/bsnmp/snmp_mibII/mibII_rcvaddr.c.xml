<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bsnmp/snmp_mibII/mibII_rcvaddr.c">































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mibII.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mibII_oid.h"</cpp:file></cpp:include>




<function><type><name><name>struct</name> <name>mibrcvaddr</name></name> <modifier>*</modifier></type>
<name>mib_find_rcvaddr</name><parameter_list>(<parameter><decl><type><name>u_int</name></type> <name>ifindex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>addrlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mibrcvaddr</name></name> <modifier>*</modifier></type><name>rcv</name></decl>;</decl_stmt>

<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>rcv</argument>, <argument>&amp;mibrcvaddr_list</argument>, <argument>link</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>rcv</name><operator>-&gt;</operator><name>ifindex</name></name> <operator>==</operator> <name>ifindex</name> <operator>&amp;&amp;</operator>
<name><name>rcv</name><operator>-&gt;</operator><name>addrlen</name></name> <operator>==</operator> <name>addrlen</name> <operator>&amp;&amp;</operator>
<call><name>memcmp</name><argument_list>(<argument><expr><name><name>rcv</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rcv</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name><name>struct</name> <name>mibrcvaddr</name></name> <modifier>*</modifier></type>
<name>mib_rcvaddr_create</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>ifp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>addrlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mibrcvaddr</name></name> <modifier>*</modifier></type><name>rcv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>addrlen</name> <operator>+</operator> <name>OIDLEN_ifRcvAddressEntry</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>ASN_MAXOIDLEN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rcv</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rcv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rcv</name><operator>-&gt;</operator><name>ifindex</name></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rcv</name><operator>-&gt;</operator><name>addrlen</name></name> <operator>=</operator> <name>addrlen</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rcv</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rcv</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcv</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>addrlen</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rcv</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>subs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ifp</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rcv</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>subs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>addrlen</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>addrlen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rcv</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>subs</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>addr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>INSERT_OBJECT_OID</name><argument_list>(<argument><expr><name>rcv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mibrcvaddr_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>rcv</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>mib_rcvaddr_delete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mibrcvaddr</name></name> <modifier>*</modifier></type><name>rcv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mibrcvaddr_list</name></expr></argument>, <argument><expr><name>rcv</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rcv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>op_rcvaddr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier><name>ctx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
<parameter><decl><type><name>u_int</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>u_int</name> <name>iidx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>snmp_op</name></name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mibrcvaddr</name></name> <modifier>*</modifier></type><name>rcv</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rcv</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SNMP_OP_GETNEXT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rcv</name> <operator>=</operator> <call><name>NEXT_OBJECT_OID</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mibrcvaddr_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>index_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rcv</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_OP_GET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rcv</name> <operator>=</operator> <call><name>FIND_OBJECT_OID</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mibrcvaddr_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_OP_SET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rcv</name> <operator>=</operator> <call><name>FIND_OBJECT_OID</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mibrcvaddr_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NO_CREATION</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOT_WRITEABLE</name><operator>)</operator></expr>;</return>

<case>case <expr><name>SNMP_OP_ROLLBACK</name></expr>:</case>
<case>case <expr><name>SNMP_OP_COMMIT</name></expr>:</case>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LEAF_ifRcvAddressStatus</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ifRcvAddressType</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>rcv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MIBRCVADDR_VOLATILE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
