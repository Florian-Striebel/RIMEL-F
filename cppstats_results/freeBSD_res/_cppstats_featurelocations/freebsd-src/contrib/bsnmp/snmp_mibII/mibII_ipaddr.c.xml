<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bsnmp/snmp_mibII/mibII_ipaddr.c">


































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mibII.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mibII_oid.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>asn_oid</name></name></type>
<name>oid_ipAddrTable</name> <init>= <expr><name>OIDX_ipAddrTable</name></expr></init></decl>;</decl_stmt>





<struct>struct <name>update</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>snmp_dependency</name></name></type> <name>dep</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bcast</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>ifindex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>rb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>rb_mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>rb_bcast</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPD_IFINDEX</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPD_MASK</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPD_BCAST</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_CREATE</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_DESTROY</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_MODIFY</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>create</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>update</name></name> <modifier>*</modifier></type><name>upd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>bcast</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mibifa</name></name> <modifier>*</modifier></type><name>ifa</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>upd</name><operator>-&gt;</operator><name>set</name></name> <operator>&amp;</operator> <name>UPD_MASK</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IN_CLASSA</name><argument_list>(<argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>upd</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>upd</name><operator>-&gt;</operator><name>mask</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>IN_CLASSA_NET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>IN_CLASSB</name><argument_list>(<argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>upd</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>upd</name><operator>-&gt;</operator><name>mask</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>IN_CLASSB_NET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>IN_CLASSC</name><argument_list>(<argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>upd</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>upd</name><operator>-&gt;</operator><name>mask</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>IN_CLASSC_NET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>upd</name><operator>-&gt;</operator><name>mask</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bcast</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name><name>upd</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>s_addr</name></name> <operator>&amp;</operator> <name><name>upd</name><operator>-&gt;</operator><name>mask</name><operator>.</operator><name>s_addr</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>upd</name><operator>-&gt;</operator><name>set</name></name> <operator>&amp;</operator> <name>UPD_BCAST</name><operator>)</operator> <operator>||</operator> <name><name>upd</name><operator>-&gt;</operator><name>bcast</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name> <init>= <expr><operator>~</operator><call><name>ntohl</name><argument_list>(<argument><expr><name><name>upd</name><operator>-&gt;</operator><name>mask</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>bcast</name><operator>.</operator><name>s_addr</name></name> <operator>|=</operator> <call><name>htonl</name><argument_list>(<argument><expr><literal type="number">0xffffffff</literal> <operator>&amp;</operator> <operator>~</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ifa</name> <operator>=</operator> <call><name>mib_create_ifa</name><argument_list>(<argument><expr><name><name>upd</name><operator>-&gt;</operator><name>ifindex</name></name></expr></argument>, <argument><expr><name><name>upd</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>upd</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>, <argument><expr><name>bcast</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>upd</name><operator>-&gt;</operator><name>rb</name></name> <operator>|=</operator> <name>RB_CREATE</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>modify</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>update</name></name> <modifier>*</modifier></type><name>upd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mibifa</name></name> <modifier>*</modifier></type><name>ifa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>ifp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ifp</name> <operator>=</operator> <call><name>mib_find_if</name><argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifindex</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_WRONG_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>upd</name><operator>-&gt;</operator><name>set</name></name> <operator>&amp;</operator> <name>UPD_IFINDEX</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>upd</name><operator>-&gt;</operator><name>ifindex</name></name> <operator>!=</operator> <name><name>ifa</name><operator>-&gt;</operator><name>ifindex</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>upd</name><operator>-&gt;</operator><name>rb_mask</name></name> <operator>=</operator> <name><name>ifa</name><operator>-&gt;</operator><name>inmask</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>upd</name><operator>-&gt;</operator><name>rb_bcast</name></name> <operator>=</operator> <name><name>ifa</name><operator>-&gt;</operator><name>inbcast</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>upd</name><operator>-&gt;</operator><name>set</name></name> <operator>&amp;</operator> <name>UPD_MASK</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>upd</name><operator>-&gt;</operator><name>mask</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <name><name>ifa</name><operator>-&gt;</operator><name>inmask</name><operator>.</operator><name>s_addr</name></name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>upd</name><operator>-&gt;</operator><name>set</name></name> <operator>&amp;</operator> <name>UPD_BCAST</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>upd</name><operator>-&gt;</operator><name>set</name></name> <operator>&amp;</operator> <name>UPD_MASK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ifa</name><operator>-&gt;</operator><name>inmask</name></name> <operator>=</operator> <name><name>upd</name><operator>-&gt;</operator><name>mask</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>upd</name><operator>-&gt;</operator><name>set</name></name> <operator>&amp;</operator> <name>UPD_BCAST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ifa</name><operator>-&gt;</operator><name>inbcast</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name><name>ifa</name><operator>-&gt;</operator><name>inaddr</name><operator>.</operator><name>s_addr</name></name>
<operator>&amp;</operator> <name><name>ifa</name><operator>-&gt;</operator><name>inmask</name><operator>.</operator><name>s_addr</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>upd</name><operator>-&gt;</operator><name>bcast</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ifa</name><operator>-&gt;</operator><name>inbcast</name><operator>.</operator><name>s_addr</name></name> <operator>|=</operator> <literal type="number">0xffffffff</literal>
<operator>&amp;</operator> <operator>~</operator><name><name>ifa</name><operator>-&gt;</operator><name>inmask</name><operator>.</operator><name>s_addr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mib_modify_ifa</name><argument_list>(<argument><expr><name>ifa</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"set netmask/bcast: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifa</name><operator>-&gt;</operator><name>inmask</name></name> <operator>=</operator> <name><name>upd</name><operator>-&gt;</operator><name>rb_mask</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifa</name><operator>-&gt;</operator><name>inbcast</name></name> <operator>=</operator> <name><name>upd</name><operator>-&gt;</operator><name>rb_bcast</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mib_unmodify_ifa</name><argument_list>(<argument><expr><name>ifa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>upd</name><operator>-&gt;</operator><name>rb</name></name> <operator>|=</operator> <name>RB_MODIFY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier><name>ctx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>update</name></name> <modifier>*</modifier></type><name>upd</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>mibifa</name></name> <modifier>*</modifier></type><name>ifa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>mib_destroy_ifa</name><argument_list>(<argument><expr><name>ifa</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_GENERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>upd</name><operator>-&gt;</operator><name>rb</name></name> <operator>|=</operator> <name>RB_DESTROY</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>update_func</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_dependency</name></name> <modifier>*</modifier></type><name>dep</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>snmp_depop</name></name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>update</name></name> <modifier>*</modifier></type><name>upd</name> <init>= <expr><operator>(</operator>struct <name>update</name> <operator>*</operator><operator>)</operator><name>dep</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mibifa</name></name> <modifier>*</modifier></type><name>ifa</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SNMP_DEPOP_COMMIT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ifa</name> <operator>=</operator> <call><name>mib_find_ifa</name><argument_list>(<argument><expr><name><name>upd</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>upd</name><operator>-&gt;</operator><name>set</name></name> <operator>&amp;</operator> <name>UPD_IFINDEX</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_NAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>create</name><argument_list>(<argument><expr><name>upd</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>upd</name><operator>-&gt;</operator><name>set</name></name> <operator>&amp;</operator> <name>UPD_IFINDEX</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>upd</name><operator>-&gt;</operator><name>ifindex</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><call><name>destroy</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>upd</name></expr></argument>, <argument><expr><name>ifa</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>modify</name><argument_list>(<argument><expr><name>upd</name></expr></argument>, <argument><expr><name>ifa</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><name>SNMP_DEPOP_ROLLBACK</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ifa</name> <operator>=</operator> <call><name>mib_find_ifa</name><argument_list>(<argument><expr><name><name>upd</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mib_iflist_bad</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>upd</name><operator>-&gt;</operator><name>rb</name></name> <operator>&amp;</operator> <name>RB_CREATE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mib_uncreate_ifa</name><argument_list>(<argument><expr><name>ifa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>upd</name><operator>-&gt;</operator><name>rb</name></name> <operator>&amp;</operator> <name>RB_DESTROY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mib_undestroy_ifa</name><argument_list>(<argument><expr><name>ifa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>upd</name><operator>-&gt;</operator><name>rb</name></name> <operator>&amp;</operator> <name>RB_MODIFY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ifa</name><operator>-&gt;</operator><name>inmask</name></name> <operator>=</operator> <name><name>upd</name><operator>-&gt;</operator><name>rb_mask</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifa</name><operator>-&gt;</operator><name>inbcast</name></name> <operator>=</operator> <name><name>upd</name><operator>-&gt;</operator><name>rb_bcast</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mib_unmodify_ifa</name><argument_list>(<argument><expr><name>ifa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>SNMP_DEPOP_FINISH</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>upd</name><operator>-&gt;</operator><name>rb</name></name> <operator>&amp;</operator> <name>RB_DESTROY</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>ifa</name> <operator>=</operator> <call><name>mib_find_ifa</name><argument_list>(<argument><expr><name><name>upd</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>ifa</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MIBIFA_DESTROYED</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mibifa_list</name></expr></argument>, <argument><expr><name>ifa</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ifa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>op_ipaddr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
<parameter><decl><type><name>u_int</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>u_int</name></type> <name>iidx</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>snmp_op</name></name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>asn_subid_t</name></type> <name>which</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mibifa</name></name> <modifier>*</modifier></type><name>ifa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>update</name></name> <modifier>*</modifier></type><name>upd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>asn_oid</name></name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name></type> <name><name>ipaddr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>which</name> <operator>=</operator> <name><name>value</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ifa</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SNMP_OP_GETNEXT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ifa</name> <operator>=</operator> <call><name>NEXT_OBJECT_OID</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mibifa_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>index_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ifa</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_OP_GET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ifa</name> <operator>=</operator> <call><name>FIND_OBJECT_OID</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mibifa_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOSUCHNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>SNMP_OP_SET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>index_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>iidx</name></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NO_CREATION</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ifa</name> <operator>=</operator> <call><name>FIND_OBJECT_OID</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mibifa_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idx</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idx</name><operator>.</operator><name>subs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ipaddr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idx</name><operator>.</operator><name>subs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ipaddr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idx</name><operator>.</operator><name>subs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>ipaddr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idx</name><operator>.</operator><name>subs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>ipaddr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>upd</name> <operator>=</operator> <operator>(</operator>struct <name>update</name> <operator>*</operator><operator>)</operator><call><name>snmp_dep_lookup</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>oid_ipAddrTable</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>upd</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>update_func</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_RES_UNAVAIL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>upd</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><name><name>ipaddr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>ipaddr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>ipaddr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>ipaddr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>which</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LEAF_ipAdEntIfIndex</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>upd</name><operator>-&gt;</operator><name>set</name></name> <operator>&amp;</operator> <name>UPD_IFINDEX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>&gt;</operator> <literal type="number">0x07fffffff</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_WRONG_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ifa</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ifa</name><operator>-&gt;</operator><name>ifindex</name></name> <operator>!=</operator> <operator>(</operator><name>u_int</name><operator>)</operator><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>&amp;&amp;</operator>
<name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>upd</name><operator>-&gt;</operator><name>set</name></name> <operator>|=</operator> <name>UPD_IFINDEX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>upd</name><operator>-&gt;</operator><name>ifindex</name></name> <operator>=</operator> <operator>(</operator><name>u_int</name><operator>)</operator><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ipAdEntNetMask</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>upd</name><operator>-&gt;</operator><name>set</name></name> <operator>&amp;</operator> <name>UPD_MASK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>upd</name><operator>-&gt;</operator><name>mask</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>ipaddress</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>ipaddress</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>ipaddress</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>ipaddress</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>upd</name><operator>-&gt;</operator><name>set</name></name> <operator>|=</operator> <name>UPD_MASK</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ipAdEntBcastAddr</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>upd</name><operator>-&gt;</operator><name>set</name></name> <operator>&amp;</operator> <name>UPD_BCAST</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_INCONS_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SNMP_ERR_WRONG_VALUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>upd</name><operator>-&gt;</operator><name>bcast</name></name> <operator>=</operator> <name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>upd</name><operator>-&gt;</operator><name>set</name></name> <operator>|=</operator> <name>UPD_BCAST</name></expr>;</expr_stmt>
<break>break;</break>

</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>SNMP_OP_ROLLBACK</name></expr>:</case>
<case>case <expr><name>SNMP_OP_COMMIT</name></expr>:</case>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>which</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LEAF_ipAdEntAddr</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>ipaddress</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ifa</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>subs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>ipaddress</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ifa</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>subs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>ipaddress</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>ifa</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>subs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>ipaddress</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>ifa</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>subs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ipAdEntIfIndex</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>ifa</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MIBIFA_DESTROYED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name><name>ifa</name><operator>-&gt;</operator><name>ifindex</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ipAdEntNetMask</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>ipaddress</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>ntohl</name><argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>inmask</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>ipaddress</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>ntohl</name><argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>inmask</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>ipaddress</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>ntohl</name><argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>inmask</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>ipaddress</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>ntohl</name><argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>inmask</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LEAF_ipAdEntBcastAddr</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>inbcast</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>LEAF_ipAdEntReasmMaxSize</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <literal type="number">65535</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
