<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bsnmp/snmp_mibII/snmp_mibII.h">































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>snmp_mibII_h_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snmp_mibII_h_</name></cpp:macro></cpp:define>


<struct_decl>struct <name>mibif</name>;</struct_decl>

<enum>enum <name>mibif_notify</name> <block>{
<decl><name>MIBIF_NOTIFY_DESTROY</name></decl>
}</block>;</enum>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>mibif_notify_f</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>mibif_notify</name></name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>









<struct>struct <name>mibif</name> <block>{
<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>mibif</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>sysindex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>IFNAMSIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>descr</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ifmibdata</name></name></type> <name>mib</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>mibtick</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>specmib</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>specmiblen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>physaddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>physaddrlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>has_connector</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>trap_enable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>counter_disc</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name>mibif_notify_f</name></type> <name>xnotify</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>xnotify_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>lmodule</name></name> <modifier>*</modifier></type><name>xnotify_mod</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>asn_oid</name></name></type> <name>spec_oid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>alias</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>alias_size</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>private</name></decl>;</decl_stmt>
}</block>;</struct>




<struct>struct <name>mibifa</name> <block>{
<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>mibifa</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>inaddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>inmask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>inbcast</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>asn_oid</name></name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>ifindex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>flags</name></decl>;</decl_stmt>
}</block>;</struct>





<struct>struct <name>mibrcvaddr</name> <block>{
<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>mibrcvaddr</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>asn_oid</name></name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>ifindex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name></type> <name><name>addr</name><index>[<expr><name>ASN_MAXOIDLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>addrlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>flags</name></decl>;</decl_stmt>
}</block>;</struct>
<enum>enum <block>{
<decl><name>MIBRCVADDR_VOLATILE</name> <init>= <expr><literal type="number">0x00000001</literal></expr></init></decl>,
<decl><name>MIBRCVADDR_BCAST</name> <init>= <expr><literal type="number">0x00000002</literal></expr></init></decl>,
<decl><name>MIBRCVADDR_HW</name> <init>= <expr><literal type="number">0x00000004</literal></expr></init></decl>,
}</block>;</enum>


<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>mib_netsock</name></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>mib_if_set_dyn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>mib_refresh_iflist</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>mib_find_if</name><parameter_list>(<parameter><decl><type><name>u_int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>mib_find_if_sys</name><parameter_list>(<parameter><decl><type><name>u_int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>mib_find_if_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>mib_first_if</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>mib_next_if</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>mib_register_newif</name><parameter_list>(<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>lmodule</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>mib_unregister_newif</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>lmodule</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>mib_fetch_ifmib</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>mib_if_admin</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>up</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name><name>struct</name> <name>mibifa</name></name> <modifier>*</modifier></type><name>mib_find_ifa</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name><name>struct</name> <name>mibifa</name></name> <modifier>*</modifier></type><name>mib_first_ififa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>mibifa</name></name> <modifier>*</modifier></type><name>mib_next_ififa</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mibifa</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>mib_ifstack_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>lower</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>upper</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>mib_ifstack_delete</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>lower</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type><name>upper</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name><name>struct</name> <name>mibrcvaddr</name></name> <modifier>*</modifier></type><name>mib_find_rcvaddr</name><parameter_list>(<parameter><decl><type><name>u_int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name><name>struct</name> <name>mibrcvaddr</name></name> <modifier>*</modifier></type><name>mib_rcvaddr_create</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>mib_rcvaddr_delete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mibrcvaddr</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name> <modifier>*</modifier></type><name>mibif_notify</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mibif</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>lmodule</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>mibif_notify_f</name></type></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>mibif_unnotify</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
