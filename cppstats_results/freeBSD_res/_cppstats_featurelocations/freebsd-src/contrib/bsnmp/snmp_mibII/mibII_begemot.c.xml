<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bsnmp/snmp_mibII/mibII_begemot.c">































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mibII.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mibII_oid.h"</cpp:file></cpp:include>




<function><type><name>int</name></type>
<name>op_begemot_mibII</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snmp_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>snmp_value</name></name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
<parameter><decl><type><name>u_int</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>u_int</name> <name>idx</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>snmp_op</name></name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SNMP_OP_GETNEXT</name></expr>:</case>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>SNMP_OP_GET</name></expr>:</case>
<goto>goto <name>get</name>;</goto>

<case>case <expr><name>SNMP_OP_SET</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LEAF_begemotIfMaxspeed</name></expr>:</case>
<case>case <expr><name>LEAF_begemotIfPoll</name></expr>:</case>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOT_WRITEABLE</name><operator>)</operator></expr>;</return>

<case>case <expr><name>LEAF_begemotIfForcePoll</name></expr>:</case>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>=</operator> <name>mibif_force_hc_update_interval</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mibif_force_hc_update_interval</name> <operator>=</operator> <name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>LEAF_begemotIfDataPoll</name></expr>:</case>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name> <operator>=</operator> <name>mibII_poll_ticks</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mibII_poll_ticks</name> <operator>=</operator> <name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>SNMP_OP_ROLLBACK</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LEAF_begemotIfForcePoll</name></expr>:</case>
<expr_stmt><expr><name>mibif_force_hc_update_interval</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>LEAF_begemotIfDataPoll</name></expr>:</case>
<expr_stmt><expr><name>mibII_poll_ticks</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>SNMP_OP_COMMIT</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LEAF_begemotIfForcePoll</name></expr>:</case>
<expr_stmt><expr><name>mibif_force_hc_update_interval</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>scratch</name><operator>-&gt;</operator><name>int1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mibif_reset_hc_timer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>LEAF_begemotIfDataPoll</name></expr>:</case>
<expr_stmt><expr><call><name>mibif_restart_mibII_poll_timer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>get</name>:</label>

<switch>switch <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>subs</name><index>[<expr><name>sub</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LEAF_begemotIfMaxspeed</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>counter64</name></name> <operator>=</operator> <name>mibif_maxspeed</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>LEAF_begemotIfPoll</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name>mibif_hc_update_interval</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>LEAF_begemotIfForcePoll</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name>mibif_force_hc_update_interval</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>

<case>case <expr><name>LEAF_begemotIfDataPoll</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>uint32</name></name> <operator>=</operator> <name>mibII_poll_ticks</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SNMP_ERR_NOERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
