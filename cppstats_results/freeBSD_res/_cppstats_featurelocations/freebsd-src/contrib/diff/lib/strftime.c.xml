<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/diff/lib/strftime.c">


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_MBLEN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_MBRLEN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_STRUCT_ERA_ENTRY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_TM_GMTOFF</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_TM_ZONE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_TZNAME</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_TZSET</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULTIBYTE_IS_FORMAT_SAFE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../locale/localeinfo.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIME_WITH_SYS_TIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_TZNAME</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name><name>tzname</name><index>[]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO_MULTIBYTE</name></cpp:macro> <cpp:value>(HAVE_MBLEN &amp;&amp; ! MULTIBYTE_IS_FORMAT_SAFE)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DO_MULTIBYTE</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MBRLEN</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wchar.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbstate_t</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbrlen</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter><type><name>ps</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mblen (s, n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbsinit</name><parameter_list>(<parameter><type><name>ps</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(ps) == 0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbstate_t</name></type> <name>mbstate_zero</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COMPILE_WIDE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;endian.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHAR_T</name></cpp:macro> <cpp:value>wchar_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCHAR_T</name></cpp:macro> <cpp:value>unsigned int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L_</name><parameter_list>(<parameter><type><name>Str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>L##Str</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NLW</name><parameter_list>(<parameter><type><name>Sym</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_NL_W##Sym</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMCPY</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__wmemcpy (d, s, n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRLEN</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__wcslen (s)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHAR_T</name></cpp:macro> <cpp:value>char</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCHAR_T</name></cpp:macro> <cpp:value>unsigned char</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L_</name><parameter_list>(<parameter><type><name>Str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Str</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NLW</name><parameter_list>(<parameter><type><name>Sym</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Sym</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMCPY</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memcpy (d, s, n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRLEN</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strlen (s)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMPCPY</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__mempcpy (d, s, n)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MEMPCPY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMPCPY</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void *) ((char *) memcpy (d, s, n) + (n)))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_SIGNED</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((t) -1 &lt; 0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_STRLEN_BOUND</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((sizeof (t) * CHAR_BIT - TYPE_SIGNED (t)) * 302 / 1000 + 1 + TYPE_SIGNED (t))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TM_YEAR_BASE</name></cpp:macro> <cpp:value>1900</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__isleap</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__isleap</name><parameter_list>(<parameter><type><name>year</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((year) % 4 == 0 &amp;&amp; ((year) % 100 != 0 || (year) % 400 == 0))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tzname</name></cpp:macro> <cpp:value>__tzname</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tzset</name></cpp:macro> <cpp:value>__tzset</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_TM_GMTOFF</name></expr></cpp:if>




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"time_r.h"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__gmtime_r</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__localtime_r</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__gmtime_r</name></cpp:macro> <cpp:value>gmtime_r</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__localtime_r</name></cpp:macro> <cpp:value>localtime_r</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COMPILE_WIDE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>memset_space</name><parameter_list>(<parameter><type><name>P</name></type></parameter>, <parameter><type><name>Len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(wmemset (P, L' ', Len), (P) += (Len))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>memset_zero</name><parameter_list>(<parameter><type><name>P</name></type></parameter>, <parameter><type><name>Len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(wmemset (P, L'0', Len), (P) += (Len))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>memset_space</name><parameter_list>(<parameter><type><name>P</name></type></parameter>, <parameter><type><name>Len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(memset (P, ' ', Len), (P) += (Len))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>memset_zero</name><parameter_list>(<parameter><type><name>P</name></type></parameter>, <parameter><type><name>Len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(memset (P, '0', Len), (P) += (Len))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int _n = (n); int _delta = width - _n; int _incr = _n + (_delta &gt; 0 ? _delta : 0); if ((size_t) _incr &gt;= maxsize - i) return 0; if (p) { if (_delta &gt; 0) { if (pad == L_('0')) memset_zero (p, _delta); else memset_space (p, _delta); } f; p += _n; } i += _incr; } while (0)</cpp:value></cpp:define>






















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cpy</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>add ((n), if (to_lowcase) memcpy_lowcase (p, (s), _n LOCALE_ARG); else if (to_uppcase) memcpy_uppcase (p, (s), _n LOCALE_ARG); else MEMCPY ((void *) p, (void const *) (s), _n))</cpp:value></cpp:define>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COMPILE_WIDE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_IN_EXTENDED_LOCALE_MODEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__mbsrtowcs_l</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__mbsrtowcs_l</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>st</name></type></parameter>, <parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__mbsrtowcs (d, s, l, st)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>widen</name><parameter_list>(<parameter><type><name>os</name></type></parameter>, <parameter><type><name>ws</name></type></parameter>, <parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ mbstate_t __st; const char *__s = os; memset (&amp;__st, '\0', sizeof (__st)); l = __mbsrtowcs_l (NULL, &amp;__s, 0, &amp;__st, loc); ws = (wchar_t *) alloca ((l + 1) * sizeof (wchar_t)); (void) __mbsrtowcs_l (ws, &amp;__s, l, &amp;__st, loc); }</cpp:value></cpp:define>








<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_LIBC</name> <operator>&amp;&amp;</operator> <name>defined</name> <name>USE_IN_EXTENDED_LOCALE_MODEL</name></expr></cpp:if>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strftime</name></cpp:macro> <cpp:value>__strftime_l</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wcsftime</name></cpp:macro> <cpp:value>__wcsftime_l</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_NL_CURRENT</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_NL_CURRENT</name><parameter_list>(<parameter><type><name>category</name></type></parameter>, <parameter><type><name>item</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(current-&gt;values[_NL_ITEM_INDEX (item)].string)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCALE_ARG</name></cpp:macro> <cpp:value>, loc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCALE_PARAM_PROTO</name></cpp:macro> <cpp:value>, __locale_t loc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HELPER_LOCALE_ARG</name></cpp:macro> <cpp:value>, current</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCALE_PARAM_PROTO</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCALE_ARG</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HELPER_LOCALE_ARG</name></cpp:macro> <cpp:value>, _NL_CURRENT_DATA (LC_TIME)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HELPER_LOCALE_ARG</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COMPILE_WIDE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_IN_EXTENDED_LOCALE_MODEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOUPPER</name><parameter_list>(<parameter><type><name>Ch</name></type></parameter>, <parameter><type><name>L</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__towupper_l (Ch, L)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOLOWER</name><parameter_list>(<parameter><type><name>Ch</name></type></parameter>, <parameter><type><name>L</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__towlower_l (Ch, L)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOUPPER</name><parameter_list>(<parameter><type><name>Ch</name></type></parameter>, <parameter><type><name>L</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>towupper (Ch)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOLOWER</name><parameter_list>(<parameter><type><name>Ch</name></type></parameter>, <parameter><type><name>L</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>towlower (Ch)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_IN_EXTENDED_LOCALE_MODEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOUPPER</name><parameter_list>(<parameter><type><name>Ch</name></type></parameter>, <parameter><type><name>L</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__toupper_l (Ch, L)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOLOWER</name><parameter_list>(<parameter><type><name>Ch</name></type></parameter>, <parameter><type><name>L</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tolower_l (Ch, L)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOUPPER</name><parameter_list>(<parameter><type><name>Ch</name></type></parameter>, <parameter><type><name>L</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>toupper (Ch)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOLOWER</name><parameter_list>(<parameter><type><name>Ch</name></type></parameter>, <parameter><type><name>L</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tolower (Ch)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOUPPER</name><parameter_list>(<parameter><type><name>Ch</name></type></parameter>, <parameter><type><name>L</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(islower (Ch) ? toupper (Ch) : (Ch))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOLOWER</name><parameter_list>(<parameter><type><name>Ch</name></type></parameter>, <parameter><type><name>L</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(isupper (Ch) ? tolower (Ch) : (Ch))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISDIGIT</name><parameter_list>(<parameter><type><name>Ch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((unsigned int) (Ch) - L_('0') &lt;= 9)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>CHAR_T</name> <modifier>*</modifier></type>
<name>memcpy_lowcase</name> <parameter_list>(<parameter><decl><type><name>CHAR_T</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CHAR_T</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <name>len</name></type> <name>LOCALE_PARAM_PROTO</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>len</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dest</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <call><name>TOLOWER</name> <argument_list>(<argument><expr><operator>(</operator><name>UCHAR_T</name><operator>)</operator> <name><name>src</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>, <argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>dest</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CHAR_T</name> <modifier>*</modifier></type>
<name>memcpy_uppcase</name> <parameter_list>(<parameter><decl><type><name>CHAR_T</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CHAR_T</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <name>len</name></type> <name>LOCALE_PARAM_PROTO</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>len</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dest</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <call><name>TOUPPER</name> <argument_list>(<argument><expr><operator>(</operator><name>UCHAR_T</name><operator>)</operator> <name><name>src</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>, <argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>dest</name></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator> <name>HAVE_TM_GMTOFF</name></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tm_diff</name></cpp:macro> <cpp:value>ftime_tm_diff</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>tm_diff</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<decl_stmt><decl><type><name>int</name></type> <name>a4</name> <init>= <expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>TM_YEAR_BASE</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <operator>!</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b4</name> <init>= <expr><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>TM_YEAR_BASE</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <operator>!</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a100</name> <init>= <expr><name>a4</name> <operator>/</operator> <literal type="number">25</literal> <operator>-</operator> <operator>(</operator><name>a4</name> <operator>%</operator> <literal type="number">25</literal> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b100</name> <init>= <expr><name>b4</name> <operator>/</operator> <literal type="number">25</literal> <operator>-</operator> <operator>(</operator><name>b4</name> <operator>%</operator> <literal type="number">25</literal> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a400</name> <init>= <expr><name>a100</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b400</name> <init>= <expr><name>b100</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>intervening_leap_days</name> <init>= <expr><operator>(</operator><name>a4</name> <operator>-</operator> <name>b4</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>a100</name> <operator>-</operator> <name>b100</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>a400</name> <operator>-</operator> <name>b400</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>years</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>tm_year</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>days</name> <init>= <expr><operator>(</operator><literal type="number">365</literal> <operator>*</operator> <name>years</name> <operator>+</operator> <name>intervening_leap_days</name>
<operator>+</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>tm_yday</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>tm_yday</name></name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><literal type="number">60</literal> <operator>*</operator> <operator>(</operator><literal type="number">60</literal> <operator>*</operator> <operator>(</operator><literal type="number">24</literal> <operator>*</operator> <name>days</name> <operator>+</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>tm_hour</name></name><operator>)</operator><operator>)</operator>
<operator>+</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>tm_min</name></name><operator>)</operator><operator>)</operator>
<operator>+</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>tm_sec</name></name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISO_WEEK_START_WDAY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISO_WEEK1_WDAY</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YDAY_MINIMUM</name></cpp:macro> <cpp:value>(-366)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>__inline__</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<specifier>static</specifier> <name>int</name></type>
<name>iso_week_days</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>yday</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wday</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>big_enough_multiple_of_7</name> <init>= <expr><operator>(</operator><operator>-</operator><name>YDAY_MINIMUM</name> <operator>/</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>yday</name>
<operator>-</operator> <operator>(</operator><name>yday</name> <operator>-</operator> <name>wday</name> <operator>+</operator> <name>ISO_WEEK1_WDAY</name> <operator>+</operator> <name>big_enough_multiple_of_7</name><operator>)</operator> <operator>%</operator> <literal type="number">7</literal>
<operator>+</operator> <name>ISO_WEEK1_WDAY</name> <operator>-</operator> <name>ISO_WEEK_START_WDAY</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><name>defined</name> <name>_NL_CURRENT</name> <operator>||</operator> <name>HAVE_STRFTIME</name><operator>)</operator></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>CHAR_T</name> <specifier>const</specifier></type> <name><name>weekday_name</name><index>[]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><call><name>L_</name><argument_list>(<argument><expr><literal type="string">"Sunday"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="string">"Monday"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="string">"Tuesday"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="string">"Wednesday"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>L_</name><argument_list>(<argument><expr><literal type="string">"Thursday"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="string">"Friday"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>L_</name><argument_list>(<argument><literal type="string">"Saturday"</literal></argument>)</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>CHAR_T</name> <specifier>const</specifier></type> <name><name>month_name</name><index>[]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><call><name>L_</name><argument_list>(<argument><expr><literal type="string">"January"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="string">"February"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="string">"March"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="string">"April"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="string">"May"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>L_</name><argument_list>(<argument><expr><literal type="string">"June"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="string">"July"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="string">"August"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="string">"September"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="string">"October"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>L_</name><argument_list>(<argument><expr><literal type="string">"November"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>L_</name><argument_list>(<argument><literal type="string">"December"</literal></argument>)</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>emacs</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>defined</name> <name>my_strftime</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>my_strftime</name></cpp:macro> <cpp:value>nstrftime</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>my_strftime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>extra_args</name></cpp:macro> <cpp:value>, ut, ns</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>extra_args_spec</name></cpp:macro> <cpp:value>, int ut, int ns</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COMPILE_WIDE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>my_strftime</name></cpp:macro> <cpp:value>wcsftime</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nl_get_alt_digit</name></cpp:macro> <cpp:value>_nl_get_walt_digit</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>my_strftime</name></cpp:macro> <cpp:value>strftime</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nl_get_alt_digit</name></cpp:macro> <cpp:value>_nl_get_alt_digit</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>extra_args</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>extra_args_spec</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ut</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ns</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator> <name>defined</name> <name>_LIBC</name> <operator>&amp;&amp;</operator> <operator>!</operator> <name>HAVE_RUN_TZSET_TEST</name></expr></cpp:if>



<expr_stmt><expr><literal type="string">"you must run the autoconf test for a working tzset function"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<name>size_t</name>
<macro><name>my_strftime</name> <argument_list>(<argument>CHAR_T *s</argument>, <argument>size_t maxsize</argument>, <argument>const CHAR_T *format</argument>,
<argument>const struct tm *tp extra_args_spec LOCALE_PARAM_PROTO</argument>)</argument_list></macro>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_LIBC</name> <operator>&amp;&amp;</operator> <name>defined</name> <name>USE_IN_EXTENDED_LOCALE_MODEL</name></expr></cpp:if>
struct <expr><name>locale_data</name> <operator>*</operator><specifier>const</specifier> <name>current</name> <operator>=</operator> <name><name>loc</name><operator>-&gt;</operator><name>__locales</name><index>[<expr><name>LC_TIME</name></expr>]</index></name></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>int</name> <name>hour12</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tm_hour</name></name></expr>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_NL_CURRENT</name></expr></argument>)</argument_list></call></expr></cpp:if>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_wkday</name></cpp:macro> <cpp:value>((const CHAR_T *) _NL_CURRENT (LC_TIME, NLW(ABDAY_1) + tp-&gt;tm_wday))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_wkday</name></cpp:macro> <cpp:value>((const CHAR_T *) _NL_CURRENT (LC_TIME, NLW(DAY_1) + tp-&gt;tm_wday))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_month</name></cpp:macro> <cpp:value>((const CHAR_T *) _NL_CURRENT (LC_TIME, NLW(ABMON_1) + tp-&gt;tm_mon))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_month</name></cpp:macro> <cpp:value>((const CHAR_T *) _NL_CURRENT (LC_TIME, NLW(MON_1) + tp-&gt;tm_mon))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ampm</name></cpp:macro> <cpp:value>((const CHAR_T *) _NL_CURRENT (LC_TIME, tp-&gt;tm_hour &gt; 11 ? NLW(PM_STR) : NLW(AM_STR)))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>aw_len</name></cpp:macro> <cpp:value>STRLEN (a_wkday)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>am_len</name></cpp:macro> <cpp:value>STRLEN (a_month)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_len</name></cpp:macro> <cpp:value>STRLEN (ampm)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_STRFTIME</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_wkday</name></cpp:macro> <cpp:value>(weekday_name[tp-&gt;tm_wday])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_month</name></cpp:macro> <cpp:value>(month_name[tp-&gt;tm_mon])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_wkday</name></cpp:macro> <cpp:value>f_wkday</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_month</name></cpp:macro> <cpp:value>f_month</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ampm</name></cpp:macro> <cpp:value>(L_("AMPM") + 2 * (tp-&gt;tm_hour &gt; 11))</cpp:value></cpp:define>

<expr><name>size_t</name> <name>aw_len</name> <operator>=</operator> <literal type="number">3</literal></expr>;
<expr><name>size_t</name> <name>am_len</name> <operator>=</operator> <literal type="number">3</literal></expr>;
<expr><name>size_t</name> <name>ap_len</name> <operator>=</operator> <literal type="number">2</literal></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>zone</name></expr>;
<expr><name>size_t</name> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>CHAR_T</name> <operator>*</operator><name>p</name> <operator>=</operator> <name>s</name></expr>;
<expr><specifier>const</specifier> <name>CHAR_T</name> <operator>*</operator><name>f</name></expr>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DO_MULTIBYTE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>defined</name> <name>COMPILE_WIDE</name></expr></cpp:if>
<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>format_end</name> <operator>=</operator> <name>NULL</name></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>zone</name> <operator>=</operator> <name>NULL</name></expr>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_TM_ZONE</name></expr></cpp:if>






<expr><name>zone</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>tp</name><operator>-&gt;</operator><name>tm_zone</name></name></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_TZNAME</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>ut</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name>zone</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>zone</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>zone</name> <operator>=</operator> <literal type="string">"GMT"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
<if_stmt><else>else
<block>{<block_content>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_TZSET</name></expr></cpp:if>
<expr_stmt><expr><call><name>tzset</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>hour12</name> <operator>&gt;</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hour12</name> <operator>-=</operator> <literal type="number">12</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
if <condition>(<expr><name>hour12</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hour12</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>f</name> <operator>=</operator> <name>format</name></expr>;</init> <condition><expr><operator>*</operator><name>f</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><operator>++</operator><name>f</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pad</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>modifier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>digits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>number_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>negative_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>CHAR_T</name> <modifier>*</modifier></type><name>subfmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CHAR_T</name> <modifier>*</modifier></type><name>bufp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CHAR_T</name></type> <name><name>buf</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>time_t</name></expr></argument>)</argument_list></sizeof></expr>
?</condition><then> <expr><call><name>INT_STRLEN_BOUND</name> <argument_list>(<argument><expr><name>time_t</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>INT_STRLEN_BOUND</name> <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>to_lowcase</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>to_uppcase</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>change_case</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>format_char</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DO_MULTIBYTE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>defined</name> <name>COMPILE_WIDE</name></expr></cpp:if>
<switch>switch <condition>(<expr><operator>*</operator><name>f</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call></expr>:</case>
<break>break;</break>

<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'\b'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'\v'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'\f'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'!'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'&amp;'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'1'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'3'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'4'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'5'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'6'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'7'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'8'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'9'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'&lt;'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'B'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'F'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'G'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'H'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'J'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'K'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'L'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'M'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'N'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'O'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'Q'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'T'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'W'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'X'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'Y'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'Z'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'^'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'b'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'f'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'g'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'h'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'i'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'j'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'k'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'o'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'q'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'u'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'v'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'w'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'y'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'z'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'{'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr>:</case> <case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'~'</literal></expr></argument>)</argument_list></call></expr>:</case>




<expr_stmt><expr><call><name>add</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>*</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<default>default:</default>


<block>{<block_content>
<decl_stmt><decl><type><name>mbstate_t</name></type> <name>mbstate</name> <init>= <expr><name>mbstate_zero</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>fsize</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>format_end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>format_end</name> <operator>=</operator> <name>f</name> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>fsize</name> <operator>=</operator> <name>format_end</name> <operator>-</operator> <name>f</name></expr>;</expr_stmt>

<do>do
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes</name> <init>= <expr><call><name>mbrlen</name> <argument_list>(<argument><expr><name>f</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>fsize</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mbstate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>f</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>
</block_content>}</block>
while <condition>(<expr><operator>!</operator> <call><name>mbsinit</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>mbstate</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<expr_stmt><expr><call><name>cpy</name> <argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>+=</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block>
</block_content>}</block></switch>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>




<if_stmt><if>if <condition>(<expr><operator>*</operator><name>f</name> <operator>!=</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>add</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>*</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><operator>++</operator><name>f</name></expr>)</condition>
<block>{<block_content>

<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>pad</name> <operator>=</operator> <operator>*</operator><name>f</name></expr>;</expr_stmt>
<continue>continue;</continue>


<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'^'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>to_uppcase</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>change_case</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><call><name>ISDIGIT</name> <argument_list>(<argument><expr><operator>*</operator><name>f</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<do>do
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>/</operator> <literal type="number">10</literal>
<operator>||</operator> <operator>(</operator><name>width</name> <operator>==</operator> <name>INT_MAX</name> <operator>/</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>f</name> <operator>-</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>INT_MAX</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>width</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>+=</operator> <operator>*</operator><name>f</name> <operator>-</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>++</operator><name>f</name></expr>;</expr_stmt>
</block_content>}</block>
while <condition>(<expr><call><name>ISDIGIT</name> <argument_list>(<argument><expr><operator>*</operator><name>f</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>


<switch>switch <condition>(<expr><operator>*</operator><name>f</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'O'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>modifier</name> <operator>=</operator> <operator>*</operator><name>f</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name>modifier</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>


<expr_stmt><expr><name>format_char</name> <operator>=</operator> <operator>*</operator><name>f</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>format_char</name></expr>)</condition>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO_NUMBER</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>digits = d &gt; width ? d : width; number_value = v; goto do_number</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO_NUMBER_SPACEPAD</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>digits = d &gt; width ? d : width; number_value = v; goto do_number_spacepad</cpp:value></cpp:define>



<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>modifier</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad_format</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>add</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>*</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>modifier</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad_format</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>change_case</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>to_uppcase</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>to_lowcase</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_NL_CURRENT</name> <operator>||</operator> <operator>!</operator><name>HAVE_STRFTIME</name></expr></cpp:if>
<expr_stmt><expr><call><name>cpy</name> <argument_list>(<argument><expr><name>aw_len</name></expr></argument>, <argument><expr><name>a_wkday</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<goto>goto <name>underlying_strftime</name>;</goto>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><literal type="char">'A'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>modifier</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad_format</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>change_case</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>to_uppcase</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>to_lowcase</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_NL_CURRENT</name> <operator>||</operator> <operator>!</operator><name>HAVE_STRFTIME</name></expr></cpp:if>
<expr_stmt><expr><call><name>cpy</name> <argument_list>(<argument><expr><call><name>STRLEN</name> <argument_list>(<argument><expr><name>f_wkday</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>f_wkday</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<goto>goto <name>underlying_strftime</name>;</goto>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'b'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'h'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>change_case</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>to_uppcase</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>to_lowcase</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>modifier</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad_format</name>;</goto></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_NL_CURRENT</name> <operator>||</operator> <operator>!</operator><name>HAVE_STRFTIME</name></expr></cpp:if>
<expr_stmt><expr><call><name>cpy</name> <argument_list>(<argument><expr><name>am_len</name></expr></argument>, <argument><expr><name>a_month</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<goto>goto <name>underlying_strftime</name>;</goto>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'B'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>modifier</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad_format</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>change_case</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>to_uppcase</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>to_lowcase</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_NL_CURRENT</name> <operator>||</operator> <operator>!</operator><name>HAVE_STRFTIME</name></expr></cpp:if>
<expr_stmt><expr><call><name>cpy</name> <argument_list>(<argument><expr><call><name>STRLEN</name> <argument_list>(<argument><expr><name>f_month</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>f_month</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<goto>goto <name>underlying_strftime</name>;</goto>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>modifier</name> <operator>==</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'O'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad_format</name>;</goto></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_NL_CURRENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name>modifier</name> <operator>==</operator> <literal type="char">'E'</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>subfmt</name> <operator>=</operator>
<operator>(</operator><specifier>const</specifier> <name>CHAR_T</name> <operator>*</operator><operator>)</operator> <call><name>_NL_CURRENT</name> <argument_list>(<argument><expr><name>LC_TIME</name></expr></argument>,
<argument><expr><call><name>NLW</name><argument_list>(<argument><expr><name>ERA_D_T_FMT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator>
<operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>subfmt</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>CHAR_T</name> <operator>*</operator><operator>)</operator> <call><name>_NL_CURRENT</name> <argument_list>(<argument><expr><name>LC_TIME</name></expr></argument>, <argument><expr><call><name>NLW</name><argument_list>(<argument><expr><name>D_T_FMT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_STRFTIME</name></expr></cpp:if>
<goto>goto <name>underlying_strftime</name>;</goto>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>subfmt</name> <operator>=</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="string">"%a %b %e %H:%M:%S %Y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>subformat</name>:</label>
<block>{<block_content>
<decl_stmt><decl><type><name>CHAR_T</name> <modifier>*</modifier></type><name>old_start</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <macro><name>my_strftime</name> <argument_list>(<argument>NULL</argument>, <argument>(size_t) -<literal type="number">1</literal></argument>, <argument>subfmt</argument>,
<argument>tp extra_args LOCALE_ARG</argument>)</argument_list></macro></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>add</name> <argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><macro><name>my_strftime</name> <argument_list>(<argument>p</argument>, <argument>maxsize - i</argument>, <argument>subfmt</argument>,
<argument>tp extra_args LOCALE_ARG</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>to_uppcase</name></expr>)</condition><block type="pseudo"><block_content>
<while>while <condition>(<expr><name>old_start</name> <operator>&lt;</operator> <name>p</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>old_start</name> <operator>=</operator> <call><name>TOUPPER</name> <argument_list>(<argument><expr><operator>(</operator><name>UCHAR_T</name><operator>)</operator> <operator>*</operator><name>old_start</name></expr></argument>, <argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>old_start</name></expr>;</expr_stmt>
</block_content>}</block></while></block_content></block></if></if_stmt>
</block_content>}</block>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_STRFTIME</name> <operator>&amp;&amp;</operator> <operator>!</operator> <operator>(</operator><name>defined</name> <name>_NL_CURRENT</name> <operator>&amp;&amp;</operator> <name>HAVE_STRUCT_ERA_ENTRY</name><operator>)</operator></expr></cpp:if>
<label><name>underlying_strftime</name>:</label>
<block>{<block_content>


<decl_stmt><decl><type><name>char</name></type> <name><name>ufmt</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>u</name> <init>= <expr><name>ufmt</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ubuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>strftime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>strftime</name></cpp:undef>
<function_decl><type><name>size_t</name></type> <name>strftime</name> <parameter_list>()</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>u</name><operator>++</operator> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>modifier</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>u</name><operator>++</operator> <operator>=</operator> <name>modifier</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>u</name><operator>++</operator> <operator>=</operator> <name>format_char</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>u</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strftime</name> <argument_list>(<argument><expr><name>ubuf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>ubuf</name></sizeof></expr></argument>, <argument><expr><name>ufmt</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ubuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>cpy</name> <argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>ubuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>modifier</name> <operator>==</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'O'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad_format</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>modifier</name> <operator>==</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_STRUCT_ERA_ENTRY</name></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>era_entry</name></name> <modifier>*</modifier></type><name>era</name> <init>= <macro><name>_nl_get_era_entry</name> <argument_list>(<argument>tp HELPER_LOCALE_ARG</argument>)</argument_list></macro></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>era</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COMPILE_WIDE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>__wcslen</name> <argument_list>(<argument><expr><name><name>era</name><operator>-&gt;</operator><name>era_wname</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cpy</name> <argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>era</name><operator>-&gt;</operator><name>era_wname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>era</name><operator>-&gt;</operator><name>era_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cpy</name> <argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>era</name><operator>-&gt;</operator><name>era_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_STRFTIME</name></expr></cpp:if>
<goto>goto <name>underlying_strftime</name>;</goto>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>year</name> <init>= <expr><name><name>tp</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+</operator> <name>TM_YEAR_BASE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DO_NUMBER</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>year</name> <operator>/</operator> <literal type="number">100</literal> <operator>-</operator> <operator>(</operator><name>year</name> <operator>%</operator> <literal type="number">100</literal> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>modifier</name> <operator>==</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'O'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad_format</name>;</goto></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_NL_CURRENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name>modifier</name> <operator>==</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>subfmt</name> <operator>=</operator>
<operator>(</operator><specifier>const</specifier> <name>CHAR_T</name> <operator>*</operator><operator>)</operator><call><name>_NL_CURRENT</name> <argument_list>(<argument><expr><name>LC_TIME</name></expr></argument>, <argument><expr><call><name>NLW</name><argument_list>(<argument><expr><name>ERA_D_FMT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator>
<operator>!=</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>subfmt</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>CHAR_T</name> <operator>*</operator><operator>)</operator> <call><name>_NL_CURRENT</name> <argument_list>(<argument><expr><name>LC_TIME</name></expr></argument>, <argument><expr><call><name>NLW</name><argument_list>(<argument><expr><name>D_FMT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>subformat</name>;</goto>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_STRFTIME</name></expr></cpp:if>
<goto>goto <name>underlying_strftime</name>;</goto>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>modifier</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad_format</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>subfmt</name> <operator>=</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="string">"%m/%d/%y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>subformat</name>;</goto>

<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>modifier</name> <operator>==</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad_format</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DO_NUMBER</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>modifier</name> <operator>==</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad_format</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DO_NUMBER_SPACEPAD</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<label><name>do_number_spacepad</name>:</label>

<if_stmt><if>if <condition>(<expr><name>pad</name> <operator>!=</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>pad</name> <operator>!=</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pad</name> <operator>=</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>do_number</name>:</label>


<if_stmt><if>if <condition>(<expr><name>modifier</name> <operator>==</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'O'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>&lt;=</operator> <name>number_value</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_NL_CURRENT</name></expr></argument>)</argument_list></call></expr></cpp:if>


<decl_stmt><decl><type><specifier>const</specifier> <name>CHAR_T</name> <modifier>*</modifier></type><name>cp</name> <init>= <macro><name>nl_get_alt_digit</name> <argument_list>(<argument>number_value
HELPER_LOCALE_ARG</argument>)</argument_list></macro></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>digitlen</name> <init>= <expr><call><name>STRLEN</name> <argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>digitlen</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>cpy</name> <argument_list>(<argument><expr><name>digitlen</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_STRFTIME</name></expr></cpp:if>
<goto>goto <name>underlying_strftime</name>;</goto>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>u</name> <init>= <expr><name>number_value</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bufp</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>negative_number</name> <operator>=</operator> <name>number_value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>negative_number</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>u</name> <operator>=</operator> <operator>-</operator><name>u</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<do>do<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>--</operator><name>bufp</name> <operator>=</operator> <name>u</name> <operator>%</operator> <literal type="number">10</literal> <operator>+</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
while <condition>(<expr><operator>(</operator><name>u</name> <operator>/=</operator> <literal type="number">10</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block>

<label><name>do_number_sign_and_padding</name>:</label>
<if_stmt><if>if <condition>(<expr><name>negative_number</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>--</operator><name>bufp</name> <operator>=</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pad</name> <operator>!=</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>padding</name> <init>= <expr><name>digits</name> <operator>-</operator> <operator>(</operator><name>buf</name> <operator>+</operator> <operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator>
<operator>-</operator> <name>bufp</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>padding</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pad</name> <operator>==</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>padding</name> <operator>&gt;=</operator> <name>maxsize</name> <operator>-</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset_space</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>padding</name></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <ternary><condition><expr><name>width</name> <operator>&gt;</operator> <name>padding</name></expr> ?</condition><then> <expr><name>width</name> <operator>-</operator> <name>padding</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>digits</name> <operator>&gt;=</operator> <name>maxsize</name> <operator>-</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>negative_number</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>bufp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset_zero</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>padding</name></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cpy</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>bufp</name></expr></argument>, <argument><expr><name>bufp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'F'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>modifier</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad_format</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>subfmt</name> <operator>=</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="string">"%Y-%m-%d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>subformat</name>;</goto>

<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'H'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>modifier</name> <operator>==</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad_format</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DO_NUMBER</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>modifier</name> <operator>==</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad_format</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DO_NUMBER</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>hour12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'k'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>modifier</name> <operator>==</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad_format</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DO_NUMBER_SPACEPAD</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>modifier</name> <operator>==</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad_format</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DO_NUMBER_SPACEPAD</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>hour12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'j'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>modifier</name> <operator>==</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad_format</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DO_NUMBER</name> <argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name><name>tp</name><operator>-&gt;</operator><name>tm_yday</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'M'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>modifier</name> <operator>==</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad_format</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DO_NUMBER</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>tm_min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>modifier</name> <operator>==</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad_format</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DO_NUMBER</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'N'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>modifier</name> <operator>==</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad_format</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>number_value</name> <operator>=</operator> <name>ns</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>width</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>number_value</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DO_NUMBER</name> <argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>number_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><call><name>add</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>to_lowcase</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>_NL_CURRENT</name> <operator>&amp;&amp;</operator> <name>HAVE_STRFTIME</name></expr></cpp:if>
<expr_stmt><expr><name>format_char</name> <operator>=</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>change_case</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>to_uppcase</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>to_lowcase</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_NL_CURRENT</name> <operator>||</operator> <operator>!</operator><name>HAVE_STRFTIME</name></expr></cpp:if>
<expr_stmt><expr><call><name>cpy</name> <argument_list>(<argument><expr><name>ap_len</name></expr></argument>, <argument><expr><name>ampm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<goto>goto <name>underlying_strftime</name>;</goto>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>subfmt</name> <operator>=</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="string">"%H:%M"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>subformat</name>;</goto>

<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>_NL_CURRENT</name> <operator>&amp;&amp;</operator> <name>HAVE_STRFTIME</name></expr></cpp:if>
<goto>goto <name>underlying_strftime</name>;</goto>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_NL_CURRENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>subfmt</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>CHAR_T</name> <operator>*</operator><operator>)</operator> <call><name>_NL_CURRENT</name> <argument_list>(<argument><expr><name>LC_TIME</name></expr></argument>,
<argument><expr><call><name>NLW</name><argument_list>(<argument><expr><name>T_FMT_AMPM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator>
<operator>==</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>subfmt</name> <operator>=</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="string">"%I:%M:%S %p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>subformat</name>;</goto>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>modifier</name> <operator>==</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad_format</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DO_NUMBER</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>ltm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ltm</name> <operator>=</operator> <operator>*</operator><name>tp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>mktime</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ltm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>bufp</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>negative_number</name> <operator>=</operator> <name>t</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<do>do
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name>t</name> <operator>%</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>t</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>negative_number</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>-</operator><name>d</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>%</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <name>d</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>t</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>--</operator><name>bufp</name> <operator>=</operator> <name>d</name> <operator>+</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
while <condition>(<expr><name>t</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<expr_stmt><expr><name>digits</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>do_number_sign_and_padding</name>;</goto>
</block_content>}</block>

<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'X'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>modifier</name> <operator>==</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'O'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad_format</name>;</goto></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_NL_CURRENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name>modifier</name> <operator>==</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>subfmt</name> <operator>=</operator>
<operator>(</operator><specifier>const</specifier> <name>CHAR_T</name> <operator>*</operator><operator>)</operator> <call><name>_NL_CURRENT</name> <argument_list>(<argument><expr><name>LC_TIME</name></expr></argument>, <argument><expr><call><name>NLW</name><argument_list>(<argument><expr><name>ERA_T_FMT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator>
<operator>!=</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>subfmt</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>CHAR_T</name> <operator>*</operator><operator>)</operator> <call><name>_NL_CURRENT</name> <argument_list>(<argument><expr><name>LC_TIME</name></expr></argument>, <argument><expr><call><name>NLW</name><argument_list>(<argument><expr><name>T_FMT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>subformat</name>;</goto>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_STRFTIME</name></expr></cpp:if>
<goto>goto <name>underlying_strftime</name>;</goto>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'T'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>subfmt</name> <operator>=</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="string">"%H:%M:%S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>subformat</name>;</goto>

<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><call><name>add</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'u'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><call><name>DO_NUMBER</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>tp</name><operator>-&gt;</operator><name>tm_wday</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>%</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>modifier</name> <operator>==</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad_format</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DO_NUMBER</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>tp</name><operator>-&gt;</operator><name>tm_yday</name></name> <operator>-</operator> <name><name>tp</name><operator>-&gt;</operator><name>tm_wday</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'g'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'G'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>modifier</name> <operator>==</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad_format</name>;</goto></block_content></block></if></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>year</name> <init>= <expr><name><name>tp</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+</operator> <name>TM_YEAR_BASE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>days</name> <init>= <expr><call><name>iso_week_days</name> <argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>tm_yday</name></name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>tm_wday</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>days</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>year</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>days</name> <operator>=</operator> <call><name>iso_week_days</name> <argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>tm_yday</name></name> <operator>+</operator> <operator>(</operator><literal type="number">365</literal> <operator>+</operator> <call><name>__isleap</name> <argument_list>(<argument><expr><name>year</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>,
<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>tm_wday</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><call><name>iso_week_days</name> <argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>tm_yday</name></name> <operator>-</operator> <operator>(</operator><literal type="number">365</literal> <operator>+</operator> <call><name>__isleap</name> <argument_list>(<argument><expr><name>year</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>,
<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>tm_wday</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>d</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>year</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>days</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>f</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'g'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><call><name>DO_NUMBER</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>year</name> <operator>%</operator> <literal type="number">100</literal> <operator>+</operator> <literal type="number">100</literal><operator>)</operator> <operator>%</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'G'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><call><name>DO_NUMBER</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>year</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<default>default:</default>
<expr_stmt><expr><call><name>DO_NUMBER</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>days</name> <operator>/</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block>

<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'W'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>modifier</name> <operator>==</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad_format</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DO_NUMBER</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>tp</name><operator>-&gt;</operator><name>tm_yday</name></name> <operator>-</operator> <operator>(</operator><name><name>tp</name><operator>-&gt;</operator><name>tm_wday</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>%</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'w'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>modifier</name> <operator>==</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad_format</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DO_NUMBER</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>tm_wday</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'Y'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>modifier</name> <operator>==</operator> <literal type="char">'E'</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_STRUCT_ERA_ENTRY</name></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>era_entry</name></name> <modifier>*</modifier></type><name>era</name> <init>= <macro><name>_nl_get_era_entry</name> <argument_list>(<argument>tp HELPER_LOCALE_ARG</argument>)</argument_list></macro></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>era</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COMPILE_WIDE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>subfmt</name> <operator>=</operator> <name><name>era</name><operator>-&gt;</operator><name>era_wformat</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>subfmt</name> <operator>=</operator> <name><name>era</name><operator>-&gt;</operator><name>era_format</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<goto>goto <name>subformat</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_STRFTIME</name></expr></cpp:if>
<goto>goto <name>underlying_strftime</name>;</goto>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>modifier</name> <operator>==</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'O'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad_format</name>;</goto></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DO_NUMBER</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+</operator> <name>TM_YEAR_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'y'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>modifier</name> <operator>==</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_STRUCT_ERA_ENTRY</name></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>era_entry</name></name> <modifier>*</modifier></type><name>era</name> <init>= <macro><name>_nl_get_era_entry</name> <argument_list>(<argument>tp HELPER_LOCALE_ARG</argument>)</argument_list></macro></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>era</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><name><name>tp</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>-</operator> <name><name>era</name><operator>-&gt;</operator><name>start_date</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DO_NUMBER</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>era</name><operator>-&gt;</operator><name>offset</name></name>
<operator>+</operator> <name>delta</name> <operator>*</operator> <name><name>era</name><operator>-&gt;</operator><name>absolute_direction</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_STRFTIME</name></expr></cpp:if>
<goto>goto <name>underlying_strftime</name>;</goto>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>DO_NUMBER</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>tp</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>%</operator> <literal type="number">100</literal> <operator>+</operator> <literal type="number">100</literal><operator>)</operator> <operator>%</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'Z'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>change_case</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>to_uppcase</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>to_lowcase</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_TZNAME</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>zone</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>zone</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>tp</name><operator>-&gt;</operator><name>tm_isdst</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>zone</name> <operator>=</operator> <name><name>tzname</name><index>[<expr><name><name>tp</name><operator>-&gt;</operator><name>tm_isdst</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>zone</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>zone</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COMPILE_WIDE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>


<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>wczone</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>widen</name> <argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>wczone</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cpy</name> <argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>wczone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>cpy</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>

<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'z'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>tm_isdst</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>diff</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_TM_GMTOFF</name></expr></cpp:if>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tm_gmtoff</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>ut</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>gtm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>ltm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>lt</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ltm</name> <operator>=</operator> <operator>*</operator><name>tp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lt</name> <operator>=</operator> <call><name>mktime</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ltm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lt</name> <operator>==</operator> <operator>(</operator><name>time_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>



<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>__localtime_r</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>lt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>(</operator><operator>(</operator><name><name>ltm</name><operator>.</operator><name>tm_sec</name></name> <operator>^</operator> <name><name>tm</name><operator>.</operator><name>tm_sec</name></name><operator>)</operator>
<operator>|</operator> <operator>(</operator><name><name>ltm</name><operator>.</operator><name>tm_min</name></name> <operator>^</operator> <name><name>tm</name><operator>.</operator><name>tm_min</name></name><operator>)</operator>
<operator>|</operator> <operator>(</operator><name><name>ltm</name><operator>.</operator><name>tm_hour</name></name> <operator>^</operator> <name><name>tm</name><operator>.</operator><name>tm_hour</name></name><operator>)</operator>
<operator>|</operator> <operator>(</operator><name><name>ltm</name><operator>.</operator><name>tm_mday</name></name> <operator>^</operator> <name><name>tm</name><operator>.</operator><name>tm_mday</name></name><operator>)</operator>
<operator>|</operator> <operator>(</operator><name><name>ltm</name><operator>.</operator><name>tm_mon</name></name> <operator>^</operator> <name><name>tm</name><operator>.</operator><name>tm_mon</name></name><operator>)</operator>
<operator>|</operator> <operator>(</operator><name><name>ltm</name><operator>.</operator><name>tm_year</name></name> <operator>^</operator> <name><name>tm</name><operator>.</operator><name>tm_year</name></name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>__gmtime_r</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>lt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gtm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>tm_diff</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ltm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gtm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>add</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>-</operator><name>diff</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>diff</name> <operator>/=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO_NUMBER</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>(</operator><name>diff</name> <operator>/</operator> <literal type="number">60</literal><operator>)</operator> <operator>*</operator> <literal type="number">100</literal> <operator>+</operator> <name>diff</name> <operator>%</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<case>case <expr><call><name>L_</name><argument_list>(<argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><operator>--</operator><name>f</name></expr>;</expr_stmt>

<default>default:</default>



<label><name>bad_format</name>:</label>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flen</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>flen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>f</name><index>[<expr><literal type="number">1</literal> <operator>-</operator> <name>flen</name></expr>]</index></name> <operator>!=</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>flen</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></for>
<expr_stmt><expr><call><name>cpy</name> <argument_list>(<argument><expr><name>flen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><index>[<expr><literal type="number">1</literal> <operator>-</operator> <name>flen</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <name>maxsize</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>L_</name><argument_list>(<argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>i</name></expr>;</return>
}
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
libc_hidden_def <expr_stmt><expr><operator>(</operator><name>my_strftime</name><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>emacs</name></expr></argument>)</argument_list></call></expr></cpp:if>


<name>size_t</name>
<macro><name>emacs_strftimeu</name> <argument_list>(<argument>char *s</argument>, <argument>size_t maxsize</argument>, <argument>const char *format</argument>,
<argument>const struct tm *tp</argument>, <argument>int ut</argument>)</argument_list></macro>
<block>{
<return>return <expr><call><name>my_strftime</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>maxsize</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><name>ut</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
