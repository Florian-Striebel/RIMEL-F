<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/diff/lib/strtoimax.c">


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_CONFIG_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INTTYPES_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_STDINT_H</name></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>verify</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>assertion</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct name { char a[(assertion) ? 1 : -1]; }</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNSIGNED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DECL_STRTOULL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><literal type="string">"this configure-time declaration test was not run"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_DECL_STRTOULL</name> <operator>&amp;&amp;</operator> <name>HAVE_UNSIGNED_LONG_LONG</name></expr></cpp:if>
<name>unsigned</name> <name>long</name> <name>long</name> <call><name>strtoull</name> <argument_list>(<argument><expr><name>char</name> <specifier>const</specifier> <operator>*</operator></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DECL_STRTOLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><literal type="string">"this configure-time declaration test was not run"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_DECL_STRTOLL</name> <operator>&amp;&amp;</operator> <name>HAVE_UNSIGNED_LONG_LONG</name></expr></cpp:if>
<name>long</name> <name>long</name> <call><name>strtoll</name> <argument_list>(<argument><expr><name>char</name> <specifier>const</specifier> <operator>*</operator></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNSIGNED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HAVE_LONG_LONG</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_LONG_LONG</name></cpp:macro> <cpp:value>HAVE_UNSIGNED_LONG_LONG</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT</name></cpp:macro> <cpp:value>uintmax_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtoimax</name></cpp:macro> <cpp:value>strtoumax</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtol</name></cpp:macro> <cpp:value>strtoul</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtoll</name></cpp:macro> <cpp:value>strtoull</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT</name></cpp:macro> <cpp:value>intmax_t</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>INT</name></type>
<name>strtoimax</name> <parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>endptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LONG_LONG</name></expr></cpp:if>
<expr_stmt><expr><call><name>verify</name> <argument_list>(<argument><expr><name>size_is_that_of_long_or_long_long</name></expr></argument>,
<argument><expr><operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>INT</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof>
<operator>||</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>INT</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> sizeof <operator>(</operator><name>long</name> <name>long</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><sizeof>sizeof <argument_list>(<argument><expr><name>INT</name></expr></argument>)</argument_list></sizeof> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>strtoll</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>endptr</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>verify</name> <argument_list>(<argument><expr><name>size_is_that_of_long</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>INT</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><call><name>strtol</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>endptr</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
