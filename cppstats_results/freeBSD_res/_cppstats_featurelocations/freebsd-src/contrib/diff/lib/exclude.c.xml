<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/diff/lib/exclude.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_CONFIG_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>errno</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"exclude.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fnmatch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unlocked-io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xalloc.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>STDC_HEADERS</name> <operator>||</operator> <operator>(</operator><operator>!</operator> <name>defined</name> <name>isascii</name> <operator>&amp;&amp;</operator> <operator>!</operator> <name>HAVE_ISASCII</name><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IN_CTYPE_DOMAIN</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>true</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IN_CTYPE_DOMAIN</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>isascii (c)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>is_space</name> <parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>IN_CTYPE_DOMAIN</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isspace</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>verify</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>assertion</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct name { char a[(assertion) ? 1 : -1]; }</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FNM_CASEFOLD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FNM_CASEFOLD</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FNM_LEADING_DIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FNM_LEADING_DIR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>verify</name> <argument_list>(<argument><expr><name>EXCLUDE_macros_do_not_collide_with_FNM_macros</name></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>EXCLUDE_ANCHORED</name> <operator>|</operator> <name>EXCLUDE_INCLUDE</name> <operator>|</operator> <name>EXCLUDE_WILDCARDS</name><operator>)</operator>
<operator>&amp;</operator> <operator>(</operator><name>FNM_PATHNAME</name> <operator>|</operator> <name>FNM_NOESCAPE</name> <operator>|</operator> <name>FNM_PERIOD</name> <operator>|</operator> <name>FNM_LEADING_DIR</name>
<operator>|</operator> <name>FNM_CASEFOLD</name><operator>)</operator><operator>)</operator>
<operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<struct>struct <name>patopts</name>
<block>{
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>pattern</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>options</name></decl>;</decl_stmt>
}</block>;</struct>



<struct>struct <name>exclude</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>patopts</name></name> <modifier>*</modifier></type><name>exclude</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>exclude_alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>exclude_count</name></decl>;</decl_stmt>
}</block>;</struct>



<function><type><name><name>struct</name> <name>exclude</name></name> <modifier>*</modifier></type>
<name>new_exclude</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xzalloc</name> <argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<call><name>new_exclude</name> <argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type>
<name>free_exclude</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>exclude</name></name> <modifier>*</modifier></type><name>ex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ex</name><operator>-&gt;</operator><name>exclude</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>fnmatch_no_wildcards</name> <parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>pattern</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name>options</name> <operator>&amp;</operator> <name>FNM_LEADING_DIR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>FNM_CASEFOLD</name><operator>)</operator></expr>
?</condition><then> <expr><call><name>strcasecmp</name> <argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</return></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>patlen</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>FNM_CASEFOLD</name><operator>)</operator></expr>
?</condition><then> <expr><call><name>strncasecmp</name> <argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>patlen</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>strncmp</name> <argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>patlen</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>r</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>f</name><index>[<expr><name>patlen</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><name>bool</name></type>
<name>excluded_filename</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>exclude</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>ex</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>exclude_count</name> <init>= <expr><name><name>ex</name><operator>-&gt;</operator><name>exclude_count</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>exclude_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>patopts</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>exclude</name> <init>= <expr><name><name>ex</name><operator>-&gt;</operator><name>exclude</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>excluded</name> <init>= <expr><operator>!</operator><operator>!</operator> <operator>(</operator><name><name>exclude</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>options</name> <operator>&amp;</operator> <name>EXCLUDE_INCLUDE</name><operator>)</operator></expr></init></decl>;</decl_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>exclude_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>pattern</name> <init>= <expr><name><name>exclude</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pattern</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>options</name> <init>= <expr><name><name>exclude</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>options</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>excluded</name> <operator>==</operator> <operator>!</operator><operator>!</operator> <operator>(</operator><name>options</name> <operator>&amp;</operator> <name>EXCLUDE_INCLUDE</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>matcher</name>) <parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list> <init>=
<expr><operator>(</operator><ternary><condition><expr><name>options</name> <operator>&amp;</operator> <name>EXCLUDE_WILDCARDS</name></expr>
?</condition><then> <expr><name>fnmatch</name></expr></then></ternary></expr>
<operator>:</operator> <expr><name>fnmatch_no_wildcards</name></expr>)</init>;</function_decl>
<decl_stmt><decl><type><name>bool</name></type> <name>matched</name> <init>= <expr><operator>(</operator><call>(<modifier>*</modifier><name>matcher</name>) <argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name>options</name> <operator>&amp;</operator> <name>EXCLUDE_ANCHORED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>f</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>!</operator> <name>matched</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <operator>(</operator><call>(<modifier>*</modifier><name>matcher</name>) <argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><name>excluded</name> <operator>^=</operator> <name>matched</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>excluded</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type>
<name>add_exclude</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>exclude</name></name> <modifier>*</modifier></type><name>ex</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>pattern</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>patopts</name></name> <modifier>*</modifier></type><name>patopts</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>-&gt;</operator><name>exclude_count</name></name> <operator>==</operator> <name><name>ex</name><operator>-&gt;</operator><name>exclude_alloc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ex</name><operator>-&gt;</operator><name>exclude</name></name> <operator>=</operator> <call><name>x2nrealloc</name> <argument_list>(<argument><expr><name><name>ex</name><operator>-&gt;</operator><name>exclude</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ex</name><operator>-&gt;</operator><name>exclude_alloc</name></name></expr></argument>,
<argument><expr><sizeof>sizeof <name/></sizeof>*<name><name>ex</name><operator>-&gt;</operator><name>exclude</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>patopts</name> <operator>=</operator> <operator>&amp;</operator><name><name>ex</name><operator>-&gt;</operator><name>exclude</name><index>[<expr><name><name>ex</name><operator>-&gt;</operator><name>exclude_count</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>patopts</name><operator>-&gt;</operator><name>pattern</name></name> <operator>=</operator> <name>pattern</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>patopts</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <name>options</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>add_exclude_file</name> <parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>add_func</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>exclude</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>exclude</name></name> <modifier>*</modifier></type><name>ex</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>,
<parameter><decl><type><name>char</name></type> <name>line_end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>use_stdin</name> <init>= <expr><name><name>filename</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>filename</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>pattern</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>lim</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buf_alloc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buf_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>use_stdin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>in</name> <operator>=</operator> <name>stdin</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator> <operator>(</operator><name>in</name> <operator>=</operator> <call><name>fopen</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>getc</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>buf_count</name> <operator>==</operator> <name>buf_alloc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>x2realloc</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>buf_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>ferror</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>use_stdin</name> <operator>&amp;&amp;</operator> <call><name>fclose</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>xrealloc</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>buf_count</name></expr>]</index></name> <operator>=</operator> <name>line_end</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lim</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>buf_count</name> <operator>+</operator> <operator>!</operator> <operator>(</operator><name>buf_count</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>buf</name><index>[<expr><name>buf_count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>line_end</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>pattern</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>buf</name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>lim</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>line_end</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pattern_end</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_space</name> <argument_list>(<argument><expr><name>line_end</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init>;</init> <condition>;</condition> <incr><expr><name>pattern_end</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>pattern_end</name> <operator>==</operator> <name>pattern</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>next_pattern</name>;</goto></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator> <call><name>is_space</name> <argument_list>(<argument><expr><name><name>pattern_end</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pattern_end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>add_func</name>) <argument_list>(<argument><expr><name>ex</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>next_pattern</name>:</label>
<expr_stmt><expr><name>pattern</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>e</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
