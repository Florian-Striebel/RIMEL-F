<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/diff/lib/version-etc.c">


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_CONFIG_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version-etc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unlocked-io.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gettext.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_</name><parameter_list>(<parameter><type><name>msgid</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>gettext (msgid)</cpp:value></cpp:define>



<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>version_etc_copyright</name> <init>=

<expr><literal type="string">"Copyright (C) 2004 Free Software Foundation, Inc."</literal></expr></init></decl>;</decl_stmt>




<function><type><name>void</name></type>
<name>version_etc_va</name> <parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>package</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>version</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>authors</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n_authors</name></decl>;</decl_stmt>


<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>tmp_authors</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__va_copy</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>__va_copy</name> <argument_list>(<argument><expr><name>tmp_authors</name></expr></argument>, <argument><expr><name>authors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>tmp_authors</name> <operator>=</operator> <name>authors</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>n_authors</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>va_arg</name> <argument_list>(<argument><expr><name>tmp_authors</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>n_authors</name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>command_name</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%s (%s) %s\n"</literal></expr></argument>, <argument><expr><name>command_name</name></expr></argument>, <argument><expr><name>package</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%s %s\n"</literal></expr></argument>, <argument><expr><name>package</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<switch>switch <condition>(<expr><name>n_authors</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><call><name>abort</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><call><name>vfprintf</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Written by %s.\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>authors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><call><name>vfprintf</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Written by %s and %s.\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>authors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><call><name>vfprintf</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Written by %s, %s, and %s.\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>authors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>



<expr_stmt><expr><call><name>vfprintf</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Written by %s, %s, %s,\nand %s.\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>authors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case>



<expr_stmt><expr><call><name>vfprintf</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Written by %s, %s, %s,\n%s, and %s.\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>authors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case>



<expr_stmt><expr><call><name>vfprintf</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Written by %s, %s, %s,\n%s, %s, and %s.\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>authors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">7</literal></expr>:</case>



<expr_stmt><expr><call><name>vfprintf</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Written by %s, %s, %s,\n%s, %s, %s, and %s.\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>authors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case>



<expr_stmt><expr><call><name>vfprintf</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\
Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>authors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case>



<expr_stmt><expr><call><name>vfprintf</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\
Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>authors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>





<expr_stmt><expr><call><name>vfprintf</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\
Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>authors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>authors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putc</name> <argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name> <argument_list>(<argument><expr><name>version_etc_copyright</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putc</name> <argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\
This is free software; see the source for copying conditions. There is NO\n\
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>















<function><type><name>void</name></type>
<name>version_etc</name> <parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>package</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>version</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>authors</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>authors</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>version_etc_va</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>command_name</name></expr></argument>, <argument><expr><name>package</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>authors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
