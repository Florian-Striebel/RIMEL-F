<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/diff/lib/quotesys.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_CONFIG_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;quotesys.h&gt;</cpp:file></cpp:include>





<function><type><name>size_t</name></type>
<name>quote_system_arg</name> <parameter_list>(<parameter><decl><type><name>quoted</name></type></decl></parameter>, <parameter><decl><type><name>arg</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>quoted</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<for>for <control>(<init><expr><name>a</name> <operator>=</operator> <name>arg</name></expr>;</init> <condition>;</condition> <incr><expr><name>a</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>a</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>

<return>return <expr><name>len</name></expr>;</return>

<case>case <expr><literal type="char">'='</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<case>case <expr><literal type="char">'\t'</literal></expr>:</case> <case>case <expr><literal type="char">'\n'</literal></expr>:</case> <case>case <expr><literal type="char">' '</literal></expr>:</case>
<case>case <expr><literal type="char">'!'</literal></expr>:</case> <case>case <expr><literal type="char">'"'</literal></expr>:</case> <case>case <expr><literal type="char">'#'</literal></expr>:</case> <case>case <expr><literal type="char">'$'</literal></expr>:</case> <case>case <expr><literal type="char">'%'</literal></expr>:</case> <case>case <expr><literal type="char">'&amp;'</literal></expr>:</case> <case>case <expr><literal type="char">'\''</literal></expr>:</case>
<case>case <expr><literal type="char">'('</literal></expr>:</case> <case>case <expr><literal type="char">')'</literal></expr>:</case> <case>case <expr><literal type="char">'*'</literal></expr>:</case> <case>case <expr><literal type="char">';'</literal></expr>:</case>
<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case> <case>case <expr><literal type="char">'&gt;'</literal></expr>:</case> <case>case <expr><literal type="char">'?'</literal></expr>:</case> <case>case <expr><literal type="char">'['</literal></expr>:</case> <case>case <expr><literal type="char">'\\'</literal></expr>:</case>
<case>case <expr><literal type="char">'^'</literal></expr>:</case> <case>case <expr><literal type="char">'`'</literal></expr>:</case> <case>case <expr><literal type="char">'|'</literal></expr>:</case> <case>case <expr><literal type="char">'~'</literal></expr>:</case>
<block>{<block_content>



<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>arg</name><operator>++</operator></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name>arg</name> <operator>&lt;</operator> <name>a</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>arg</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>quoted</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>quoted</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>quoted</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<while>while <condition>(<expr><name>arg</name> <operator>&lt;</operator> <name>a</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>arg</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>quoted</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>quoted</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while></block_content></block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>arg</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>quoted</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>quoted</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\''</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>c</name></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>arg</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>quoted</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>quoted</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\''</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>quoted</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>quoted</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\''</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>quoted</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>quoted</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>quoted</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>quoted</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\''</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>quoted</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>quoted</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
</unit>
