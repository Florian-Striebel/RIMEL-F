<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/diff/lib/cmpbuf.c">


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_CONFIG_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SA_RESTART</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SA_INTERRUPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SA_RESTART</name></cpp:macro> <cpp:value>SA_INTERRUPT</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SA_RESTART</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_UNISTD_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INTTYPES_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmpbuf.h"</cpp:file></cpp:include>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TYPE_SIGNED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_SIGNED</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(! ((t) 0 &lt; (t) -1))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TYPE_MINIMUM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_MINIMUM</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((t) (TYPE_SIGNED (t) ? ~ (t) 0 &lt;&lt; (sizeof (t) * CHAR_BIT - 1) : (t) 0))</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TYPE_MAXIMUM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_MAXIMUM</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((t) (~ (t) 0 - TYPE_MINIMUM (t)))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PTRDIFF_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTRDIFF_MAX</name></cpp:macro> <cpp:value>TYPE_MAXIMUM (ptrdiff_t)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIZE_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_MAX</name></cpp:macro> <cpp:value>TYPE_MAXIMUM (size_t)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SSIZE_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSIZE_MAX</name></cpp:macro> <cpp:value>TYPE_MAXIMUM (ssize_t)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MIN</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &lt;= (b) ? (a) : (b))</cpp:value></cpp:define>







<function><type><name>size_t</name></type>
<name>block_read</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nbytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bp</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>buflim</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>nbytes</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>readlim</name> <init>= <expr><name>SSIZE_MAX</name></expr></init></decl>;</decl_stmt>

<do>do
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_to_read</name> <init>= <expr><call><name>MIN</name> <argument_list>(<argument><expr><name>buflim</name> <operator>-</operator> <name>bp</name></expr></argument>, <argument><expr><name>readlim</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>nread</name> <init>= <expr><call><name>read</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>, <argument><expr><name>bytes_to_read</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>nread</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nread</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINVAL</name> <operator>&amp;&amp;</operator> <name>INT_MAX</name> <operator>&lt;</operator> <name>bytes_to_read</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>readlim</name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>SA_RESTART</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<return>return <expr><name>SIZE_MAX</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bp</name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>
</block_content>}</block>
while <condition>(<expr><name>bp</name> <operator>&lt;</operator> <name>buflim</name></expr>)</condition>;</do>

<return>return <expr><name>bp</name> <operator>-</operator> <name>buf</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>size_t</name></type>
<name>buffer_lcm</name> <parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>lcm_max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>lcm</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name>b</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">1024</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>a</name></expr>;</return></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <name>a</name></expr><operator>,</operator> <expr><name>n</name> <operator>=</operator> <name>b</name></expr>;</init> <condition><expr><operator>(</operator><name>r</name> <operator>=</operator> <name>m</name> <operator>%</operator> <name>n</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>m</name> <operator>=</operator> <name>n</name></expr><operator>,</operator> <expr><name>n</name> <operator>=</operator> <name>r</name></expr></incr>)</control><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></for>


<expr_stmt><expr><name>q</name> <operator>=</operator> <name>a</name> <operator>/</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lcm</name> <operator>=</operator> <name>q</name> <operator>*</operator> <name>b</name></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>lcm</name> <operator>&lt;=</operator> <name>lcm_max</name> <operator>&amp;&amp;</operator> <name>lcm</name> <operator>/</operator> <name>b</name> <operator>==</operator> <name>q</name></expr> ?</condition><then> <expr><name>lcm</name></expr> </then><else>: <expr><name>a</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
