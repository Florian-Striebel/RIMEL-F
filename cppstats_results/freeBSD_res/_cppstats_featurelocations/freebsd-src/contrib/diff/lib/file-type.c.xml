<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/diff/lib/file-type.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_CONFIG_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"file-type.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gettext.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_</name><parameter_list>(<parameter><type><name>text</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>gettext (text)</cpp:value></cpp:define>

<function><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type>
<name>file_type</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stat</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>






<if_stmt><if>if <condition>(<expr><call><name>S_ISREG</name> <argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name><name>st</name><operator>-&gt;</operator><name>st_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"regular empty file"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"regular file"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name> <argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"directory"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISBLK</name> <argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"block special file"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISCHR</name> <argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"character special file"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISFIFO</name> <argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"fifo"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISLNK</name> <argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"symbolic link"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISSOCK</name> <argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"socket"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_TYPEISMQ</name> <argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"message queue"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_TYPEISSEM</name> <argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"semaphore"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_TYPEISSHM</name> <argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"shared memory object"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_TYPEISTMO</name> <argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"typed memory object"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"weird file"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
