<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/diff/lib/error.h">

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_ERROR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ERROR_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__attribute__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__GNUC__</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <operator>(</operator><name>__GNUC__</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>__GNUC_MINOR__</name> <operator>&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__attribute__</name><parameter_list>(<parameter><type><name>Spec</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__GNUC__</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <operator>(</operator><name>__GNUC__</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>__GNUC_MINOR__</name> <operator>&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__format__</name></cpp:macro> <cpp:value>format</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__printf__</name></cpp:macro> <cpp:value>printf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>error</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>__status</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__errnum</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
__attribute__ <parameter_list>(<parameter/></parameter_list>(__format__ <parameter_list>(<parameter><decl><type><name>__printf__</name></type></decl></parameter>, <parameter/></parameter_list>3<operator>,</operator> 4</function_decl>)</block_content></block></extern>))<empty_stmt>;</empty_stmt>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>error_at_line</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>__status</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__errnum</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__fname</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__lineno</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
__attribute__ <parameter_list>(<parameter/></parameter_list>(__format__ <parameter_list>(<parameter><decl><type><name>__printf__</name></type></decl></parameter>, <parameter/></parameter_list>5<operator>,</operator> 6</function_decl>)))<empty_stmt>;</empty_stmt>




<function_decl><type><specifier>extern</specifier> <name>void</name></type> (<modifier>*</modifier><name>error_print_progname</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>int</name></type> <name>error_message_count</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>error_one_per_line</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
