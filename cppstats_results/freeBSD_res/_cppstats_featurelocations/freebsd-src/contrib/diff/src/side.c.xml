<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/diff/src/side.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diff.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>print_sdiff_common_lines</name> <parameter_list>(<parameter><decl><type><name>lin</name></type></decl></parameter>, <parameter><decl><type><name>lin</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>print_sdiff_hunk</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>change</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>static</specifier> <name>lin</name></type> <name>next0</name></decl>, <decl><type ref="prev"/><name>next1</name></decl>;</decl_stmt>



<function><type><name>void</name></type>
<name>print_sdiff_script</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>change</name></name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>begin_output</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next0</name> <operator>=</operator> <name>next1</name> <operator>=</operator> <operator>-</operator> <name><name>files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>prefix_lines</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_script</name> <argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>find_change</name></expr></argument>, <argument><expr><name>print_sdiff_hunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_sdiff_common_lines</name> <argument_list>(<argument><expr><name><name>files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>valid_lines</name></expr></argument>, <argument><expr><name><name>files</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>valid_lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>tab_from_to</name> <parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>outfile</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>tab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>tab_size</name> <init>= <expr><name>tabsize</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>expand_tabs</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>tab</name> <operator>=</operator> <name>from</name> <operator>+</operator> <name>tab_size</name> <operator>-</operator> <name>from</name> <operator>%</operator> <name>tab_size</name></expr>;</init> <condition><expr><name>tab</name> <operator>&lt;=</operator> <name>to</name></expr>;</condition> <incr><expr><name>tab</name> <operator>+=</operator> <name>tab_size</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>putc</name> <argument_list>(<argument><expr><literal type="char">'\t'</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>from</name> <operator>=</operator> <name>tab</name></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>from</name><operator>++</operator> <operator>&lt;</operator> <name>to</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putc</name> <argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>to</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>print_half_line</name> <parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>indent</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>out_bound</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>outfile</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>size_t</name></type> <name>in_position</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>size_t</name></type> <name>out_position</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>text_pointer</name> <init>= <expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>text_limit</name> <init>= <expr><name><name>line</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>text_pointer</name> <operator>&lt;</operator> <name>text_limit</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>text_pointer</name><operator>++</operator></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>spaces</name> <init>= <expr><name>tabsize</name> <operator>-</operator> <name>in_position</name> <operator>%</operator> <name>tabsize</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>in_position</name> <operator>==</operator> <name>out_position</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>tabstop</name> <init>= <expr><name>out_position</name> <operator>+</operator> <name>spaces</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>expand_tabs</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>out_bound</name> <operator>&lt;</operator> <name>tabstop</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tabstop</name> <operator>=</operator> <name>out_bound</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>out_position</name> <operator>&lt;</operator> <name>tabstop</name></expr>;</condition> <incr><expr><name>out_position</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putc</name> <argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if>
<if type="elseif">else
if <condition>(<expr><name>tabstop</name> <operator>&lt;</operator> <name>out_bound</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>out_position</name> <operator>=</operator> <name>tabstop</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putc</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>in_position</name> <operator>+=</operator> <name>spaces</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><literal type="char">'\r'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>putc</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tab_from_to</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in_position</name> <operator>=</operator> <name>out_position</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><literal type="char">'\b'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>in_position</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>--</operator><name>in_position</name> <operator>&lt;</operator> <name>out_bound</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>out_position</name> <operator>&lt;=</operator> <name>in_position</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init>;</init> <condition><expr><name>out_position</name> <operator>&lt;</operator> <name>in_position</name></expr>;</condition> <incr><expr><name>out_position</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putc</name> <argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>out_position</name> <operator>=</operator> <name>in_position</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putc</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'\f'</literal></expr>:</case>
<case>case <expr><literal type="char">'\v'</literal></expr>:</case>
<label><name>control_char</name>:</label>
<if_stmt><if>if <condition>(<expr><name>in_position</name> <operator>&lt;</operator> <name>out_bound</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putc</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<default>default:</default>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>isprint</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>control_char</name>;</goto></block_content></block></if></if_stmt>

<case>case <expr><literal type="char">' '</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>in_position</name><operator>++</operator> <operator>&lt;</operator> <name>out_bound</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>out_position</name> <operator>=</operator> <name>in_position</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putc</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'\n'</literal></expr>:</case>
<return>return <expr><name>out_position</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></while>

<return>return <expr><name>out_position</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_1sdiff_line</name> <parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>sep</name></decl></parameter>,
<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>right</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>outfile</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>hw</name> <init>= <expr><name>sdiff_half_width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>c2o</name> <init>= <expr><name>sdiff_column2_offset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>put_newline</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>put_newline</name> <operator>|=</operator> <name><name>left</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>print_half_line</name> <argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sep</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>tab_from_to</name> <argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><operator>(</operator><name>hw</name> <operator>+</operator> <name>c2o</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sep</name> <operator>==</operator> <literal type="char">'|'</literal> <operator>&amp;&amp;</operator> <name>put_newline</name> <operator>!=</operator> <operator>(</operator><name><name>right</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sep</name> <operator>=</operator> <ternary><condition><expr><name>put_newline</name></expr> ?</condition><then> <expr><literal type="char">'/'</literal></expr> </then><else>: <expr><literal type="char">'\\'</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>putc</name> <argument_list>(<argument><expr><name>sep</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>right</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>put_newline</name> <operator>|=</operator> <name><name>right</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>right</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>tab_from_to</name> <argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><name>c2o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_half_line</name> <argument_list>(<argument><expr><name>right</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>hw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>put_newline</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putc</name> <argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_sdiff_common_lines</name> <parameter_list>(<parameter><decl><type><name>lin</name></type> <name>limit0</name></decl></parameter>, <parameter><decl><type><name>lin</name></type> <name>limit1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lin</name></type> <name>i0</name> <init>= <expr><name>next0</name></expr></init></decl>, <decl><type ref="prev"/><name>i1</name> <init>= <expr><name>next1</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>suppress_common_lines</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>i0</name> <operator>!=</operator> <name>limit0</name> <operator>||</operator> <name>i1</name> <operator>!=</operator> <name>limit1</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sdiff_merge_assist</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>len0</name> <init>= <expr><name>limit0</name> <operator>-</operator> <name>i0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>len1</name> <init>= <expr><name>limit1</name> <operator>-</operator> <name>i1</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><literal type="string">"i%ld,%ld\n"</literal></expr></argument>, <argument><expr><name>len0</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>left_column</name></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><name>i0</name> <operator>!=</operator> <name>limit0</name> <operator>&amp;&amp;</operator> <name>i1</name> <operator>!=</operator> <name>limit1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_1sdiff_line</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>linbuf</name><index>[<expr><name>i0</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>files</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>linbuf</name><index>[<expr><name>i1</name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<while>while <condition>(<expr><name>i1</name> <operator>!=</operator> <name>limit1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_1sdiff_line</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>files</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>linbuf</name><index>[<expr><name>i1</name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>i0</name> <operator>!=</operator> <name>limit0</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_1sdiff_line</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>linbuf</name><index>[<expr><name>i0</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>next0</name> <operator>=</operator> <name>limit0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next1</name> <operator>=</operator> <name>limit1</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_sdiff_hunk</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>change</name></name> <modifier>*</modifier></type><name>hunk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lin</name></type> <name>first0</name></decl>, <decl><type ref="prev"/><name>last0</name></decl>, <decl><type ref="prev"/><name>first1</name></decl>, <decl><type ref="prev"/><name>last1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>lin</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>changes</name></name></type> <name>changes</name> <init>=
<expr><call><name>analyze_hunk</name> <argument_list>(<argument><expr><name>hunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>changes</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>print_sdiff_common_lines</name> <argument_list>(<argument><expr><name>first0</name></expr></argument>, <argument><expr><name>first1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sdiff_merge_assist</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>len0</name> <init>= <expr><name>last0</name> <operator>-</operator> <name>first0</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>len1</name> <init>= <expr><name>last1</name> <operator>-</operator> <name>first1</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><literal type="string">"c%ld,%ld\n"</literal></expr></argument>, <argument><expr><name>len0</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>changes</name> <operator>==</operator> <name>CHANGED</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>first0</name></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <name>first1</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>last0</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;=</operator> <name>last1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_1sdiff_line</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>linbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>files</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>linbuf</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>changes</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>i</name> <operator>&lt;=</operator> <name>last0</name></expr> ?</condition><then> <expr><name>OLD</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>j</name> <operator>&lt;=</operator> <name>last1</name></expr> ?</condition><then> <expr><name>NEW</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>next0</name> <operator>=</operator> <name>first0</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next1</name> <operator>=</operator> <name>first1</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>changes</name> <operator>&amp;</operator> <name>NEW</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>first1</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>last1</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_1sdiff_line</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>files</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>linbuf</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>next1</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>changes</name> <operator>&amp;</operator> <name>OLD</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>first0</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>last0</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_1sdiff_line</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>linbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'&lt;'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>next0</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
