<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/diff/src/ifdef.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diff.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xalloc.h&gt;</cpp:file></cpp:include>

<struct>struct <name>group</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>file_data</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lin</name></type> <name>from</name></decl>, <decl><type ref="prev"/><name>upto</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>format_group</name> <parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>group</name></name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>do_printf_spec</name> <parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>file_data</name></name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>lin</name></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>group</name></name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>scan_char_literal</name> <parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>lin</name></type> <name>groups_letter_value</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>group</name></name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>format_ifdef</name> <parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>lin</name></type></decl></parameter>, <parameter><decl><type><name>lin</name></type></decl></parameter>, <parameter><decl><type><name>lin</name></type></decl></parameter>, <parameter><decl><type><name>lin</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>print_ifdef_hunk</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>change</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>print_ifdef_lines</name> <parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>group</name></name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>lin</name></type> <name>next_line0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>lin</name></type> <name>next_line1</name></decl>;</decl_stmt>



<function><type><name>void</name></type>
<name>print_ifdef_script</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>change</name></name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>next_line0</name> <operator>=</operator> <name>next_line1</name> <operator>=</operator> <operator>-</operator> <name><name>files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>prefix_lines</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_script</name> <argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>find_change</name></expr></argument>, <argument><expr><name>print_ifdef_hunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>next_line0</name> <operator>&lt;</operator> <name><name>files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>valid_lines</name>
<operator>||</operator> <name>next_line1</name> <operator>&lt;</operator> <name><name>files</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>valid_lines</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>begin_output</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>format_ifdef</name> <argument_list>(<argument><expr><name><name>group_format</name><index>[<expr><name>UNCHANGED</name></expr>]</index></name></expr></argument>,
<argument><expr><name>next_line0</name></expr></argument>, <argument><expr><name><name>files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>valid_lines</name></expr></argument>,
<argument><expr><name>next_line1</name></expr></argument>, <argument><expr><name><name>files</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>valid_lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_ifdef_hunk</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>change</name></name> <modifier>*</modifier></type><name>hunk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lin</name></type> <name>first0</name></decl>, <decl><type ref="prev"/><name>last0</name></decl>, <decl><type ref="prev"/><name>first1</name></decl>, <decl><type ref="prev"/><name>last1</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>changes</name></name></type> <name>changes</name> <init>= <expr><call><name>analyze_hunk</name> <argument_list>(<argument><expr><name>hunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>changes</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>begin_output</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>next_line0</name> <operator>&lt;</operator> <name>first0</name> <operator>||</operator> <name>next_line1</name> <operator>&lt;</operator> <name>first1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>format_ifdef</name> <argument_list>(<argument><expr><name><name>group_format</name><index>[<expr><name>UNCHANGED</name></expr>]</index></name></expr></argument>,
<argument><expr><name>next_line0</name></expr></argument>, <argument><expr><name>first0</name></expr></argument>,
<argument><expr><name>next_line1</name></expr></argument>, <argument><expr><name>first1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>next_line0</name> <operator>=</operator> <name>last0</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>next_line1</name> <operator>=</operator> <name>last1</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>format_ifdef</name> <argument_list>(<argument><expr><name><name>group_format</name><index>[<expr><name>changes</name></expr>]</index></name></expr></argument>,
<argument><expr><name>first0</name></expr></argument>, <argument><expr><name>next_line0</name></expr></argument>,
<argument><expr><name>first1</name></expr></argument>, <argument><expr><name>next_line1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>format_ifdef</name> <parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>lin</name></type> <name>beg0</name></decl></parameter>, <parameter><decl><type><name>lin</name></type> <name>end0</name></decl></parameter>, <parameter><decl><type><name>lin</name></type> <name>beg1</name></decl></parameter>, <parameter><decl><type><name>lin</name></type> <name>end1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>group</name></name></type> <name><name>groups</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>groups</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>file</name> <operator>=</operator> <operator>&amp;</operator><name><name>files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>groups</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>from</name> <operator>=</operator> <name>beg0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>groups</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>upto</name> <operator>=</operator> <name>end0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>groups</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>file</name> <operator>=</operator> <operator>&amp;</operator><name><name>files</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>groups</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>from</name> <operator>=</operator> <name>beg1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>groups</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>upto</name> <operator>=</operator> <name>end1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>format_group</name> <argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>groups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type>
<name>format_group</name> <parameter_list>(<parameter><decl><type><specifier>register</specifier> <name>FILE</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>endchar</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>group</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>groups</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>format</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>f</name><operator>)</operator> <operator>!=</operator> <name>endchar</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>f1</name> <init>= <expr><operator>++</operator><name>f</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>f</name><operator>++</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'%'</literal></expr>:</case>
<break>break;</break>

<case>case <expr><literal type="char">'('</literal></expr>:</case>

<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintmax_t</name></type> <name><name>value</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>thenout</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>elseout</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ISDIGIT</name> <argument_list>(<argument><expr><operator>*</operator><name>f</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fend</name></decl>;</decl_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>strtoumax</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fend</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad_format</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name>fend</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>groups_letter_value</name> <argument_list>(<argument><expr><name>groups</name></expr></argument>, <argument><expr><operator>*</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad_format</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>f</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>f</name><operator>++</operator> <operator>!=</operator> <literal type="string">"=?"</literal><index>[<expr><name>i</name></expr>]</index></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad_format</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>value</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>thenout</name> <operator>=</operator> <name>out</name></expr><operator>,</operator> <expr><name>elseout</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>thenout</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>elseout</name> <operator>=</operator> <name>out</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>format_group</name> <argument_list>(<argument><expr><name>thenout</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><name>groups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>f</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>format_group</name> <argument_list>(<argument><expr><name>elseout</name></expr></argument>, <argument><expr><name>f</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>, <argument><expr><name>groups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>f</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>f</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<continue>continue;</continue>

<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>

<expr_stmt><expr><call><name>print_ifdef_lines</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>line_format</name><index>[<expr><name>OLD</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>groups</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'='</literal></expr>:</case>

<expr_stmt><expr><call><name>print_ifdef_lines</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>line_format</name><index>[<expr><name>UNCHANGED</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>groups</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>

<expr_stmt><expr><call><name>print_ifdef_lines</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>line_format</name><index>[<expr><name>NEW</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>groups</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<default>default:</default>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>do_printf_spec</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>f</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>groups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<label><name>bad_format</name>:</label>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name>f1</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putc</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>lin</name></type>
<name>groups_letter_value</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>group</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>letter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>letter</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'E'</literal></expr>:</case> <expr_stmt><expr><name>letter</name> <operator>=</operator> <literal type="char">'e'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>g</name><operator>++</operator></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'F'</literal></expr>:</case> <expr_stmt><expr><name>letter</name> <operator>=</operator> <literal type="char">'f'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>g</name><operator>++</operator></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'L'</literal></expr>:</case> <expr_stmt><expr><name>letter</name> <operator>=</operator> <literal type="char">'l'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>g</name><operator>++</operator></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'M'</literal></expr>:</case> <expr_stmt><expr><name>letter</name> <operator>=</operator> <literal type="char">'m'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>g</name><operator>++</operator></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'N'</literal></expr>:</case> <expr_stmt><expr><name>letter</name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>g</name><operator>++</operator></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>letter</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'e'</literal></expr>:</case> <return>return <expr><call><name>translate_line_number</name> <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>from</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
<case>case <expr><literal type="char">'f'</literal></expr>:</case> <return>return <expr><call><name>translate_line_number</name> <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>from</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">'l'</literal></expr>:</case> <return>return <expr><call><name>translate_line_number</name> <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>upto</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
<case>case <expr><literal type="char">'m'</literal></expr>:</case> <return>return <expr><call><name>translate_line_number</name> <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>upto</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">'n'</literal></expr>:</case> <return>return <expr><name><name>g</name><operator>-&gt;</operator><name>upto</name></name> <operator>-</operator> <name><name>g</name><operator>-&gt;</operator><name>from</name></name></expr>;</return>
<default>default:</default> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_ifdef_lines</name> <parameter_list>(<parameter><decl><type><specifier>register</specifier> <name>FILE</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>group</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>group</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>file_data</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>file</name> <init>= <expr><name><name>group</name><operator>-&gt;</operator><name>file</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>linbuf</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>linbuf</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lin</name></type> <name>from</name> <init>= <expr><name><name>group</name><operator>-&gt;</operator><name>from</name></name></expr></init></decl>, <decl><type ref="prev"/><name>upto</name> <init>= <expr><name><name>group</name><operator>-&gt;</operator><name>upto</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>expand_tabs</name> <operator>&amp;&amp;</operator> <name><name>format</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>format</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'l'</literal> <operator>&amp;&amp;</operator> <name><name>format</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>format</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>from</name> <operator>&lt;</operator> <name>upto</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fwrite</name> <argument_list>(<argument><expr><name><name>linbuf</name><index>[<expr><name>from</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>linbuf</name><index>[<expr><name>upto</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>linbuf</name><index>[<expr><name>upto</name></expr>]</index><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal><operator>)</operator> <operator>-</operator> <name><name>linbuf</name><index>[<expr><name>from</name></expr>]</index></name></expr></argument>,
<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>format</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'L'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>format</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fwrite</name> <argument_list>(<argument><expr><name><name>linbuf</name><index>[<expr><name>from</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>linbuf</name><index>[<expr><name>upto</name></expr>]</index></name> <operator>-</operator> <name><name>linbuf</name><index>[<expr><name>from</name></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>from</name> <operator>&lt;</operator> <name>upto</name></expr>;</condition> <incr><expr><name>from</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>format</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>f</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>f1</name> <init>= <expr><name>f</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>f</name><operator>++</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'%'</literal></expr>:</case>
<break>break;</break>

<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<expr_stmt><expr><call><name>output_1_line</name> <argument_list>(<argument><expr><name><name>linbuf</name><index>[<expr><name>from</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>linbuf</name><index>[<expr><name>from</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name>
<operator>-</operator> <operator>(</operator><name><name>linbuf</name><index>[<expr><name>from</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator><operator>)</operator></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<expr_stmt><expr><call><name>output_1_line</name> <argument_list>(<argument><expr><name><name>linbuf</name><index>[<expr><name>from</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>linbuf</name><index>[<expr><name>from</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<default>default:</default>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>do_printf_spec</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>f</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name>f1</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>putc</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type>
<name>do_printf_spec</name> <parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>spec</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>file_data</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>lin</name></type> <name>n</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>group</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>groups</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>spec</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c1</name></decl>;</decl_stmt>



<expr_stmt><expr><name>f</name><operator>++</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>f</name><operator>++</operator><operator>)</operator> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\''</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></while>
<while>while <condition>(<expr><call><name>ISDIGIT</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>f</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<while>while <condition>(<expr><call><name>ISDIGIT</name> <argument_list>(<argument><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>f</name><operator>++</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></while></block_content></block></if></if_stmt>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>*</operator><name>f</name><operator>++</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <literal type="char">'\''</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>value</name></decl>;</decl_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>scan_char_literal</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putc</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'d'</literal></expr>:</case> <case>case <expr><literal type="char">'o'</literal></expr>:</case> <case>case <expr><literal type="char">'x'</literal></expr>:</case> <case>case <expr><literal type="char">'X'</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>lin</name></type> <name>value</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>file</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <literal type="char">'n'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>translate_line_number</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>groups_letter_value</name> <argument_list>(<argument><expr><name>groups</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition>
<block>{<block_content>


<decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>long_value</name> <init>= <expr><name>value</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>spec_prefix_len</name> <init>= <expr><name>f</name> <operator>-</operator> <name>spec</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_C_VARARRAYS</name></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>format</name><index>[<expr><name>spec_prefix_len</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>format</name> <init>= <expr><call><name>xmalloc</name> <argument_list>(<argument><expr><name>spec_prefix_len</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>format</name> <operator>+</operator> <name>spec_prefix_len</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><name>spec_prefix_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'l'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>long_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator> <name>HAVE_C_VARARRAYS</name></expr></cpp:if>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<break>break;</break>

<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type>
<name>scan_char_literal</name> <parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>lit</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>valptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>lit</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>digits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>p</name><operator>++</operator></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<case>case <expr><literal type="char">'\''</literal></expr>:</case>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\''</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>digit</name> <init>= <expr><name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">8</literal> <operator>&lt;=</operator> <name>digit</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <name>value</name> <operator>+</operator> <name>digit</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>digits</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>lit</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;=</operator> <name>digits</name> <operator>&amp;&amp;</operator> <name>digits</name> <operator>&lt;=</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">'\''</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><operator>*</operator><name>valptr</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>
</unit>
