<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/diff/src/normal.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diff.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>print_normal_hunk</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>change</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>




<function><type><name>void</name></type>
<name>print_normal_script</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>change</name></name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>print_script</name> <argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>find_change</name></expr></argument>, <argument><expr><name>print_normal_hunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_normal_hunk</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>change</name></name> <modifier>*</modifier></type><name>hunk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lin</name></type> <name>first0</name></decl>, <decl><type ref="prev"/><name>last0</name></decl>, <decl><type ref="prev"/><name>first1</name></decl>, <decl><type ref="prev"/><name>last1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>lin</name></type> <name>i</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>changes</name></name></type> <name>changes</name> <init>= <expr><call><name>analyze_hunk</name> <argument_list>(<argument><expr><name>hunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>changes</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>begin_output</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>print_number_range</name> <argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>first0</name></expr></argument>, <argument><expr><name>last0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name><name>change_letter</name><index>[<expr><name>changes</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_number_range</name> <argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>files</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>first1</name></expr></argument>, <argument><expr><name>last1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>changes</name> <operator>&amp;</operator> <name>OLD</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>first0</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>last0</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_1_line</name> <argument_list>(<argument><expr><literal type="string">"&lt;"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>linbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>changes</name> <operator>==</operator> <name>CHANGED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><literal type="string">"---\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>changes</name> <operator>&amp;</operator> <name>NEW</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>first1</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>last1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_1_line</name> <argument_list>(<argument><expr><literal type="string">"&gt;"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>files</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>linbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
