<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/ratelim-internal.h">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RATELIM_INTERNAL_H_INCLUDED_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RATELIM_INTERNAL_H_INCLUDED_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/util.h"</cpp:file></cpp:include>




<struct>struct <name>ev_token_bucket</name> <block>{


<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>read_limit</name></decl>, <decl><type ref="prev"/><name>write_limit</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ev_uint32_t</name></type> <name>last_updated</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>ev_token_bucket_cfg</name> <block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>read_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>read_maximum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>write_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>write_maximum</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tick_timeout</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>msec_per_tick</name></decl>;</decl_stmt>
}</block>;</struct>



<function_decl><type><name>int</name></type> <name>ev_token_bucket_update_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ev_token_bucket</name></name> <modifier>*</modifier></type><name>bucket</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ev_token_bucket_cfg</name></name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>,
<parameter><decl><type><name>ev_uint32_t</name></type> <name>current_tick</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>ev_uint32_t</name></type> <name>ev_token_bucket_get_tick_</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ev_token_bucket_cfg</name></name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>int</name></type> <name>ev_token_bucket_init_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ev_token_bucket</name></name> <modifier>*</modifier></type><name>bucket</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ev_token_bucket_cfg</name></name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>,
<parameter><decl><type><name>ev_uint32_t</name></type> <name>current_tick</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>reinitialize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>bufferevent_remove_from_rate_limit_group_internal_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>unsuspend</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ev_token_bucket_decrement_read</name><parameter_list>(<parameter><type><name>b</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (b)-&gt;read_limit -= (n); } while (0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ev_token_bucket_decrement_write</name><parameter_list>(<parameter><type><name>b</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (b)-&gt;write_limit -= (n); } while (0)</cpp:value></cpp:define>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
