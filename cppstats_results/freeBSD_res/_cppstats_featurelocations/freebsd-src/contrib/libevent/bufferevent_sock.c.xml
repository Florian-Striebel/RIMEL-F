<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/bufferevent_sock.c">



























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event-config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evconfig-private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_STDARG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ws2tcpip.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_SOCKET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_NETINET_IN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_NETINET_IN6_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in6.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/bufferevent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/buffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/bufferevent_struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/bufferevent_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mm-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bufferevent-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util-internal.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iocp-internal.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>be_socket_enable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>be_socket_disable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>be_socket_destruct</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>be_socket_flush</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>bufferevent_flush_mode</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>be_socket_ctrl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>bufferevent_ctrl_op</name></name></type></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>bufferevent_ctrl_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>be_socket_setfd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bufferevent_ops</name></name></type> <name>bufferevent_ops_socket</name> <init>= <expr><block>{
<expr><literal type="string">"socket"</literal></expr>,
<expr><call><name>evutil_offsetof</name><argument_list>(<argument><expr>struct <name>bufferevent_private</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>,
<expr><name>be_socket_enable</name></expr>,
<expr><name>be_socket_disable</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>be_socket_destruct</name></expr>,
<expr><name>bufferevent_generic_adj_existing_timeouts_</name></expr>,
<expr><name>be_socket_flush</name></expr>,
<expr><name>be_socket_ctrl</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name><modifier>*</modifier></type>
<name>bufferevent_socket_get_conn_address_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bev_p</name> <init>=
<expr><call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr>struct <name>bufferevent_private</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>bev_p</name><operator>-&gt;</operator><name>conn_address</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>bufferevent_socket_set_conn_address_fd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bev_p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>bev_p</name><operator>-&gt;</operator><name>conn_address</name></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>bev_p</name><operator>-&gt;</operator><name>conn_address</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>!=</operator> <name>AF_UNSPEC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>getpeername</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>bufferevent_socket_set_conn_address</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bev_p</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>addrlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>addrlen</name> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>bev_p</name><operator>-&gt;</operator><name>conn_address</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev_p</name><operator>-&gt;</operator><name>conn_address</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>bufferevent_socket_outbuf_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evbuffer_cb_info</name></name> <modifier>*</modifier></type><name>cbinfo</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bufev_p</name> <init>=
<expr><call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr>struct <name>bufferevent_private</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cbinfo</name><operator>-&gt;</operator><name>n_added</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>bufev</name><operator>-&gt;</operator><name>enabled</name></name> <operator>&amp;</operator> <name>EV_WRITE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>event_pending</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bufev</name><operator>-&gt;</operator><name>ev_write</name></name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>bufev_p</name><operator>-&gt;</operator><name>write_suspended</name></name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>bufferevent_add_event_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bufev</name><operator>-&gt;</operator><name>ev_write</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bufev</name><operator>-&gt;</operator><name>timeout_write</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>bufferevent_readcb</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bufev_p</name> <init>=
<expr><call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr>struct <name>bufferevent_private</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>what</name> <init>= <expr><name>BEV_EVENT_READING</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>howmuch</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>readmax</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bufferevent_incref_and_lock_</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>event</name> <operator>==</operator> <name>EV_TIMEOUT</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>what</name> <operator>|=</operator> <name>BEV_EVENT_TIMEOUT</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>input</name> <operator>=</operator> <name><name>bufev</name><operator>-&gt;</operator><name>input</name></name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>bufev</name><operator>-&gt;</operator><name>wm_read</name><operator>.</operator><name>high</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>howmuch</name> <operator>=</operator> <name><name>bufev</name><operator>-&gt;</operator><name>wm_read</name><operator>.</operator><name>high</name></name> <operator>-</operator> <call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>howmuch</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_wm_suspend_read</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>readmax</name> <operator>=</operator> <call><name>bufferevent_get_read_max_</name><argument_list>(<argument><expr><name>bufev_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>howmuch</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>howmuch</name></expr></argument> &gt;</argument_list></name> <name>readmax</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>howmuch</name> <operator>=</operator> <name>readmax</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bufev_p</name><operator>-&gt;</operator><name>read_suspended</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>evbuffer_unfreeze</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>evbuffer_read</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>howmuch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_freeze</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>evutil_socket_geterror</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EVUTIL_ERR_RW_RETRIABLE</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>reschedule</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EVUTIL_ERR_CONNECT_REFUSED</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bufev_p</name><operator>-&gt;</operator><name>connection_refused</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>what</name> <operator>|=</operator> <name>BEV_EVENT_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>what</name> <operator>|=</operator> <name>BEV_EVENT_EOF</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bufferevent_decrement_read_buckets_</name><argument_list>(<argument><expr><name>bufev_p</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bufferevent_trigger_nolock_</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

<label><name>reschedule</name>:</label>
<goto>goto <name>done</name>;</goto>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>bufferevent_disable</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_run_eventcb_</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>done</name>:</label>
<expr_stmt><expr><call><name>bufferevent_decref_and_unlock_</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>bufferevent_writecb</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bufev_p</name> <init>=
<expr><call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr>struct <name>bufferevent_private</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>what</name> <init>= <expr><name>BEV_EVENT_WRITING</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>connected</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>atmost</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bufferevent_incref_and_lock_</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>event</name> <operator>==</operator> <name>EV_TIMEOUT</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>what</name> <operator>|=</operator> <name>BEV_EVENT_TIMEOUT</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bufev_p</name><operator>-&gt;</operator><name>connecting</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>evutil_socket_finished_connecting_</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>bufev_p</name><operator>-&gt;</operator><name>connection_refused</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bufev_p</name><operator>-&gt;</operator><name>connection_refused</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>bufev_p</name><operator>-&gt;</operator><name>connecting</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bufev</name><operator>-&gt;</operator><name>ev_write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bufev</name><operator>-&gt;</operator><name>ev_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_run_eventcb_</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr><name>BEV_EVENT_ERROR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>connected</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_socket_set_conn_address_fd</name><argument_list>(<argument><expr><name>bufev_p</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>BEV_IS_ASYNC</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bufev</name><operator>-&gt;</operator><name>ev_write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_async_set_connected_</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_run_eventcb_</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>,
<argument><expr><name>BEV_EVENT_CONNECTED</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>bufferevent_run_eventcb_</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>,
<argument><expr><name>BEV_EVENT_CONNECTED</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>bufev</name><operator>-&gt;</operator><name>enabled</name></name> <operator>&amp;</operator> <name>EV_WRITE</name><operator>)</operator> <operator>||</operator>
<name><name>bufev_p</name><operator>-&gt;</operator><name>write_suspended</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bufev</name><operator>-&gt;</operator><name>ev_write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>atmost</name> <operator>=</operator> <call><name>bufferevent_get_write_max_</name><argument_list>(<argument><expr><name>bufev_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bufev_p</name><operator>-&gt;</operator><name>write_suspended</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evbuffer_unfreeze</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>evbuffer_write_atmost</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>atmost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_freeze</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>evutil_socket_geterror</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EVUTIL_ERR_RW_RETRIABLE</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>reschedule</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>what</name> <operator>|=</operator> <name>BEV_EVENT_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>what</name> <operator>|=</operator> <name>BEV_EVENT_EOF</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bufferevent_decrement_write_buckets_</name><argument_list>(<argument><expr><name>bufev_p</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bufev</name><operator>-&gt;</operator><name>ev_write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>res</name> <operator>||</operator> <operator>!</operator><name>connected</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_trigger_nolock_</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<goto>goto <name>done</name>;</goto>

<label><name>reschedule</name>:</label>
<if_stmt><if>if <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bufev</name><operator>-&gt;</operator><name>ev_write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>done</name>;</goto>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>bufferevent_disable</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_run_eventcb_</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>done</name>:</label>
<expr_stmt><expr><call><name>bufferevent_decref_and_unlock_</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type>
<name>bufferevent_socket_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bufev_p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>base</name> <operator>&amp;&amp;</operator> <call><name>event_base_get_iocp_</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>bufferevent_async_new_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bufev_p</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>bufferevent_private</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator><operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bufferevent_init_common_</name><argument_list>(<argument><expr><name>bufev_p</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufferevent_ops_socket</name></expr></argument>,
<argument><expr><name>options</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>bufev_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bufev</name> <operator>=</operator> <operator>&amp;</operator><name><name>bufev_p</name><operator>-&gt;</operator><name>bev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_set_flags</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name>EVBUFFER_FLAG_DRAINS_TO_FD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bufev</name><operator>-&gt;</operator><name>ev_read</name></name></expr></argument>, <argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>,
<argument><expr><name>EV_READ</name><operator>|</operator><name>EV_PERSIST</name><operator>|</operator><name>EV_FINALIZE</name></expr></argument>, <argument><expr><name>bufferevent_readcb</name></expr></argument>, <argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bufev</name><operator>-&gt;</operator><name>ev_write</name></name></expr></argument>, <argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>,
<argument><expr><name>EV_WRITE</name><operator>|</operator><name>EV_PERSIST</name><operator>|</operator><name>EV_FINALIZE</name></expr></argument>, <argument><expr><name>bufferevent_writecb</name></expr></argument>, <argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_add_cb</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name>bufferevent_socket_outbuf_cb</name></expr></argument>, <argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_freeze</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_freeze</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>bufev</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_socket_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>socklen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bufev_p</name> <init>=
<expr><call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr>struct <name>bufferevent_private</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ownfd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bufferevent_incref_and_lock_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bufev_p</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>bufferevent_getfd</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sa</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>evutil_socket_</name><argument_list>(<argument><expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name></expr></argument>,
<argument><expr><name>SOCK_STREAM</name><operator>|</operator><name>EVUTIL_SOCK_NONBLOCK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ownfd</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sa</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>bufferevent_async_can_connect_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_setfd</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>bufferevent_async_connect_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>sa</name></expr></argument>, <argument><expr><name>socklen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>freesock</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>bufev_p</name><operator>-&gt;</operator><name>connecting</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evutil_socket_connect_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fd</name></expr></argument>, <argument><expr><name>sa</name></expr></argument>, <argument><expr><name>socklen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>freesock</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>



<if_stmt><if>if <condition>(<expr><call><name>BEV_IS_ASYNC</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>ev_write</name></name></expr></argument>, <argument><expr><name><name>bev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>,
<argument><expr><name>EV_WRITE</name><operator>|</operator><name>EV_PERSIST</name><operator>|</operator><name>EV_FINALIZE</name></expr></argument>, <argument><expr><name>bufferevent_writecb</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>bufferevent_setfd</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>be_socket_enable</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bufev_p</name><operator>-&gt;</operator><name>connecting</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bufev_p</name><operator>-&gt;</operator><name>connecting</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_trigger_nolock_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>, <argument><expr><name>BEV_OPT_DEFER_CALLBACKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_run_eventcb_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>BEV_EVENT_ERROR</name></expr></argument>, <argument><expr><name>BEV_OPT_DEFER_CALLBACKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_disable</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>EV_WRITE</name><operator>|</operator><name>EV_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<goto>goto <name>done</name>;</goto>

<label><name>freesock</name>:</label>
<expr_stmt><expr><call><name>bufferevent_run_eventcb_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>BEV_EVENT_ERROR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ownfd</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>done</name>:</label>
<expr_stmt><expr><call><name>bufferevent_decref_and_unlock_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>bufferevent_connect_getaddrinfo_cb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>ai</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bev_p</name> <init>=
<expr><call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr>struct <name>bufferevent_private</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_unsuspend_write_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>BEV_SUSPEND_LOOKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_unsuspend_read_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>BEV_SUSPEND_LOOKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bev_p</name><operator>-&gt;</operator><name>dns_request</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>EVUTIL_EAI_CANCEL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bev_p</name><operator>-&gt;</operator><name>dns_error</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_decref_and_unlock_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bev_p</name><operator>-&gt;</operator><name>dns_error</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_run_eventcb_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>BEV_EVENT_ERROR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_decref_and_unlock_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ai</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evutil_freeaddrinfo</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>bufferevent_socket_set_conn_address</name><argument_list>(<argument><expr><name>bev_p</name></expr></argument>, <argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>bufferevent_socket_connect</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_decref_and_unlock_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_freeaddrinfo</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_socket_connect_hostname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>evdns_base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>family</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>portbuf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name></type> <name>hint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bev_p</name> <init>=
<expr><call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr>struct <name>bufferevent_private</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>family</name> <operator>!=</operator> <name>AF_INET</name> <operator>&amp;&amp;</operator> <name>family</name> <operator>!=</operator> <name>AF_INET6</name> <operator>&amp;&amp;</operator> <name>family</name> <operator>!=</operator> <name>AF_UNSPEC</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>port</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>port</name></expr></argument> &gt;</argument_list></name> <literal type="number">65535</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hint</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hint</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hint</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>family</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hint</name><operator>.</operator><name>ai_protocol</name></name> <operator>=</operator> <name>IPPROTO_TCP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hint</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>portbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>portbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bev_p</name><operator>-&gt;</operator><name>dns_error</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_suspend_write_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>BEV_SUSPEND_LOOKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_suspend_read_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>BEV_SUSPEND_LOOKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_incref_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bev_p</name><operator>-&gt;</operator><name>dns_request</name></name> <operator>=</operator> <call><name>evutil_getaddrinfo_async_</name><argument_list>(<argument><expr><name>evdns_base</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>,
<argument><expr><name>portbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hint</name></expr></argument>, <argument><expr><name>bufferevent_connect_getaddrinfo_cb</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_socket_get_dns_error</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bev_p</name> <init>=
<expr><call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr>struct <name>bufferevent_private</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <name><name>bev_p</name><operator>-&gt;</operator><name>dns_error</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>












<function><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type>
<name>bufferevent_new</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>,
<parameter><decl><type><name>bufferevent_data_cb</name></type> <name>readcb</name></decl></parameter>, <parameter><decl><type><name>bufferevent_data_cb</name></type> <name>writecb</name></decl></parameter>,
<parameter><decl><type><name>bufferevent_event_cb</name></type> <name>eventcb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbarg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>bufev</name> <operator>=</operator> <call><name>bufferevent_socket_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bufferevent_setcb</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr><name>readcb</name></expr></argument>, <argument><expr><name>writecb</name></expr></argument>, <argument><expr><name>eventcb</name></expr></argument>, <argument><expr><name>cbarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>bufev</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>be_socket_enable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>event</name> <operator>&amp;</operator> <name>EV_READ</name> <operator>&amp;&amp;</operator>
<call><name>bufferevent_add_event_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bufev</name><operator>-&gt;</operator><name>ev_read</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bufev</name><operator>-&gt;</operator><name>timeout_read</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>event</name> <operator>&amp;</operator> <name>EV_WRITE</name> <operator>&amp;&amp;</operator>
<call><name>bufferevent_add_event_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bufev</name><operator>-&gt;</operator><name>ev_write</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bufev</name><operator>-&gt;</operator><name>timeout_write</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>be_socket_disable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bufev_p</name> <init>=
<expr><call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr>struct <name>bufferevent_private</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>event</name> <operator>&amp;</operator> <name>EV_READ</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bufev</name><operator>-&gt;</operator><name>ev_read</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>event</name> <operator>&amp;</operator> <name>EV_WRITE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator> <name><name>bufev_p</name><operator>-&gt;</operator><name>connecting</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bufev</name><operator>-&gt;</operator><name>ev_write</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>be_socket_destruct</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bufev_p</name> <init>=
<expr><call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr>struct <name>bufferevent_private</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>be_ops</name></name> <operator>==</operator> <operator>&amp;</operator><name>bufferevent_ops_socket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>event_get_fd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bufev</name><operator>-&gt;</operator><name>ev_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>bufev_p</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>BEV_OPT_CLOSE_ON_FREE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EVUTIL_CLOSESOCKET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>evutil_getaddrinfo_cancel_async_</name><argument_list>(<argument><expr><name><name>bufev_p</name><operator>-&gt;</operator><name>dns_request</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>be_socket_flush</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>iotype</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>bufferevent_flush_mode</name></name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>be_socket_setfd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bufev_p</name> <init>=
<expr><call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr>struct <name>bufferevent_private</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>be_ops</name></name> <operator>==</operator> <operator>&amp;</operator><name>bufferevent_ops_socket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bufev</name><operator>-&gt;</operator><name>ev_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bufev</name><operator>-&gt;</operator><name>ev_write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_unfreeze</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_unfreeze</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bufev</name><operator>-&gt;</operator><name>ev_read</name></name></expr></argument>, <argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>,
<argument><expr><name>EV_READ</name><operator>|</operator><name>EV_PERSIST</name><operator>|</operator><name>EV_FINALIZE</name></expr></argument>, <argument><expr><name>bufferevent_readcb</name></expr></argument>, <argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bufev</name><operator>-&gt;</operator><name>ev_write</name></name></expr></argument>, <argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>,
<argument><expr><name>EV_WRITE</name><operator>|</operator><name>EV_PERSIST</name><operator>|</operator><name>EV_FINALIZE</name></expr></argument>, <argument><expr><name>bufferevent_writecb</name></expr></argument>, <argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_enable</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>enabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>evutil_getaddrinfo_cancel_async_</name><argument_list>(<argument><expr><name><name>bufev_p</name><operator>-&gt;</operator><name>dns_request</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>bufferevent_priority_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>priority</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bufev_p</name> <init>=
<expr><call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr>struct <name>bufferevent_private</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bufev</name><operator>-&gt;</operator><name>be_ops</name></name> <operator>!=</operator> <operator>&amp;</operator><name>bufferevent_ops_socket</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>event_priority_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bufev</name><operator>-&gt;</operator><name>ev_read</name></name></expr></argument>, <argument><expr><name>priority</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>event_priority_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bufev</name><operator>-&gt;</operator><name>ev_write</name></name></expr></argument>, <argument><expr><name>priority</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>event_deferred_cb_set_priority_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bufev_p</name><operator>-&gt;</operator><name>deferred</name></name></expr></argument>, <argument><expr><name>priority</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>done</name>:</label>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>bufferevent_base_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bufev</name><operator>-&gt;</operator><name>be_ops</name></name> <operator>!=</operator> <operator>&amp;</operator><name>bufferevent_ops_socket</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>bufev</name><operator>-&gt;</operator><name>ev_base</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>event_base_set</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bufev</name><operator>-&gt;</operator><name>ev_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>event_base_set</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bufev</name><operator>-&gt;</operator><name>ev_write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>done</name>:</label>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>be_socket_ctrl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>bufferevent_ctrl_op</name></name></type> <name>op</name></decl></parameter>,
<parameter><decl><type><name><name>union</name> <name>bufferevent_ctrl_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BEV_CTRL_SET_FD</name></expr>:</case>
<expr_stmt><expr><call><name>be_socket_setfd</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>BEV_CTRL_GET_FD</name></expr>:</case>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>event_get_fd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>ev_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>BEV_CTRL_GET_UNDERLYING</name></expr>:</case>
<case>case <expr><name>BEV_CTRL_CANCEL_ALL</name></expr>:</case>
<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
