<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/bufferevent_openssl.c">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>clang</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wdeprecated-declarations"</cpp:literal></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event-config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evconfig-private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_STDARG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/bufferevent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/bufferevent_struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/bufferevent_ssl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/buffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mm-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bufferevent-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log-internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/bio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/ssl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"openssl-compat.h"</cpp:file></cpp:include>
















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIO_TYPE_LIBEVENT</name></cpp:macro> <cpp:value>57</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static void
print_err(int val)
{
int err;
printf("Error was %d\n", val);

while ((err = ERR_get_error())) {
const char *msg = (const char*)ERR_reason_error_string(err);
const char *lib = (const char*)ERR_lib_error_string(err);
const char *func = (const char*)ERR_func_error_string(err);

printf("%s in %s %s\n", msg, lib, func);
}
}
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print_err</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>bio_bufferevent_new</name><parameter_list>(<parameter><decl><type><name>BIO</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>BIO_set_init</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_set_data</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>bio_bufferevent_free</name><parameter_list>(<parameter><decl><type><name>BIO</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>BIO_get_shutdown</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>BIO_get_init</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>BIO_get_data</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_free</name><argument_list>(<argument><expr><call><name>BIO_get_data</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>bio_bufferevent_read</name><parameter_list>(<parameter><decl><type><name>BIO</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>outlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BIO_clear_retry_flags</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BIO_get_data</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>input</name> <operator>=</operator> <call><name>bufferevent_get_input</name><argument_list>(<argument><expr><call><name>BIO_get_data</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>BIO_set_retry_read</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evbuffer_remove</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>bio_bufferevent_write</name><parameter_list>(<parameter><decl><type><name>BIO</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name> <init>= <expr><call><name>BIO_get_data</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>outlen</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BIO_clear_retry_flags</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BIO_get_data</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>bufferevent_get_output</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>outlen</name> <operator>=</operator> <call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>bufev</name><operator>-&gt;</operator><name>wm_write</name><operator>.</operator><name>high</name></name> <operator>&amp;&amp;</operator> <name><name>bufev</name><operator>-&gt;</operator><name>wm_write</name><operator>.</operator><name>high</name></name> <operator>&lt;=</operator> <operator>(</operator><name>outlen</name><operator>+</operator><name>inlen</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bufev</name><operator>-&gt;</operator><name>wm_write</name><operator>.</operator><name>high</name></name> <operator>&lt;=</operator> <name>outlen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>BIO_set_retry_write</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>inlen</name> <operator>=</operator> <name><name>bufev</name><operator>-&gt;</operator><name>wm_write</name><operator>.</operator><name>high</name></name> <operator>-</operator> <name>outlen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>inlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>inlen</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>long</name></type>
<name>bio_bufferevent_ctrl</name><parameter_list>(<parameter><decl><type><name>BIO</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name> <init>= <expr><call><name>BIO_get_data</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>cmd</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BIO_CTRL_GET_CLOSE</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BIO_get_shutdown</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BIO_CTRL_SET_CLOSE</name></expr>:</case>
<expr_stmt><expr><call><name>BIO_set_shutdown</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BIO_CTRL_PENDING</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>evbuffer_get_length</name><argument_list>(<argument><expr><call><name>bufferevent_get_input</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BIO_CTRL_WPENDING</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>evbuffer_get_length</name><argument_list>(<argument><expr><call><name>bufferevent_get_output</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>BIO_CTRL_DUP</name></expr>:</case>
<case>case <expr><name>BIO_CTRL_FLUSH</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>bio_bufferevent_puts</name><parameter_list>(<parameter><decl><type><name>BIO</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>bio_bufferevent_write</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>BIO_METHOD</name> <modifier>*</modifier></type><name>methods_bufferevent</name></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>BIO_METHOD</name> <modifier>*</modifier></type>
<name>BIO_s_bufferevent</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>methods_bufferevent</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>methods_bufferevent</name> <operator>=</operator> <call><name>BIO_meth_new</name><argument_list>(<argument><expr><name>BIO_TYPE_LIBEVENT</name></expr></argument>, <argument><expr><literal type="string">"bufferevent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>methods_bufferevent</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>BIO_meth_set_write</name><argument_list>(<argument><expr><name>methods_bufferevent</name></expr></argument>, <argument><expr><name>bio_bufferevent_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_meth_set_read</name><argument_list>(<argument><expr><name>methods_bufferevent</name></expr></argument>, <argument><expr><name>bio_bufferevent_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_meth_set_puts</name><argument_list>(<argument><expr><name>methods_bufferevent</name></expr></argument>, <argument><expr><name>bio_bufferevent_puts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_meth_set_ctrl</name><argument_list>(<argument><expr><name>methods_bufferevent</name></expr></argument>, <argument><expr><name>bio_bufferevent_ctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_meth_set_create</name><argument_list>(<argument><expr><name>methods_bufferevent</name></expr></argument>, <argument><expr><name>bio_bufferevent_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_meth_set_destroy</name><argument_list>(<argument><expr><name>methods_bufferevent</name></expr></argument>, <argument><expr><name>bio_bufferevent_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>methods_bufferevent</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>BIO</name> <modifier>*</modifier></type>
<name>BIO_new_bufferevent</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufferevent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>close_flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bufferevent</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>result</name> <operator>=</operator> <call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_s_bufferevent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>BIO_set_init</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_set_data</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>bufferevent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_set_shutdown</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><ternary><condition><expr><name>close_flag</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>














<struct>struct <name>bio_data_counts</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>n_written</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>n_read</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>bufferevent_openssl</name> <block>{





<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name></type> <name>bev</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>underlying</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SSL</name> <modifier>*</modifier></type><name>ssl</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_cb_entry</name></name> <modifier>*</modifier></type><name>outbuf_cb</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>struct</name> <name>bio_data_counts</name></name></type> <name>counts</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>last_write</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_ERRORS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<decl_stmt><decl><type><name>ev_uint32_t</name></type> <name><name>errors</name><index>[<expr><name>NUM_ERRORS</name></expr>]</index></name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name></type> <name>read_blocked_on_write</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>write_blocked_on_read</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>allow_dirty_shutdown</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>n_errors</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>state</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>old_state</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>be_openssl_enable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>be_openssl_disable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>be_openssl_unlink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>be_openssl_destruct</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>be_openssl_adj_timeouts</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>be_openssl_flush</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>,
<parameter><decl><type><name>short</name></type> <name>iotype</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>bufferevent_flush_mode</name></name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>be_openssl_ctrl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>bufferevent_ctrl_op</name></name></type></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>bufferevent_ctrl_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bufferevent_ops</name></name></type> <name>bufferevent_ops_openssl</name> <init>= <expr><block>{
<expr><literal type="string">"ssl"</literal></expr>,
<expr><call><name>evutil_offsetof</name><argument_list>(<argument><expr>struct <name>bufferevent_openssl</name></expr></argument>, <argument><expr><name><name>bev</name><operator>.</operator><name>bev</name></name></expr></argument>)</argument_list></call></expr>,
<expr><name>be_openssl_enable</name></expr>,
<expr><name>be_openssl_disable</name></expr>,
<expr><name>be_openssl_unlink</name></expr>,
<expr><name>be_openssl_destruct</name></expr>,
<expr><name>be_openssl_adj_timeouts</name></expr>,
<expr><name>be_openssl_flush</name></expr>,
<expr><name>be_openssl_ctrl</name></expr>,
}</block></expr></init></decl>;</decl_stmt>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type>
<name>upcast</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_o</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bev</name><operator>-&gt;</operator><name>be_ops</name></name> <operator>!=</operator> <operator>&amp;</operator><name>bufferevent_ops_openssl</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bev_o</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>bev</name><operator>)</operator> <operator>-</operator>
<call><name>evutil_offsetof</name><argument_list>(<argument><expr>struct <name>bufferevent_openssl</name></expr></argument>, <argument><expr><name><name>bev</name><operator>.</operator><name>bev</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>bev_o</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name><operator>.</operator><name>be_ops</name></name> <operator>==</operator> <operator>&amp;</operator><name>bufferevent_ops_openssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>bev_o</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>put_error</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>n_errors</name></name> <operator>==</operator> <name>NUM_ERRORS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>errors</name><index>[<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>n_errors</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ev_uint32_t</name><operator>)</operator> <name>err</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>start_reading</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_unsuspend_read_</name><argument_list>(<argument><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name></expr></argument>,
<argument><expr><name>BEV_SUSPEND_FILT_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>bufferevent_add_event_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>ev_read</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>timeout_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>bev_ssl</name><operator>-&gt;</operator><name>read_blocked_on_write</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>bufferevent_add_event_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>ev_write</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>timeout_write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>start_writing</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>write_blocked_on_read</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_unsuspend_read_</name><argument_list>(<argument><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name></expr></argument>,
<argument><expr><name>BEV_SUSPEND_FILT_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>bufferevent_add_event_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>ev_write</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>timeout_write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name> <operator>&amp;&amp;</operator> <name><name>bev_ssl</name><operator>-&gt;</operator><name>write_blocked_on_read</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>bufferevent_add_event_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>ev_read</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>timeout_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>stop_reading</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>write_blocked_on_read</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_suspend_read_</name><argument_list>(<argument><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name></expr></argument>,
<argument><expr><name>BEV_SUSPEND_FILT_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>ev_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>stop_writing</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>read_blocked_on_write</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_unsuspend_read_</name><argument_list>(<argument><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name></expr></argument>,
<argument><expr><name>BEV_SUSPEND_FILT_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>ev_write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_rbow</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stop_reading</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>read_blocked_on_write</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><call><name>start_writing</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_wbor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stop_writing</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>write_blocked_on_read</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><call><name>start_reading</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>clear_rbow</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>read_blocked_on_write</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>bev</name><operator>-&gt;</operator><name>enabled</name></name> <operator>&amp;</operator> <name>EV_WRITE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stop_writing</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bev</name><operator>-&gt;</operator><name>enabled</name></name> <operator>&amp;</operator> <name>EV_READ</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>start_reading</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>clear_wbor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>write_blocked_on_read</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>bev</name><operator>-&gt;</operator><name>enabled</name></name> <operator>&amp;</operator> <name>EV_READ</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stop_reading</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bev</name><operator>-&gt;</operator><name>enabled</name></name> <operator>&amp;</operator> <name>EV_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>start_writing</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>conn_closed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>when</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errcode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>event</name> <init>= <expr><name>BEV_EVENT_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dirty_shutdown</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>err</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>errcode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SSL_ERROR_ZERO_RETURN</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>SSL_get_shutdown</name><argument_list>(<argument><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>SSL_RECEIVED_SHUTDOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>event</name> <operator>=</operator> <name>BEV_EVENT_EOF</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dirty_shutdown</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>SSL_ERROR_SYSCALL</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>ERR_peek_error</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dirty_shutdown</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>SSL_ERROR_SSL</name></expr>:</case>

<break>break;</break>
<case>case <expr><name>SSL_ERROR_WANT_X509_LOOKUP</name></expr>:</case>

<break>break;</break>
<case>case <expr><name>SSL_ERROR_NONE</name></expr>:</case>
<case>case <expr><name>SSL_ERROR_WANT_READ</name></expr>:</case>
<case>case <expr><name>SSL_ERROR_WANT_WRITE</name></expr>:</case>
<case>case <expr><name>SSL_ERROR_WANT_CONNECT</name></expr>:</case>
<case>case <expr><name>SSL_ERROR_WANT_ACCEPT</name></expr>:</case>
<default>default:</default>

<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"BUG: Unexpected OpenSSL error code %d"</literal></expr></argument>, <argument><expr><name>errcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<while>while <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ERR_get_error</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_error</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>dirty_shutdown</name> <operator>&amp;&amp;</operator> <name><name>bev_ssl</name><operator>-&gt;</operator><name>allow_dirty_shutdown</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>event</name> <operator>=</operator> <name>BEV_EVENT_EOF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>stop_reading</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stop_writing</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>event</name> <operator>=</operator> <name>when</name> <operator>|</operator> <name>event</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_run_eventcb_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_bio_counts</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>rbio</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>wbio</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wbio</name> <operator>=</operator> <call><name>SSL_get_wbio</name><argument_list>(<argument><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>n_written</name></name> <operator>=</operator> <ternary><condition><expr><name>wbio</name></expr> ?</condition><then> <expr><call><name>BIO_number_written</name><argument_list>(<argument><expr><name>wbio</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>rbio</name> <operator>=</operator> <call><name>SSL_get_rbio</name><argument_list>(<argument><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>n_read</name></name> <operator>=</operator> <ternary><condition><expr><name>rbio</name></expr> ?</condition><then> <expr><call><name>BIO_number_read</name><argument_list>(<argument><expr><name>rbio</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>decrement_buckets</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>num_w</name> <init>= <expr><call><name>BIO_number_written</name><argument_list>(<argument><expr><call><name>SSL_get_wbio</name><argument_list>(<argument><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>num_r</name> <init>= <expr><call><name>BIO_number_read</name><argument_list>(<argument><expr><call><name>SSL_get_rbio</name><argument_list>(<argument><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>w</name> <init>= <expr><name>num_w</name> <operator>-</operator> <name><name>bev_ssl</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>n_written</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>r</name> <init>= <expr><name>num_r</name> <operator>-</operator> <name><name>bev_ssl</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>n_read</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>w</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_decrement_write_buckets_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_decrement_read_buckets_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>n_written</name></name> <operator>=</operator> <name>num_w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>n_read</name></name> <operator>=</operator> <name>num_r</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MADE_PROGRESS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_BLOCKED</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_ERR</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>do_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n_to_read</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><name><name>bev</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>n_used</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>atmost</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_iovec</name></name></type> <name><name>space</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>read_suspended</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>atmost</name> <operator>=</operator> <call><name>bufferevent_get_read_max_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n_to_read</name> <operator>&gt;</operator> <name>atmost</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n_to_read</name> <operator>=</operator> <name>atmost</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>evbuffer_reserve_space</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>n_to_read</name></expr></argument>, <argument><expr><name>space</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OP_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>read_suspended</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>SSL_read</name><argument_list>(<argument><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name><name>space</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_base</name></expr></argument>, <argument><expr><name><name>space</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>|=</operator> <name>OP_MADE_PROGRESS</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>read_blocked_on_write</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>clear_rbow</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OP_ERR</name> <operator>|</operator> <name>result</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>n_used</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>space</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrement_buckets</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>SSL_get_error</name><argument_list>(<argument><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>print_err</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SSL_ERROR_WANT_READ</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>read_blocked_on_write</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>clear_rbow</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OP_ERR</name> <operator>|</operator> <name>result</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>SSL_ERROR_WANT_WRITE</name></expr>:</case>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>read_blocked_on_write</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>set_rbow</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OP_ERR</name> <operator>|</operator> <name>result</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>conn_closed</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>, <argument><expr><name>BEV_EVENT_READING</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>result</name> <operator>|=</operator> <name>OP_BLOCKED</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>n_used</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evbuffer_commit_space</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>space</name></expr></argument>, <argument><expr><name>n_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BEV_RESET_GENERIC_READ_TIMEOUT</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>do_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>atmost</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>n_written</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>output</name> <init>= <expr><name><name>bev</name><operator>-&gt;</operator><name>output</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_iovec</name></name></type> <name><name>space</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>last_write</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>atmost</name> <operator>=</operator> <name><name>bev_ssl</name><operator>-&gt;</operator><name>last_write</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>atmost</name> <operator>=</operator> <call><name>bufferevent_get_write_max_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>evbuffer_peek</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>atmost</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>space</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OP_ERR</name> <operator>|</operator> <name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>write_suspended</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>space</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>SSL_write</name><argument_list>(<argument><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name><name>space</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_base</name></expr></argument>,
<argument><expr><name><name>space</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>|=</operator> <name>OP_MADE_PROGRESS</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>write_blocked_on_read</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>clear_wbor</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OP_ERR</name> <operator>|</operator> <name>result</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n_written</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>last_write</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrement_buckets</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>SSL_get_error</name><argument_list>(<argument><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>print_err</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SSL_ERROR_WANT_WRITE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>write_blocked_on_read</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>clear_wbor</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OP_ERR</name> <operator>|</operator> <name>result</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>last_write</name></name> <operator>=</operator> <name><name>space</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SSL_ERROR_WANT_READ</name></expr>:</case>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>write_blocked_on_read</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>set_wbor</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OP_ERR</name> <operator>|</operator> <name>result</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>last_write</name></name> <operator>=</operator> <name><name>space</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>conn_closed</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>, <argument><expr><name>BEV_EVENT_WRITING</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>last_write</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>result</name> <operator>|=</operator> <name>OP_BLOCKED</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>n_written</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>n_written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BEV_RESET_GENERIC_WRITE_TIMEOUT</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bufferevent_trigger_nolock_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>, <argument><expr><name>BEV_OPT_DEFER_CALLBACKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE_FRAME</name></cpp:macro> <cpp:value>15000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_DEFAULT</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>bytes_to_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><name><name>bev</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name><operator>.</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_watermark</name></name> <modifier>*</modifier></type><name>wm</name> <init>= <expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name><operator>.</operator><name>wm_read</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><name>READ_DEFAULT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>limit</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name><name>bev</name><operator>-&gt;</operator><name>write_blocked_on_read</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name><name>bev</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name><operator>.</operator><name>enabled</name></name> <operator>&amp;</operator> <name>EV_READ</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bev</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>read_suspended</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wm</name><operator>-&gt;</operator><name>high</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>wm</name><operator>-&gt;</operator><name>high</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>wm</name><operator>-&gt;</operator><name>high</name></name> <operator>-</operator> <call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>READ_DEFAULT</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>limit</name> <operator>=</operator> <call><name>bufferevent_get_read_max_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>bev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;</operator> <name>limit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>consider_reading</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_to_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>all_result_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>write_blocked_on_read</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>do_write</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>, <argument><expr><name>WRITE_FRAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&amp;</operator> <operator>(</operator><name>OP_BLOCKED</name><operator>|</operator><name>OP_ERR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>write_blocked_on_read</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n_to_read</name> <operator>=</operator> <call><name>bytes_to_read</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>n_to_read</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>do_read</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>, <argument><expr><name>n_to_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>all_result_flags</name> <operator>|=</operator> <name>r</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&amp;</operator> <operator>(</operator><name>OP_BLOCKED</name><operator>|</operator><name>OP_ERR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>read_suspended</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>









<expr_stmt><expr><name>n_to_read</name> <operator>=</operator> <call><name>SSL_pending</name><argument_list>(<argument><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>















<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n_to_read</name> <operator>&amp;&amp;</operator> <name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n_to_read</name> <operator>=</operator> <call><name>bytes_to_read</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>all_result_flags</name> <operator>&amp;</operator> <name>OP_MADE_PROGRESS</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bufferevent_trigger_nolock_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>read_suspended</name></name> <operator>||</operator>
<operator>!</operator><operator>(</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name><operator>.</operator><name>enabled</name></name> <operator>&amp;</operator> <name>EV_READ</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name><operator>.</operator><name>ev_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>consider_writing</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>output</name> <init>= <expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name><operator>.</operator><name>output</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>target</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_watermark</name></name> <modifier>*</modifier></type><name>wm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>read_blocked_on_write</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>do_read</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&amp;</operator> <name>OP_MADE_PROGRESS</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bufferevent_trigger_nolock_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&amp;</operator> <operator>(</operator><name>OP_ERR</name><operator>|</operator><name>OP_BLOCKED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>read_blocked_on_write</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name><operator>-&gt;</operator><name>output</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>wm</name> <operator>=</operator> <operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name><operator>-&gt;</operator><name>wm_write</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><operator>(</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name><operator>.</operator><name>enabled</name></name> <operator>&amp;</operator> <name>EV_WRITE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator> <name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>write_suspended</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><name>target</name> <operator>||</operator> <operator>(</operator><operator>!</operator> <name><name>wm</name><operator>-&gt;</operator><name>high</name></name> <operator>||</operator> <call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>wm</name><operator>-&gt;</operator><name>high</name></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n_to_write</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>wm</name> <operator>&amp;&amp;</operator> <name><name>wm</name><operator>-&gt;</operator><name>high</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n_to_write</name> <operator>=</operator> <name><name>wm</name><operator>-&gt;</operator><name>high</name></name> <operator>-</operator> <call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>n_to_write</name> <operator>=</operator> <name>WRITE_FRAME</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>do_write</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>, <argument><expr><name>n_to_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&amp;</operator> <operator>(</operator><name>OP_BLOCKED</name><operator>|</operator><name>OP_ERR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name><operator>.</operator><name>ev_write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>write_suspended</name></name> <operator>||</operator>
<operator>!</operator><operator>(</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name><operator>.</operator><name>enabled</name></name> <operator>&amp;</operator> <name>EV_WRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name><operator>.</operator><name>ev_write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>be_openssl_readcb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev_base</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>consider_reading</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>be_openssl_writecb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev_base</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>consider_writing</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>be_openssl_eventcb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev_base</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>event</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>what</name> <operator>&amp;</operator> <name>BEV_EVENT_EOF</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>allow_dirty_shutdown</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>event</name> <operator>=</operator> <name>BEV_EVENT_EOF</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>event</name> <operator>=</operator> <name>BEV_EVENT_ERROR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>what</name> <operator>&amp;</operator> <name>BEV_EVENT_TIMEOUT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>event</name> <operator>=</operator> <name>what</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>what</name> <operator>&amp;</operator> <name>BEV_EVENT_ERROR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>event</name> <operator>=</operator> <name>what</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>what</name> <operator>&amp;</operator> <name>BEV_EVENT_CONNECTED</name></expr>)</condition> <block>{<block_content>


</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>event</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_run_eventcb_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>be_openssl_readeventcb</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bufferevent_incref_and_lock_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>what</name> <operator>==</operator> <name>EV_TIMEOUT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_run_eventcb_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></argument>,
<argument><expr><name>BEV_EVENT_TIMEOUT</name><operator>|</operator><name>BEV_EVENT_READING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>consider_reading</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>bufferevent_decref_and_unlock_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>be_openssl_writeeventcb</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bufferevent_incref_and_lock_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>what</name> <operator>==</operator> <name>EV_TIMEOUT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_run_eventcb_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></argument>,
<argument><expr><name>BEV_EVENT_TIMEOUT</name><operator>|</operator><name>BEV_EVENT_WRITING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>consider_writing</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>bufferevent_decref_and_unlock_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>be_openssl_auto_fd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>event_initialized</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>ev_read</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>event_get_fd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>ev_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_open_callbacks</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_setcb</name><argument_list>(<argument><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name></expr></argument>,
<argument><expr><name>be_openssl_readcb</name></expr></argument>, <argument><expr><name>be_openssl_writecb</name></expr></argument>, <argument><expr><name>be_openssl_eventcb</name></expr></argument>,
<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rpending</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>wpending</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>event_initialized</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>ev_read</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rpending</name> <operator>=</operator> <call><name>event_pending</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>ev_read</name></name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wpending</name> <operator>=</operator> <call><name>event_pending</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>ev_write</name></name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>ev_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>ev_write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>ev_read</name></name></expr></argument>, <argument><expr><name><name>bev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>,
<argument><expr><name>EV_READ</name><operator>|</operator><name>EV_PERSIST</name><operator>|</operator><name>EV_FINALIZE</name></expr></argument>,
<argument><expr><name>be_openssl_readeventcb</name></expr></argument>, <argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>ev_write</name></name></expr></argument>, <argument><expr><name><name>bev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>,
<argument><expr><name>EV_WRITE</name><operator>|</operator><name>EV_PERSIST</name><operator>|</operator><name>EV_FINALIZE</name></expr></argument>,
<argument><expr><name>be_openssl_writeeventcb</name></expr></argument>, <argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rpending</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <call><name>bufferevent_add_event_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>ev_read</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>timeout_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>wpending</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <call><name>bufferevent_add_event_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>ev_write</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>timeout_write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>r1</name><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <name>r2</name><operator>&lt;</operator><literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>do_handshake</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<case>case <expr><name>BUFFEREVENT_SSL_OPEN</name></expr>:</case>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>BUFFEREVENT_SSL_CONNECTING</name></expr>:</case>
<case>case <expr><name>BUFFEREVENT_SSL_ACCEPTING</name></expr>:</case>
<expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>SSL_do_handshake</name><argument_list>(<argument><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>decrement_buckets</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name><operator>==</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>event_get_fd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name><operator>.</operator><name>ev_read</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>BUFFEREVENT_SSL_OPEN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_open_callbacks</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_enable</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></argument>, <argument><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name><operator>.</operator><name>enabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_run_eventcb_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></argument>,
<argument><expr><name>BEV_EVENT_CONNECTED</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>SSL_get_error</name><argument_list>(<argument><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>print_err</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SSL_ERROR_WANT_WRITE</name></expr>:</case>
<expr_stmt><expr><call><name>stop_reading</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>start_writing</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>SSL_ERROR_WANT_READ</name></expr>:</case>
<expr_stmt><expr><call><name>stop_writing</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>start_reading</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>conn_closed</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>, <argument><expr><name>BEV_EVENT_READING</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>be_openssl_handshakecb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev_base</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>do_handshake</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>be_openssl_handshakeeventcb</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bufferevent_incref_and_lock_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>what</name> <operator>&amp;</operator> <name>EV_TIMEOUT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_run_eventcb_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></argument>, <argument><expr><name>BEV_EVENT_TIMEOUT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>do_handshake</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>bufferevent_decref_and_unlock_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_handshake_callbacks</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_setcb</name><argument_list>(<argument><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name></expr></argument>,
<argument><expr><name>be_openssl_handshakecb</name></expr></argument>, <argument><expr><name>be_openssl_handshakecb</name></expr></argument>,
<argument><expr><name>be_openssl_eventcb</name></expr></argument>,
<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bufferevent_setfd</name><argument_list>(<argument><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>do_handshake</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>event_initialized</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>ev_read</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>ev_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>ev_write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>ev_read</name></name></expr></argument>, <argument><expr><name><name>bev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>,
<argument><expr><name>EV_READ</name><operator>|</operator><name>EV_PERSIST</name><operator>|</operator><name>EV_FINALIZE</name></expr></argument>,
<argument><expr><name>be_openssl_handshakeeventcb</name></expr></argument>, <argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>ev_write</name></name></expr></argument>, <argument><expr><name><name>bev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>,
<argument><expr><name>EV_WRITE</name><operator>|</operator><name>EV_PERSIST</name><operator>|</operator><name>EV_FINALIZE</name></expr></argument>,
<argument><expr><name>be_openssl_handshakeeventcb</name></expr></argument>, <argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_enable</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name><name>bev</name><operator>-&gt;</operator><name>enabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_ssl_renegotiate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name> <init>= <expr><call><name>upcast</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bev_ssl</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SSL_renegotiate</name><argument_list>(<argument><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>BUFFEREVENT_SSL_CONNECTING</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>set_handshake_callbacks</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>, <argument><expr><call><name>be_openssl_auto_fd</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>do_handshake</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>be_openssl_outbuf_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evbuffer_cb_info</name></name> <modifier>*</modifier></type><name>cbinfo</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>cbinfo</name><operator>-&gt;</operator><name>n_added</name></name> <operator>&amp;&amp;</operator> <name><name>bev_ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>BUFFEREVENT_SSL_OPEN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cbinfo</name><operator>-&gt;</operator><name>orig_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>bufferevent_add_event_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name><operator>.</operator><name>ev_write</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name><operator>.</operator><name>timeout_write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>consider_writing</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>r</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>be_openssl_enable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name> <init>= <expr><call><name>upcast</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_READ</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <call><name>start_reading</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <call><name>start_writing</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_READ</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BEV_RESET_GENERIC_READ_TIMEOUT</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BEV_RESET_GENERIC_WRITE_TIMEOUT</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_READ</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>consider_reading</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>consider_writing</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>r1</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>r2</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>be_openssl_disable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name> <init>= <expr><call><name>upcast</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_READ</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stop_reading</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stop_writing</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_READ</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BEV_DEL_GENERIC_READ_TIMEOUT</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BEV_DEL_GENERIC_WRITE_TIMEOUT</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>be_openssl_unlink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name> <init>= <expr><call><name>upcast</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>options</name></name> <operator>&amp;</operator> <name>BEV_OPT_CLOSE_ON_FREE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>BEV_UPCAST</name><argument_list>(<argument><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>refcnt</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"BEV_OPT_CLOSE_ON_FREE set on an "</literal>
<literal type="string">"bufferevent with too few references"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_free</name><argument_list>(<argument><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name><operator>-&gt;</operator><name>errorcb</name></name> <operator>==</operator> <name>be_openssl_eventcb</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_setcb</name><argument_list>(<argument><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bufferevent_unsuspend_read_</name><argument_list>(<argument><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name></expr></argument>,
<argument><expr><name>BEV_SUSPEND_FILT_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>be_openssl_destruct</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name> <init>= <expr><call><name>upcast</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>options</name></name> <operator>&amp;</operator> <name>BEV_OPT_CLOSE_ON_FREE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>bio</name> <init>= <expr><call><name>SSL_get_wbio</name><argument_list>(<argument><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bio</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>BIO_get_fd</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>SSL_free</name><argument_list>(<argument><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>be_openssl_adj_timeouts</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name> <init>= <expr><call><name>upcast</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>bufferevent_generic_adj_timeouts_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><call><name>bufferevent_generic_adj_existing_timeouts_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>be_openssl_flush</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>,
<parameter><decl><type><name>short</name></type> <name>iotype</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>bufferevent_flush_mode</name></name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>be_openssl_set_fd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>bufferevent_ssl_state</name></name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BUFFEREVENT_SSL_ACCEPTING</name></expr>:</case>
<expr_stmt><expr><call><name>SSL_set_accept_state</name><argument_list>(<argument><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>set_handshake_callbacks</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>BUFFEREVENT_SSL_CONNECTING</name></expr>:</case>
<expr_stmt><expr><call><name>SSL_set_connect_state</name><argument_list>(<argument><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>set_handshake_callbacks</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>BUFFEREVENT_SSL_OPEN</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>set_open_callbacks</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>be_openssl_ctrl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>bufferevent_ctrl_op</name></name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>bufferevent_ctrl_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name> <init>= <expr><call><name>upcast</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BEV_CTRL_SET_FD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>bio</name></decl>;</decl_stmt>
<expr_stmt><expr><name>bio</name> <operator>=</operator> <call><name>BIO_new_socket</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_set_bio</name><argument_list>(<argument><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>bio</name></expr></argument>, <argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>bio</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>bio</name> <operator>=</operator> <call><name>BIO_new_bufferevent</name><argument_list>(<argument><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SSL_set_bio</name><argument_list>(<argument><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>bio</name></expr></argument>, <argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>be_openssl_set_fd</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>, <argument><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>old_state</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>BEV_CTRL_GET_FD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>event_get_fd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name><operator>-&gt;</operator><name>ev_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>event_get_fd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>ev_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>BEV_CTRL_GET_UNDERLYING</name></expr>:</case>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>BEV_CTRL_CANCEL_ALL</name></expr>:</case>
<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>SSL</name> <modifier>*</modifier></type>
<name>bufferevent_openssl_get_ssl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name> <init>= <expr><call><name>upcast</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bev_ssl</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>ssl</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type>
<name>bufferevent_openssl_new_impl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>underlying</name></decl></parameter>,
<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>,
<parameter><decl><type><name>SSL</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>bufferevent_ssl_state</name></name></type> <name>state</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bev_p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmp_options</name> <init>= <expr><name>options</name> <operator>&amp;</operator> <operator>~</operator><name>BEV_OPT_THREADSAFE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>underlying</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>bev_ssl</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>bufferevent_openssl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bev_p</name> <operator>=</operator> <operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bufferevent_init_common_</name><argument_list>(<argument><expr><name>bev_p</name></expr></argument>, <argument><expr><name>base</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>bufferevent_ops_openssl</name></expr></argument>, <argument><expr><name>tmp_options</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>SSL_set_mode</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>underlying</name></name> <operator>=</operator> <name>underlying</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>ssl</name></name> <operator>=</operator> <name>ssl</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>outbuf_cb</name></name> <operator>=</operator> <call><name>evbuffer_add_cb</name><argument_list>(<argument><expr><name><name>bev_p</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>output</name></name></expr></argument>,
<argument><expr><name>be_openssl_outbuf_cb</name></expr></argument>, <argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;</operator> <name>BEV_OPT_THREADSAFE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_enable_locking_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>underlying</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_init_generic_timeout_cbs_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_incref_</name><argument_list>(<argument><expr><name>underlying</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>old_state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>last_write</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_bio_counts</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>be_openssl_auto_fd</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>be_openssl_set_fd</name><argument_list>(<argument><expr><name>bev_ssl</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>underlying</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_setwatermark</name><argument_list>(<argument><expr><name>underlying</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_enable</name><argument_list>(<argument><expr><name>underlying</name></expr></argument>, <argument><expr><name>EV_READ</name><operator>|</operator><name>EV_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>BUFFEREVENT_SSL_OPEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_suspend_read_</name><argument_list>(<argument><expr><name>underlying</name></expr></argument>,
<argument><expr><name>BEV_SUSPEND_FILT_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr>;</return>
<label><name>err</name>:</label>
<if_stmt><if>if <condition>(<expr><name>bev_ssl</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type>
<name>bufferevent_openssl_filter_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>underlying</name></decl></parameter>,
<parameter><decl><type><name>SSL</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>bufferevent_ssl_state</name></name></type> <name>state</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>close_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>bio</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>underlying</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>bio</name> <operator>=</operator> <call><name>BIO_new_bufferevent</name><argument_list>(<argument><expr><name>underlying</name></expr></argument>, <argument><expr><name>close_flag</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SSL_set_bio</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>bio</name></expr></argument>, <argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>bufferevent_openssl_new_impl</name><argument_list>(
<argument><expr><name>base</name></expr></argument>, <argument><expr><name>underlying</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type>
<name>bufferevent_openssl_socket_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>,
<parameter><decl><type><name>SSL</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>bufferevent_ssl_state</name></name></type> <name>state</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>bio</name> <init>= <expr><call><name>SSL_get_wbio</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>have_fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bio</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>have_fd</name> <operator>=</operator> <call><name>BIO_get_fd</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>have_fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <operator>(</operator><name>evutil_socket_t</name><operator>)</operator> <name>have_fd</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>have_fd</name> <operator>==</operator> <operator>(</operator><name>long</name><operator>)</operator><name>fd</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <else>else <block>{<block_content>


<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>BIO_set_close</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bio</name> <operator>=</operator> <call><name>BIO_new_socket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_set_bio</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>bio</name></expr></argument>, <argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>bufferevent_openssl_new_impl</name><argument_list>(
<argument><expr><name>base</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_openssl_get_allow_dirty_shutdown</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>allow_dirty_shutdown</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bev_ssl</name> <operator>=</operator> <call><name>upcast</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bev_ssl</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>allow_dirty_shutdown</name> <operator>=</operator> <name><name>bev_ssl</name><operator>-&gt;</operator><name>allow_dirty_shutdown</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>allow_dirty_shutdown</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>bufferevent_openssl_set_allow_dirty_shutdown</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>allow_dirty_shutdown</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bev_ssl</name> <operator>=</operator> <call><name>upcast</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bev_ssl</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bev_ssl</name><operator>-&gt;</operator><name>allow_dirty_shutdown</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><name>allow_dirty_shutdown</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>long</name></type>
<name>bufferevent_get_openssl_error</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_openssl</name></name> <modifier>*</modifier></type><name>bev_ssl</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bev_ssl</name> <operator>=</operator> <call><name>upcast</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bev_ssl</name> <operator>&amp;&amp;</operator> <name><name>bev_ssl</name><operator>-&gt;</operator><name>n_errors</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name><name>bev_ssl</name><operator>-&gt;</operator><name>errors</name><index>[<expr><operator>--</operator><name><name>bev_ssl</name><operator>-&gt;</operator><name>n_errors</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>
</unit>
