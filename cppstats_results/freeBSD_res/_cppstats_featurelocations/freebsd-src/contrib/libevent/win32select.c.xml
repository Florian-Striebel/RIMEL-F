<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/win32select.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event-config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evconfig-private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evmap-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evthread-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"time-internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XFREE</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (ptr) mm_free(ptr); } while (0)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>event_list</name></name></type> <name>timequeue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>event_list</name></name></type> <name>addqueue</name></decl>;</decl_stmt>

<struct>struct <name>win_fd_set</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>fd_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SOCKET</name></type> <name><name>fd_array</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>


<decl_stmt><decl><type><specifier>volatile</specifier> <name>double</name></type> <name>SIGFPE_REQ</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>idx_info</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>read_pos_plus1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>write_pos_plus1</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>win32op</name> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>num_fds_in_fd_sets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>resize_out_sets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>win_fd_set</name></name> <modifier>*</modifier></type><name>readset_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>win_fd_set</name></name> <modifier>*</modifier></type><name>writeset_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>win_fd_set</name></name> <modifier>*</modifier></type><name>readset_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>win_fd_set</name></name> <modifier>*</modifier></type><name>writeset_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>win_fd_set</name></name> <modifier>*</modifier></type><name>exset_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>signals_are_broken</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>win32_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>win32_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>old</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>idx_</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>win32_del</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>old</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>idx_</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>win32_dispatch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>win32_dealloc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name><name>struct</name> <name>eventop</name></name></type> <name>win32ops</name> <init>= <expr><block>{
<expr><literal type="string">"win32"</literal></expr>,
<expr><name>win32_init</name></expr>,
<expr><name>win32_add</name></expr>,
<expr><name>win32_del</name></expr>,
<expr><name>win32_dispatch</name></expr>,
<expr><name>win32_dealloc</name></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>idx_info</name></expr></argument>)</argument_list></sizeof></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FD_SET_ALLOC_SIZE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((sizeof(struct win_fd_set) + ((n)-1)*sizeof(SOCKET)))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>grow_fd_sets</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>win32op</name></name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>new_num_fds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>new_num_fds</name> <operator>&gt;=</operator> <name><name>op</name><operator>-&gt;</operator><name>readset_in</name><operator>-&gt;</operator><name>fd_count</name></name> <operator>&amp;&amp;</operator>
<name>new_num_fds</name> <operator>&gt;=</operator> <name><name>op</name><operator>-&gt;</operator><name>writeset_in</name><operator>-&gt;</operator><name>fd_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>new_num_fds</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>FD_SET_ALLOC_SIZE</name><argument_list>(<argument><expr><name>new_num_fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>readset_in</name></name> <operator>=</operator> <call><name>mm_realloc</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>readset_in</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>writeset_in</name></name> <operator>=</operator> <call><name>mm_realloc</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>writeset_in</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>resize_out_sets</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>num_fds_in_fd_sets</name></name> <operator>=</operator> <name>new_num_fds</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>do_fd_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>win32op</name></name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>idx_info</name></name> <modifier>*</modifier></type><name>ent</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>read</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>win_fd_set</name></name> <modifier>*</modifier></type><name>set</name> <init>= <expr><ternary><condition><expr><name>read</name></expr> ?</condition><then> <expr><name><name>op</name><operator>-&gt;</operator><name>readset_in</name></name></expr> </then><else>: <expr><name><name>op</name><operator>-&gt;</operator><name>writeset_in</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>read</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ent</name><operator>-&gt;</operator><name>read_pos_plus1</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ent</name><operator>-&gt;</operator><name>write_pos_plus1</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>set</name><operator>-&gt;</operator><name>fd_count</name></name> <operator>==</operator> <name><name>op</name><operator>-&gt;</operator><name>num_fds_in_fd_sets</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>grow_fd_sets</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>num_fds_in_fd_sets</name></name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>set</name> <operator>=</operator> <ternary><condition><expr><name>read</name></expr> ?</condition><then> <expr><name><name>op</name><operator>-&gt;</operator><name>readset_in</name></name></expr> </then><else>: <expr><name><name>op</name><operator>-&gt;</operator><name>writeset_in</name></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>fd_array</name><index>[<expr><name><name>set</name><operator>-&gt;</operator><name>fd_count</name></name></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>read</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>read_pos_plus1</name></name> <operator>=</operator> <name><name>set</name><operator>-&gt;</operator><name>fd_count</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>write_pos_plus1</name></name> <operator>=</operator> <name><name>set</name><operator>-&gt;</operator><name>fd_count</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name><name>set</name><operator>-&gt;</operator><name>fd_count</name></name><operator>++</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>do_fd_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>win32op</name></name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>idx_info</name></name> <modifier>*</modifier></type><name>ent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>read</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>win_fd_set</name></name> <modifier>*</modifier></type><name>set</name> <init>= <expr><ternary><condition><expr><name>read</name></expr> ?</condition><then> <expr><name><name>op</name><operator>-&gt;</operator><name>readset_in</name></name></expr> </then><else>: <expr><name><name>op</name><operator>-&gt;</operator><name>writeset_in</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>read</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>ent</name><operator>-&gt;</operator><name>read_pos_plus1</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>read_pos_plus1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>ent</name><operator>-&gt;</operator><name>write_pos_plus1</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>write_pos_plus1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>set</name><operator>-&gt;</operator><name>fd_count</name></name> <operator>!=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>i</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>idx_info</name></name> <modifier>*</modifier></type><name>ent2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>s2</name></decl>;</decl_stmt>
<expr_stmt><expr><name>s2</name> <operator>=</operator> <name><name>set</name><operator>-&gt;</operator><name>fd_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>set</name><operator>-&gt;</operator><name>fd_array</name><index>[<expr><name><name>set</name><operator>-&gt;</operator><name>fd_count</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ent2</name> <operator>=</operator> <call><name>evmap_io_get_fdinfo_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ent2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>read</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ent2</name><operator>-&gt;</operator><name>read_pos_plus1</name></name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ent2</name><operator>-&gt;</operator><name>write_pos_plus1</name></name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEVENT</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>win32_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>win32op</name></name> <modifier>*</modifier></type><name>winop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>winop</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>win32op</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>winop</name><operator>-&gt;</operator><name>num_fds_in_fd_sets</name></name> <operator>=</operator> <name>NEVENT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>FD_SET_ALLOC_SIZE</name><argument_list>(<argument><expr><name>NEVENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>winop</name><operator>-&gt;</operator><name>readset_in</name></name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>winop</name><operator>-&gt;</operator><name>writeset_in</name></name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>winop</name><operator>-&gt;</operator><name>readset_out</name></name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>winop</name><operator>-&gt;</operator><name>writeset_out</name></name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>winop</name><operator>-&gt;</operator><name>exset_out</name></name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>winop</name><operator>-&gt;</operator><name>readset_in</name><operator>-&gt;</operator><name>fd_count</name></name> <operator>=</operator> <name><name>winop</name><operator>-&gt;</operator><name>writeset_in</name><operator>-&gt;</operator><name>fd_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>winop</name><operator>-&gt;</operator><name>readset_out</name><operator>-&gt;</operator><name>fd_count</name></name> <operator>=</operator> <name><name>winop</name><operator>-&gt;</operator><name>writeset_out</name><operator>-&gt;</operator><name>fd_count</name></name>
<operator>=</operator> <name><name>winop</name><operator>-&gt;</operator><name>exset_out</name><operator>-&gt;</operator><name>fd_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evsig_init_</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>winop</name><operator>-&gt;</operator><name>signals_are_broken</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>evutil_weakrand_seed_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>weakrand_seed</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>winop</name><operator>)</operator></expr>;</return>
<label><name>err</name>:</label>
<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name><name>winop</name><operator>-&gt;</operator><name>readset_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name><name>winop</name><operator>-&gt;</operator><name>writeset_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name><name>winop</name><operator>-&gt;</operator><name>readset_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name><name>winop</name><operator>-&gt;</operator><name>writeset_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name><name>winop</name><operator>-&gt;</operator><name>exset_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>winop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>win32_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>,
<parameter><decl><type><name>short</name></type> <name>old</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>idx_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>win32op</name></name> <modifier>*</modifier></type><name>win32op</name> <init>= <expr><name><name>base</name><operator>-&gt;</operator><name>evbase</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>idx_info</name></name> <modifier>*</modifier></type><name>idx</name> <init>= <expr><name>idx_</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>events</name> <operator>&amp;</operator> <name>EV_SIGNAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>win32op</name><operator>-&gt;</operator><name>signals_are_broken</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>events</name> <operator>&amp;</operator> <operator>(</operator><name>EV_READ</name><operator>|</operator><name>EV_WRITE</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: adding event for %d"</literal><operator>,</operator> <name>__func__</name><operator>,</operator> <operator>(</operator><name>int</name><operator>)</operator><name>fd</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_READ</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>do_fd_set</name><argument_list>(<argument><expr><name>win32op</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_WRITE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>do_fd_set</name><argument_list>(<argument><expr><name>win32op</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>win32_del</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>old</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>idx_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>win32op</name></name> <modifier>*</modifier></type><name>win32op</name> <init>= <expr><name><name>base</name><operator>-&gt;</operator><name>evbase</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>idx_info</name></name> <modifier>*</modifier></type><name>idx</name> <init>= <expr><name>idx_</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: Removing event for "</literal><name>EV_SOCK_FMT</name><operator>,</operator>
<name>__func__</name><operator>,</operator> <call><name>EV_SOCK_ARG</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_READ</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>do_fd_clear</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>win32op</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>do_fd_clear</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>win32op</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>fd_set_copy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>win_fd_set</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>win_fd_set</name></name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>fd_count</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>fd_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>fd_array</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>fd_array</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>fd_count</name></name> <operator>*</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SOCKET</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>












<function><type><name>int</name></type>
<name>win32_dispatch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>win32op</name></name> <modifier>*</modifier></type><name>win32op</name> <init>= <expr><name><name>base</name><operator>-&gt;</operator><name>evbase</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>win32op</name><operator>-&gt;</operator><name>resize_out_sets</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>FD_SET_ALLOC_SIZE</name><argument_list>(<argument><expr><name><name>win32op</name><operator>-&gt;</operator><name>num_fds_in_fd_sets</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>win32op</name><operator>-&gt;</operator><name>readset_out</name></name> <operator>=</operator> <call><name>mm_realloc</name><argument_list>(<argument><expr><name><name>win32op</name><operator>-&gt;</operator><name>readset_out</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>win32op</name><operator>-&gt;</operator><name>exset_out</name></name> <operator>=</operator> <call><name>mm_realloc</name><argument_list>(<argument><expr><name><name>win32op</name><operator>-&gt;</operator><name>exset_out</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>win32op</name><operator>-&gt;</operator><name>writeset_out</name></name> <operator>=</operator> <call><name>mm_realloc</name><argument_list>(<argument><expr><name><name>win32op</name><operator>-&gt;</operator><name>writeset_out</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>win32op</name><operator>-&gt;</operator><name>resize_out_sets</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fd_set_copy</name><argument_list>(<argument><expr><name><name>win32op</name><operator>-&gt;</operator><name>readset_out</name></name></expr></argument>, <argument><expr><name><name>win32op</name><operator>-&gt;</operator><name>readset_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fd_set_copy</name><argument_list>(<argument><expr><name><name>win32op</name><operator>-&gt;</operator><name>exset_out</name></name></expr></argument>, <argument><expr><name><name>win32op</name><operator>-&gt;</operator><name>writeset_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fd_set_copy</name><argument_list>(<argument><expr><name><name>win32op</name><operator>-&gt;</operator><name>writeset_out</name></name></expr></argument>, <argument><expr><name><name>win32op</name><operator>-&gt;</operator><name>writeset_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd_count</name> <operator>=</operator>
<ternary><condition><expr><operator>(</operator><name><name>win32op</name><operator>-&gt;</operator><name>readset_out</name><operator>-&gt;</operator><name>fd_count</name></name> <operator>&gt;</operator> <name><name>win32op</name><operator>-&gt;</operator><name>writeset_out</name><operator>-&gt;</operator><name>fd_count</name></name><operator>)</operator></expr> ?</condition><then>
<expr><name><name>win32op</name><operator>-&gt;</operator><name>readset_out</name><operator>-&gt;</operator><name>fd_count</name></name></expr> </then><else>: <expr><name><name>win32op</name><operator>-&gt;</operator><name>writeset_out</name><operator>-&gt;</operator><name>fd_count</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fd_count</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>msec</name> <init>= <expr><ternary><condition><expr><name>tv</name></expr> ?</condition><then> <expr><call><name>evutil_tv_to_msec_</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>LONG_MAX</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>msec</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>msec</name> <operator>=</operator> <name>LONG_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><name>msec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>select</name><argument_list>(<argument><expr><name>fd_count</name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>fd_set</name><operator>*</operator><operator>)</operator><name><name>win32op</name><operator>-&gt;</operator><name>readset_out</name></name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>fd_set</name><operator>*</operator><operator>)</operator><name><name>win32op</name><operator>-&gt;</operator><name>writeset_out</name></name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>fd_set</name><operator>*</operator><operator>)</operator><name><name>win32op</name><operator>-&gt;</operator><name>exset_out</name></name></expr></argument>, <argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: select returned %d"</literal><operator>,</operator> <name>__func__</name><operator>,</operator> <name>res</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>win32op</name><operator>-&gt;</operator><name>readset_out</name><operator>-&gt;</operator><name>fd_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>evutil_weakrand_range_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>weakrand_seed</name></name></expr></argument>,
<argument><expr><name><name>win32op</name><operator>-&gt;</operator><name>readset_out</name><operator>-&gt;</operator><name>fd_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>win32op</name><operator>-&gt;</operator><name>readset_out</name><operator>-&gt;</operator><name>fd_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>i</name> <operator>&gt;=</operator> <name><name>win32op</name><operator>-&gt;</operator><name>readset_out</name><operator>-&gt;</operator><name>fd_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>win32op</name><operator>-&gt;</operator><name>readset_out</name><operator>-&gt;</operator><name>fd_array</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evmap_io_active_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>win32op</name><operator>-&gt;</operator><name>exset_out</name><operator>-&gt;</operator><name>fd_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>evutil_weakrand_range_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>weakrand_seed</name></name></expr></argument>,
<argument><expr><name><name>win32op</name><operator>-&gt;</operator><name>exset_out</name><operator>-&gt;</operator><name>fd_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>win32op</name><operator>-&gt;</operator><name>exset_out</name><operator>-&gt;</operator><name>fd_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>i</name> <operator>&gt;=</operator> <name><name>win32op</name><operator>-&gt;</operator><name>exset_out</name><operator>-&gt;</operator><name>fd_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>win32op</name><operator>-&gt;</operator><name>exset_out</name><operator>-&gt;</operator><name>fd_array</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evmap_io_active_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>win32op</name><operator>-&gt;</operator><name>writeset_out</name><operator>-&gt;</operator><name>fd_count</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>s</name></decl>;</decl_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>evutil_weakrand_range_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>weakrand_seed</name></name></expr></argument>,
<argument><expr><name><name>win32op</name><operator>-&gt;</operator><name>writeset_out</name><operator>-&gt;</operator><name>fd_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>win32op</name><operator>-&gt;</operator><name>writeset_out</name><operator>-&gt;</operator><name>fd_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>i</name> <operator>&gt;=</operator> <name><name>win32op</name><operator>-&gt;</operator><name>writeset_out</name><operator>-&gt;</operator><name>fd_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>win32op</name><operator>-&gt;</operator><name>writeset_out</name><operator>-&gt;</operator><name>fd_array</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evmap_io_active_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>win32_dealloc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>win32op</name></name> <modifier>*</modifier></type><name>win32op</name> <init>= <expr><name><name>base</name><operator>-&gt;</operator><name>evbase</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>evsig_dealloc_</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>win32op</name><operator>-&gt;</operator><name>readset_in</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>win32op</name><operator>-&gt;</operator><name>readset_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>win32op</name><operator>-&gt;</operator><name>writeset_in</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>win32op</name><operator>-&gt;</operator><name>writeset_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>win32op</name><operator>-&gt;</operator><name>readset_out</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>win32op</name><operator>-&gt;</operator><name>readset_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>win32op</name><operator>-&gt;</operator><name>writeset_out</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>win32op</name><operator>-&gt;</operator><name>writeset_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>win32op</name><operator>-&gt;</operator><name>exset_out</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>win32op</name><operator>-&gt;</operator><name>exset_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>win32op</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>win32op</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>win32op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
