<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/bufferevent_async.c">



























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event-config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evconfig-private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_STDARG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ws2tcpip.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/bufferevent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/buffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/bufferevent_struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mm-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bufferevent-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iocp-internal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SO_UPDATE_CONNECT_CONTEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_UPDATE_CONNECT_CONTEXT</name></cpp:macro> <cpp:value>0x7010</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>be_async_enable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>be_async_disable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>be_async_destruct</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>be_async_flush</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>bufferevent_flush_mode</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>be_async_ctrl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>bufferevent_ctrl_op</name></name></type></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>bufferevent_ctrl_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>bufferevent_async</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name></type> <name>bev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_overlapped</name></name></type> <name>connect_overlapped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_overlapped</name></name></type> <name>read_overlapped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_overlapped</name></name></type> <name>write_overlapped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>read_in_progress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>write_in_progress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ok</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>read_added</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>write_added</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bufferevent_ops</name></name></type> <name>bufferevent_ops_async</name> <init>= <expr><block>{
<expr><literal type="string">"socket_async"</literal></expr>,
<expr><call><name>evutil_offsetof</name><argument_list>(<argument><expr>struct <name>bufferevent_async</name></expr></argument>, <argument><expr><name><name>bev</name><operator>.</operator><name>bev</name></name></expr></argument>)</argument_list></call></expr>,
<expr><name>be_async_enable</name></expr>,
<expr><name>be_async_disable</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>be_async_destruct</name></expr>,
<expr><name>bufferevent_generic_adj_timeouts_</name></expr>,
<expr><name>be_async_flush</name></expr>,
<expr><name>be_async_ctrl</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>bufferevent_async</name></name> <modifier>*</modifier></type>
<name>upcast</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_async</name></name> <modifier>*</modifier></type><name>bev_a</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bev</name><operator>-&gt;</operator><name>be_ops</name></name> <operator>!=</operator> <operator>&amp;</operator><name>bufferevent_ops_async</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bev_a</name> <operator>=</operator> <call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr>struct <name>bufferevent_async</name></expr></argument>, <argument><expr><name><name>bev</name><operator>.</operator><name>bev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>bev_a</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>bufferevent_async</name></name> <modifier>*</modifier></type>
<name>upcast_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_overlapped</name></name> <modifier>*</modifier></type><name>eo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_async</name></name> <modifier>*</modifier></type><name>bev_a</name></decl>;</decl_stmt>
<expr_stmt><expr><name>bev_a</name> <operator>=</operator> <call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>eo</name></expr></argument>, <argument><expr>struct <name>bufferevent_async</name></expr></argument>, <argument><expr><name>connect_overlapped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><call><name>BEV_IS_ASYNC</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev_a</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>bev_a</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>bufferevent_async</name></name> <modifier>*</modifier></type>
<name>upcast_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_overlapped</name></name> <modifier>*</modifier></type><name>eo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_async</name></name> <modifier>*</modifier></type><name>bev_a</name></decl>;</decl_stmt>
<expr_stmt><expr><name>bev_a</name> <operator>=</operator> <call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>eo</name></expr></argument>, <argument><expr>struct <name>bufferevent_async</name></expr></argument>, <argument><expr><name>read_overlapped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><call><name>BEV_IS_ASYNC</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev_a</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>bev_a</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>bufferevent_async</name></name> <modifier>*</modifier></type>
<name>upcast_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_overlapped</name></name> <modifier>*</modifier></type><name>eo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_async</name></name> <modifier>*</modifier></type><name>bev_a</name></decl>;</decl_stmt>
<expr_stmt><expr><name>bev_a</name> <operator>=</operator> <call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>eo</name></expr></argument>, <argument><expr>struct <name>bufferevent_async</name></expr></argument>, <argument><expr><name>write_overlapped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><call><name>BEV_IS_ASYNC</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev_a</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>bev_a</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>bev_async_del_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_async</name></name> <modifier>*</modifier></type><name>beva</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><operator>&amp;</operator><name><name>beva</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>beva</name><operator>-&gt;</operator><name>write_added</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>beva</name><operator>-&gt;</operator><name>write_added</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_del_virtual_</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>bev_async_del_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_async</name></name> <modifier>*</modifier></type><name>beva</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><operator>&amp;</operator><name><name>beva</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>beva</name><operator>-&gt;</operator><name>read_added</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>beva</name><operator>-&gt;</operator><name>read_added</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_del_virtual_</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>bev_async_add_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_async</name></name> <modifier>*</modifier></type><name>beva</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><operator>&amp;</operator><name><name>beva</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>beva</name><operator>-&gt;</operator><name>write_added</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>beva</name><operator>-&gt;</operator><name>write_added</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_add_virtual_</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>bev_async_add_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_async</name></name> <modifier>*</modifier></type><name>beva</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><operator>&amp;</operator><name><name>beva</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>beva</name><operator>-&gt;</operator><name>read_added</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>beva</name><operator>-&gt;</operator><name>read_added</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_add_virtual_</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>bev_async_consider_writing</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_async</name></name> <modifier>*</modifier></type><name>beva</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>at_most</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><operator>&amp;</operator><name><name>beva</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name><name>beva</name><operator>-&gt;</operator><name>write_in_progress</name></name> <operator>||</operator> <name><name>beva</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>connecting</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>beva</name><operator>-&gt;</operator><name>ok</name></name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>bev</name><operator>-&gt;</operator><name>enabled</name></name><operator>&amp;</operator><name>EV_WRITE</name><operator>)</operator> <operator>||</operator>
<operator>!</operator><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bev_async_del_write</name><argument_list>(<argument><expr><name>beva</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>at_most</name> <operator>=</operator> <call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>limit</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>bufferevent_get_write_max_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>beva</name><operator>-&gt;</operator><name>bev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>at_most</name> <operator>&gt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>limit</name> <operator>&amp;&amp;</operator> <name>limit</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>at_most</name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>beva</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>write_suspended</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bev_async_del_write</name><argument_list>(<argument><expr><name>beva</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>bufferevent_incref_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evbuffer_launch_write_</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name>at_most</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>beva</name><operator>-&gt;</operator><name>write_overlapped</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_decref_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>beva</name><operator>-&gt;</operator><name>ok</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_run_eventcb_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>BEV_EVENT_ERROR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>beva</name><operator>-&gt;</operator><name>write_in_progress</name></name> <operator>=</operator> <name>at_most</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_decrement_write_buckets_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>beva</name><operator>-&gt;</operator><name>bev</name></name></expr></argument>, <argument><expr><name>at_most</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bev_async_add_write</name><argument_list>(<argument><expr><name>beva</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>bev_async_consider_reading</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_async</name></name> <modifier>*</modifier></type><name>beva</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>cur_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>read_high</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>at_most</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><operator>&amp;</operator><name><name>beva</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name><name>beva</name><operator>-&gt;</operator><name>read_in_progress</name></name> <operator>||</operator> <name><name>beva</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>connecting</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>beva</name><operator>-&gt;</operator><name>ok</name></name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>bev</name><operator>-&gt;</operator><name>enabled</name></name><operator>&amp;</operator><name>EV_READ</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bev_async_del_read</name><argument_list>(<argument><expr><name>beva</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>cur_size</name> <operator>=</operator> <call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>read_high</name> <operator>=</operator> <name><name>bev</name><operator>-&gt;</operator><name>wm_read</name><operator>.</operator><name>high</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>read_high</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cur_size</name> <operator>&gt;=</operator> <name>read_high</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bev_async_del_read</name><argument_list>(<argument><expr><name>beva</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>at_most</name> <operator>=</operator> <name>read_high</name> <operator>-</operator> <name>cur_size</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>at_most</name> <operator>=</operator> <literal type="number">16384</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<expr_stmt><expr><name>limit</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>bufferevent_get_read_max_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>beva</name><operator>-&gt;</operator><name>bev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>at_most</name> <operator>&gt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>limit</name> <operator>&amp;&amp;</operator> <name>limit</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>at_most</name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>beva</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>read_suspended</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bev_async_del_read</name><argument_list>(<argument><expr><name>beva</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bufferevent_incref_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evbuffer_launch_read_</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name>at_most</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>beva</name><operator>-&gt;</operator><name>read_overlapped</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>beva</name><operator>-&gt;</operator><name>ok</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_run_eventcb_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>BEV_EVENT_ERROR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_decref_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>beva</name><operator>-&gt;</operator><name>read_in_progress</name></name> <operator>=</operator> <name>at_most</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_decrement_read_buckets_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>beva</name><operator>-&gt;</operator><name>bev</name></name></expr></argument>, <argument><expr><name>at_most</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bev_async_add_read</name><argument_list>(<argument><expr><name>beva</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>be_async_outbuf_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evbuffer_cb_info</name></name> <modifier>*</modifier></type><name>cbinfo</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_async</name></name> <modifier>*</modifier></type><name>bev_async</name> <init>= <expr><call><name>upcast</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><call><name>bufferevent_incref_and_lock_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cbinfo</name><operator>-&gt;</operator><name>n_added</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bev_async_consider_writing</name><argument_list>(<argument><expr><name>bev_async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bufferevent_decref_and_unlock_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>be_async_inbuf_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evbuffer_cb_info</name></name> <modifier>*</modifier></type><name>cbinfo</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_async</name></name> <modifier>*</modifier></type><name>bev_async</name> <init>= <expr><call><name>upcast</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><call><name>bufferevent_incref_and_lock_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cbinfo</name><operator>-&gt;</operator><name>n_deleted</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bev_async_consider_reading</name><argument_list>(<argument><expr><name>bev_async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bufferevent_decref_and_unlock_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>be_async_enable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_async</name></name> <modifier>*</modifier></type><name>bev_async</name> <init>= <expr><call><name>upcast</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bev_async</name><operator>-&gt;</operator><name>ok</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bev_async</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>connecting</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>what</name> <operator>&amp;</operator> <name>EV_READ</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BEV_RESET_GENERIC_READ_TIMEOUT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>what</name> <operator>&amp;</operator> <name>EV_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BEV_RESET_GENERIC_WRITE_TIMEOUT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>what</name> <operator>&amp;</operator> <name>EV_READ</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bev_async_consider_reading</name><argument_list>(<argument><expr><name>bev_async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>what</name> <operator>&amp;</operator> <name>EV_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bev_async_consider_writing</name><argument_list>(<argument><expr><name>bev_async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>be_async_disable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_async</name></name> <modifier>*</modifier></type><name>bev_async</name> <init>= <expr><call><name>upcast</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>what</name> <operator>&amp;</operator> <name>EV_READ</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BEV_DEL_GENERIC_READ_TIMEOUT</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bev_async_del_read</name><argument_list>(<argument><expr><name>bev_async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>what</name> <operator>&amp;</operator> <name>EV_WRITE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BEV_DEL_GENERIC_WRITE_TIMEOUT</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bev_async_del_write</name><argument_list>(<argument><expr><name>bev_async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>be_async_destruct</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_async</name></name> <modifier>*</modifier></type><name>bev_async</name> <init>= <expr><call><name>upcast</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bev_p</name> <init>= <expr><call><name>BEV_UPCAST</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>upcast</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>write_in_progress</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>upcast</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>read_in_progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bev_async_del_read</name><argument_list>(<argument><expr><name>bev_async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bev_async_del_write</name><argument_list>(<argument><expr><name>bev_async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>evbuffer_overlapped_get_fd_</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>(</operator><name>evutil_socket_t</name><operator>)</operator><name>INVALID_SOCKET</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>bev_p</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>BEV_OPT_CLOSE_ON_FREE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_overlapped_set_fd_</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name>INVALID_SOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>bev_async_set_wsa_error</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event_overlapped</name></name> <modifier>*</modifier></type><name>eo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>bytes</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>evbuffer_overlapped_get_fd_</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WSAGetOverlappedResult</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>eo</name><operator>-&gt;</operator><name>overlapped</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>be_async_flush</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>bufferevent_flush_mode</name></name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>connect_complete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_overlapped</name></name> <modifier>*</modifier></type><name>eo</name></decl></parameter>, <parameter><decl><type><name>ev_uintptr_t</name></type> <name>key</name></decl></parameter>,
<parameter><decl><type><name>ev_ssize_t</name></type> <name>nbytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_async</name></name> <modifier>*</modifier></type><name>bev_a</name> <init>= <expr><call><name>upcast_connect</name><argument_list>(<argument><expr><name>eo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><operator>&amp;</operator><name><name>bev_a</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>sock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>bev_a</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>connecting</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bev_a</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>connecting</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sock</name> <operator>=</operator> <call><name>evbuffer_overlapped_get_fd_</name><argument_list>(<argument><expr><name><name>bev_a</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name><operator>.</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_UPDATE_CONNECT_CONTEXT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_async_set_connected_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bev_async_set_wsa_error</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>eo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>bufferevent_run_eventcb_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>ok</name></expr>?</condition><then> <expr><name>BEV_EVENT_CONNECTED</name></expr> </then><else>: <expr><name>BEV_EVENT_ERROR</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_del_virtual_</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_decref_and_unlock_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>read_complete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_overlapped</name></name> <modifier>*</modifier></type><name>eo</name></decl></parameter>, <parameter><decl><type><name>ev_uintptr_t</name></type> <name>key</name></decl></parameter>,
<parameter><decl><type><name>ev_ssize_t</name></type> <name>nbytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_async</name></name> <modifier>*</modifier></type><name>bev_a</name> <init>= <expr><call><name>upcast_read</name><argument_list>(<argument><expr><name>eo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><operator>&amp;</operator><name><name>bev_a</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>what</name> <init>= <expr><name>BEV_EVENT_READING</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>amount_unread</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>bev_a</name><operator>-&gt;</operator><name>read_in_progress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>amount_unread</name> <operator>=</operator> <name><name>bev_a</name><operator>-&gt;</operator><name>read_in_progress</name></name> <operator>-</operator> <name>nbytes</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_commit_read_</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bev_a</name><operator>-&gt;</operator><name>read_in_progress</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>amount_unread</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_decrement_read_buckets_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev_a</name><operator>-&gt;</operator><name>bev</name></name></expr></argument>, <argument><expr><operator>-</operator><name>amount_unread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bev_async_set_wsa_error</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>eo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bev_a</name><operator>-&gt;</operator><name>ok</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ok</name> <operator>&amp;&amp;</operator> <name>nbytes</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BEV_RESET_GENERIC_READ_TIMEOUT</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_trigger_nolock_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bev_async_consider_reading</name><argument_list>(<argument><expr><name>bev_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>what</name> <operator>|=</operator> <name>BEV_EVENT_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bev_a</name><operator>-&gt;</operator><name>ok</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_run_eventcb_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>nbytes</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>what</name> <operator>|=</operator> <name>BEV_EVENT_EOF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bev_a</name><operator>-&gt;</operator><name>ok</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_run_eventcb_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bufferevent_decref_and_unlock_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>write_complete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_overlapped</name></name> <modifier>*</modifier></type><name>eo</name></decl></parameter>, <parameter><decl><type><name>ev_uintptr_t</name></type> <name>key</name></decl></parameter>,
<parameter><decl><type><name>ev_ssize_t</name></type> <name>nbytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_async</name></name> <modifier>*</modifier></type><name>bev_a</name> <init>= <expr><call><name>upcast_write</name><argument_list>(<argument><expr><name>eo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><operator>&amp;</operator><name><name>bev_a</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>what</name> <init>= <expr><name>BEV_EVENT_WRITING</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>amount_unwritten</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>bev_a</name><operator>-&gt;</operator><name>write_in_progress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>amount_unwritten</name> <operator>=</operator> <name><name>bev_a</name><operator>-&gt;</operator><name>write_in_progress</name></name> <operator>-</operator> <name>nbytes</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_commit_write_</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bev_a</name><operator>-&gt;</operator><name>write_in_progress</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>amount_unwritten</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_decrement_write_buckets_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev_a</name><operator>-&gt;</operator><name>bev</name></name></expr></argument>,
<argument><expr><operator>-</operator><name>amount_unwritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bev_async_set_wsa_error</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>eo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bev_a</name><operator>-&gt;</operator><name>ok</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ok</name> <operator>&amp;&amp;</operator> <name>nbytes</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BEV_RESET_GENERIC_WRITE_TIMEOUT</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_trigger_nolock_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bev_async_consider_writing</name><argument_list>(<argument><expr><name>bev_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>what</name> <operator>|=</operator> <name>BEV_EVENT_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bev_a</name><operator>-&gt;</operator><name>ok</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_run_eventcb_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>nbytes</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>what</name> <operator>|=</operator> <name>BEV_EVENT_EOF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bev_a</name><operator>-&gt;</operator><name>ok</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_run_eventcb_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bufferevent_decref_and_unlock_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type>
<name>bufferevent_async_new_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_async</name></name> <modifier>*</modifier></type><name>bev_a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_iocp_port</name></name> <modifier>*</modifier></type><name>iocp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>options</name> <operator>|=</operator> <name>BEV_OPT_THREADSAFE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>iocp</name> <operator>=</operator> <call><name>event_base_get_iocp_</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>event_iocp_port_associate_</name><argument_list>(<argument><expr><name>iocp</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>ERROR_INVALID_PARAMETER</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>bev_a</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>bufferevent_async</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bev</name> <operator>=</operator> <operator>&amp;</operator><name><name>bev_a</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>bev</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <call><name>evbuffer_overlapped_new_</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>bev_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>bev</name><operator>-&gt;</operator><name>output</name></name> <operator>=</operator> <call><name>evbuffer_overlapped_new_</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>bev_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bufferevent_init_common_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev_a</name><operator>-&gt;</operator><name>bev</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufferevent_ops_async</name></expr></argument>,
<argument><expr><name>options</name></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>evbuffer_add_cb</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name>be_async_inbuf_callback</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_cb</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name>be_async_outbuf_callback</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_overlapped_init_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev_a</name><operator>-&gt;</operator><name>connect_overlapped</name></name></expr></argument>, <argument><expr><name>connect_complete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_overlapped_init_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev_a</name><operator>-&gt;</operator><name>read_overlapped</name></name></expr></argument>, <argument><expr><name>read_complete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_overlapped_init_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev_a</name><operator>-&gt;</operator><name>write_overlapped</name></name></expr></argument>, <argument><expr><name>write_complete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_init_generic_timeout_cbs_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bev_a</name><operator>-&gt;</operator><name>ok</name></name> <operator>=</operator> <name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>bev</name></expr>;</return>
<label><name>err</name>:</label>
<expr_stmt><expr><call><name>bufferevent_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev_a</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>bufferevent_async_set_connected_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_async</name></name> <modifier>*</modifier></type><name>bev_async</name> <init>= <expr><call><name>upcast</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>bev_async</name><operator>-&gt;</operator><name>ok</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_init_generic_timeout_cbs_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>be_async_enable</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name><name>bev</name><operator>-&gt;</operator><name>enabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_async_can_connect_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>win32_extension_fns</name></name> <modifier>*</modifier></type><name>ext</name> <init>=
<expr><call><name>event_get_win32_extension_fns_</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>BEV_IS_ASYNC</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>event_base_get_iocp_</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name>ext</name> <operator>&amp;&amp;</operator> <name><name>ext</name><operator>-&gt;</operator><name>ConnectEx</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_async_connect_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>socklen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BOOL</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_async</name></name> <modifier>*</modifier></type><name>bev_async</name> <init>= <expr><call><name>upcast</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>ss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>win32_extension_fns</name></name> <modifier>*</modifier></type><name>ext</name> <init>=
<expr><call><name>event_get_win32_extension_fns_</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>ext</name> <operator>&amp;&amp;</operator> <name><name>ext</name><operator>-&gt;</operator><name>ConnectEx</name></name> <operator>&amp;&amp;</operator> <name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>sa</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>sin</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ss</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sin</name><operator>-&gt;</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name>INADDR_ANY</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>sin6</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ss</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sin6</name><operator>-&gt;</operator><name>sin6_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin6</name><operator>-&gt;</operator><name>sin6_addr</name></name> <operator>=</operator> <name>in6addr_any</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>WSAGetLastError</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>WSAEINVAL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>event_base_add_virtual_</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_incref_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>ext</name><operator>-&gt;</operator><name>ConnectEx</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>sa</name></expr></argument>, <argument><expr><name>socklen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>bev_async</name><operator>-&gt;</operator><name>connect_overlapped</name><operator>.</operator><name>overlapped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>||</operator> <call><name>WSAGetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ERROR_IO_PENDING</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>event_base_del_virtual_</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_decref_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>be_async_ctrl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>bufferevent_ctrl_op</name></name></type> <name>op</name></decl></parameter>,
<parameter><decl><type><name><name>union</name> <name>bufferevent_ctrl_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BEV_CTRL_GET_FD</name></expr>:</case>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>evbuffer_overlapped_get_fd_</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>BEV_CTRL_SET_FD</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event_iocp_port</name></name> <modifier>*</modifier></type><name>iocp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <call><name>evbuffer_overlapped_get_fd_</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>iocp</name> <operator>=</operator> <call><name>event_base_get_iocp_</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>event_iocp_port_associate_</name><argument_list>(<argument><expr><name>iocp</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>evbuffer_overlapped_set_fd_</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_overlapped_set_fd_</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>
<case>case <expr><name>BEV_CTRL_CANCEL_ALL</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_async</name></name> <modifier>*</modifier></type><name>bev_a</name> <init>= <expr><call><name>upcast</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>fd</name> <init>= <expr><call><name>evbuffer_overlapped_get_fd_</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>(</operator><name>evutil_socket_t</name><operator>)</operator><name>INVALID_SOCKET</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>bev_a</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>options</name></name> <operator>&amp;</operator> <name>BEV_OPT_CLOSE_ON_FREE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_overlapped_set_fd_</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name>INVALID_SOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bev_a</name><operator>-&gt;</operator><name>ok</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>
<case>case <expr><name>BEV_CTRL_GET_UNDERLYING</name></expr>:</case>
<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>


</unit>
