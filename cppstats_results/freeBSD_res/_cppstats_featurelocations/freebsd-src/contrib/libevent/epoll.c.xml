<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/epoll.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event-config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evconfig-private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_EPOLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/resource.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/epoll.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_FCNTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_TIMERFD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/timerfd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evsignal-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evthread-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evmap-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"changelist-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"time-internal.h"</cpp:file></cpp:include>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EPOLLRDHUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPOLLRDHUP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EARLY_CLOSE_IF_HAVE_RDHUP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EARLY_CLOSE_IF_HAVE_RDHUP</name></cpp:macro> <cpp:value>EV_FEATURE_EARLY_CLOSE</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"epolltable-internal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_TIMERFD_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_TIMERFD_CREATE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_POSIX_MONOTONIC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>TFD_NONBLOCK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>TFD_CLOEXEC</name></expr></argument>)</argument_list></call></expr></cpp:if>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USING_TIMERFD</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>epollop</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>epoll_event</name></name> <modifier>*</modifier></type><name>events</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nevents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>epfd</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USING_TIMERFD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>timerfd</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>epoll_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>epoll_dispatch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>epoll_dealloc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>eventop</name></name></type> <name>epollops_changelist</name> <init>= <expr><block>{
<expr><literal type="string">"epoll (with changelist)"</literal></expr>,
<expr><name>epoll_init</name></expr>,
<expr><name>event_changelist_add_</name></expr>,
<expr><name>event_changelist_del_</name></expr>,
<expr><name>epoll_dispatch</name></expr>,
<expr><name>epoll_dealloc</name></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><name>EV_FEATURE_ET</name><operator>|</operator><name>EV_FEATURE_O1</name><operator>|</operator> <name>EARLY_CLOSE_IF_HAVE_RDHUP</name></expr>,
<expr><name>EVENT_CHANGELIST_FDINFO_SIZE</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>epoll_nochangelist_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>,
<parameter><decl><type><name>short</name></type> <name>old</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>epoll_nochangelist_del</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>,
<parameter><decl><type><name>short</name></type> <name>old</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>eventop</name></name></type> <name>epollops</name> <init>= <expr><block>{
<expr><literal type="string">"epoll"</literal></expr>,
<expr><name>epoll_init</name></expr>,
<expr><name>epoll_nochangelist_add</name></expr>,
<expr><name>epoll_nochangelist_del</name></expr>,
<expr><name>epoll_dispatch</name></expr>,
<expr><name>epoll_dealloc</name></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><name>EV_FEATURE_ET</name><operator>|</operator><name>EV_FEATURE_O1</name><operator>|</operator><name>EV_FEATURE_EARLY_CLOSE</name></expr>,
<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITIAL_NEVENT</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_NEVENT</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_EPOLL_TIMEOUT_MSEC</name></cpp:macro> <cpp:value>(35*60*1000)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>epoll_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>epfd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>epollop</name></name> <modifier>*</modifier></type><name>epollop</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_EPOLL_CREATE1</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>epfd</name> <operator>=</operator> <call><name>epoll_create1</name><argument_list>(<argument><expr><name>EPOLL_CLOEXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>epfd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>epfd</name> <operator>=</operator> <call><name>epoll_create</name><argument_list>(<argument><expr><literal type="number">32000</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOSYS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"epoll_create"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>evutil_make_socket_closeonexec</name><argument_list>(<argument><expr><name>epfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>epollop</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>epollop</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>epfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>epollop</name><operator>-&gt;</operator><name>epfd</name></name> <operator>=</operator> <name>epfd</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>epollop</name><operator>-&gt;</operator><name>events</name></name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><name>INITIAL_NEVENT</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>epoll_event</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>epollop</name><operator>-&gt;</operator><name>events</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>epollop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>epfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>epollop</name><operator>-&gt;</operator><name>nevents</name></name> <operator>=</operator> <name>INITIAL_NEVENT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>base</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVENT_BASE_FLAG_EPOLL_USE_CHANGELIST</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><operator>(</operator><name><name>base</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVENT_BASE_FLAG_IGNORE_ENV</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>evutil_getenv_</name><argument_list>(<argument><expr><literal type="string">"EVENT_EPOLL_USE_CHANGELIST"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>evsel</name></name> <operator>=</operator> <operator>&amp;</operator><name>epollops_changelist</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USING_TIMERFD</name></expr></argument>)</argument_list></call></expr></cpp:if>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>base</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EVENT_BASE_FLAG_PRECISE_TIMER</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>base</name><operator>-&gt;</operator><name>monotonic_timer</name><operator>.</operator><name>monotonic_clock</name></name> <operator>==</operator> <name>CLOCK_MONOTONIC</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <name><name>epollop</name><operator>-&gt;</operator><name>timerfd</name></name> <operator>=</operator> <call><name>timerfd_create</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>, <argument><expr><name>TFD_NONBLOCK</name><operator>|</operator><name>TFD_CLOEXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>epollop</name><operator>-&gt;</operator><name>timerfd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>epoll_event</name></name></type> <name>epev</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>epev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>epev</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>epev</name><operator>.</operator><name>data</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name><name>epollop</name><operator>-&gt;</operator><name>timerfd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>epev</name><operator>.</operator><name>events</name></name> <operator>=</operator> <name>EPOLLIN</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>epoll_ctl</name><argument_list>(<argument><expr><name><name>epollop</name><operator>-&gt;</operator><name>epfd</name></name></expr></argument>, <argument><expr><name>EPOLL_CTL_ADD</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>epev</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"epoll_ctl(timerfd)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>epollop</name><operator>-&gt;</operator><name>timerfd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EINVAL</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>ENOSYS</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"timerfd_create"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>epollop</name><operator>-&gt;</operator><name>timerfd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>epollop</name><operator>-&gt;</operator><name>timerfd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>evsig_init_</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>epollop</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>change_to_string</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>change</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>change</name> <operator>&amp;=</operator> <operator>(</operator><name>EV_CHANGE_ADD</name><operator>|</operator><name>EV_CHANGE_DEL</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>change</name> <operator>==</operator> <name>EV_CHANGE_ADD</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="string">"add"</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>change</name> <operator>==</operator> <name>EV_CHANGE_DEL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="string">"del"</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>change</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="string">"none"</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="string">"???"</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>epoll_op_to_string</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>op</name> <operator>==</operator> <name>EPOLL_CTL_ADD</name></expr>?</condition><then><expr><literal type="string">"ADD"</literal></expr></then><else>:
<expr><ternary><condition><expr><name>op</name> <operator>==</operator> <name>EPOLL_CTL_DEL</name></expr>?</condition><then><expr><literal type="string">"DEL"</literal></expr></then><else>:
<expr><ternary><condition><expr><name>op</name> <operator>==</operator> <name>EPOLL_CTL_MOD</name></expr>?</condition><then><expr><literal type="string">"MOD"</literal></expr></then><else>:
<expr><literal type="string">"???"</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT_CHANGES</name><parameter_list>(<parameter><type><name>op</name></type></parameter>, <parameter><type><name>events</name></type></parameter>, <parameter><type><name>ch</name></type></parameter>, <parameter><type><name>status</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"Epoll %s(%d) on fd %d " status ". " "Old events were %d; " "read change was %d (%s); " "write change was %d (%s); " "close change was %d (%s)", epoll_op_to_string(op), events, ch-&gt;fd, ch-&gt;old_events, ch-&gt;read_change, change_to_string(ch-&gt;read_change), ch-&gt;write_change, change_to_string(ch-&gt;write_change), ch-&gt;close_change, change_to_string(ch-&gt;close_change)</cpp:value></cpp:define>
















<function><type><specifier>static</specifier> <name>int</name></type>
<name>epoll_apply_one_change</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>epollop</name></name> <modifier>*</modifier></type><name>epollop</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event_change</name></name> <modifier>*</modifier></type><name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>epoll_event</name></name></type> <name>epev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>op</name></decl>, <decl><type ref="prev"/><name>events</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>EPOLL_OP_TABLE_INDEX</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <name><name>epoll_op_table</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>op</name></expr>;</expr_stmt>
<expr_stmt><expr><name>events</name> <operator>=</operator> <name><name>epoll_op_table</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>events</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>events</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>op</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ch</name><operator>-&gt;</operator><name>read_change</name></name><operator>|</operator><name><name>ch</name><operator>-&gt;</operator><name>write_change</name></name><operator>)</operator> <operator>&amp;</operator> <name>EV_CHANGE_ET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>events</name> <operator>|=</operator> <name>EPOLLET</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>epev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>epev</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>epev</name><operator>.</operator><name>data</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name><name>ch</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>epev</name><operator>.</operator><name>events</name></name> <operator>=</operator> <name>events</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>epoll_ctl</name><argument_list>(<argument><expr><name><name>epollop</name><operator>-&gt;</operator><name>epfd</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>epev</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><call><name>PRINT_CHANGES</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>epev</name><operator>.</operator><name>events</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><literal type="string">"okay"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EPOLL_CTL_MOD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><call><name>epoll_ctl</name><argument_list>(<argument><expr><name><name>epollop</name><operator>-&gt;</operator><name>epfd</name></name></expr></argument>, <argument><expr><name>EPOLL_CTL_ADD</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>epev</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"Epoll MOD(%d) on %d retried as ADD; that failed too"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>epev</name><operator>.</operator><name>events</name></name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Epoll MOD(%d) on %d retried as ADD; succeeded."</literal><operator>,</operator>
<operator>(</operator><name>int</name><operator>)</operator><name><name>epev</name><operator>.</operator><name>events</name></name><operator>,</operator>
<name><name>ch</name><operator>-&gt;</operator><name>fd</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>EPOLL_CTL_ADD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EEXIST</name></expr>)</condition> <block>{<block_content>







<if_stmt><if>if <condition>(<expr><call><name>epoll_ctl</name><argument_list>(<argument><expr><name><name>epollop</name><operator>-&gt;</operator><name>epfd</name></name></expr></argument>, <argument><expr><name>EPOLL_CTL_MOD</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>epev</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"Epoll ADD(%d) on %d retried as MOD; that failed too"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>epev</name><operator>.</operator><name>events</name></name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Epoll ADD(%d) on %d retried as MOD; succeeded."</literal><operator>,</operator>
<operator>(</operator><name>int</name><operator>)</operator><name><name>epev</name><operator>.</operator><name>events</name></name><operator>,</operator>
<name><name>ch</name><operator>-&gt;</operator><name>fd</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>EPOLL_CTL_DEL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EBADF</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EPERM</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Epoll DEL(%d) on fd %d gave %s: DEL was unnecessary."</literal><operator>,</operator>
<operator>(</operator><name>int</name><operator>)</operator><name><name>epev</name><operator>.</operator><name>events</name></name><operator>,</operator>
<name><name>ch</name><operator>-&gt;</operator><name>fd</name></name><operator>,</operator>
<call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><call><name>PRINT_CHANGES</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>epev</name><operator>.</operator><name>events</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><literal type="string">"failed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>epoll_apply_changes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event_changelist</name></name> <modifier>*</modifier></type><name>changelist</name> <init>= <expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>changelist</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>epollop</name></name> <modifier>*</modifier></type><name>epollop</name> <init>= <expr><name><name>base</name><operator>-&gt;</operator><name>evbase</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_change</name></name> <modifier>*</modifier></type><name>ch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>changelist</name><operator>-&gt;</operator><name>n_changes</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>&amp;</operator><name><name>changelist</name><operator>-&gt;</operator><name>changes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>epoll_apply_one_change</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>epollop</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>epoll_nochangelist_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>,
<parameter><decl><type><name>short</name></type> <name>old</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event_change</name></name></type> <name>ch</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ch</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>.</operator><name>old_events</name></name> <operator>=</operator> <name>old</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>.</operator><name>read_change</name></name> <operator>=</operator> <name><name>ch</name><operator>.</operator><name>write_change</name></name> <operator>=</operator> <name><name>ch</name><operator>.</operator><name>close_change</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ch</name><operator>.</operator><name>write_change</name></name> <operator>=</operator> <name>EV_CHANGE_ADD</name> <operator>|</operator>
<operator>(</operator><name>events</name> <operator>&amp;</operator> <name>EV_ET</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_READ</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ch</name><operator>.</operator><name>read_change</name></name> <operator>=</operator> <name>EV_CHANGE_ADD</name> <operator>|</operator>
<operator>(</operator><name>events</name> <operator>&amp;</operator> <name>EV_ET</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_CLOSED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ch</name><operator>.</operator><name>close_change</name></name> <operator>=</operator> <name>EV_CHANGE_ADD</name> <operator>|</operator>
<operator>(</operator><name>events</name> <operator>&amp;</operator> <name>EV_ET</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>epoll_apply_one_change</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>evbase</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>epoll_nochangelist_del</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>,
<parameter><decl><type><name>short</name></type> <name>old</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event_change</name></name></type> <name>ch</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ch</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>.</operator><name>old_events</name></name> <operator>=</operator> <name>old</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>.</operator><name>read_change</name></name> <operator>=</operator> <name><name>ch</name><operator>.</operator><name>write_change</name></name> <operator>=</operator> <name><name>ch</name><operator>.</operator><name>close_change</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ch</name><operator>.</operator><name>write_change</name></name> <operator>=</operator> <name>EV_CHANGE_DEL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_READ</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ch</name><operator>.</operator><name>read_change</name></name> <operator>=</operator> <name>EV_CHANGE_DEL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_CLOSED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ch</name><operator>.</operator><name>close_change</name></name> <operator>=</operator> <name>EV_CHANGE_DEL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>epoll_apply_one_change</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>evbase</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>epoll_dispatch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>epollop</name></name> <modifier>*</modifier></type><name>epollop</name> <init>= <expr><name><name>base</name><operator>-&gt;</operator><name>evbase</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>epoll_event</name></name> <modifier>*</modifier></type><name>events</name> <init>= <expr><name><name>epollop</name><operator>-&gt;</operator><name>events</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>timeout</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USING_TIMERFD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>epollop</name><operator>-&gt;</operator><name>timerfd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>itimerspec</name></name></type> <name>is</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>is</name><operator>.</operator><name>it_interval</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>.</operator><name>it_interval</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tv</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>is</name><operator>.</operator><name>it_value</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>.</operator><name>it_value</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>tv</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>timeout</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>is</name><operator>.</operator><name>it_value</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>tv</name><operator>-&gt;</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>.</operator><name>it_value</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <name><name>tv</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>timerfd_settime</name><argument_list>(<argument><expr><name><name>epollop</name><operator>-&gt;</operator><name>timerfd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>is</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"timerfd_settime"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
if <condition>(<expr><name>tv</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>timeout</name> <operator>=</operator> <call><name>evutil_tv_to_msec_</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>timeout</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>timeout</name></expr></argument> &gt;</argument_list></name> <name>MAX_EPOLL_TIMEOUT_MSEC</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>timeout</name> <operator>=</operator> <name>MAX_EPOLL_TIMEOUT_MSEC</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>epoll_apply_changes</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_changelist_remove_all_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>changelist</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVBASE_RELEASE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>epoll_wait</name><argument_list>(<argument><expr><name><name>epollop</name><operator>-&gt;</operator><name>epfd</name></name></expr></argument>, <argument><expr><name>events</name></expr></argument>, <argument><expr><name><name>epollop</name><operator>-&gt;</operator><name>nevents</name></name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVBASE_ACQUIRE_LOCK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>th_base_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"epoll_wait"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: epoll_wait reports %d"</literal><operator>,</operator> <name>__func__</name><operator>,</operator> <name>res</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>res</name> <operator>&lt;=</operator> <name><name>epollop</name><operator>-&gt;</operator><name>nevents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>res</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>what</name> <init>= <expr><name><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>ev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USING_TIMERFD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>fd</name></name> <operator>==</operator> <name><name>epollop</name><operator>-&gt;</operator><name>timerfd</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>what</name> <operator>&amp;</operator> <operator>(</operator><name>EPOLLHUP</name><operator>|</operator><name>EPOLLERR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ev</name> <operator>=</operator> <name>EV_READ</name> <operator>|</operator> <name>EV_WRITE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>what</name> <operator>&amp;</operator> <name>EPOLLIN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ev</name> <operator>|=</operator> <name>EV_READ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>what</name> <operator>&amp;</operator> <name>EPOLLOUT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ev</name> <operator>|=</operator> <name>EV_WRITE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>what</name> <operator>&amp;</operator> <name>EPOLLRDHUP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ev</name> <operator>|=</operator> <name>EV_CLOSED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ev</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>evmap_io_active_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>ev</name> <operator>|</operator> <name>EV_ET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name><name>epollop</name><operator>-&gt;</operator><name>nevents</name></name> <operator>&amp;&amp;</operator> <name><name>epollop</name><operator>-&gt;</operator><name>nevents</name></name> <operator>&lt;</operator> <name>MAX_NEVENT</name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>new_nevents</name> <init>= <expr><name><name>epollop</name><operator>-&gt;</operator><name>nevents</name></name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>epoll_event</name></name> <modifier>*</modifier></type><name>new_events</name></decl>;</decl_stmt>

<expr_stmt><expr><name>new_events</name> <operator>=</operator> <call><name>mm_realloc</name><argument_list>(<argument><expr><name><name>epollop</name><operator>-&gt;</operator><name>events</name></name></expr></argument>,
<argument><expr><name>new_nevents</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>epoll_event</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_events</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>epollop</name><operator>-&gt;</operator><name>events</name></name> <operator>=</operator> <name>new_events</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>epollop</name><operator>-&gt;</operator><name>nevents</name></name> <operator>=</operator> <name>new_nevents</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>epoll_dealloc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>epollop</name></name> <modifier>*</modifier></type><name>epollop</name> <init>= <expr><name><name>base</name><operator>-&gt;</operator><name>evbase</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>evsig_dealloc_</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>epollop</name><operator>-&gt;</operator><name>events</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>epollop</name><operator>-&gt;</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>epollop</name><operator>-&gt;</operator><name>epfd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>epollop</name><operator>-&gt;</operator><name>epfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USING_TIMERFD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>epollop</name><operator>-&gt;</operator><name>timerfd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>epollop</name><operator>-&gt;</operator><name>timerfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>epollop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>epollop</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>epollop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
