<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/compat/sys/queue.h">

































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SYS_QUEUE_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYS_QUEUE_H__</name></cpp:macro></cpp:define>



















































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLIST_HEAD</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct name { struct type *slh_first; }</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLIST_HEAD_INITIALIZER</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ NULL }</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLIST_ENTRY</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct { struct type *sle_next; }</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLIST_FIRST</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((head)-&gt;slh_first)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLIST_END</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLIST_EMPTY</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(SLIST_FIRST(head) == SLIST_END(head))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLIST_NEXT</name><parameter_list>(<parameter><type><name>elm</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((elm)-&gt;field.sle_next)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLIST_FOREACH</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>head</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for((var) = SLIST_FIRST(head); (var) != SLIST_END(head); (var) = SLIST_NEXT(var, field))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLIST_INIT</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ SLIST_FIRST(head) = SLIST_END(head); }</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLIST_INSERT_AFTER</name><parameter_list>(<parameter><type><name>slistelm</name></type></parameter>, <parameter><type><name>elm</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (elm)-&gt;field.sle_next = (slistelm)-&gt;field.sle_next; (slistelm)-&gt;field.sle_next = (elm); } while (0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLIST_INSERT_HEAD</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>elm</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (elm)-&gt;field.sle_next = (head)-&gt;slh_first; (head)-&gt;slh_first = (elm); } while (0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLIST_REMOVE_HEAD</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (head)-&gt;slh_first = (head)-&gt;slh_first-&gt;field.sle_next; } while (0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_HEAD</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct name { struct type *lh_first; }</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_HEAD_INITIALIZER</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ NULL }</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_ENTRY</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct { struct type *le_next; struct type **le_prev; }</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_FIRST</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((head)-&gt;lh_first)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_END</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_EMPTY</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(LIST_FIRST(head) == LIST_END(head))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_NEXT</name><parameter_list>(<parameter><type><name>elm</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((elm)-&gt;field.le_next)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_FOREACH</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>head</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for((var) = LIST_FIRST(head); (var)!= LIST_END(head); (var) = LIST_NEXT(var, field))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_INIT</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { LIST_FIRST(head) = LIST_END(head); } while (0)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_INSERT_AFTER</name><parameter_list>(<parameter><type><name>listelm</name></type></parameter>, <parameter><type><name>elm</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (((elm)-&gt;field.le_next = (listelm)-&gt;field.le_next) != NULL) (listelm)-&gt;field.le_next-&gt;field.le_prev = &amp;(elm)-&gt;field.le_next; (listelm)-&gt;field.le_next = (elm); (elm)-&gt;field.le_prev = &amp;(listelm)-&gt;field.le_next; } while (0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_INSERT_BEFORE</name><parameter_list>(<parameter><type><name>listelm</name></type></parameter>, <parameter><type><name>elm</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (elm)-&gt;field.le_prev = (listelm)-&gt;field.le_prev; (elm)-&gt;field.le_next = (listelm); *(listelm)-&gt;field.le_prev = (elm); (listelm)-&gt;field.le_prev = &amp;(elm)-&gt;field.le_next; } while (0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_INSERT_HEAD</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>elm</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (((elm)-&gt;field.le_next = (head)-&gt;lh_first) != NULL) (head)-&gt;lh_first-&gt;field.le_prev = &amp;(elm)-&gt;field.le_next;(head)-&gt;lh_first = (elm); (elm)-&gt;field.le_prev = &amp;(head)-&gt;lh_first; } while (0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_REMOVE</name><parameter_list>(<parameter><type><name>elm</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((elm)-&gt;field.le_next != NULL) (elm)-&gt;field.le_next-&gt;field.le_prev = (elm)-&gt;field.le_prev; *(elm)-&gt;field.le_prev = (elm)-&gt;field.le_next; } while (0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_REPLACE</name><parameter_list>(<parameter><type><name>elm</name></type></parameter>, <parameter><type><name>elm2</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (((elm2)-&gt;field.le_next = (elm)-&gt;field.le_next) != NULL) (elm2)-&gt;field.le_next-&gt;field.le_prev = &amp;(elm2)-&gt;field.le_next; (elm2)-&gt;field.le_prev = (elm)-&gt;field.le_prev; *(elm2)-&gt;field.le_prev = (elm2); } while (0)</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMPLEQ_HEAD</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct name { struct type *sqh_first; struct type **sqh_last; }</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMPLEQ_HEAD_INITIALIZER</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ NULL, &amp;(head).sqh_first }</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMPLEQ_ENTRY</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct { struct type *sqe_next; }</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMPLEQ_FIRST</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((head)-&gt;sqh_first)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMPLEQ_END</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMPLEQ_EMPTY</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(SIMPLEQ_FIRST(head) == SIMPLEQ_END(head))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMPLEQ_NEXT</name><parameter_list>(<parameter><type><name>elm</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((elm)-&gt;field.sqe_next)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMPLEQ_FOREACH</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>head</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for((var) = SIMPLEQ_FIRST(head); (var) != SIMPLEQ_END(head); (var) = SIMPLEQ_NEXT(var, field))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMPLEQ_INIT</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (head)-&gt;sqh_first = NULL; (head)-&gt;sqh_last = &amp;(head)-&gt;sqh_first; } while (0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMPLEQ_INSERT_HEAD</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>elm</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (((elm)-&gt;field.sqe_next = (head)-&gt;sqh_first) == NULL) (head)-&gt;sqh_last = &amp;(elm)-&gt;field.sqe_next; (head)-&gt;sqh_first = (elm); } while (0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMPLEQ_INSERT_TAIL</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>elm</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (elm)-&gt;field.sqe_next = NULL; *(head)-&gt;sqh_last = (elm); (head)-&gt;sqh_last = &amp;(elm)-&gt;field.sqe_next; } while (0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMPLEQ_INSERT_AFTER</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>listelm</name></type></parameter>, <parameter><type><name>elm</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (((elm)-&gt;field.sqe_next = (listelm)-&gt;field.sqe_next) == NULL)(head)-&gt;sqh_last = &amp;(elm)-&gt;field.sqe_next; (listelm)-&gt;field.sqe_next = (elm); } while (0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMPLEQ_REMOVE_HEAD</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>elm</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (((head)-&gt;sqh_first = (elm)-&gt;field.sqe_next) == NULL) (head)-&gt;sqh_last = &amp;(head)-&gt;sqh_first; } while (0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAILQ_HEAD</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct name { struct type *tqh_first; struct type **tqh_last; }</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAILQ_HEAD_INITIALIZER</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ NULL, &amp;(head).tqh_first }</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAILQ_ENTRY</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct { struct type *tqe_next; struct type **tqe_prev; }</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAILQ_FIRST</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((head)-&gt;tqh_first)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAILQ_END</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAILQ_NEXT</name><parameter_list>(<parameter><type><name>elm</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((elm)-&gt;field.tqe_next)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAILQ_LAST</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>headname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(((struct headname *)((head)-&gt;tqh_last))-&gt;tqh_last))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAILQ_PREV</name><parameter_list>(<parameter><type><name>elm</name></type></parameter>, <parameter><type><name>headname</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(((struct headname *)((elm)-&gt;field.tqe_prev))-&gt;tqh_last))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAILQ_EMPTY</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(TAILQ_FIRST(head) == TAILQ_END(head))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAILQ_FOREACH</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>head</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for((var) = TAILQ_FIRST(head); (var) != TAILQ_END(head); (var) = TAILQ_NEXT(var, field))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAILQ_FOREACH_REVERSE</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>head</name></type></parameter>, <parameter><type><name>headname</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for((var) = TAILQ_LAST(head, headname); (var) != TAILQ_END(head); (var) = TAILQ_PREV(var, headname, field))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAILQ_INIT</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (head)-&gt;tqh_first = NULL; (head)-&gt;tqh_last = &amp;(head)-&gt;tqh_first; } while (0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAILQ_INSERT_HEAD</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>elm</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (((elm)-&gt;field.tqe_next = (head)-&gt;tqh_first) != NULL) (head)-&gt;tqh_first-&gt;field.tqe_prev = &amp;(elm)-&gt;field.tqe_next; else (head)-&gt;tqh_last = &amp;(elm)-&gt;field.tqe_next; (head)-&gt;tqh_first = (elm); (elm)-&gt;field.tqe_prev = &amp;(head)-&gt;tqh_first; } while (0)</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAILQ_INSERT_TAIL</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>elm</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (elm)-&gt;field.tqe_next = NULL; (elm)-&gt;field.tqe_prev = (head)-&gt;tqh_last; *(head)-&gt;tqh_last = (elm); (head)-&gt;tqh_last = &amp;(elm)-&gt;field.tqe_next; } while (0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAILQ_INSERT_AFTER</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>listelm</name></type></parameter>, <parameter><type><name>elm</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (((elm)-&gt;field.tqe_next = (listelm)-&gt;field.tqe_next) != NULL)(elm)-&gt;field.tqe_next-&gt;field.tqe_prev = &amp;(elm)-&gt;field.tqe_next; else (head)-&gt;tqh_last = &amp;(elm)-&gt;field.tqe_next; (listelm)-&gt;field.tqe_next = (elm); (elm)-&gt;field.tqe_prev = &amp;(listelm)-&gt;field.tqe_next; } while (0)</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAILQ_INSERT_BEFORE</name><parameter_list>(<parameter><type><name>listelm</name></type></parameter>, <parameter><type><name>elm</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (elm)-&gt;field.tqe_prev = (listelm)-&gt;field.tqe_prev; (elm)-&gt;field.tqe_next = (listelm); *(listelm)-&gt;field.tqe_prev = (elm); (listelm)-&gt;field.tqe_prev = &amp;(elm)-&gt;field.tqe_next; } while (0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAILQ_REMOVE</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>elm</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (((elm)-&gt;field.tqe_next) != NULL) (elm)-&gt;field.tqe_next-&gt;field.tqe_prev = (elm)-&gt;field.tqe_prev; else (head)-&gt;tqh_last = (elm)-&gt;field.tqe_prev; *(elm)-&gt;field.tqe_prev = (elm)-&gt;field.tqe_next; } while (0)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAILQ_REPLACE</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>elm</name></type></parameter>, <parameter><type><name>elm2</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (((elm2)-&gt;field.tqe_next = (elm)-&gt;field.tqe_next) != NULL) (elm2)-&gt;field.tqe_next-&gt;field.tqe_prev = &amp;(elm2)-&gt;field.tqe_next; else (head)-&gt;tqh_last = &amp;(elm2)-&gt;field.tqe_next; (elm2)-&gt;field.tqe_prev = (elm)-&gt;field.tqe_prev; *(elm2)-&gt;field.tqe_prev = (elm2); } while (0)</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIRCLEQ_HEAD</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct name { struct type *cqh_first; struct type *cqh_last; }</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIRCLEQ_HEAD_INITIALIZER</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ CIRCLEQ_END(&amp;head), CIRCLEQ_END(&amp;head) }</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIRCLEQ_ENTRY</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct { struct type *cqe_next; struct type *cqe_prev; }</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIRCLEQ_FIRST</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((head)-&gt;cqh_first)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIRCLEQ_LAST</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((head)-&gt;cqh_last)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIRCLEQ_END</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void *)(head))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIRCLEQ_NEXT</name><parameter_list>(<parameter><type><name>elm</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((elm)-&gt;field.cqe_next)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIRCLEQ_PREV</name><parameter_list>(<parameter><type><name>elm</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((elm)-&gt;field.cqe_prev)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIRCLEQ_EMPTY</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(CIRCLEQ_FIRST(head) == CIRCLEQ_END(head))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIRCLEQ_FOREACH</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>head</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for((var) = CIRCLEQ_FIRST(head); (var) != CIRCLEQ_END(head); (var) = CIRCLEQ_NEXT(var, field))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIRCLEQ_FOREACH_REVERSE</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>head</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for((var) = CIRCLEQ_LAST(head); (var) != CIRCLEQ_END(head); (var) = CIRCLEQ_PREV(var, field))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIRCLEQ_INIT</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (head)-&gt;cqh_first = CIRCLEQ_END(head); (head)-&gt;cqh_last = CIRCLEQ_END(head); } while (0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIRCLEQ_INSERT_AFTER</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>listelm</name></type></parameter>, <parameter><type><name>elm</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (elm)-&gt;field.cqe_next = (listelm)-&gt;field.cqe_next; (elm)-&gt;field.cqe_prev = (listelm); if ((listelm)-&gt;field.cqe_next == CIRCLEQ_END(head)) (head)-&gt;cqh_last = (elm); else (listelm)-&gt;field.cqe_next-&gt;field.cqe_prev = (elm); (listelm)-&gt;field.cqe_next = (elm); } while (0)</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIRCLEQ_INSERT_BEFORE</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>listelm</name></type></parameter>, <parameter><type><name>elm</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (elm)-&gt;field.cqe_next = (listelm); (elm)-&gt;field.cqe_prev = (listelm)-&gt;field.cqe_prev; if ((listelm)-&gt;field.cqe_prev == CIRCLEQ_END(head)) (head)-&gt;cqh_first = (elm); else (listelm)-&gt;field.cqe_prev-&gt;field.cqe_next = (elm); (listelm)-&gt;field.cqe_prev = (elm); } while (0)</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIRCLEQ_INSERT_HEAD</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>elm</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (elm)-&gt;field.cqe_next = (head)-&gt;cqh_first; (elm)-&gt;field.cqe_prev = CIRCLEQ_END(head); if ((head)-&gt;cqh_last == CIRCLEQ_END(head)) (head)-&gt;cqh_last = (elm); else (head)-&gt;cqh_first-&gt;field.cqe_prev = (elm); (head)-&gt;cqh_first = (elm); } while (0)</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIRCLEQ_INSERT_TAIL</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>elm</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (elm)-&gt;field.cqe_next = CIRCLEQ_END(head); (elm)-&gt;field.cqe_prev = (head)-&gt;cqh_last; if ((head)-&gt;cqh_first == CIRCLEQ_END(head)) (head)-&gt;cqh_first = (elm); else (head)-&gt;cqh_last-&gt;field.cqe_next = (elm); (head)-&gt;cqh_last = (elm); } while (0)</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIRCLEQ_REMOVE</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>elm</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((elm)-&gt;field.cqe_next == CIRCLEQ_END(head)) (head)-&gt;cqh_last = (elm)-&gt;field.cqe_prev; else (elm)-&gt;field.cqe_next-&gt;field.cqe_prev = (elm)-&gt;field.cqe_prev; if ((elm)-&gt;field.cqe_prev == CIRCLEQ_END(head)) (head)-&gt;cqh_first = (elm)-&gt;field.cqe_next; else (elm)-&gt;field.cqe_prev-&gt;field.cqe_next = (elm)-&gt;field.cqe_next; } while (0)</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIRCLEQ_REPLACE</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>elm</name></type></parameter>, <parameter><type><name>elm2</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (((elm2)-&gt;field.cqe_next = (elm)-&gt;field.cqe_next) == CIRCLEQ_END(head)) (head).cqh_last = (elm2); else (elm2)-&gt;field.cqe_next-&gt;field.cqe_prev = (elm2); if (((elm2)-&gt;field.cqe_prev = (elm)-&gt;field.cqe_prev) == CIRCLEQ_END(head)) (head).cqh_first = (elm2); else (elm2)-&gt;field.cqe_prev-&gt;field.cqe_next = (elm2); } while (0)</cpp:value></cpp:define>












<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
