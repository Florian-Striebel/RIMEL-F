<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/bufferevent.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event-config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evconfig-private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_STDARG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/buffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/buffer_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/bufferevent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/bufferevent_struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/bufferevent_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mm-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bufferevent-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evbuffer-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util-internal.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>bufferevent_cancel_all_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>bufferevent_finalize_cb_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>evcb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg_</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>
<name>bufferevent_suspend_read_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>bufferevent_suspend_flags</name></type> <name>what</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bufev_private</name> <init>=
<expr><call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr>struct <name>bufferevent_private</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bufev_private</name><operator>-&gt;</operator><name>read_suspended</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>bufev</name><operator>-&gt;</operator><name>be_ops</name><operator>-&gt;</operator><name>disable</name></name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>bufev_private</name><operator>-&gt;</operator><name>read_suspended</name></name> <operator>|=</operator> <name>what</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>bufferevent_unsuspend_read_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>bufferevent_suspend_flags</name></type> <name>what</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bufev_private</name> <init>=
<expr><call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr>struct <name>bufferevent_private</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bufev_private</name><operator>-&gt;</operator><name>read_suspended</name></name> <operator>&amp;=</operator> <operator>~</operator><name>what</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bufev_private</name><operator>-&gt;</operator><name>read_suspended</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>bufev</name><operator>-&gt;</operator><name>enabled</name></name> <operator>&amp;</operator> <name>EV_READ</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>bufev</name><operator>-&gt;</operator><name>be_ops</name><operator>-&gt;</operator><name>enable</name></name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>bufferevent_suspend_write_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>bufferevent_suspend_flags</name></type> <name>what</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bufev_private</name> <init>=
<expr><call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr>struct <name>bufferevent_private</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bufev_private</name><operator>-&gt;</operator><name>write_suspended</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>bufev</name><operator>-&gt;</operator><name>be_ops</name><operator>-&gt;</operator><name>disable</name></name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>bufev_private</name><operator>-&gt;</operator><name>write_suspended</name></name> <operator>|=</operator> <name>what</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>bufferevent_unsuspend_write_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>bufferevent_suspend_flags</name></type> <name>what</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bufev_private</name> <init>=
<expr><call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr>struct <name>bufferevent_private</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bufev_private</name><operator>-&gt;</operator><name>write_suspended</name></name> <operator>&amp;=</operator> <operator>~</operator><name>what</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bufev_private</name><operator>-&gt;</operator><name>write_suspended</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>bufev</name><operator>-&gt;</operator><name>enabled</name></name> <operator>&amp;</operator> <name>EV_WRITE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>bufev</name><operator>-&gt;</operator><name>be_ops</name><operator>-&gt;</operator><name>enable</name></name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>bufferevent_inbuf_wm_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evbuffer_cb_info</name></name> <modifier>*</modifier></type><name>cbinfo</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <name><name>bufev</name><operator>-&gt;</operator><name>wm_read</name><operator>.</operator><name>high</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_wm_suspend_read</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_wm_unsuspend_read</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>bufferevent_run_deferred_callbacks_locked</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bufev_private</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name> <init>= <expr><operator>&amp;</operator><name><name>bufev_private</name><operator>-&gt;</operator><name>bev</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>bufev_private</name><operator>-&gt;</operator><name>eventcb_pending</name></name> <operator>&amp;</operator> <name>BEV_EVENT_CONNECTED</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>bufev</name><operator>-&gt;</operator><name>errorcb</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>bufev_private</name><operator>-&gt;</operator><name>eventcb_pending</name></name> <operator>&amp;=</operator> <operator>~</operator><name>BEV_EVENT_CONNECTED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>bufev</name><operator>-&gt;</operator><name>errorcb</name></name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr><name>BEV_EVENT_CONNECTED</name></expr></argument>, <argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>cbarg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bufev_private</name><operator>-&gt;</operator><name>readcb_pending</name></name> <operator>&amp;&amp;</operator> <name><name>bufev</name><operator>-&gt;</operator><name>readcb</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bufev_private</name><operator>-&gt;</operator><name>readcb_pending</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>bufev</name><operator>-&gt;</operator><name>readcb</name></name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>cbarg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bufev_private</name><operator>-&gt;</operator><name>writecb_pending</name></name> <operator>&amp;&amp;</operator> <name><name>bufev</name><operator>-&gt;</operator><name>writecb</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bufev_private</name><operator>-&gt;</operator><name>writecb_pending</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>bufev</name><operator>-&gt;</operator><name>writecb</name></name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>cbarg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bufev_private</name><operator>-&gt;</operator><name>eventcb_pending</name></name> <operator>&amp;&amp;</operator> <name><name>bufev</name><operator>-&gt;</operator><name>errorcb</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>short</name></type> <name>what</name> <init>= <expr><name><name>bufev_private</name><operator>-&gt;</operator><name>eventcb_pending</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name><name>bufev_private</name><operator>-&gt;</operator><name>errno_pending</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>bufev_private</name><operator>-&gt;</operator><name>eventcb_pending</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bufev_private</name><operator>-&gt;</operator><name>errno_pending</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_SET_SOCKET_ERROR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>bufev</name><operator>-&gt;</operator><name>errorcb</name></name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>cbarg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>bufferevent_decref_and_unlock_</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>bufferevent_run_deferred_callbacks_unlocked</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bufev_private</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name> <init>= <expr><operator>&amp;</operator><name><name>bufev_private</name><operator>-&gt;</operator><name>bev</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNLOCKED</name><parameter_list>(<parameter><type><name>stmt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { BEV_UNLOCK(bufev); stmt; BEV_LOCK(bufev); } while(0)</cpp:value></cpp:define>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>bufev_private</name><operator>-&gt;</operator><name>eventcb_pending</name></name> <operator>&amp;</operator> <name>BEV_EVENT_CONNECTED</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>bufev</name><operator>-&gt;</operator><name>errorcb</name></name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>bufferevent_event_cb</name></type> <name>errorcb</name> <init>= <expr><name><name>bufev</name><operator>-&gt;</operator><name>errorcb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cbarg</name> <init>= <expr><name><name>bufev</name><operator>-&gt;</operator><name>cbarg</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>bufev_private</name><operator>-&gt;</operator><name>eventcb_pending</name></name> <operator>&amp;=</operator> <operator>~</operator><name>BEV_EVENT_CONNECTED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNLOCKED</name><argument_list>(<argument><expr><call><name>errorcb</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr><name>BEV_EVENT_CONNECTED</name></expr></argument>, <argument><expr><name>cbarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bufev_private</name><operator>-&gt;</operator><name>readcb_pending</name></name> <operator>&amp;&amp;</operator> <name><name>bufev</name><operator>-&gt;</operator><name>readcb</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bufferevent_data_cb</name></type> <name>readcb</name> <init>= <expr><name><name>bufev</name><operator>-&gt;</operator><name>readcb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cbarg</name> <init>= <expr><name><name>bufev</name><operator>-&gt;</operator><name>cbarg</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>bufev_private</name><operator>-&gt;</operator><name>readcb_pending</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNLOCKED</name><argument_list>(<argument><expr><call><name>readcb</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr><name>cbarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bufev_private</name><operator>-&gt;</operator><name>writecb_pending</name></name> <operator>&amp;&amp;</operator> <name><name>bufev</name><operator>-&gt;</operator><name>writecb</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bufferevent_data_cb</name></type> <name>writecb</name> <init>= <expr><name><name>bufev</name><operator>-&gt;</operator><name>writecb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cbarg</name> <init>= <expr><name><name>bufev</name><operator>-&gt;</operator><name>cbarg</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>bufev_private</name><operator>-&gt;</operator><name>writecb_pending</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNLOCKED</name><argument_list>(<argument><expr><call><name>writecb</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr><name>cbarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bufev_private</name><operator>-&gt;</operator><name>eventcb_pending</name></name> <operator>&amp;&amp;</operator> <name><name>bufev</name><operator>-&gt;</operator><name>errorcb</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bufferevent_event_cb</name></type> <name>errorcb</name> <init>= <expr><name><name>bufev</name><operator>-&gt;</operator><name>errorcb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cbarg</name> <init>= <expr><name><name>bufev</name><operator>-&gt;</operator><name>cbarg</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>what</name> <init>= <expr><name><name>bufev_private</name><operator>-&gt;</operator><name>eventcb_pending</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name><name>bufev_private</name><operator>-&gt;</operator><name>errno_pending</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>bufev_private</name><operator>-&gt;</operator><name>eventcb_pending</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bufev_private</name><operator>-&gt;</operator><name>errno_pending</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_SET_SOCKET_ERROR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNLOCKED</name><argument_list>(<argument><expr><call><name>errorcb</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>,<argument><expr><name>what</name></expr></argument>,<argument><expr><name>cbarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>bufferevent_decref_and_unlock_</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>UNLOCKED</name></cpp:undef>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCHEDULE_DEFERRED</name><parameter_list>(<parameter><type><name>bevp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (event_deferred_cb_schedule_( (bevp)-&gt;bev.ev_base, &amp;(bevp)-&gt;deferred)) bufferevent_incref_(&amp;(bevp)-&gt;bev); } while (0)</cpp:value></cpp:define>








<function><type><name>void</name></type>
<name>bufferevent_run_readcb_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>p</name> <init>=
<expr><call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr>struct <name>bufferevent_private</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bufev</name><operator>-&gt;</operator><name>readcb</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>options</name></name><operator>|</operator><name>options</name><operator>)</operator> <operator>&amp;</operator> <name>BEV_OPT_DEFER_CALLBACKS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>readcb_pending</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SCHEDULE_DEFERRED</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>bufev</name><operator>-&gt;</operator><name>readcb</name></name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>cbarg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>bufferevent_run_writecb_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>p</name> <init>=
<expr><call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr>struct <name>bufferevent_private</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bufev</name><operator>-&gt;</operator><name>writecb</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>options</name></name><operator>|</operator><name>options</name><operator>)</operator> <operator>&amp;</operator> <name>BEV_OPT_DEFER_CALLBACKS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>writecb_pending</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SCHEDULE_DEFERRED</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>bufev</name><operator>-&gt;</operator><name>writecb</name></name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>cbarg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEV_TRIG_ALL_OPTS</name></cpp:macro> <cpp:value>( BEV_TRIG_IGNORE_WATERMARKS| BEV_TRIG_DEFER_CALLBACKS )</cpp:value></cpp:define>




<function><type><name>void</name></type>
<name>bufferevent_trigger</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>iotype</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_incref_and_lock_</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_trigger_nolock_</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr><name>iotype</name></expr></argument>, <argument><expr><name>options</name><operator>&amp;</operator><name>BEV_TRIG_ALL_OPTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_decref_and_unlock_</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>bufferevent_run_eventcb_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>p</name> <init>=
<expr><call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr>struct <name>bufferevent_private</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bufev</name><operator>-&gt;</operator><name>errorcb</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>options</name></name><operator>|</operator><name>options</name><operator>)</operator> <operator>&amp;</operator> <name>BEV_OPT_DEFER_CALLBACKS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>eventcb_pending</name></name> <operator>|=</operator> <name>what</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>errno_pending</name></name> <operator>=</operator> <call><name>EVUTIL_SOCKET_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SCHEDULE_DEFERRED</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>bufev</name><operator>-&gt;</operator><name>errorcb</name></name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>cbarg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>bufferevent_trigger_event</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_incref_and_lock_</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_run_eventcb_</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><name>options</name><operator>&amp;</operator><name>BEV_TRIG_ALL_OPTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_decref_and_unlock_</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_init_common_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bufev_private</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bufferevent_ops</name></name> <modifier>*</modifier></type><name>ops</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>bufferevent_options</name></name></type> <name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name> <init>= <expr><operator>&amp;</operator><name><name>bufev_private</name><operator>-&gt;</operator><name>bev</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bufev</name><operator>-&gt;</operator><name>input</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>bufev</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <call><name>evbuffer_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bufev</name><operator>-&gt;</operator><name>output</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>bufev</name><operator>-&gt;</operator><name>output</name></name> <operator>=</operator> <call><name>evbuffer_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bufev_private</name><operator>-&gt;</operator><name>refcnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bufev</name><operator>-&gt;</operator><name>ev_base</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evutil_timerclear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bufev</name><operator>-&gt;</operator><name>timeout_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_timerclear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bufev</name><operator>-&gt;</operator><name>timeout_write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bufev</name><operator>-&gt;</operator><name>be_ops</name></name> <operator>=</operator> <name>ops</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_ratelim_init_</name><argument_list>(<argument><expr><name>bufev_private</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name><name>bufev</name><operator>-&gt;</operator><name>enabled</name></name> <operator>=</operator> <name>EV_WRITE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_THREAD_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;</operator> <name>BEV_OPT_THREADSAFE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>bufferevent_enable_locking_</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bufev</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bufev</name><operator>-&gt;</operator><name>output</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <operator>(</operator><name>BEV_OPT_DEFER_CALLBACKS</name><operator>|</operator><name>BEV_OPT_UNLOCK_CALLBACKS</name><operator>)</operator><operator>)</operator>
<operator>==</operator> <name>BEV_OPT_UNLOCK_CALLBACKS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"UNLOCK_CALLBACKS requires DEFER_CALLBACKS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;</operator> <name>BEV_OPT_UNLOCK_CALLBACKS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_deferred_cb_init_</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>bufev_private</name><operator>-&gt;</operator><name>deferred</name></name></expr></argument>,
<argument><expr><call><name>event_base_get_npriorities</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name>bufferevent_run_deferred_callbacks_unlocked</name></expr></argument>,
<argument><expr><name>bufev_private</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_deferred_cb_init_</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>bufev_private</name><operator>-&gt;</operator><name>deferred</name></name></expr></argument>,
<argument><expr><call><name>event_base_get_npriorities</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name>bufferevent_run_deferred_callbacks_locked</name></expr></argument>,
<argument><expr><name>bufev_private</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>bufev_private</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <name>options</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_set_parent_</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_set_parent_</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>bufferevent_setcb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>,
<parameter><decl><type><name>bufferevent_data_cb</name></type> <name>readcb</name></decl></parameter>, <parameter><decl><type><name>bufferevent_data_cb</name></type> <name>writecb</name></decl></parameter>,
<parameter><decl><type><name>bufferevent_event_cb</name></type> <name>eventcb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbarg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bufev</name><operator>-&gt;</operator><name>readcb</name></name> <operator>=</operator> <name>readcb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bufev</name><operator>-&gt;</operator><name>writecb</name></name> <operator>=</operator> <name>writecb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bufev</name><operator>-&gt;</operator><name>errorcb</name></name> <operator>=</operator> <name>eventcb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bufev</name><operator>-&gt;</operator><name>cbarg</name></name> <operator>=</operator> <name>cbarg</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>bufferevent_getcb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>,
<parameter><decl><type><name>bufferevent_data_cb</name> <modifier>*</modifier></type><name>readcb_ptr</name></decl></parameter>,
<parameter><decl><type><name>bufferevent_data_cb</name> <modifier>*</modifier></type><name>writecb_ptr</name></decl></parameter>,
<parameter><decl><type><name>bufferevent_event_cb</name> <modifier>*</modifier></type><name>eventcb_ptr</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>cbarg_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>readcb_ptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>readcb_ptr</name> <operator>=</operator> <name><name>bufev</name><operator>-&gt;</operator><name>readcb</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>writecb_ptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>writecb_ptr</name> <operator>=</operator> <name><name>bufev</name><operator>-&gt;</operator><name>writecb</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>eventcb_ptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>eventcb_ptr</name> <operator>=</operator> <name><name>bufev</name><operator>-&gt;</operator><name>errorcb</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cbarg_ptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cbarg_ptr</name> <operator>=</operator> <name><name>bufev</name><operator>-&gt;</operator><name>cbarg</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type>
<name>bufferevent_get_input</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>bufev</name><operator>-&gt;</operator><name>input</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type>
<name>bufferevent_get_output</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>bufev</name><operator>-&gt;</operator><name>output</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type>
<name>bufferevent_get_base</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>bufev</name><operator>-&gt;</operator><name>ev_base</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_get_priority</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>event_initialized</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bufev</name><operator>-&gt;</operator><name>ev_read</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>event_get_priority</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bufev</name><operator>-&gt;</operator><name>ev_read</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><call><name>event_base_get_npriorities</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_write_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evbuffer_add_buffer</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>bufferevent_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>evbuffer_remove</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_read_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>evbuffer_add_buffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_enable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bufev_private</name> <init>=
<expr><call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr>struct <name>bufferevent_private</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>impl_events</name> <init>= <expr><name>event</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bufferevent_incref_and_lock_</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bufev_private</name><operator>-&gt;</operator><name>read_suspended</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>impl_events</name> <operator>&amp;=</operator> <operator>~</operator><name>EV_READ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bufev_private</name><operator>-&gt;</operator><name>write_suspended</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>impl_events</name> <operator>&amp;=</operator> <operator>~</operator><name>EV_WRITE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>bufev</name><operator>-&gt;</operator><name>enabled</name></name> <operator>|=</operator> <name>event</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>impl_events</name> <operator>&amp;&amp;</operator> <call><name><name>bufev</name><operator>-&gt;</operator><name>be_ops</name><operator>-&gt;</operator><name>enable</name></name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr><name>impl_events</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bufferevent_decref_and_unlock_</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_set_timeouts</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv_read</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv_write</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tv_read</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bufev</name><operator>-&gt;</operator><name>timeout_read</name></name> <operator>=</operator> <operator>*</operator><name>tv_read</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>evutil_timerclear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bufev</name><operator>-&gt;</operator><name>timeout_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tv_write</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bufev</name><operator>-&gt;</operator><name>timeout_write</name></name> <operator>=</operator> <operator>*</operator><name>tv_write</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>evutil_timerclear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bufev</name><operator>-&gt;</operator><name>timeout_write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bufev</name><operator>-&gt;</operator><name>be_ops</name><operator>-&gt;</operator><name>adj_timeouts</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name><name>bufev</name><operator>-&gt;</operator><name>be_ops</name><operator>-&gt;</operator><name>adj_timeouts</name></name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type>
<name>bufferevent_settimeout</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>timeout_read</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout_write</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv_read</name></decl>, <decl><type ref="prev"/><name>tv_write</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>ptv_read</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptv_write</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv_read</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tv_read</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv_write</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tv_write</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>timeout_read</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tv_read</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>timeout_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptv_read</name> <operator>=</operator> <operator>&amp;</operator><name>tv_read</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>timeout_write</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tv_write</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>timeout_write</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptv_write</name> <operator>=</operator> <operator>&amp;</operator><name>tv_write</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bufferevent_set_timeouts</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr><name>ptv_read</name></expr></argument>, <argument><expr><name>ptv_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>bufferevent_disable_hard_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bufev_private</name> <init>=
<expr><call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr>struct <name>bufferevent_private</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bufev</name><operator>-&gt;</operator><name>enabled</name></name> <operator>&amp;=</operator> <operator>~</operator><name>event</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bufev_private</name><operator>-&gt;</operator><name>connecting</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>bufev</name><operator>-&gt;</operator><name>be_ops</name><operator>-&gt;</operator><name>disable</name></name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_disable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bufev</name><operator>-&gt;</operator><name>enabled</name></name> <operator>&amp;=</operator> <operator>~</operator><name>event</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>bufev</name><operator>-&gt;</operator><name>be_ops</name><operator>-&gt;</operator><name>disable</name></name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>bufferevent_setwatermark</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>lowmark</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>highmark</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bufev_private</name> <init>=
<expr><call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr>struct <name>bufferevent_private</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_WRITE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bufev</name><operator>-&gt;</operator><name>wm_write</name><operator>.</operator><name>low</name></name> <operator>=</operator> <name>lowmark</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bufev</name><operator>-&gt;</operator><name>wm_write</name><operator>.</operator><name>high</name></name> <operator>=</operator> <name>highmark</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_READ</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bufev</name><operator>-&gt;</operator><name>wm_read</name><operator>.</operator><name>low</name></name> <operator>=</operator> <name>lowmark</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bufev</name><operator>-&gt;</operator><name>wm_read</name><operator>.</operator><name>high</name></name> <operator>=</operator> <name>highmark</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>highmark</name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name><name>bufev_private</name><operator>-&gt;</operator><name>read_watermarks_cb</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bufev_private</name><operator>-&gt;</operator><name>read_watermarks_cb</name></name> <operator>=</operator>
<call><name>evbuffer_add_cb</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>input</name></name></expr></argument>,
<argument><expr><name>bufferevent_inbuf_wm_cb</name></expr></argument>,
<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>evbuffer_cb_set_flags</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>input</name></name></expr></argument>,
<argument><expr><name><name>bufev_private</name><operator>-&gt;</operator><name>read_watermarks_cb</name></name></expr></argument>,
<argument><expr><name>EVBUFFER_CB_ENABLED</name><operator>|</operator><name>EVBUFFER_CB_NODEFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>highmark</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_wm_suspend_read</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>highmark</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_wm_unsuspend_read</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bufev_private</name><operator>-&gt;</operator><name>read_watermarks_cb</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_cb_clear_flags</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>input</name></name></expr></argument>,
<argument><expr><name><name>bufev_private</name><operator>-&gt;</operator><name>read_watermarks_cb</name></name></expr></argument>,
<argument><expr><name>EVBUFFER_CB_ENABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bufferevent_wm_unsuspend_read</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_getwatermark</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>lowmark</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>highmark</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>events</name> <operator>==</operator> <name>EV_WRITE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lowmark</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>lowmark</name> <operator>=</operator> <name><name>bufev</name><operator>-&gt;</operator><name>wm_write</name><operator>.</operator><name>low</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>highmark</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>highmark</name> <operator>=</operator> <name><name>bufev</name><operator>-&gt;</operator><name>wm_write</name><operator>.</operator><name>high</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>events</name> <operator>==</operator> <name>EV_READ</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lowmark</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>lowmark</name> <operator>=</operator> <name><name>bufev</name><operator>-&gt;</operator><name>wm_read</name><operator>.</operator><name>low</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>highmark</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>highmark</name> <operator>=</operator> <name><name>bufev</name><operator>-&gt;</operator><name>wm_read</name><operator>.</operator><name>high</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_flush</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>,
<parameter><decl><type><name>short</name></type> <name>iotype</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>bufferevent_flush_mode</name></name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bufev</name><operator>-&gt;</operator><name>be_ops</name><operator>-&gt;</operator><name>flush</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name><name>bufev</name><operator>-&gt;</operator><name>be_ops</name><operator>-&gt;</operator><name>flush</name></name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr><name>iotype</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>bufferevent_incref_and_lock_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bufev_private</name> <init>=
<expr><call><name>BEV_UPCAST</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>bufev_private</name><operator>-&gt;</operator><name>refcnt</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static void
bufferevent_transfer_lock_ownership_(struct bufferevent *donor,
struct bufferevent *recipient)
{
struct bufferevent_private *d = BEV_UPCAST(donor);
struct bufferevent_private *r = BEV_UPCAST(recipient);
if (d-&gt;lock != r-&gt;lock)
return;
if (r-&gt;own_lock)
return;
if (d-&gt;own_lock) {
d-&gt;own_lock = 0;
r-&gt;own_lock = 1;
}
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>
<name>bufferevent_decref_and_unlock_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bufev_private</name> <init>=
<expr><call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr>struct <name>bufferevent_private</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_cbs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CBS</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<decl_stmt><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name><name>cbs</name><index>[<expr><name>MAX_CBS</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>bufev_private</name><operator>-&gt;</operator><name>refcnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>bufev_private</name><operator>-&gt;</operator><name>refcnt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bufev</name><operator>-&gt;</operator><name>be_ops</name><operator>-&gt;</operator><name>unlink</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>bufev</name><operator>-&gt;</operator><name>be_ops</name><operator>-&gt;</operator><name>unlink</name></name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><name><name>cbs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>bufev</name><operator>-&gt;</operator><name>ev_read</name><operator>.</operator><name>ev_evcallback</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>bufev</name><operator>-&gt;</operator><name>ev_write</name><operator>.</operator><name>ev_evcallback</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>bufev_private</name><operator>-&gt;</operator><name>deferred</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n_cbs</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bufev_private</name><operator>-&gt;</operator><name>rate_limiting</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>&amp;</operator><name><name>bufev_private</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>refill_bucket_event</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>event_initialized</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cbs</name><index>[<expr><name>n_cbs</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>ev_evcallback</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n_cbs</name> <operator>+=</operator> <call><name>evbuffer_get_callbacks_</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name>cbs</name><operator>+</operator><name>n_cbs</name></expr></argument>, <argument><expr><name>MAX_CBS</name><operator>-</operator><name>n_cbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n_cbs</name> <operator>+=</operator> <call><name>evbuffer_get_callbacks_</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name>cbs</name><operator>+</operator><name>n_cbs</name></expr></argument>, <argument><expr><name>MAX_CBS</name><operator>-</operator><name>n_cbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_callback_finalize_many_</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>, <argument><expr><name>n_cbs</name></expr></argument>, <argument><expr><name>cbs</name></expr></argument>,
<argument><expr><name>bufferevent_finalize_cb_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAX_CBS</name></cpp:undef>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>bufferevent_finalize_cb_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>evcb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name> <init>= <expr><name>arg_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>underlying</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bufev_private</name> <init>=
<expr><call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr>struct <name>bufferevent_private</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>underlying</name> <operator>=</operator> <call><name>bufferevent_get_underlying</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>bufev</name><operator>-&gt;</operator><name>be_ops</name><operator>-&gt;</operator><name>destruct</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>bufev</name><operator>-&gt;</operator><name>be_ops</name><operator>-&gt;</operator><name>destruct</name></name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bufev_private</name><operator>-&gt;</operator><name>rate_limiting</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bufev_private</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>group</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_remove_from_rate_limit_group_internal_</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name><name>bufev_private</name><operator>-&gt;</operator><name>rate_limiting</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bufev_private</name><operator>-&gt;</operator><name>rate_limiting</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bufev_private</name><operator>-&gt;</operator><name>own_lock</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EVTHREAD_FREE_LOCK</name><argument_list>(<argument><expr><name><name>bufev_private</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>,
<argument><expr><name>EVTHREAD_LOCKTYPE_RECURSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>bufev</name><operator>)</operator> <operator>-</operator> <name><name>bufev</name><operator>-&gt;</operator><name>be_ops</name><operator>-&gt;</operator><name>mem_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>











<if_stmt><if>if <condition>(<expr><name>underlying</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_decref_</name><argument_list>(<argument><expr><name>underlying</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_decref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>bufferevent_decref_and_unlock_</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>bufferevent_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_setcb</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_cancel_all_</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_decref_and_unlock_</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>bufferevent_incref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bufev_private</name> <init>=
<expr><call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr>struct <name>bufferevent_private</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>





<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>bufev_private</name><operator>-&gt;</operator><name>refcnt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_enable_locking_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_THREAD_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>underlying</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>BEV_UPCAST</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>lock</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>underlying</name> <operator>=</operator> <call><name>bufferevent_get_underlying</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lock</name> <operator>&amp;&amp;</operator> <name>underlying</name> <operator>&amp;&amp;</operator> <call><name>BEV_UPCAST</name><argument_list>(<argument><expr><name>underlying</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>lock</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lock</name> <operator>=</operator> <call><name>BEV_UPCAST</name><argument_list>(<argument><expr><name>underlying</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>lock</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BEV_UPCAST</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>lock</name> <operator>=</operator> <name>lock</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BEV_UPCAST</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>own_lock</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>lock</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVTHREAD_ALLOC_LOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>, <argument><expr><name>EVTHREAD_LOCKTYPE_RECURSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lock</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>BEV_UPCAST</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>lock</name> <operator>=</operator> <name>lock</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BEV_UPCAST</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>own_lock</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>BEV_UPCAST</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>lock</name> <operator>=</operator> <name>lock</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BEV_UPCAST</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>own_lock</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>evbuffer_enable_locking</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_enable_locking</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>underlying</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>BEV_UPCAST</name><argument_list>(<argument><expr><name>underlying</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>lock</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_enable_locking_</name><argument_list>(<argument><expr><name>underlying</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_setfd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>union</name> <name>bufferevent_ctrl_data</name></name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>d</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bev</name><operator>-&gt;</operator><name>be_ops</name><operator>-&gt;</operator><name>ctrl</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>bev</name><operator>-&gt;</operator><name>be_ops</name><operator>-&gt;</operator><name>ctrl</name></name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>BEV_CTRL_SET_FD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>evutil_socket_t</name></type>
<name>bufferevent_getfd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>union</name> <name>bufferevent_ctrl_data</name></name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>d</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bev</name><operator>-&gt;</operator><name>be_ops</name><operator>-&gt;</operator><name>ctrl</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>bev</name><operator>-&gt;</operator><name>be_ops</name><operator>-&gt;</operator><name>ctrl</name></name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>BEV_CTRL_GET_FD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>res</name><operator>&lt;</operator><literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name><name>d</name><operator>.</operator><name>fd</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>bufferevent_options</name></name></type>
<name>bufferevent_get_options_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bev_p</name> <init>=
<expr><call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr>struct <name>bufferevent_private</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>bufferevent_options</name></name></type> <name>options</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>options</name> <operator>=</operator> <name><name>bev_p</name><operator>-&gt;</operator><name>options</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>options</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>bufferevent_cancel_all_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>union</name> <name>bufferevent_ctrl_data</name></name></type> <name>d</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bev</name><operator>-&gt;</operator><name>be_ops</name><operator>-&gt;</operator><name>ctrl</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>bev</name><operator>-&gt;</operator><name>be_ops</name><operator>-&gt;</operator><name>ctrl</name></name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>BEV_CTRL_CANCEL_ALL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>short</name></type>
<name>bufferevent_get_enabled</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>short</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>bufev</name><operator>-&gt;</operator><name>enabled</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type>
<name>bufferevent_get_underlying</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>union</name> <name>bufferevent_ctrl_data</name></name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>d</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bev</name><operator>-&gt;</operator><name>be_ops</name><operator>-&gt;</operator><name>ctrl</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>bev</name><operator>-&gt;</operator><name>be_ops</name><operator>-&gt;</operator><name>ctrl</name></name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>BEV_CTRL_GET_UNDERLYING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>res</name><operator>&lt;</operator><literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>d</name><operator>.</operator><name>ptr</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>bufferevent_generic_read_timeout_cb</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bufferevent_incref_and_lock_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_disable</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_run_eventcb_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>BEV_EVENT_TIMEOUT</name><operator>|</operator><name>BEV_EVENT_READING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_decref_and_unlock_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>bufferevent_generic_write_timeout_cb</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bufferevent_incref_and_lock_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_disable</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_run_eventcb_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>BEV_EVENT_TIMEOUT</name><operator>|</operator><name>BEV_EVENT_WRITING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_decref_and_unlock_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>bufferevent_init_generic_timeout_cbs_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>event_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>ev_read</name></name></expr></argument>, <argument><expr><name><name>bev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>EV_FINALIZE</name></expr></argument>,
<argument><expr><name>bufferevent_generic_read_timeout_cb</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>ev_write</name></name></expr></argument>, <argument><expr><name><name>bev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>EV_FINALIZE</name></expr></argument>,
<argument><expr><name>bufferevent_generic_write_timeout_cb</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_generic_adj_timeouts_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>short</name></type> <name>enabled</name> <init>= <expr><name><name>bev</name><operator>-&gt;</operator><name>enabled</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bev_p</name> <init>=
<expr><call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr>struct <name>bufferevent_private</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>enabled</name> <operator>&amp;</operator> <name>EV_READ</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>bev_p</name><operator>-&gt;</operator><name>read_suspended</name></name> <operator>&amp;&amp;</operator>
<call><name>evutil_timerisset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>timeout_read</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <call><name>event_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>ev_read</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>timeout_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>ev_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>enabled</name> <operator>&amp;</operator> <name>EV_WRITE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>bev_p</name><operator>-&gt;</operator><name>write_suspended</name></name> <operator>&amp;&amp;</operator>
<call><name>evutil_timerisset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>timeout_write</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <call><name>event_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>ev_write</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>timeout_write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>ev_write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r1</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>r2</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_generic_adj_existing_timeouts_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>event_pending</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>ev_read</name></name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evutil_timerisset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>timeout_read</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>bufferevent_add_event_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>ev_read</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>timeout_read</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>event_remove_timer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>ev_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>event_pending</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>ev_write</name></name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evutil_timerisset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>timeout_write</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>bufferevent_add_event_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>ev_write</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>timeout_write</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>event_remove_timer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>ev_write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_add_event_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>evutil_timerisset</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>event_add</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>event_add</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type>
<name>bufferevent_lock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_incref_and_lock_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>bufferevent_unlock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_decref_and_unlock_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
