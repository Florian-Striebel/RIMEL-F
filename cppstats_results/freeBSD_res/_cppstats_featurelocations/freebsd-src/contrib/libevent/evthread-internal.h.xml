<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/evthread-internal.h">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVTHREAD_INTERNAL_H_INCLUDED_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_INTERNAL_H_INCLUDED_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event-config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evconfig-private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util-internal.h"</cpp:file></cpp:include>

<struct_decl>struct <name>event_base</name>;</struct_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_EXPOSE_STRUCTS</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator> <call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_THREAD_SUPPORT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>EVTHREAD_EXPOSE_STRUCTS</name></expr></argument>)</argument_list></call></expr></cpp:if>


<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>evthread_lock_callbacks</name></name></type> <name>evthread_lock_fns_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>evthread_condition_callbacks</name></name></type> <name>evthread_cond_fns_</name></decl>;</decl_stmt>
<function_decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> (<modifier>*</modifier><name>evthread_id_fn_</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>evthread_lock_debugging_enabled_</name></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_GET_ID</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(evthread_id_fn_ ? evthread_id_fn_() : 1)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBASE_IN_THREAD</name><parameter_list>(<parameter><type><name>base</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(evthread_id_fn_ == NULL || (base)-&gt;th_owner_id == evthread_id_fn_())</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBASE_NEED_NOTIFY</name><parameter_list>(<parameter><type><name>base</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(evthread_id_fn_ != NULL &amp;&amp; (base)-&gt;running_loop &amp;&amp; (base)-&gt;th_owner_id != evthread_id_fn_())</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_ALLOC_LOCK</name><parameter_list>(<parameter><type><name>lockvar</name></type></parameter>, <parameter><type><name>locktype</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((lockvar) = evthread_lock_fns_.alloc ? evthread_lock_fns_.alloc(locktype) : NULL)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_FREE_LOCK</name><parameter_list>(<parameter><type><name>lockvar</name></type></parameter>, <parameter><type><name>locktype</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { void *lock_tmp_ = (lockvar); if (lock_tmp_ &amp;&amp; evthread_lock_fns_.free) evthread_lock_fns_.free(lock_tmp_, (locktype)); } while (0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVLOCK_LOCK</name><parameter_list>(<parameter><type><name>lockvar</name></type></parameter>,<parameter><type><name>mode</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (lockvar) evthread_lock_fns_.lock(mode, lockvar); } while (0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVLOCK_UNLOCK</name><parameter_list>(<parameter><type><name>lockvar</name></type></parameter>,<parameter><type><name>mode</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (lockvar) evthread_lock_fns_.unlock(mode, lockvar); } while (0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVLOCK_SORTLOCKS_</name><parameter_list>(<parameter><type><name>lockvar1</name></type></parameter>, <parameter><type><name>lockvar2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (lockvar1 &amp;&amp; lockvar2 &amp;&amp; lockvar1 &gt; lockvar2) { void *tmp = lockvar1; lockvar1 = lockvar2; lockvar2 = tmp; } } while (0)</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBASE_ACQUIRE_LOCK</name><parameter_list>(<parameter><type><name>base</name></type></parameter>, <parameter><type><name>lockvar</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { EVLOCK_LOCK((base)-&gt;lockvar, 0); } while (0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBASE_RELEASE_LOCK</name><parameter_list>(<parameter><type><name>base</name></type></parameter>, <parameter><type><name>lockvar</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { EVLOCK_UNLOCK((base)-&gt;lockvar, 0); } while (0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVLOCK_ASSERT_LOCKED</name><parameter_list>(<parameter><type><name>lock</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((lock) &amp;&amp; evthread_lock_debugging_enabled_) { EVUTIL_ASSERT(evthread_is_debug_lock_held_(lock)); } } while (0)</cpp:value></cpp:define>








<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>EVLOCK_TRY_LOCK_</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>EVLOCK_TRY_LOCK_</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>lock</name> <operator>&amp;&amp;</operator> <name><name>evthread_lock_fns_</name><operator>.</operator><name>lock</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name><name>evthread_lock_fns_</name><operator>.</operator><name>lock</name></name><argument_list>(<argument><expr><name>EVTHREAD_TRY</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>!</operator><name>r</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>


<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_ALLOC_COND</name><parameter_list>(<parameter><type><name>condvar</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (condvar) = evthread_cond_fns_.alloc_condition ? evthread_cond_fns_.alloc_condition(0) : NULL; } while (0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_FREE_COND</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (cond) evthread_cond_fns_.free_condition((cond)); } while (0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_COND_SIGNAL</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (cond) ? evthread_cond_fns_.signal_condition((cond), 0) : 0 )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_COND_BROADCAST</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (cond) ? evthread_cond_fns_.signal_condition((cond), 1) : 0 )</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_COND_WAIT</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>, <parameter><type><name>lock</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (cond) ? evthread_cond_fns_.wait_condition((cond), (lock), NULL) : 0 )</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_COND_WAIT_TIMED</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>, <parameter><type><name>lock</name></type></parameter>, <parameter><type><name>tv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (cond) ? evthread_cond_fns_.wait_condition((cond), (lock), (tv)) : 0 )</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_LOCKING_ENABLED</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(evthread_lock_fns_.lock != NULL)</cpp:value></cpp:define>


<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator> <call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_THREAD_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<function_decl><type><name>unsigned</name> <name>long</name></type> <name>evthreadimpl_get_id_</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>evthreadimpl_is_lock_debugging_enabled_</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>evthreadimpl_lock_alloc_</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>locktype</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>evthreadimpl_lock_free_</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>locktype</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>evthreadimpl_lock_lock_</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>evthreadimpl_lock_unlock_</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>evthreadimpl_cond_alloc_</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>condtype</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>evthreadimpl_cond_free_</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>evthreadimpl_cond_signal_</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>broadcast</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>evthreadimpl_cond_wait_</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>evthreadimpl_locking_enabled_</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_GET_ID</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>evthreadimpl_get_id_()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBASE_IN_THREAD</name><parameter_list>(<parameter><type><name>base</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((base)-&gt;th_owner_id == evthreadimpl_get_id_())</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBASE_NEED_NOTIFY</name><parameter_list>(<parameter><type><name>base</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((base)-&gt;running_loop &amp;&amp; ((base)-&gt;th_owner_id != evthreadimpl_get_id_()))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_ALLOC_LOCK</name><parameter_list>(<parameter><type><name>lockvar</name></type></parameter>, <parameter><type><name>locktype</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((lockvar) = evthreadimpl_lock_alloc_(locktype))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_FREE_LOCK</name><parameter_list>(<parameter><type><name>lockvar</name></type></parameter>, <parameter><type><name>locktype</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { void *lock_tmp_ = (lockvar); if (lock_tmp_) evthreadimpl_lock_free_(lock_tmp_, (locktype)); } while (0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVLOCK_LOCK</name><parameter_list>(<parameter><type><name>lockvar</name></type></parameter>,<parameter><type><name>mode</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (lockvar) evthreadimpl_lock_lock_(mode, lockvar); } while (0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVLOCK_UNLOCK</name><parameter_list>(<parameter><type><name>lockvar</name></type></parameter>,<parameter><type><name>mode</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (lockvar) evthreadimpl_lock_unlock_(mode, lockvar); } while (0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBASE_ACQUIRE_LOCK</name><parameter_list>(<parameter><type><name>base</name></type></parameter>, <parameter><type><name>lockvar</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { EVLOCK_LOCK((base)-&gt;lockvar, 0); } while (0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBASE_RELEASE_LOCK</name><parameter_list>(<parameter><type><name>base</name></type></parameter>, <parameter><type><name>lockvar</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { EVLOCK_UNLOCK((base)-&gt;lockvar, 0); } while (0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVLOCK_ASSERT_LOCKED</name><parameter_list>(<parameter><type><name>lock</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((lock) &amp;&amp; evthreadimpl_is_lock_debugging_enabled_()) { EVUTIL_ASSERT(evthread_is_debug_lock_held_(lock)); } } while (0)</cpp:value></cpp:define>








<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>EVLOCK_TRY_LOCK_</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>EVLOCK_TRY_LOCK_</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>evthreadimpl_lock_lock_</name><argument_list>(<argument><expr><name>EVTHREAD_TRY</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>!</operator><name>r</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>


<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_ALLOC_COND</name><parameter_list>(<parameter><type><name>condvar</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (condvar) = evthreadimpl_cond_alloc_(0); } while (0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_FREE_COND</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (cond) evthreadimpl_cond_free_((cond)); } while (0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_COND_SIGNAL</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (cond) ? evthreadimpl_cond_signal_((cond), 0) : 0 )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_COND_BROADCAST</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (cond) ? evthreadimpl_cond_signal_((cond), 1) : 0 )</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_COND_WAIT</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>, <parameter><type><name>lock</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (cond) ? evthreadimpl_cond_wait_((cond), (lock), NULL) : 0 )</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_COND_WAIT_TIMED</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>, <parameter><type><name>lock</name></type></parameter>, <parameter><type><name>tv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (cond) ? evthreadimpl_cond_wait_((cond), (lock), (tv)) : 0 )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_LOCKING_ENABLED</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(evthreadimpl_locking_enabled_())</cpp:value></cpp:define>


<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_GET_ID</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_ALLOC_LOCK</name><parameter_list>(<parameter><type><name>lockvar</name></type></parameter>, <parameter><type><name>locktype</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EVUTIL_NIL_STMT_</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_FREE_LOCK</name><parameter_list>(<parameter><type><name>lockvar</name></type></parameter>, <parameter><type><name>locktype</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EVUTIL_NIL_STMT_</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVLOCK_LOCK</name><parameter_list>(<parameter><type><name>lockvar</name></type></parameter>, <parameter><type><name>mode</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EVUTIL_NIL_STMT_</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVLOCK_UNLOCK</name><parameter_list>(<parameter><type><name>lockvar</name></type></parameter>, <parameter><type><name>mode</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EVUTIL_NIL_STMT_</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVLOCK_LOCK2</name><parameter_list>(<parameter><type><name>lock1</name></type></parameter>,<parameter><type><name>lock2</name></type></parameter>,<parameter><type><name>mode1</name></type></parameter>,<parameter><type><name>mode2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EVUTIL_NIL_STMT_</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVLOCK_UNLOCK2</name><parameter_list>(<parameter><type><name>lock1</name></type></parameter>,<parameter><type><name>lock2</name></type></parameter>,<parameter><type><name>mode1</name></type></parameter>,<parameter><type><name>mode2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EVUTIL_NIL_STMT_</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBASE_IN_THREAD</name><parameter_list>(<parameter><type><name>base</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBASE_NEED_NOTIFY</name><parameter_list>(<parameter><type><name>base</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBASE_ACQUIRE_LOCK</name><parameter_list>(<parameter><type><name>base</name></type></parameter>, <parameter><type><name>lock</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EVUTIL_NIL_STMT_</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBASE_RELEASE_LOCK</name><parameter_list>(<parameter><type><name>base</name></type></parameter>, <parameter><type><name>lock</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EVUTIL_NIL_STMT_</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVLOCK_ASSERT_LOCKED</name><parameter_list>(<parameter><type><name>lock</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EVUTIL_NIL_STMT_</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVLOCK_TRY_LOCK_</name><parameter_list>(<parameter><type><name>lock</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_ALLOC_COND</name><parameter_list>(<parameter><type><name>condvar</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EVUTIL_NIL_STMT_</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_FREE_COND</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EVUTIL_NIL_STMT_</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_COND_SIGNAL</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EVUTIL_NIL_STMT_</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_COND_BROADCAST</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EVUTIL_NIL_STMT_</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_COND_WAIT</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>, <parameter><type><name>lock</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EVUTIL_NIL_STMT_</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_COND_WAIT_TIMED</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>, <parameter><type><name>lock</name></type></parameter>, <parameter><type><name>howlong</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EVUTIL_NIL_STMT_</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_LOCKING_ENABLED</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator> <call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_THREAD_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVLOCK_SORTLOCKS_</name><parameter_list>(<parameter><type><name>lockvar1</name></type></parameter>, <parameter><type><name>lockvar2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (lockvar1 &amp;&amp; lockvar2 &amp;&amp; lockvar1 &gt; lockvar2) { void *tmp = lockvar1; lockvar1 = lockvar2; lockvar2 = tmp; } } while (0)</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVLOCK_LOCK2</name><parameter_list>(<parameter><type><name>lock1</name></type></parameter>,<parameter><type><name>lock2</name></type></parameter>,<parameter><type><name>mode1</name></type></parameter>,<parameter><type><name>mode2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { void *lock1_tmplock_ = (lock1); void *lock2_tmplock_ = (lock2); EVLOCK_SORTLOCKS_(lock1_tmplock_,lock2_tmplock_); EVLOCK_LOCK(lock1_tmplock_,mode1); if (lock2_tmplock_ != lock1_tmplock_) EVLOCK_LOCK(lock2_tmplock_,mode2); } while (0)</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVLOCK_UNLOCK2</name><parameter_list>(<parameter><type><name>lock1</name></type></parameter>,<parameter><type><name>lock2</name></type></parameter>,<parameter><type><name>mode1</name></type></parameter>,<parameter><type><name>mode2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { void *lock1_tmplock_ = (lock1); void *lock2_tmplock_ = (lock2); EVLOCK_SORTLOCKS_(lock1_tmplock_,lock2_tmplock_); if (lock2_tmplock_ != lock1_tmplock_) EVLOCK_UNLOCK(lock2_tmplock_,mode2); EVLOCK_UNLOCK(lock1_tmplock_,mode1); } while (0)</cpp:value></cpp:define>









<function_decl><type><name>int</name></type> <name>evthread_is_debug_lock_held_</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>evthread_debug_get_real_lock_</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>evthread_setup_global_lock_</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lock_</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>locktype</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>enable_locks</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVTHREAD_SETUP_GLOBAL_LOCK</name><parameter_list>(<parameter><type><name>lockvar</name></type></parameter>, <parameter><type><name>locktype</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { lockvar = evthread_setup_global_lock_(lockvar, (locktype), enable_locks); if (!lockvar) { event_warn("Couldn't allocate %s", #lockvar); return -1; } } while (0);</cpp:value></cpp:define>









<function_decl><type><name>int</name></type> <name>event_global_setup_locks_</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>enable_locks</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>evsig_global_setup_locks_</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>enable_locks</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>evutil_global_setup_locks_</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>enable_locks</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>evutil_secure_rng_global_setup_locks_</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>enable_locks</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name><name>struct</name> <name>evthread_lock_callbacks</name></name> <modifier>*</modifier></type><name>evthread_get_lock_callbacks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>evthread_condition_callbacks</name></name> <modifier>*</modifier></type><name>evthread_get_condition_callbacks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>evthreadimpl_disable_lock_debugging_</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
