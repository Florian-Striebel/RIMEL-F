<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/bufferevent-internal.h">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BUFFEREVENT_INTERNAL_H_INCLUDED_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFFEREVENT_INTERNAL_H_INCLUDED_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event-config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event_struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evconfig-private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"defer-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evthread-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ratelim-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/bufferevent_struct.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ipv6-internal.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ws2tcpip.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_NETINET_IN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_NETINET_IN6_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in6.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEV_SUSPEND_WM</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEV_SUSPEND_BW</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEV_SUSPEND_BW_GROUP</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEV_SUSPEND_LOOKUP</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEV_SUSPEND_FILT_READ</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>

<typedef>typedef <type><name>ev_uint16_t</name></type> <name>bufferevent_suspend_flags</name>;</typedef>

<struct>struct <name>bufferevent_rate_limit_group</name> <block>{

<macro><name>LIST_HEAD</name><argument_list>(<argument>rlim_group_member_list</argument>, <argument>bufferevent_private</argument>)</argument_list></macro> <expr_stmt><expr><name>members</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ev_token_bucket</name></name></type> <name>rate_limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ev_token_bucket_cfg</name></name></type> <name>rate_limit_cfg</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>read_suspended</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>write_suspended</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>pending_unsuspend_read</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>pending_unsuspend_write</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>ev_uint64_t</name></type> <name>total_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint64_t</name></type> <name>total_written</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>n_members</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>min_share</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>configured_min_share</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name></type> <name>master_refill_event</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>evutil_weakrand_state</name></name></type> <name>weakrand_seed</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>bufferevent_rate_limit</name> <block>{





<macro><name>LIST_ENTRY</name><argument_list>(<argument>bufferevent_private</argument>)</argument_list></macro> <expr_stmt><expr><name>next_in_group</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_rate_limit_group</name></name> <modifier>*</modifier></type><name>group</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>ev_token_bucket</name></name></type> <name>limit</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>ev_token_bucket_cfg</name></name> <modifier>*</modifier></type><name>cfg</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name></type> <name>refill_bucket_event</name></decl>;</decl_stmt>
}</block>;</struct>



<struct>struct <name>bufferevent_private</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name></type> <name>bev</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_cb_entry</name></name> <modifier>*</modifier></type><name>read_watermarks_cb</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>own_lock</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>readcb_pending</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>writecb_pending</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>connecting</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>connection_refused</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>short</name></type> <name>eventcb_pending</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bufferevent_suspend_flags</name></type> <name>read_suspended</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bufferevent_suspend_flags</name></type> <name>write_suspended</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>errno_pending</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>dns_error</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>event_callback</name></name></type> <name>deferred</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>bufferevent_options</name></name></type> <name>options</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>refcnt</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>max_single_read</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>max_single_write</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_rate_limit</name></name> <modifier>*</modifier></type><name>rate_limiting</name></decl>;</decl_stmt>








<union>union <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name></type> <name>in6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>in</name></decl>;</decl_stmt>
}</block> <decl><name>conn_address</name></decl>;</union>

<decl_stmt><decl><type><name><name>struct</name> <name>evdns_getaddrinfo_request</name></name> <modifier>*</modifier></type><name>dns_request</name></decl>;</decl_stmt>
}</block>;</struct>


<enum>enum <name>bufferevent_ctrl_op</name> <block>{
<decl><name>BEV_CTRL_SET_FD</name></decl>,
<decl><name>BEV_CTRL_GET_FD</name></decl>,
<decl><name>BEV_CTRL_GET_UNDERLYING</name></decl>,
<decl><name>BEV_CTRL_CANCEL_ALL</name></decl>
}</block>;</enum>


<union>union <name>bufferevent_ctrl_data</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl>;</decl_stmt>
}</block>;</union>





<struct>struct <name>bufferevent_ops</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>










<decl_stmt><decl><type><name>off_t</name></type> <name>mem_offset</name></decl>;</decl_stmt>





<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>enable</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>disable</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>unlink</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>destruct</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>adj_timeouts</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>flush</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>bufferevent_flush_mode</name></name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>ctrl</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>bufferevent_ctrl_op</name></name></type></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>bufferevent_ctrl_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>bufferevent_ops</name></name></type> <name>bufferevent_ops_socket</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>bufferevent_ops</name></name></type> <name>bufferevent_ops_filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>bufferevent_ops</name></name></type> <name>bufferevent_ops_pair</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEV_IS_SOCKET</name><parameter_list>(<parameter><type><name>bevp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((bevp)-&gt;be_ops == &amp;bufferevent_ops_socket)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEV_IS_FILTER</name><parameter_list>(<parameter><type><name>bevp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((bevp)-&gt;be_ops == &amp;bufferevent_ops_filter)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEV_IS_PAIR</name><parameter_list>(<parameter><type><name>bevp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((bevp)-&gt;be_ops == &amp;bufferevent_ops_pair)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>bufferevent_ops</name></name></type> <name>bufferevent_ops_async</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEV_IS_ASYNC</name><parameter_list>(<parameter><type><name>bevp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((bevp)-&gt;be_ops == &amp;bufferevent_ops_async)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEV_IS_ASYNC</name><parameter_list>(<parameter><type><name>bevp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function_decl><type><name>int</name></type> <name>bufferevent_init_common_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bufferevent_ops</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>bufferevent_options</name></name></type> <name>options</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>bufferevent_suspend_read_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>bufferevent_suspend_flags</name></type> <name>what</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>bufferevent_unsuspend_read_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>bufferevent_suspend_flags</name></type> <name>what</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>bufferevent_suspend_write_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>bufferevent_suspend_flags</name></type> <name>what</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>bufferevent_unsuspend_write_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>bufferevent_suspend_flags</name></type> <name>what</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bufferevent_wm_suspend_read</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bufferevent_suspend_read_((b), BEV_SUSPEND_WM)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bufferevent_wm_unsuspend_read</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bufferevent_unsuspend_read_((b), BEV_SUSPEND_WM)</cpp:value></cpp:define>














<function_decl><type><name>int</name></type> <name>bufferevent_disable_hard_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>event</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>int</name></type> <name>bufferevent_enable_locking_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bufferevent_incref_</name><parameter_list>(<parameter><type><name>bufev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bufferevent_incref(bufev)</cpp:value></cpp:define>


<function_decl><type><name>void</name></type> <name>bufferevent_incref_and_lock_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>)</parameter_list>;</function_decl>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bufferevent_decref_</name><parameter_list>(<parameter><type><name>bufev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bufferevent_decref(bufev)</cpp:value></cpp:define>



<function_decl><type><name>int</name></type> <name>bufferevent_decref_and_unlock_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>bufferevent_run_readcb_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>bufferevent_run_writecb_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>bufferevent_run_eventcb_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>bufferevent_trigger_nolock_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>iotype</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>;</function_decl>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>bufferevent_trigger_nolock_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>iotype</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>iotype</name> <operator>&amp;</operator> <name>EV_READ</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>BEV_TRIG_IGNORE_WATERMARKS</name><operator>)</operator> <operator>||</operator>
<call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>bufev</name><operator>-&gt;</operator><name>wm_read</name><operator>.</operator><name>low</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_run_readcb_</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>iotype</name> <operator>&amp;</operator> <name>EV_WRITE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>BEV_TRIG_IGNORE_WATERMARKS</name><operator>)</operator> <operator>||</operator>
<call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>bufev</name><operator>-&gt;</operator><name>wm_write</name><operator>.</operator><name>low</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_run_writecb_</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>



<function_decl><type><name>int</name></type> <name>bufferevent_add_event_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name></type> <name>bufferevent_init_generic_timeout_cbs_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>int</name></type> <name>bufferevent_generic_adj_timeouts_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>bufferevent_generic_adj_existing_timeouts_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>enum</name> <name>bufferevent_options</name></name></type> <name>bufferevent_get_options_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name><modifier>*</modifier></type>
<name>bufferevent_socket_get_conn_address_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>;</function_decl>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEV_RESET_GENERIC_READ_TIMEOUT</name><parameter_list>(<parameter><type><name>bev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (evutil_timerisset(&amp;(bev)-&gt;timeout_read)) event_add(&amp;(bev)-&gt;ev_read, &amp;(bev)-&gt;timeout_read); } while (0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEV_RESET_GENERIC_WRITE_TIMEOUT</name><parameter_list>(<parameter><type><name>bev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (evutil_timerisset(&amp;(bev)-&gt;timeout_write)) event_add(&amp;(bev)-&gt;ev_write, &amp;(bev)-&gt;timeout_write); } while (0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEV_DEL_GENERIC_READ_TIMEOUT</name><parameter_list>(<parameter><type><name>bev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>event_del(&amp;(bev)-&gt;ev_read)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEV_DEL_GENERIC_WRITE_TIMEOUT</name><parameter_list>(<parameter><type><name>bev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>event_del(&amp;(bev)-&gt;ev_write)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEV_UPCAST</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EVUTIL_UPCAST((b), struct bufferevent_private, bev)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_THREAD_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEV_LOCK</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EVUTIL_NIL_STMT_</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEV_UNLOCK</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EVUTIL_NIL_STMT_</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEV_LOCK</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { struct bufferevent_private *locking = BEV_UPCAST(b); EVLOCK_LOCK(locking-&gt;lock, 0); } while (0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEV_UNLOCK</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { struct bufferevent_private *locking = BEV_UPCAST(b); EVLOCK_UNLOCK(locking-&gt;lock, 0); } while (0)</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function_decl><type><name>int</name></type> <name>bufferevent_decrement_write_buckets_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>,
<parameter><decl><type><name>ev_ssize_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>bufferevent_decrement_read_buckets_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>,
<parameter><decl><type><name>ev_ssize_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ev_ssize_t</name></type> <name>bufferevent_get_read_max_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ev_ssize_t</name></type> <name>bufferevent_get_write_max_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>bufferevent_ratelim_init_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
