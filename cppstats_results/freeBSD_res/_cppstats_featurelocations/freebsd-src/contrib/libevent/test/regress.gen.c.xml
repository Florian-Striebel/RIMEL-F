<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/test/regress.gen.c">




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/event-config.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/event.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/buffer.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/tag.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT____func__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__func__</name></cpp:macro> <cpp:value>EVENT____func__</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regress.gen.h"</cpp:file></cpp:include>

<function_decl><type><name>void</name></type> <name>event_warn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>event_warnx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>






<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>msg_access_</name></name></type> <name>msg_base__</name> <init>= <expr><block>{
<expr><name>msg_from_name_assign</name></expr>,
<expr><name>msg_from_name_get</name></expr>,
<expr><name>msg_to_name_assign</name></expr>,
<expr><name>msg_to_name_get</name></expr>,
<expr><name>msg_attack_assign</name></expr>,
<expr><name>msg_attack_get</name></expr>,
<expr><name>msg_run_assign</name></expr>,
<expr><name>msg_run_get</name></expr>,
<expr><name>msg_run_add</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type>
<name>msg_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>msg_new_with_arg</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type>
<name>msg_new_with_arg</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: malloc"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <operator>&amp;</operator><name>msg_base__</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>from_name_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>from_name_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>to_name_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>to_name_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>attack_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>attack_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>run_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>run_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>run_num_allocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>run_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>tmp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>msg_run_expand_to_hold_more</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tobe_allocated</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>run_num_allocated</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>run</name></name><modifier>*</modifier><modifier>*</modifier></type> <name>new_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>tobe_allocated</name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><name>tobe_allocated</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>tobe_allocated</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>new_data</name> <operator>=</operator> <operator>(</operator>struct <name>run</name><operator>*</operator><operator>*</operator><operator>)</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>run_data</name></name></expr></argument>,
<argument><expr><name>tobe_allocated</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>run</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>run_data</name></name> <operator>=</operator> <name>new_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>run_num_allocated</name></name> <operator>=</operator> <name>tobe_allocated</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content>}</block></function>

<function><type><name><name>struct</name> <name>run</name></name><modifier>*</modifier></type>
<name>msg_run_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>msg</name><operator>-&gt;</operator><name>run_length</name></name> <operator>&gt;=</operator> <name><name>msg</name><operator>-&gt;</operator><name>run_num_allocated</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>msg_run_expand_to_hold_more</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>run_data</name><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>run_length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>run_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>run_data</name><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>run_length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>run_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>run_data</name><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>run_length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><operator>--</operator><name><name>msg</name><operator>-&gt;</operator><name>run_length</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>msg_from_name_assign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>from_name_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>from_name_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>from_name_data</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>from_name_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>msg_to_name_assign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>to_name_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>to_name_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>to_name_data</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>to_name_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>msg_attack_assign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>kill</name></name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>attack_set</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>kill_clear</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>attack_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>attack_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>attack_data</name></name> <operator>=</operator> <call><name>kill_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>attack_data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: kill_new()"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>evbuffer_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: evbuffer_new()"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>kill_marshal</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>kill_unmarshal</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>attack_data</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"%s: kill_unmarshal"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>attack_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>attack_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>kill_free</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>attack_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>attack_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>msg_run_assign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>run</name></name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>msg</name><operator>-&gt;</operator><name>run_set</name></name> <operator>||</operator> <name>off</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>off</name> <operator>&gt;=</operator> <name><name>msg</name><operator>-&gt;</operator><name>run_length</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>had_error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>run_clear</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>run_data</name><index>[<expr><name>off</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>evbuffer_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: evbuffer_new()"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>had_error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>run_marshal</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>run_unmarshal</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>run_data</name><index>[<expr><name>off</name></expr>]</index></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"%s: run_unmarshal"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>had_error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<label><name>done</name>:</label><if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>had_error</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>run_clear</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>run_data</name><index>[<expr><name>off</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>msg_from_name_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>from_name_set</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>from_name_data</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>msg_to_name_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>to_name_set</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>to_name_data</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>msg_attack_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>kill</name></name><modifier>*</modifier> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>attack_set</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>attack_data</name></name> <operator>=</operator> <call><name>kill_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>attack_data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>attack_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>attack_data</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>msg_run_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>run</name></name><modifier>*</modifier> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>msg</name><operator>-&gt;</operator><name>run_set</name></name> <operator>||</operator> <name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>offset</name> <operator>&gt;=</operator> <name><name>msg</name><operator>-&gt;</operator><name>run_length</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>run_data</name><index>[<expr><name>offset</name></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>msg_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>from_name_set</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>from_name_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>from_name_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>from_name_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>to_name_set</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>to_name_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>to_name_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>to_name_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>attack_set</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>kill_free</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>attack_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>attack_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>attack_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>run_set</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tmp</name><operator>-&gt;</operator><name>run_length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>run_free</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>run_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>run_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>run_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>run_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>run_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>run_num_allocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>msg_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>from_name_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>from_name_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>to_name_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>to_name_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>attack_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>kill_free</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>attack_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>run_set</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tmp</name><operator>-&gt;</operator><name>run_length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>run_free</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>run_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>run_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>run_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>run_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>run_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>run_num_allocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>run_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>msg_marshal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>evbuf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>)</parameter_list><block>{<block_content>
<expr_stmt><expr><call><name>evtag_marshal_string</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>, <argument><expr><name>MSG_FROM_NAME</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>from_name_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evtag_marshal_string</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>, <argument><expr><name>MSG_TO_NAME</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>to_name_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>attack_set</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evtag_marshal_kill</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>, <argument><expr><name>MSG_ATTACK</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>attack_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>run_set</name></name></expr>)</condition> <block>{<block_content>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tmp</name><operator>-&gt;</operator><name>run_length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>evtag_marshal_run</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>, <argument><expr><name>MSG_RUN</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>run_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>msg_unmarshal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>evbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ev_uint32_t</name></type> <name>tag</name></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evtag_peek</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name>tag</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MSG_FROM_NAME</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>from_name_set</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evtag_unmarshal_string</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>, <argument><expr><name>MSG_FROM_NAME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator><name>from_name_data</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"%s: failed to unmarshal from_name"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>from_name_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>MSG_TO_NAME</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>to_name_set</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evtag_unmarshal_string</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>, <argument><expr><name>MSG_TO_NAME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator><name>to_name_data</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"%s: failed to unmarshal to_name"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>to_name_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>MSG_ATTACK</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>attack_set</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>attack_data</name></name> <operator>=</operator> <call><name>kill_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>attack_data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evtag_unmarshal_kill</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>, <argument><expr><name>MSG_ATTACK</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>attack_data</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"%s: failed to unmarshal attack"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>attack_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>MSG_RUN</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>run_length</name></name> <operator>&gt;=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>run_num_allocated</name></name> <operator>&amp;&amp;</operator>
<call><name>msg_run_expand_to_hold_more</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"HEY NOW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>run_data</name><index>[<expr><name><name>tmp</name><operator>-&gt;</operator><name>run_length</name></name></expr>]</index></name> <operator>=</operator> <call><name>run_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>run_data</name><index>[<expr><name><name>tmp</name><operator>-&gt;</operator><name>run_length</name></name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evtag_unmarshal_run</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>, <argument><expr><name>MSG_RUN</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>run_data</name><index>[<expr><name><name>tmp</name><operator>-&gt;</operator><name>run_length</name></name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"%s: failed to unmarshal run"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>tmp</name><operator>-&gt;</operator><name>run_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>run_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>msg_complete</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>msg_complete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>msg</name><operator>-&gt;</operator><name>from_name_set</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>msg</name><operator>-&gt;</operator><name>to_name_set</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>attack_set</name></name> <operator>&amp;&amp;</operator> <call><name>kill_complete</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>attack_data</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>msg</name><operator>-&gt;</operator><name>run_length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>run_set</name></name> <operator>&amp;&amp;</operator> <call><name>run_complete</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>run_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evtag_unmarshal_msg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>evbuf</name></decl></parameter>, <parameter><decl><type><name>ev_uint32_t</name></type> <name>need_tag</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ev_uint32_t</name></type> <name>tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evtag_unmarshal</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>tag</name> <operator>!=</operator> <name>need_tag</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>msg_unmarshal</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>res</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evtag_marshal_msg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>evbuf</name></decl></parameter>, <parameter><decl><type><name>ev_uint32_t</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf_</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>buf_</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_marshal</name><argument_list>(<argument><expr><name>buf_</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evtag_marshal_buffer</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>buf_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>kill_access_</name></name></type> <name>kill_base__</name> <init>= <expr><block>{
<expr><name>kill_weapon_assign</name></expr>,
<expr><name>kill_weapon_get</name></expr>,
<expr><name>kill_action_assign</name></expr>,
<expr><name>kill_action_get</name></expr>,
<expr><name>kill_how_often_assign</name></expr>,
<expr><name>kill_how_often_get</name></expr>,
<expr><name>kill_how_often_add</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type>
<name>kill_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>kill_new_with_arg</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type>
<name>kill_new_with_arg</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>kill</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: malloc"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <operator>&amp;</operator><name>kill_base__</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>weapon_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>weapon_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>action_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>action_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>how_often_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>how_often_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>how_often_num_allocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>how_often_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>tmp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>kill_how_often_expand_to_hold_more</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tobe_allocated</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>how_often_num_allocated</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint32_t</name><modifier>*</modifier></type> <name>new_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>tobe_allocated</name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><name>tobe_allocated</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>tobe_allocated</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>new_data</name> <operator>=</operator> <operator>(</operator><name>ev_uint32_t</name><operator>*</operator><operator>)</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>how_often_data</name></name></expr></argument>,
<argument><expr><name>tobe_allocated</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ev_uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>how_often_data</name></name> <operator>=</operator> <name>new_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>how_often_num_allocated</name></name> <operator>=</operator> <name>tobe_allocated</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content>}</block></function>

<function><type><name>ev_uint32_t</name> <modifier>*</modifier></type>
<name>kill_how_often_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ev_uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>msg</name><operator>-&gt;</operator><name>how_often_length</name></name> <operator>&gt;=</operator> <name><name>msg</name><operator>-&gt;</operator><name>how_often_num_allocated</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>kill_how_often_expand_to_hold_more</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>how_often_data</name><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>how_often_length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>how_often_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>how_often_data</name><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>how_often_length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><operator>--</operator><name><name>msg</name><operator>-&gt;</operator><name>how_often_length</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>kill_weapon_assign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>weapon_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>weapon_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>weapon_data</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>weapon_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>kill_action_assign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>action_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>action_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>action_data</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>action_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>kill_how_often_assign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ev_uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>msg</name><operator>-&gt;</operator><name>how_often_set</name></name> <operator>||</operator> <name>off</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>off</name> <operator>&gt;=</operator> <name><name>msg</name><operator>-&gt;</operator><name>how_often_length</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<block>{<block_content>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>how_often_data</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>kill_weapon_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>weapon_set</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>weapon_data</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>kill_action_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>action_set</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>action_data</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>kill_how_often_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>,
<parameter><decl><type><name>ev_uint32_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>msg</name><operator>-&gt;</operator><name>how_often_set</name></name> <operator>||</operator> <name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>offset</name> <operator>&gt;=</operator> <name><name>msg</name><operator>-&gt;</operator><name>how_often_length</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>how_often_data</name><index>[<expr><name>offset</name></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>kill_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>weapon_set</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>weapon_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>weapon_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>weapon_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>action_set</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>action_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>action_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>action_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>how_often_set</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>how_often_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>how_often_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>how_often_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>how_often_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>how_often_num_allocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>kill_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>weapon_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>weapon_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>action_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>action_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>how_often_set</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>how_often_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>how_often_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>how_often_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>how_often_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>how_often_num_allocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>how_often_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>kill_marshal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>evbuf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>)</parameter_list><block>{<block_content>
<expr_stmt><expr><call><name>evtag_marshal_string</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>, <argument><expr><name>KILL_WEAPON</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>weapon_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evtag_marshal_string</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>, <argument><expr><name>KILL_ACTION</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>action_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>how_often_set</name></name></expr>)</condition> <block>{<block_content>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tmp</name><operator>-&gt;</operator><name>how_often_length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>evtag_marshal_int</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>, <argument><expr><name>KILL_HOW_OFTEN</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>how_often_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>kill_unmarshal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>evbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ev_uint32_t</name></type> <name>tag</name></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evtag_peek</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name>tag</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>KILL_WEAPON</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>weapon_set</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evtag_unmarshal_string</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>, <argument><expr><name>KILL_WEAPON</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator><name>weapon_data</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"%s: failed to unmarshal weapon"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>weapon_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>KILL_ACTION</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>action_set</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evtag_unmarshal_string</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>, <argument><expr><name>KILL_ACTION</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator><name>action_data</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"%s: failed to unmarshal action"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>action_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>KILL_HOW_OFTEN</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>how_often_length</name></name> <operator>&gt;=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>how_often_num_allocated</name></name> <operator>&amp;&amp;</operator>
<call><name>kill_how_often_expand_to_hold_more</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"HEY NOW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evtag_unmarshal_int</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>, <argument><expr><name>KILL_HOW_OFTEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator><name>how_often_data</name><index>[<expr><name><name>tmp</name><operator>-&gt;</operator><name>how_often_length</name></name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"%s: failed to unmarshal how_often"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>tmp</name><operator>-&gt;</operator><name>how_often_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>how_often_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>kill_complete</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>kill_complete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>msg</name><operator>-&gt;</operator><name>weapon_set</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>msg</name><operator>-&gt;</operator><name>action_set</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evtag_unmarshal_kill</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>evbuf</name></decl></parameter>, <parameter><decl><type><name>ev_uint32_t</name></type> <name>need_tag</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ev_uint32_t</name></type> <name>tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evtag_unmarshal</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>tag</name> <operator>!=</operator> <name>need_tag</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>kill_unmarshal</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>res</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evtag_marshal_kill</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>evbuf</name></decl></parameter>, <parameter><decl><type><name>ev_uint32_t</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf_</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>buf_</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kill_marshal</name><argument_list>(<argument><expr><name>buf_</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evtag_marshal_buffer</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>buf_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>run_access_</name></name></type> <name>run_base__</name> <init>= <expr><block>{
<expr><name>run_how_assign</name></expr>,
<expr><name>run_how_get</name></expr>,
<expr><name>run_some_bytes_assign</name></expr>,
<expr><name>run_some_bytes_get</name></expr>,
<expr><name>run_fixed_bytes_assign</name></expr>,
<expr><name>run_fixed_bytes_get</name></expr>,
<expr><name>run_notes_assign</name></expr>,
<expr><name>run_notes_get</name></expr>,
<expr><name>run_notes_add</name></expr>,
<expr><name>run_large_number_assign</name></expr>,
<expr><name>run_large_number_get</name></expr>,
<expr><name>run_other_numbers_assign</name></expr>,
<expr><name>run_other_numbers_get</name></expr>,
<expr><name>run_other_numbers_add</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type>
<name>run_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>run_new_with_arg</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type>
<name>run_new_with_arg</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>run</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"%s: malloc"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <operator>&amp;</operator><name>run_base__</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>how_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>how_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>some_bytes_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>some_bytes_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>some_bytes_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>fixed_bytes_data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>fixed_bytes_data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>fixed_bytes_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>notes_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>notes_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>notes_num_allocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>notes_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>large_number_data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>large_number_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>other_numbers_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>other_numbers_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>other_numbers_num_allocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>other_numbers_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>tmp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>run_notes_expand_to_hold_more</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tobe_allocated</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>notes_num_allocated</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type> <name>new_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>tobe_allocated</name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><name>tobe_allocated</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>tobe_allocated</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>new_data</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>notes_data</name></name></expr></argument>,
<argument><expr><name>tobe_allocated</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>notes_data</name></name> <operator>=</operator> <name>new_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>notes_num_allocated</name></name> <operator>=</operator> <name>tobe_allocated</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier> <modifier>*</modifier></type>
<name>run_notes_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>msg</name><operator>-&gt;</operator><name>notes_length</name></name> <operator>&gt;=</operator> <name><name>msg</name><operator>-&gt;</operator><name>notes_num_allocated</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>run_notes_expand_to_hold_more</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>notes_data</name><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>notes_length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>notes_data</name><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>notes_length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>notes_data</name><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>notes_length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>notes_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>notes_data</name><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>notes_length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><operator>--</operator><name><name>msg</name><operator>-&gt;</operator><name>notes_length</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>run_other_numbers_expand_to_hold_more</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tobe_allocated</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>other_numbers_num_allocated</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint32_t</name><modifier>*</modifier></type> <name>new_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>tobe_allocated</name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><name>tobe_allocated</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>tobe_allocated</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>new_data</name> <operator>=</operator> <operator>(</operator><name>ev_uint32_t</name><operator>*</operator><operator>)</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>other_numbers_data</name></name></expr></argument>,
<argument><expr><name>tobe_allocated</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ev_uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>other_numbers_data</name></name> <operator>=</operator> <name>new_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>other_numbers_num_allocated</name></name> <operator>=</operator> <name>tobe_allocated</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content>}</block></function>

<function><type><name>ev_uint32_t</name> <modifier>*</modifier></type>
<name>run_other_numbers_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ev_uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>msg</name><operator>-&gt;</operator><name>other_numbers_length</name></name> <operator>&gt;=</operator> <name><name>msg</name><operator>-&gt;</operator><name>other_numbers_num_allocated</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>run_other_numbers_expand_to_hold_more</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>other_numbers_data</name><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>other_numbers_length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>other_numbers_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>other_numbers_data</name><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>other_numbers_length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><operator>--</operator><name><name>msg</name><operator>-&gt;</operator><name>other_numbers_length</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>run_how_assign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>how_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>how_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>how_data</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>how_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>run_some_bytes_assign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ev_uint8_t</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>ev_uint32_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>some_bytes_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>some_bytes_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>some_bytes_data</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>some_bytes_data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>some_bytes_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>some_bytes_length</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>some_bytes_data</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>run_fixed_bytes_assign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ev_uint8_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>fixed_bytes_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>fixed_bytes_data</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>run_notes_assign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>msg</name><operator>-&gt;</operator><name>notes_set</name></name> <operator>||</operator> <name>off</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>off</name> <operator>&gt;=</operator> <name><name>msg</name><operator>-&gt;</operator><name>notes_length</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>notes_data</name><index>[<expr><name>off</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>notes_data</name><index>[<expr><name>off</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>notes_data</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>notes_data</name><index>[<expr><name>off</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"%s: strdup"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>run_large_number_assign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ev_uint64_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>large_number_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>large_number_data</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>run_other_numbers_assign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ev_uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>msg</name><operator>-&gt;</operator><name>other_numbers_set</name></name> <operator>||</operator> <name>off</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>off</name> <operator>&gt;=</operator> <name><name>msg</name><operator>-&gt;</operator><name>other_numbers_length</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<block>{<block_content>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>other_numbers_data</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>run_how_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>how_set</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>how_data</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>run_some_bytes_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>ev_uint8_t</name> <modifier>*</modifier> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>ev_uint32_t</name> <modifier>*</modifier></type><name>plen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>some_bytes_set</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>some_bytes_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>plen</name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>some_bytes_length</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>run_fixed_bytes_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>ev_uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>fixed_bytes_set</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>fixed_bytes_data</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>run_notes_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>msg</name><operator>-&gt;</operator><name>notes_set</name></name> <operator>||</operator> <name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>offset</name> <operator>&gt;=</operator> <name><name>msg</name><operator>-&gt;</operator><name>notes_length</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>notes_data</name><index>[<expr><name>offset</name></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>run_large_number_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>ev_uint64_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>large_number_set</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>large_number_data</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>run_other_numbers_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>,
<parameter><decl><type><name>ev_uint32_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>msg</name><operator>-&gt;</operator><name>other_numbers_set</name></name> <operator>||</operator> <name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>offset</name> <operator>&gt;=</operator> <name><name>msg</name><operator>-&gt;</operator><name>other_numbers_length</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>other_numbers_data</name><index>[<expr><name>offset</name></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>run_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>how_set</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>how_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>how_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>how_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>some_bytes_set</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>some_bytes_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>some_bytes_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>some_bytes_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>some_bytes_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>fixed_bytes_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>fixed_bytes_data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>fixed_bytes_data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>notes_set</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tmp</name><operator>-&gt;</operator><name>notes_length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>notes_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>notes_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>notes_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>notes_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>notes_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>notes_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>notes_num_allocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>large_number_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>other_numbers_set</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>other_numbers_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>other_numbers_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>other_numbers_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>other_numbers_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>other_numbers_num_allocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>run_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>how_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>how_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>some_bytes_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>some_bytes_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>notes_set</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tmp</name><operator>-&gt;</operator><name>notes_length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>notes_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>notes_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>notes_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>notes_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>notes_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>notes_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>notes_num_allocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>notes_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>other_numbers_set</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>other_numbers_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>other_numbers_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>other_numbers_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>other_numbers_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>other_numbers_num_allocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>other_numbers_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>run_marshal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>evbuf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>)</parameter_list><block>{<block_content>
<expr_stmt><expr><call><name>evtag_marshal_string</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>, <argument><expr><name>RUN_HOW</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>how_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>some_bytes_set</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evtag_marshal</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>, <argument><expr><name>RUN_SOME_BYTES</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>some_bytes_data</name></name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>some_bytes_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>evtag_marshal</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>, <argument><expr><name>RUN_FIXED_BYTES</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>fixed_bytes_data</name></name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">24</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>notes_set</name></name></expr>)</condition> <block>{<block_content>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tmp</name><operator>-&gt;</operator><name>notes_length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>evtag_marshal_string</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>, <argument><expr><name>RUN_NOTES</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>notes_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>large_number_set</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evtag_marshal_int64</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>, <argument><expr><name>RUN_LARGE_NUMBER</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>large_number_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>other_numbers_set</name></name></expr>)</condition> <block>{<block_content>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tmp</name><operator>-&gt;</operator><name>other_numbers_length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>evtag_marshal_int</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>, <argument><expr><name>RUN_OTHER_NUMBERS</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>other_numbers_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>run_unmarshal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>evbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ev_uint32_t</name></type> <name>tag</name></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evtag_peek</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name>tag</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>RUN_HOW</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>how_set</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evtag_unmarshal_string</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>, <argument><expr><name>RUN_HOW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator><name>how_data</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"%s: failed to unmarshal how"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>how_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>RUN_SOME_BYTES</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>some_bytes_set</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evtag_payload_length</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator><name>some_bytes_length</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>some_bytes_length</name></name> <operator>&gt;</operator> <call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>tmp</name><operator>-&gt;</operator><name>some_bytes_data</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>some_bytes_length</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evtag_unmarshal_fixed</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>, <argument><expr><name>RUN_SOME_BYTES</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>some_bytes_data</name></name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>some_bytes_length</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"%s: failed to unmarshal some_bytes"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>some_bytes_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>RUN_FIXED_BYTES</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>fixed_bytes_set</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evtag_unmarshal_fixed</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>, <argument><expr><name>RUN_FIXED_BYTES</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>fixed_bytes_data</name></name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">24</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"%s: failed to unmarshal fixed_bytes"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>fixed_bytes_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>RUN_NOTES</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>notes_length</name></name> <operator>&gt;=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>notes_num_allocated</name></name> <operator>&amp;&amp;</operator>
<call><name>run_notes_expand_to_hold_more</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"HEY NOW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evtag_unmarshal_string</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>, <argument><expr><name>RUN_NOTES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator><name>notes_data</name><index>[<expr><name><name>tmp</name><operator>-&gt;</operator><name>notes_length</name></name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"%s: failed to unmarshal notes"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>tmp</name><operator>-&gt;</operator><name>notes_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>notes_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>RUN_LARGE_NUMBER</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>large_number_set</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evtag_unmarshal_int64</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>, <argument><expr><name>RUN_LARGE_NUMBER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator><name>large_number_data</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"%s: failed to unmarshal large_number"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>large_number_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>RUN_OTHER_NUMBERS</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>other_numbers_length</name></name> <operator>&gt;=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>other_numbers_num_allocated</name></name> <operator>&amp;&amp;</operator>
<call><name>run_other_numbers_expand_to_hold_more</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"HEY NOW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evtag_unmarshal_int</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>, <argument><expr><name>RUN_OTHER_NUMBERS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator><name>other_numbers_data</name><index>[<expr><name><name>tmp</name><operator>-&gt;</operator><name>other_numbers_length</name></name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"%s: failed to unmarshal other_numbers"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>tmp</name><operator>-&gt;</operator><name>other_numbers_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>other_numbers_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>run_complete</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>run_complete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>msg</name><operator>-&gt;</operator><name>how_set</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>msg</name><operator>-&gt;</operator><name>fixed_bytes_set</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>evtag_unmarshal_run</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>evbuf</name></decl></parameter>, <parameter><decl><type><name>ev_uint32_t</name></type> <name>need_tag</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ev_uint32_t</name></type> <name>tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evtag_unmarshal</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>tag</name> <operator>!=</operator> <name>need_tag</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>run_unmarshal</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>res</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>evtag_marshal_run</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>evbuf</name></decl></parameter>, <parameter><decl><type><name>ev_uint32_t</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf_</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>buf_</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>run_marshal</name><argument_list>(<argument><expr><name>buf_</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evtag_marshal_buffer</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>buf_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
