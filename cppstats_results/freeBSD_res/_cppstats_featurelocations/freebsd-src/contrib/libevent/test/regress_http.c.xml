<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/test/regress_http.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util-internal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ws2tcpip.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event-config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/dns.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/http.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/buffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/bufferevent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/bufferevent_ssl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/listener.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regress_testutils.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>exit_base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier></type> <name><name>BASIC_REQUEST_BODY</name><index>[]</index></name> <init>= <expr><literal type="string">"This is funny"</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>http_basic_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>http_large_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>http_chunked_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>http_post_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>http_put_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>http_delete_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>http_delay_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>http_large_delay_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>http_badreq_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>http_dispatcher_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>http_on_complete_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_BIND_IPV6</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_BIND_SSL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_SSL_FILTER</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>http_bind</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>myhttp</name></decl></parameter>, <parameter><decl><type><name>ev_uint16_t</name> <modifier>*</modifier></type><name>pport</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_bound_socket</name></name> <modifier>*</modifier></type><name>sock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ipv6</name> <init>= <expr><name>mask</name> <operator>&amp;</operator> <name>HTTP_BIND_IPV6</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ipv6</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sock</name> <operator>=</operator> <call><name>evhttp_bind_socket_with_handle</name><argument_list>(<argument><expr><name>myhttp</name></expr></argument>, <argument><expr><literal type="string">"::1"</literal></expr></argument>, <argument><expr><operator>*</operator><name>pport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sock</name> <operator>=</operator> <call><name>evhttp_bind_socket_with_handle</name><argument_list>(<argument><expr><name>myhttp</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><operator>*</operator><name>pport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ipv6</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Could not start web server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>regress_get_socket_port</name><argument_list>(<argument><expr><call><name>evhttp_bound_socket_get_fd</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>port</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pport</name> <operator>=</operator> <operator>(</operator><name>ev_uint16_t</name><operator>)</operator> <name>port</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type>
<name>https_bev</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SSL</name> <modifier>*</modifier></type><name>ssl</name> <init>= <expr><call><name>SSL_new</name><argument_list>(<argument><expr><call><name>get_ssl_ctx</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SSL_use_certificate</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>, <argument><expr><call><name>ssl_getcert</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_use_PrivateKey</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>, <argument><expr><call><name>ssl_getkey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>bufferevent_openssl_socket_new</name><argument_list>(
<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>BUFFEREVENT_SSL_ACCEPTING</name></expr></argument>,
<argument><expr><name>BEV_OPT_CLOSE_ON_FREE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type>
<name>http_setup</name><parameter_list>(<parameter><decl><type><name>ev_uint16_t</name> <modifier>*</modifier></type><name>pport</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>myhttp</name></decl>;</decl_stmt>


<expr_stmt><expr><name>myhttp</name> <operator>=</operator> <call><name>evhttp_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>http_bind</name><argument_list>(<argument><expr><name>myhttp</name></expr></argument>, <argument><expr><name>pport</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>HTTP_BIND_SSL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>init_ssl</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_set_bevcb</name><argument_list>(<argument><expr><name>myhttp</name></expr></argument>, <argument><expr><name>https_bev</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>evhttp_set_cb</name><argument_list>(<argument><expr><name>myhttp</name></expr></argument>, <argument><expr><literal type="string">"/test"</literal></expr></argument>, <argument><expr><name>http_basic_cb</name></expr></argument>, <argument><expr><name>myhttp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_set_cb</name><argument_list>(<argument><expr><name>myhttp</name></expr></argument>, <argument><expr><literal type="string">"/large"</literal></expr></argument>, <argument><expr><name>http_large_cb</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_set_cb</name><argument_list>(<argument><expr><name>myhttp</name></expr></argument>, <argument><expr><literal type="string">"/chunked"</literal></expr></argument>, <argument><expr><name>http_chunked_cb</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_set_cb</name><argument_list>(<argument><expr><name>myhttp</name></expr></argument>, <argument><expr><literal type="string">"/streamed"</literal></expr></argument>, <argument><expr><name>http_chunked_cb</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_set_cb</name><argument_list>(<argument><expr><name>myhttp</name></expr></argument>, <argument><expr><literal type="string">"/postit"</literal></expr></argument>, <argument><expr><name>http_post_cb</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_set_cb</name><argument_list>(<argument><expr><name>myhttp</name></expr></argument>, <argument><expr><literal type="string">"/putit"</literal></expr></argument>, <argument><expr><name>http_put_cb</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_set_cb</name><argument_list>(<argument><expr><name>myhttp</name></expr></argument>, <argument><expr><literal type="string">"/deleteit"</literal></expr></argument>, <argument><expr><name>http_delete_cb</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_set_cb</name><argument_list>(<argument><expr><name>myhttp</name></expr></argument>, <argument><expr><literal type="string">"/delay"</literal></expr></argument>, <argument><expr><name>http_delay_cb</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_set_cb</name><argument_list>(<argument><expr><name>myhttp</name></expr></argument>, <argument><expr><literal type="string">"/largedelay"</literal></expr></argument>, <argument><expr><name>http_large_delay_cb</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_set_cb</name><argument_list>(<argument><expr><name>myhttp</name></expr></argument>, <argument><expr><literal type="string">"/badrequest"</literal></expr></argument>, <argument><expr><name>http_badreq_cb</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_set_cb</name><argument_list>(<argument><expr><name>myhttp</name></expr></argument>, <argument><expr><literal type="string">"/oncomplete"</literal></expr></argument>, <argument><expr><name>http_on_complete_cb</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_set_cb</name><argument_list>(<argument><expr><name>myhttp</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><name>http_dispatcher_cb</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>myhttp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NI_MAXSERV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NI_MAXSERV</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>evutil_socket_t</name></type>
<name>http_connect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name></decl></parameter>, <parameter><decl><type><name>ev_uint16_t</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name></type> <name>ai</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>aitop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>strport</name><index>[<expr><name>NI_MAXSERV</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ai</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ai</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ai</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>strport</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>strport</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evutil_getaddrinfo</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>strport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ai</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aitop</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"getaddrinfo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sa</name> <operator>=</operator> <name><name>aitop</name><operator>-&gt;</operator><name>ai_addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>slen</name> <operator>=</operator> <name><name>aitop</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"socket failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>evutil_make_socket_nonblocking</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>connect</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>sa</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>tmp_err</name> <init>= <expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp_err</name> <operator>!=</operator> <name>WSAEINPROGRESS</name> <operator>&amp;&amp;</operator> <name>tmp_err</name> <operator>!=</operator> <name>WSAEINVAL</name> <operator>&amp;&amp;</operator>
<name>tmp_err</name> <operator>!=</operator> <name>WSAEWOULDBLOCK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"connect failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EINPROGRESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"connect failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>evutil_freeaddrinfo</name><argument_list>(<argument><expr><name>aitop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>fd</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>evbuffer_datacmp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>b_sz</name> <init>= <expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>s_sz</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b_sz</name> <operator>&lt;</operator> <name>s_sz</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>evbuffer_pullup</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>s_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>s_sz</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>b_sz</name> <operator>&gt;</operator> <name>s_sz</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>evbuffer_contains</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_ptr</name></name></type> <name>ptr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>evbuffer_search</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>ptr</name><operator>.</operator><name>pos</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_readcb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>what</name> <init>= <expr><name>BASIC_REQUEST_BODY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>my_base</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evbuffer_contains</name><argument_list>(<argument><expr><call><name>bufferevent_get_input</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>message_read_status</name></name></type> <name>done</name></decl>;</decl_stmt>


<expr_stmt><expr><name>done</name> <operator>=</operator> <call><name>evhttp_parse_firstline_</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><call><name>bufferevent_get_input</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>done</name> <operator>!=</operator> <name>ALL_DATA_READ</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>done</name> <operator>=</operator> <call><name>evhttp_parse_headers_</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><call><name>bufferevent_get_input</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>done</name> <operator>!=</operator> <name>ALL_DATA_READ</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>done</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<call><name>evhttp_find_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Content-Type"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>test_ok</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>out</name>:</label>
<expr_stmt><expr><call><name>evhttp_request_free</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_disable</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>exit_base</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>exit_base</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>my_base</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>my_base</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"No way to exit loop!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_writecb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><call><name>bufferevent_get_output</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bufferevent_enable</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>test_ok</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_errorcb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>what</name> <operator>&amp;</operator> <name>BEV_EVENT_CONNECTED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>found_multi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>found_multi2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_basic_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>evb</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>empty</name> <init>= <expr><call><name>evhttp_find_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Empty"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: called\n"</literal><operator>,</operator> <name>__func__</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><name>BASIC_REQUEST_BODY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>evcon</name> <operator>=</operator> <call><name>evhttp_request_get_connection</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evhttp_connection_get_server</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>multi</name> <init>=
<expr><call><name>evhttp_find_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">"X-Multi"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>multi</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found_multi</name> <operator>=</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>multi</name></expr></argument>,<argument><expr><literal type="string">"aaaaaaaa a END"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"END"</literal></expr></argument>, <argument><expr><name>multi</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>multi</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>test_ok</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evhttp_find_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"X-Last"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>test_ok</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>multi2</name> <init>=
<expr><call><name>evhttp_find_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">"X-Multi-Extra-WS"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>multi2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found_multi2</name> <operator>=</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>multi2</name></expr></argument>,<argument><expr><literal type="string">"libevent 2.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>



<if_stmt><if>if <condition>(<expr><call><name>evhttp_find_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"X-Negative"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Content-Length"</literal></expr></argument>, <argument><expr><literal type="string">"-100"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>evhttp_send_reply</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>HTTP_OK</name></expr></argument>, <argument><expr><literal type="string">"Everything is fine"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>!</operator><name>empty</name></expr> ?</condition><then> <expr><name>evb</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_large_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>evb</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">20</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><name>BASIC_REQUEST_BODY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>evhttp_send_reply</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>HTTP_OK</name></expr></argument>, <argument><expr><literal type="string">"Everything is fine"</literal></expr></argument>, <argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier><modifier>*</modifier> <specifier>const</specifier></type> <name><name>CHUNKS</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"This is funny"</literal></expr>,
<expr><literal type="string">"but not hilarious."</literal></expr>,
<expr><literal type="string">"bwv 1052"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>chunk_req_state</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_chunked_trickle_cb</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>evb</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>chunk_req_state</name></name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>when</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>CHUNKS</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_send_reply_chunk</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>req</name></name></expr></argument>, <argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>state</name><operator>-&gt;</operator><name>i</name></name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>CHUNKS</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>CHUNKS</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_base_once</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>EV_TIMEOUT</name></expr></argument>,
<argument><expr><name>http_chunked_trickle_cb</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>when</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>evhttp_send_reply_end</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_chunked_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>when</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>chunk_req_state</name></name> <modifier>*</modifier></type><name>state</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>chunk_req_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: called\n"</literal><operator>,</operator> <name>__func__</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>chunk_req_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_request_get_uri</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/streamed"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Content-Length"</literal></expr></argument>, <argument><expr><literal type="string">"39"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>evhttp_send_reply_start</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>HTTP_OK</name></expr></argument>, <argument><expr><literal type="string">"Everything is fine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>event_base_once</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>EV_TIMEOUT</name></expr></argument>, <argument><expr><name>http_chunked_trickle_cb</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>when</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_complete_write</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>http_request</name> <init>= <expr><literal type="string">"host\r\n"</literal>
<literal type="string">"Connection: close\r\n"</literal>
<literal type="string">"\r\n"</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bufferevent_write</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>http_request</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>http_request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type>
<name>create_bev</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ssl_mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>BEV_OPT_DEFER_CALLBACKS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ssl_mask</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bev</name> <operator>=</operator> <call><name>bufferevent_socket_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>SSL</name> <modifier>*</modifier></type><name>ssl</name> <init>= <expr><call><name>SSL_new</name><argument_list>(<argument><expr><call><name>get_ssl_ctx</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ssl_mask</name> <operator>&amp;</operator> <name>HTTP_SSL_FILTER</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>underlying</name> <init>=
<expr><call><name>bufferevent_socket_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bev</name> <operator>=</operator> <call><name>bufferevent_openssl_filter_new</name><argument_list>(
<argument><expr><name>base</name></expr></argument>, <argument><expr><name>underlying</name></expr></argument>, <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>BUFFEREVENT_SSL_CONNECTING</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>bev</name> <operator>=</operator> <call><name>bufferevent_openssl_socket_new</name><argument_list>(
<argument><expr><name>base</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>BUFFEREVENT_SSL_CONNECTING</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>bufferevent_openssl_set_allow_dirty_shutdown</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>bev</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_basic_test_impl</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ssl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>http_request</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>port2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>server_flags</name> <init>= <expr><ternary><condition><expr><name>ssl</name></expr> ?</condition><then> <expr><name>HTTP_BIND_SSL</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><call><name>http_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>server_flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>exit_base</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>http_bind</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>port2</name></expr></argument>, <argument><expr><name>server_flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"FAILED (bind)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>http_connect</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>bev</name> <operator>=</operator> <call><name>create_bev</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_setcb</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>http_readcb</name></expr></argument>, <argument><expr><name>http_writecb</name></expr></argument>,
<argument><expr><name>http_errorcb</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>http_request</name> <operator>=</operator>
<literal type="string">"GET /test HTTP/1.1\r\n"</literal>
<literal type="string">"Host: some"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_write</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>http_request</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>http_request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_timerclear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">100000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_once</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>,
<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>EV_TIMEOUT</name></expr></argument>, <argument><expr><name>http_complete_write</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>test_ok</name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bufferevent_free</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>http_connect</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>port2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>bev</name> <operator>=</operator> <call><name>create_bev</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_setcb</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>http_readcb</name></expr></argument>, <argument><expr><name>http_writecb</name></expr></argument>,
<argument><expr><name>http_errorcb</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>http_request</name> <operator>=</operator>
<literal type="string">"GET /test HTTP/1.1\r\n"</literal>
<literal type="string">"Host: somehost\r\n"</literal>
<literal type="string">"Connection: close\r\n"</literal>
<literal type="string">"\r\n"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_write</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>http_request</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>http_request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>test_ok</name> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bufferevent_free</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>http_connect</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>port2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>bev</name> <operator>=</operator> <call><name>create_bev</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_setcb</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>http_readcb</name></expr></argument>, <argument><expr><name>http_writecb</name></expr></argument>,
<argument><expr><name>http_errorcb</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>http_request</name> <operator>=</operator>
<literal type="string">"GET http://somehost.net/test HTTP/1.1\r\n"</literal>
<literal type="string">"Host: somehost\r\n"</literal>
<literal type="string">"Connection: close\r\n"</literal>
<literal type="string">"\r\n"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_write</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>http_request</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>http_request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>test_ok</name> <operator>==</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>bev</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_free</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>http_basic_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name>http_basic_test_impl</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_delay_reply</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>evhttp_send_reply</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>HTTP_OK</name></expr></argument>, <argument><expr><literal type="string">"Everything is fine"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>test_ok</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_delay_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>evutil_timerclear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">200</literal> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_once</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>EV_TIMEOUT</name></expr></argument>, <argument><expr><name>http_delay_reply</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_badreq_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Content-Type"</literal></expr></argument>, <argument><expr><literal type="string">"text/xml; charset=UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Hello, %s!"</literal></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_send_reply</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>HTTP_OK</name></expr></argument>, <argument><expr><literal type="string">"OK"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_badreq_errorcb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: called (what=%04x, arg=%p)"</literal><operator>,</operator> <name>__func__</name><operator>,</operator> <name>what</name><operator>,</operator> <name>arg</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_badreq_readcb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>what</name> <init>= <expr><literal type="string">"Hello, 127.0.0.1"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bad_request</name> <init>= <expr><literal type="string">"400 Bad Request"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evbuffer_contains</name><argument_list>(<argument><expr><call><name>bufferevent_get_input</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bad_request</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TT_FAIL</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s:bad request detected"</literal><operator>,</operator> <name>__func__</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_disable</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evbuffer_contains</name><argument_list>(<argument><expr><call><name>bufferevent_get_input</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>message_read_status</name></name></type> <name>done</name></decl>;</decl_stmt>


<expr_stmt><expr><name>done</name> <operator>=</operator> <call><name>evhttp_parse_firstline_</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><call><name>bufferevent_get_input</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>done</name> <operator>!=</operator> <name>ALL_DATA_READ</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>done</name> <operator>=</operator> <call><name>evhttp_parse_headers_</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><call><name>bufferevent_get_input</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>done</name> <operator>!=</operator> <name>ALL_DATA_READ</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>done</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<call><name>evhttp_find_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Content-Type"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>test_ok</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>out</name>:</label>
<expr_stmt><expr><call><name>evhttp_request_free</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><call><name>bufferevent_get_input</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><call><name>bufferevent_get_input</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>shutdown</name><argument_list>(<argument><expr><call><name>bufferevent_getfd</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EVUTIL_SHUT_WR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_badreq_successcb</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: called (what=%04x, arg=%p)"</literal><operator>,</operator> <name>__func__</name><operator>,</operator> <name>what</name><operator>,</operator> <name>arg</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>exit_base</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_bad_request_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>http_request</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>port2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><call><name>http_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>exit_base</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>http_bind</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>port2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TT_DIE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Bind socket failed"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>http_connect</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&gt;=</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>bev</name> <operator>=</operator> <call><name>bufferevent_socket_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_setcb</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>http_badreq_readcb</name></expr></argument>, <argument><expr><name>http_writecb</name></expr></argument>,
<argument><expr><name>http_badreq_errorcb</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_enable</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>http_request</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_write</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>http_request</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>http_request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>shutdown</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>EVUTIL_SHUT_WR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>timerclear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_once</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>EV_TIMEOUT</name></expr></argument>, <argument><expr><name>http_badreq_successcb</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_free</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>test_ok</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>http_connect</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>port2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>bev</name> <operator>=</operator> <call><name>bufferevent_socket_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_setcb</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>http_badreq_readcb</name></expr></argument>, <argument><expr><name>http_writecb</name></expr></argument>,
<argument><expr><name>http_badreq_errorcb</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_enable</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>http_request</name> <operator>=</operator>
<literal type="string">"GET /badrequest HTTP/1.0\r\n"</literal> \
<literal type="string">"Connection: Keep-Alive\r\n"</literal> \
<literal type="string">"\r\n"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_write</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>http_request</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>http_request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>timerclear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_once</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>EV_TIMEOUT</name></expr></argument>, <argument><expr><name>http_badreq_successcb</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>test_ok</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bev</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_free</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>delayed_client</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_large_delay_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>evutil_timerclear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">500000</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_once</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>EV_TIMEOUT</name></expr></argument>, <argument><expr><name>http_delay_reply</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_connection_fail_</name><argument_list>(<argument><expr><name>delayed_client</name></expr></argument>, <argument><expr><name>EVREQ_HTTP_EOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_delete_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>evb</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>empty</name> <init>= <expr><call><name>evhttp_find_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Empty"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>evhttp_request_get_command</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EVHTTP_REQ_DELETE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"FAILED (delete type)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: called\n"</literal><operator>,</operator> <name>__func__</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><name>BASIC_REQUEST_BODY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evhttp_send_reply</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>HTTP_OK</name></expr></argument>, <argument><expr><literal type="string">"Everything is fine"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>!</operator><name>empty</name></expr> ?</condition><then> <expr><name>evb</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_delete_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>http_request</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><call><name>http_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>exit_base</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>http_connect</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&gt;=</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>bev</name> <operator>=</operator> <call><name>bufferevent_socket_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_setcb</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>http_readcb</name></expr></argument>, <argument><expr><name>http_writecb</name></expr></argument>,
<argument><expr><name>http_errorcb</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>http_request</name> <operator>=</operator>
<literal type="string">"DELETE /deleteit HTTP/1.1\r\n"</literal>
<literal type="string">"Host: somehost\r\n"</literal>
<literal type="string">"Connection: close\r\n"</literal>
<literal type="string">"\r\n"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_write</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>http_request</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>http_request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_free</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>test_ok</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_sent_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ev_uintptr_t</name></type> <name>val</name> <init>= <expr><operator>(</operator><name>ev_uintptr_t</name><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <literal type="number">0xDEADBEEF</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"FAILED on_complete_cb argument\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>evhttp_request_get_output_buffer</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"FAILED on_complete_cb output buffer not written\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: called\n"</literal><operator>,</operator> <name>__func__</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>test_ok</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_on_complete_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>evb</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>evhttp_request_set_on_complete_cb</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>http_sent_cb</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xDEADBEEF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: called\n"</literal><operator>,</operator> <name>__func__</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><name>BASIC_REQUEST_BODY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evhttp_send_reply</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>HTTP_OK</name></expr></argument>, <argument><expr><literal type="string">"Everything is fine"</literal></expr></argument>, <argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>test_ok</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_on_complete_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>http_request</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><call><name>http_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>exit_base</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>http_connect</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&gt;=</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>bev</name> <operator>=</operator> <call><name>bufferevent_socket_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_setcb</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>http_readcb</name></expr></argument>, <argument><expr><name>http_writecb</name></expr></argument>,
<argument><expr><name>http_errorcb</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>http_request</name> <operator>=</operator>
<literal type="string">"GET /oncomplete HTTP/1.1\r\n"</literal>
<literal type="string">"Host: somehost\r\n"</literal>
<literal type="string">"Connection: close\r\n"</literal>
<literal type="string">"\r\n"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_write</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>http_request</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>http_request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_free</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>test_ok</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_allowed_methods_eventcb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>output</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>what</name> <operator>&amp;</operator> <operator>(</operator><name>BEV_EVENT_ERROR</name><operator>|</operator><name>BEV_EVENT_EOF</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>evbuffer_remove</name><argument_list>(<argument><expr><call><name>bufferevent_get_input</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>n</name></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>output</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>output</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>exit_base</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_allowed_methods_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bev2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bev3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>fd1</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>fd2</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>fd3</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>http_request</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result1</name><init>=<expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>result2</name><init>=<expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>result3</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><call><name>http_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>exit_base</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fd1</name> <operator>=</operator> <call><name>http_connect</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>fd1</name></expr></argument>, <argument><expr><operator>&gt;=</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evhttp_set_allowed_methods</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_PATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>bev1</name> <operator>=</operator> <call><name>bufferevent_socket_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>fd1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_enable</name><argument_list>(<argument><expr><name>bev1</name></expr></argument>, <argument><expr><name>EV_READ</name><operator>|</operator><name>EV_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_setcb</name><argument_list>(<argument><expr><name>bev1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>http_allowed_methods_eventcb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>http_request</name> <operator>=</operator>
<literal type="string">"GET /index.html HTTP/1.1\r\n"</literal>
<literal type="string">"Host: somehost\r\n"</literal>
<literal type="string">"Connection: close\r\n"</literal>
<literal type="string">"\r\n"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_write</name><argument_list>(<argument><expr><name>bev1</name></expr></argument>, <argument><expr><name>http_request</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>http_request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd2</name> <operator>=</operator> <call><name>http_connect</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>fd2</name></expr></argument>, <argument><expr><operator>&gt;=</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bev2</name> <operator>=</operator> <call><name>bufferevent_socket_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>fd2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_enable</name><argument_list>(<argument><expr><name>bev2</name></expr></argument>, <argument><expr><name>EV_READ</name><operator>|</operator><name>EV_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_setcb</name><argument_list>(<argument><expr><name>bev2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>http_allowed_methods_eventcb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>http_request</name> <operator>=</operator>
<literal type="string">"PATCH /test HTTP/1.1\r\n"</literal>
<literal type="string">"Host: somehost\r\n"</literal>
<literal type="string">"Connection: close\r\n"</literal>
<literal type="string">"\r\n"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_write</name><argument_list>(<argument><expr><name>bev2</name></expr></argument>, <argument><expr><name>http_request</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>http_request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd3</name> <operator>=</operator> <call><name>http_connect</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>fd3</name></expr></argument>, <argument><expr><operator>&gt;=</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bev3</name> <operator>=</operator> <call><name>bufferevent_socket_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>fd3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_enable</name><argument_list>(<argument><expr><name>bev3</name></expr></argument>, <argument><expr><name>EV_READ</name><operator>|</operator><name>EV_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_setcb</name><argument_list>(<argument><expr><name>bev3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>http_allowed_methods_eventcb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>http_request</name> <operator>=</operator>
<literal type="string">"FLOOP /test HTTP/1.1\r\n"</literal>
<literal type="string">"Host: somehost\r\n"</literal>
<literal type="string">"Connection: close\r\n"</literal>
<literal type="string">"\r\n"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_write</name><argument_list>(<argument><expr><name>bev3</name></expr></argument>, <argument><expr><name>http_request</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>http_request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_free</name><argument_list>(<argument><expr><name>bev1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_free</name><argument_list>(<argument><expr><name>bev2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_free</name><argument_list>(<argument><expr><name>bev3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>result1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>result1</name></expr></argument>, <argument><expr><literal type="string">"HTTP/1.1 501 "</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"HTTP/1.1 501 "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>result2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>result2</name></expr></argument>, <argument><expr><literal type="string">"HTTP/1.1 200 "</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"HTTP/1.1 200 "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>result3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>result3</name></expr></argument>, <argument><expr><literal type="string">"HTTP/1.1 501 "</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"HTTP/1.1 501 "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>result1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>result1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>result2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>result2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>result3</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>result3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fd1</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>fd1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fd2</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>fd2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fd3</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>fd3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>http_request_no_action_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>http_request_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>http_request_empty_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_connection_test_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>persistent</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>dnsbase</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ipv6</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>family</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ssl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ipv6</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>HTTP_BIND_IPV6</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ssl</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>HTTP_BIND_SSL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>http</name> <operator>=</operator> <call><name>http_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>http</name> <operator>&amp;&amp;</operator> <name>ipv6</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_skip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ssl</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>SSL</name> <modifier>*</modifier></type><name>ssl</name> <init>= <expr><call><name>SSL_new</name><argument_list>(<argument><expr><call><name>get_ssl_ctx</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><call><name>bufferevent_openssl_socket_new</name><argument_list>(
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ssl</name></expr></argument>,
<argument><expr><name>BUFFEREVENT_SSL_CONNECTING</name></expr></argument>, <argument><expr><name>BEV_OPT_DEFER_CALLBACKS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bufferevent_openssl_set_allow_dirty_shutdown</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>evcon</name> <operator>=</operator> <call><name>evhttp_connection_base_bufferevent_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>dnsbase</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>tt_skip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>evcon</name> <operator>=</operator> <call><name>evhttp_connection_base_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>dnsbase</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_connection_set_family</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>family</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evhttp_connection_get_base</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>exit_base</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evhttp_connection_get_server</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_request_done</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>BASIC_REQUEST_BODY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>, <argument><expr><literal type="string">"somehost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_GET</name></expr></argument>, <argument><expr><literal type="string">"/test"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>test_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_request_done</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>BASIC_REQUEST_BODY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>, <argument><expr><literal type="string">"somehost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><name>persistent</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Connection"</literal></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_GET</name></expr></argument>, <argument><expr><literal type="string">"/test"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"couldn't make request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_request_empty_done</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Empty"</literal></expr></argument>, <argument><expr><literal type="string">"itis"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_GET</name></expr></argument>, <argument><expr><literal type="string">"/test"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Couldn't make request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>evcon</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_connection_free</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>http</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_connection_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>http_connection_test_</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AF_UNSPEC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_persist_connection_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>http_connection_test_</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AF_UNSPEC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>regress_dns_server_table</name></name></type> <name><name>search_table</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"localhost"</literal></expr>, <expr><literal type="string">"A"</literal></expr>, <expr><literal type="string">"127.0.0.1"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_connection_async_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>dns_base</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>portnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>address</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><call><name>http_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>exit_base</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>regress_dnsserver</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>portnum</name></expr></argument>, <argument><expr><name>search_table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dns_base</name> <operator>=</operator> <call><name>evdns_base_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"127.0.0.1:%d"</literal></expr></argument>, <argument><expr><name>portnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_base_nameserver_ip_add</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>evcon</name> <operator>=</operator> <call><name>evhttp_connection_base_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>dns_base</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_request_done</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>BASIC_REQUEST_BODY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>, <argument><expr><literal type="string">"somehost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_GET</name></expr></argument>, <argument><expr><literal type="string">"/test"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>test_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_request_done</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>BASIC_REQUEST_BODY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>, <argument><expr><literal type="string">"somehost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Connection"</literal></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_GET</name></expr></argument>, <argument><expr><literal type="string">"/test"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"couldn't make request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_request_empty_done</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Empty"</literal></expr></argument>, <argument><expr><literal type="string">"itis"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_GET</name></expr></argument>, <argument><expr><literal type="string">"/test"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Couldn't make request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>evcon</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_connection_free</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>http</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dns_base</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evdns_base_free</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>regress_clean_dnsserver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_autofree_connection_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name><name>req</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><call><name>http_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>evcon</name> <operator>=</operator> <call><name>evhttp_connection_base_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name><name>req</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_request_empty_done</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_request_empty_done</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name><name>req</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>, <argument><expr><literal type="string">"somehost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name><name>req</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Connection"</literal></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name><name>req</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Empty"</literal></expr></argument>, <argument><expr><literal type="string">"itis"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name><name>req</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>, <argument><expr><literal type="string">"somehost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name><name>req</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Connection"</literal></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name><name>req</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Empty"</literal></expr></argument>, <argument><expr><literal type="string">"itis"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name><name>req</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>EVHTTP_REQ_GET</name></expr></argument>, <argument><expr><literal type="string">"/test"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"couldn't make request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name><name>req</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>EVHTTP_REQ_GET</name></expr></argument>, <argument><expr><literal type="string">"/test"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"couldn't make request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><call><name>evhttp_connection_free_on_completion</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>evcon</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>connections</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>evcon</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_connection_free</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>http</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_request_never_call</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_failed_request_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>end</name>:</label>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_timed_out_request_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evhttp_request_get_response_code</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>!=</operator></expr></argument>, <argument><expr><name>HTTP_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>end</name>:</label>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_request_error_cb_with_cancel</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>evhttp_request_error</name></name></type> <name>error</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <name>EVREQ_HTTP_REQUEST_CANCEL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>evutil_timerclear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">500</literal> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>exit_base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_do_cancel</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>evhttp_cancel_request</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>test_ok</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_no_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evbuffer_cb_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_free_evcons</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>evcons</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>orig</name> <init>= <expr><name>evcons</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>evcons</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>evcon</name> <operator>=</operator> <operator>*</operator><name>evcons</name><operator>++</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evhttp_connection_free</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier><modifier>*</modifier></type>
<name>http_fill_backlog</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BACKLOG_SIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>evcon</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>evcon</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>BACKLOG_SIZE</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BACKLOG_SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>evcon</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>evhttp_connection_base_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>evcon</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_connection_set_timeout</name><argument_list>(<argument><expr><name><name>evcon</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_request_never_call</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name><name>evcon</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_GET</name></expr></argument>, <argument><expr><literal type="string">"/delay"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>!=</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>evcon</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>evcon</name></expr>;</return>
<label><name>end</name>:</label>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Couldn't fill the backlog"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <name>http_cancel_test_type</name> <block>{
<decl><name>BASIC</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>BY_HOST</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>NO_NS</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>INACTIVE_SERVER</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>SERVER_TIMEOUT</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,
<decl><name>NS_TIMEOUT</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>,
}</block>;</enum>
<function><type><specifier>static</specifier> <name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type>
<name>http_cancel_test_bad_request_new</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>http_cancel_test_type</name></name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>NO_NS</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>type</name> <operator>&amp;</operator> <name>SERVER_TIMEOUT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_timed_out_request_done</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
if <condition>(<expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>INACTIVE_SERVER</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>type</name> <operator>&amp;</operator> <name>NO_NS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_failed_request_done</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_cancel_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>dns_base</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>portnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>address</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>inactive_http</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>inactive_base</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>evcons</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base_to_fill</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>http_cancel_test_type</name></name></type> <name>type</name> <init>=
<expr><operator>(</operator>enum <name>http_cancel_test_type</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>setup_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><call><name>http_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>BY_HOST</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>timeout</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>NS_TIMEOUT</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"6"</literal></expr> </then><else>: <expr><literal type="string">"3"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>regress_dnsserver</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>portnum</name></expr></argument>, <argument><expr><name>search_table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dns_base</name> <operator>=</operator> <call><name>evdns_base_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>NO_NS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>portnum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"127.0.0.1:%d"</literal></expr></argument>, <argument><expr><name>portnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_base_nameserver_ip_add</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evdns_base_set_option</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><literal type="string">"timeout:"</literal></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_base_set_option</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><literal type="string">"initial-probe-timeout:"</literal></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_base_set_option</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><literal type="string">"attempts:"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>exit_base</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>INACTIVE_SERVER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>port</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>inactive_base</name> <operator>=</operator> <call><name>event_base_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inactive_http</name> <operator>=</operator> <call><name>http_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name>inactive_base</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>base_to_fill</name> <operator>=</operator> <name>inactive_base</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>SERVER_TIMEOUT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>evcons</name> <operator>=</operator> <call><name>http_fill_backlog</name><argument_list>(<argument><expr><name>base_to_fill</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>evcon</name> <operator>=</operator> <call><name>evhttp_connection_base_new</name><argument_list>(
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>dns_base</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>type</name> <operator>&amp;</operator> <name>BY_HOST</name></expr> ?</condition><then> <expr><literal type="string">"localhost"</literal></expr> </then><else>: <expr><literal type="string">"127.0.0.1"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>INACTIVE_SERVER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_connection_set_timeout</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bufev</name> <operator>=</operator> <call><name>evhttp_connection_get_bufferevent</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>SERVER_TIMEOUT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_add_cb</name><argument_list>(<argument><expr><call><name>bufferevent_get_output</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>http_no_write</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>






<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_request_never_call</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_request_set_error_cb</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>http_request_error_cb_with_cancel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>, <argument><expr><literal type="string">"somehost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_GET</name></expr></argument>, <argument><expr><literal type="string">"/delay"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>!=</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evutil_timerclear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">100</literal> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_once</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>EV_TIMEOUT</name></expr></argument>, <argument><expr><name>http_do_cancel</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>NO_NS</name> <operator>||</operator> <name>type</name> <operator>&amp;</operator> <name>INACTIVE_SERVER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>test_ok</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>test_ok</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>http_free_evcons</name><argument_list>(<argument><expr><name>evcons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>SERVER_TIMEOUT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>evcons</name> <operator>=</operator> <call><name>http_fill_backlog</name><argument_list>(<argument><expr><name>base_to_fill</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>http_cancel_test_bad_request_new</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>req</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_request_done</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>BASIC_REQUEST_BODY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>, <argument><expr><literal type="string">"somehost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_GET</name></expr></argument>, <argument><expr><literal type="string">"/test"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>!=</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>http_free_evcons</name><argument_list>(<argument><expr><name>evcons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>SERVER_TIMEOUT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>evcons</name> <operator>=</operator> <call><name>http_fill_backlog</name><argument_list>(<argument><expr><name>base_to_fill</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>http_cancel_test_bad_request_new</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>req</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_request_empty_done</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Empty"</literal></expr></argument>, <argument><expr><literal type="string">"itis"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_GET</name></expr></argument>, <argument><expr><literal type="string">"/test"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>!=</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>http_free_evcons</name><argument_list>(<argument><expr><name>evcons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bufev</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_remove_cb</name><argument_list>(<argument><expr><call><name>bufferevent_get_output</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>http_no_write</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>evcon</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_connection_free</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>http</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dns_base</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evdns_base_free</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>regress_clean_dnsserver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>inactive_http</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>inactive_http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>inactive_base</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_base_free</name><argument_list>(<argument><expr><name>inactive_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_request_no_action_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>exit_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>exit_base</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_request_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>what</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>req</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evhttp_request_get_response_code</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HTTP_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evhttp_find_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Content-Type"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_buffer</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>what</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evbuffer_datacmp</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_buffer</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>exit_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>exit_base</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_request_expect_error</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evhttp_request_get_response_code</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>HTTP_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_virtual_host_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>second</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>third</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>http_request</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><call><name>http_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>exit_base</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>second</name> <operator>=</operator> <call><name>evhttp_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_set_cb</name><argument_list>(<argument><expr><name>second</name></expr></argument>, <argument><expr><literal type="string">"/funnybunny"</literal></expr></argument>, <argument><expr><name>http_basic_cb</name></expr></argument>, <argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>third</name> <operator>=</operator> <call><name>evhttp_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_set_cb</name><argument_list>(<argument><expr><name>third</name></expr></argument>, <argument><expr><literal type="string">"/blackcoffee"</literal></expr></argument>, <argument><expr><name>http_basic_cb</name></expr></argument>, <argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evhttp_add_virtual_host</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><literal type="string">"foo.com"</literal></expr></argument>, <argument><expr><name>second</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Couldn't add vhost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evhttp_add_virtual_host</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><literal type="string">"bar.*.foo.com"</literal></expr></argument>, <argument><expr><name>third</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Couldn't add wildcarded vhost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evhttp_add_server_alias</name><argument_list>(<argument><expr><name>second</name></expr></argument>, <argument><expr><literal type="string">"manolito.info"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evhttp_add_server_alias</name><argument_list>(<argument><expr><name>third</name></expr></argument>, <argument><expr><literal type="string">"bonkers.org"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>evcon</name> <operator>=</operator> <call><name>evhttp_connection_base_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_request_expect_error</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>, <argument><expr><literal type="string">"somehost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_GET</name></expr></argument>,
<argument><expr><literal type="string">"/funnybunny"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Couldn't make request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>test_ok</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_request_done</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>BASIC_REQUEST_BODY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>, <argument><expr><literal type="string">"foo.com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_GET</name></expr></argument>,
<argument><expr><literal type="string">"/funnybunny"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>test_ok</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_request_done</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>BASIC_REQUEST_BODY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>, <argument><expr><literal type="string">"bar.magic.foo.com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_GET</name></expr></argument>,
<argument><expr><literal type="string">"/blackcoffee"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Couldn't make request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>tt_assert</name><argument_list>(<argument>test_ok == <literal type="number">1</literal></argument>)</argument_list></macro>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_request_done</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>BASIC_REQUEST_BODY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>, <argument><expr><literal type="string">"manolito.info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_GET</name></expr></argument>,
<argument><expr><literal type="string">"/funnybunny"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Couldn't make request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>tt_assert</name><argument_list>(<argument>test_ok == <literal type="number">1</literal></argument>)</argument_list></macro>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_request_done</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>BASIC_REQUEST_BODY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>, <argument><expr><literal type="string">"bonkers.org:8000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_GET</name></expr></argument>,
<argument><expr><literal type="string">"/blackcoffee"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Couldn't make request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>tt_assert</name><argument_list>(<argument>test_ok == <literal type="number">1</literal></argument>)</argument_list></macro>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>http_connect</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>bev</name> <operator>=</operator> <call><name>bufferevent_socket_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_setcb</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>http_readcb</name></expr></argument>, <argument><expr><name>http_writecb</name></expr></argument>,
<argument><expr><name>http_errorcb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>http_request</name> <operator>=</operator>
<literal type="string">"GET http://manolito.info/funnybunny HTTP/1.1\r\n"</literal>
<literal type="string">"Host: somehost\r\n"</literal>
<literal type="string">"Connection: close\r\n"</literal>
<literal type="string">"\r\n"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_write</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>http_request</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>http_request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>test_ok</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_free</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>evcon</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_connection_free</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>http</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_request_empty_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>req</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evhttp_request_get_response_code</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HTTP_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evhttp_find_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Date"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>evhttp_find_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Content-Length"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_find_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Content-Length"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_buffer</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>http_dispatcher_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>evb</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: called\n"</literal><operator>,</operator> <name>__func__</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><literal type="string">"DISPATCHER_TEST"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_send_reply</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>HTTP_OK</name></expr></argument>, <argument><expr><literal type="string">"Everything is fine"</literal></expr></argument>, <argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_dispatcher_test_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>what</name> <init>= <expr><literal type="string">"DISPATCHER_TEST"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>req</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evhttp_request_get_response_code</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HTTP_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evhttp_find_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Content-Type"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FAILED (content type)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_buffer</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>what</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FAILED (length %lu vs %lu)\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_buffer</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>what</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evbuffer_datacmp</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_buffer</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FAILED (data)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_dispatcher_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><call><name>http_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>evcon</name> <operator>=</operator> <call><name>evhttp_connection_base_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evhttp_connection_set_local_address</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_dispatcher_test_done</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>, <argument><expr><literal type="string">"somehost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_GET</name></expr></argument>, <argument><expr><literal type="string">"/?arg=val"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Couldn't make request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>evcon</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_connection_free</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>http</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function_decl><type><name>void</name></type> <name>http_postrequest_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POST_DATA</name></cpp:macro> <cpp:value>"Okay. Not really printf"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_post_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><call><name>http_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>evcon</name> <operator>=</operator> <call><name>evhttp_connection_base_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_postrequest_done</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>, <argument><expr><literal type="string">"somehost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_buffer</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>POST_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_POST</name></expr></argument>, <argument><expr><literal type="string">"/postit"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Couldn't make request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>test_ok</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_postrequest_done</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>, <argument><expr><literal type="string">"somehost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Expect"</literal></expr></argument>, <argument><expr><literal type="string">"100-continue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_buffer</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>POST_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_POST</name></expr></argument>, <argument><expr><literal type="string">"/postit"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Couldn't make request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>test_ok</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_connection_free</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>http_post_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>evb</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: called\n"</literal><operator>,</operator> <name>__func__</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>evhttp_request_get_command</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EVHTTP_REQ_POST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"FAILED (post type)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_buffer</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>POST_DATA</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"FAILED (length: %lu vs %lu)\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>evbuffer_get_length</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_buffer</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>POST_DATA</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evbuffer_datacmp</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_buffer</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>POST_DATA</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"FAILED (data)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"Got :%s\n"</literal></expr></argument>, <argument><expr><call><name>evbuffer_pullup</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_buffer</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"Want:%s\n"</literal></expr></argument>, <argument><expr><name>POST_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>evb</name> <operator>=</operator> <call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><name>BASIC_REQUEST_BODY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_send_reply</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>HTTP_OK</name></expr></argument>, <argument><expr><literal type="string">"Everything is fine"</literal></expr></argument>, <argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>http_postrequest_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>what</name> <init>= <expr><name>BASIC_REQUEST_BODY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>req</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FAILED (timeout)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evhttp_request_get_response_code</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HTTP_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FAILED (response code)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evhttp_find_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Content-Type"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FAILED (content type)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_buffer</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>what</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FAILED (length %lu vs %lu)\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_buffer</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>what</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evbuffer_datacmp</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_buffer</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FAILED (data)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function_decl><type><name>void</name></type> <name>http_putrequest_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_DATA</name></cpp:macro> <cpp:value>"Hi, I'm some PUT data"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_put_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><call><name>http_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>evcon</name> <operator>=</operator> <call><name>evhttp_connection_base_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_putrequest_done</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>, <argument><expr><literal type="string">"someotherhost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_buffer</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PUT_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_PUT</name></expr></argument>, <argument><expr><literal type="string">"/putit"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Couldn't make request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_connection_free</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>test_ok</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>end</name>:</label>
<empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>http_put_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>evb</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s: called\n"</literal><operator>,</operator> <name>__func__</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>evhttp_request_get_command</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EVHTTP_REQ_PUT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"FAILED (put type)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_buffer</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>PUT_DATA</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"FAILED (length: %lu vs %lu)\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_buffer</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>PUT_DATA</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evbuffer_datacmp</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_buffer</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PUT_DATA</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"FAILED (data)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"Got :%s\n"</literal></expr></argument>, <argument><expr><call><name>evbuffer_pullup</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_buffer</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"Want:%s\n"</literal></expr></argument>, <argument><expr><name>PUT_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>evb</name> <operator>=</operator> <call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><literal type="string">"That ain't funny"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_send_reply</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>HTTP_OK</name></expr></argument>, <argument><expr><literal type="string">"Everything is great"</literal></expr></argument>, <argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>http_putrequest_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>what</name> <init>= <expr><literal type="string">"That ain't funny"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>req</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FAILED (timeout)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evhttp_request_get_response_code</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HTTP_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FAILED (response code)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evhttp_find_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Content-Type"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FAILED (content type)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_buffer</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>what</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FAILED (length %lu vs %lu)\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_buffer</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>what</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>evbuffer_datacmp</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_buffer</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FAILED (data)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_failure_readcb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>what</name> <init>= <expr><literal type="string">"400 Bad Request"</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evbuffer_contains</name><argument_list>(<argument><expr><call><name>bufferevent_get_input</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_disable</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_failure_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>http_request</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><call><name>http_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>http_connect</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&gt;=</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>bev</name> <operator>=</operator> <call><name>bufferevent_socket_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_setcb</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>http_failure_readcb</name></expr></argument>, <argument><expr><name>http_writecb</name></expr></argument>,
<argument><expr><name>http_errorcb</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>http_request</name> <operator>=</operator> <literal type="string">"illegal request\r\n"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_write</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>http_request</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>http_request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_free</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>test_ok</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>close_detect_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evhttp_request_get_response_code</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>HTTP_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>evutil_timerclear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">150000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>close_detect_launch</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><call><name>evhttp_connection_get_base</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>

<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>close_detect_done</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>, <argument><expr><literal type="string">"somehost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_GET</name></expr></argument>, <argument><expr><literal type="string">"/test"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_fail_msg</name><argument_list>(<argument><expr><literal type="string">"Couldn't make request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>close_detect_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><call><name>evhttp_connection_get_base</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>req</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>evhttp_request_get_response_code</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HTTP_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>evutil_timerclear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">600000</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>event_base_once</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>EV_TIMEOUT</name></expr></argument>, <argument><expr><name>close_detect_launch</name></expr></argument>, <argument><expr><name>evcon</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>end</name>:</label>
<empty_stmt>;</empty_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_close_detection_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>with_delay</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name></type> <name>sec_tenth</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">100000</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><call><name>http_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evhttp_set_timeout_tv</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sec_tenth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>evcon</name> <operator>=</operator> <call><name>evhttp_connection_base_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_connection_set_timeout_tv</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sec_tenth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>delayed_client</name> <operator>=</operator> <name>evcon</name></expr>;</expr_stmt>






<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>close_detect_cb</name></expr></argument>, <argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>, <argument><expr><literal type="string">"somehost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>,
<argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_GET</name></expr></argument>, <argument><expr><ternary><condition><expr><name>with_delay</name></expr> ?</condition><then> <expr><literal type="string">"/largedelay"</literal></expr> </then><else>: <expr><literal type="string">"/test"</literal></expr></else></ternary></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"couldn't make request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>connections</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>evcon</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_connection_free</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>http</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_close_detection_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>http_close_detection_</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_close_detection_delay_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>http_close_detection_</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_highport_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>myhttp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">50</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>myhttp</name> <operator>=</operator> <call><name>evhttp_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evhttp_bind_socket</name><argument_list>(<argument><expr><name>myhttp</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><literal type="number">65535</literal> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>myhttp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>myhttp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>tt_fail_msg</name><argument_list>(<argument><expr><literal type="string">"Couldn't get a high port"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_bad_header_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evkeyvalq</name></name></type> <name>headers</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>, <argument><expr><literal type="string">"One"</literal></expr></argument>, <argument><expr><literal type="string">"Two"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>, <argument><expr><literal type="string">"One"</literal></expr></argument>, <argument><expr><literal type="string">"Two\r\n Three"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>, <argument><expr><literal type="string">"One\r"</literal></expr></argument>, <argument><expr><literal type="string">"Two"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>, <argument><expr><literal type="string">"One\n"</literal></expr></argument>, <argument><expr><literal type="string">"Two"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>, <argument><expr><literal type="string">"One"</literal></expr></argument>, <argument><expr><literal type="string">"Two\r"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>, <argument><expr><literal type="string">"One"</literal></expr></argument>, <argument><expr><literal type="string">"Two\n"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_clear_headers</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>validate_header</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evkeyvalq</name></name><modifier>*</modifier></type> <name>headers</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>real_val</name> <init>= <expr><call><name>evhttp_find_header</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>real_val</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>real_val</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>end</name>:</label>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_parse_query_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evkeyvalq</name></name></type> <name>headers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evhttp_parse_query</name><argument_list>(<argument><expr><literal type="string">"http://www.test.com/?q=test"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>validate_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>, <argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_clear_headers</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evhttp_parse_query</name><argument_list>(<argument><expr><literal type="string">"http://www.test.com/?q=test&amp;foo=bar"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>validate_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>, <argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>validate_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_clear_headers</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evhttp_parse_query</name><argument_list>(<argument><expr><literal type="string">"http://www.test.com/?q=test+foo"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>validate_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>, <argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"test foo"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_clear_headers</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evhttp_parse_query</name><argument_list>(<argument><expr><literal type="string">"http://www.test.com/?q=test%0Afoo"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>validate_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>, <argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"test\nfoo"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_clear_headers</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evhttp_parse_query</name><argument_list>(<argument><expr><literal type="string">"http://www.test.com/?q=test%0Dfoo"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>validate_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>, <argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"test\rfoo"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_clear_headers</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evhttp_parse_query</name><argument_list>(<argument><expr><literal type="string">"http://www.test.com/?q=test&amp;&amp;q2"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_clear_headers</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evhttp_parse_query</name><argument_list>(<argument><expr><literal type="string">"http://www.test.com/?q=test+this"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>validate_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>, <argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"test this"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_clear_headers</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evhttp_parse_query</name><argument_list>(<argument><expr><literal type="string">"http://www.test.com/?q=test&amp;q2=foo"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>validate_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>, <argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>validate_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>, <argument><expr><literal type="string">"q2"</literal></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_clear_headers</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evhttp_parse_query</name><argument_list>(<argument><expr><literal type="string">"http://www.test.com/?q&amp;q2=foo"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_clear_headers</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evhttp_parse_query</name><argument_list>(<argument><expr><literal type="string">"http://www.test.com/?q=foo&amp;q2"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_clear_headers</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evhttp_parse_query</name><argument_list>(<argument><expr><literal type="string">"http://www.test.com/?q=foo&amp;q2&amp;q3=x"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_clear_headers</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evhttp_parse_query</name><argument_list>(<argument><expr><literal type="string">"http://www.test.com/?q=&amp;q2=&amp;q3="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>validate_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>, <argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>validate_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>, <argument><expr><literal type="string">"q2"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>validate_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>, <argument><expr><literal type="string">"q3"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_clear_headers</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>evhttp_clear_headers</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_parse_uri_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nonconform</name> <init>= <expr><operator>(</operator><name>ptr</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>parse_flags</name> <init>=
<expr><ternary><condition><expr><name>nonconform</name></expr> ?</condition><then> <expr><name>EVHTTP_URI_NONCONFORMANT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_uri</name></name> <modifier>*</modifier></type><name>uri</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>url_tmp</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>URI_PARSE</name><parameter_list>(<parameter><type><name>uri</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>evhttp_uri_parse_with_flags((uri), parse_flags)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TT_URI</name><parameter_list>(<parameter><type><name>want</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { char *ret = evhttp_uri_join(uri, url_tmp, sizeof(url_tmp)); tt_want(ret != NULL); tt_want(ret == url_tmp); if (strcmp(ret,want) != 0) TT_FAIL(("\"%s\" != \"%s\"",ret,want)); } while(0)</cpp:value></cpp:define>







<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_join</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_join</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>url_tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_join</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>url_tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>url_tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAD</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (URI_PARSE(s) != NULL) TT_FAIL(("Expected error parsing \"%s\"",s)); } while(0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NCF</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { uri = URI_PARSE(s); if (uri != NULL &amp;&amp; !nonconform) { TT_FAIL(("Expected error parsing \"%s\"",s)); } else if (uri == NULL &amp;&amp; nonconform) { TT_FAIL(("Couldn't parse nonconformant URI \"%s\"", s)); } if (uri) { tt_want(evhttp_uri_join(uri, url_tmp, sizeof(url_tmp))); evhttp_uri_free(uri); } } while(0)</cpp:value></cpp:define>














<expr_stmt><expr><call><name>NCF</name><argument_list>(<argument><expr><literal type="string">"http://www.test.com/ why hello"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NCF</name><argument_list>(<argument><expr><literal type="string">"http://www.test.com/why-hello\x01"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NCF</name><argument_list>(<argument><expr><literal type="string">"http://www.test.com/why-hello?\x01"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NCF</name><argument_list>(<argument><expr><literal type="string">"http://www.test.com/why-hello#\x01"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BAD</name><argument_list>(<argument><expr><literal type="string">"http://www.\x01.test.com/why-hello"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BAD</name><argument_list>(<argument><expr><literal type="string">"http://www.%7test.com/why-hello"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NCF</name><argument_list>(<argument><expr><literal type="string">"http://www.test.com/why-hell%7o"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BAD</name><argument_list>(<argument><expr><literal type="string">"h%3ttp://www.test.com/why-hello"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NCF</name><argument_list>(<argument><expr><literal type="string">"http://www.test.com/why-hello%7"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NCF</name><argument_list>(<argument><expr><literal type="string">"http://www.test.com/why-hell%7o"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NCF</name><argument_list>(<argument><expr><literal type="string">"http://www.test.com/foo?ba%r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NCF</name><argument_list>(<argument><expr><literal type="string">"http://www.test.com/foo#ba%r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BAD</name><argument_list>(<argument><expr><literal type="string">"99:99/foo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BAD</name><argument_list>(<argument><expr><literal type="string">"http://www.test.com:999x/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BAD</name><argument_list>(<argument><expr><literal type="string">"http://www.test.com:x/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BAD</name><argument_list>(<argument><expr><literal type="string">"http://[hello-there]/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BAD</name><argument_list>(<argument><expr><literal type="string">"http://[::1]]/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BAD</name><argument_list>(<argument><expr><literal type="string">"http://[::1/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BAD</name><argument_list>(<argument><expr><literal type="string">"http://[foob/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BAD</name><argument_list>(<argument><expr><literal type="string">"http://[/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BAD</name><argument_list>(<argument><expr><literal type="string">"http://[ffff:ffff:ffff:ffff:Ffff:ffff:ffff:"</literal>
<literal type="string">"ffff:ffff:ffff:ffff:ffff:ffff:ffff]/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BAD</name><argument_list>(<argument><expr><literal type="string">"http://[vX.foo]/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BAD</name><argument_list>(<argument><expr><literal type="string">"http://[vX.foo]/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BAD</name><argument_list>(<argument><expr><literal type="string">"http://[v.foo]/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BAD</name><argument_list>(<argument><expr><literal type="string">"http://[v5.fo%o]/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BAD</name><argument_list>(<argument><expr><literal type="string">"http://[v5X]/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BAD</name><argument_list>(<argument><expr><literal type="string">"http://[v5]/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BAD</name><argument_list>(<argument><expr><literal type="string">"http://[]/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BAD</name><argument_list>(<argument><expr><literal type="string">"http://f\x01red@www.example.com/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BAD</name><argument_list>(<argument><expr><literal type="string">"http://f%0red@www.example.com/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BAD</name><argument_list>(<argument><expr><literal type="string">"http://www.example.com:9999999999999999999999999999999999999/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BAD</name><argument_list>(<argument><expr><literal type="string">"http://www.example.com:hihi/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BAD</name><argument_list>(<argument><expr><literal type="string">"://www.example.com/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name>evhttp_uri_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>==</operator><call><name>evhttp_uri_set_host</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="string">"www.example.com"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_join</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>url_tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>url_tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_join</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>url_tmp</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>==</operator><call><name>evhttp_uri_set_path</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="string">"hi_mom"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_join</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>url_tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>url_tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_join</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>url_tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>==</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_join</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>url_tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>==</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_uri_free</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name>URI_PARSE</name><argument_list>(<argument><expr><literal type="string">"mailto:foo@bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><name>uri</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_host</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_userinfo</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_port</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_scheme</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"mailto"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_path</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"foo@bar"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_query</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_fragment</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TT_URI</name><argument_list>(<argument><expr><literal type="string">"mailto:foo@bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_uri_free</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name>evhttp_uri_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>evhttp_uri_set_scheme</name><argument_list>(<argument><expr><name>uri</name></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>evhttp_uri_set_scheme</name><argument_list>(<argument><expr><name>uri</name></expr></argument>,<argument><expr><literal type="string">"33"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>evhttp_uri_set_scheme</name><argument_list>(<argument><expr><name>uri</name></expr></argument>,<argument><expr><literal type="string">"hi!"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>evhttp_uri_set_userinfo</name><argument_list>(<argument><expr><name>uri</name></expr></argument>,<argument><expr><literal type="string">"hello@"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>evhttp_uri_set_host</name><argument_list>(<argument><expr><name>uri</name></expr></argument>,<argument><expr><literal type="string">"[1.2.3.4]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>evhttp_uri_set_host</name><argument_list>(<argument><expr><name>uri</name></expr></argument>,<argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>evhttp_uri_set_host</name><argument_list>(<argument><expr><name>uri</name></expr></argument>,<argument><expr><literal type="string">"www.[foo].com"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>evhttp_uri_set_port</name><argument_list>(<argument><expr><name>uri</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>evhttp_uri_set_path</name><argument_list>(<argument><expr><name>uri</name></expr></argument>,<argument><expr><literal type="string">"hello?world"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>evhttp_uri_set_query</name><argument_list>(<argument><expr><name>uri</name></expr></argument>,<argument><expr><literal type="string">"hello#world"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>evhttp_uri_set_fragment</name><argument_list>(<argument><expr><name>uri</name></expr></argument>,<argument><expr><literal type="string">"hello#world"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>evhttp_uri_set_scheme</name><argument_list>(<argument><expr><name>uri</name></expr></argument>,<argument><expr><literal type="string">"http"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>evhttp_uri_set_scheme</name><argument_list>(<argument><expr><name>uri</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>evhttp_uri_set_userinfo</name><argument_list>(<argument><expr><name>uri</name></expr></argument>,<argument><expr><literal type="string">"username:pass"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>evhttp_uri_set_userinfo</name><argument_list>(<argument><expr><name>uri</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>evhttp_uri_set_host</name><argument_list>(<argument><expr><name>uri</name></expr></argument>,<argument><expr><literal type="string">"www.example.com"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>evhttp_uri_set_host</name><argument_list>(<argument><expr><name>uri</name></expr></argument>,<argument><expr><literal type="string">"1.2.3.4"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>evhttp_uri_set_host</name><argument_list>(<argument><expr><name>uri</name></expr></argument>,<argument><expr><literal type="string">"[1:2:3:4::]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>evhttp_uri_set_host</name><argument_list>(<argument><expr><name>uri</name></expr></argument>,<argument><expr><literal type="string">"[v7.wobblewobble]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>evhttp_uri_set_host</name><argument_list>(<argument><expr><name>uri</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>evhttp_uri_set_host</name><argument_list>(<argument><expr><name>uri</name></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>evhttp_uri_set_port</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>evhttp_uri_set_port</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>evhttp_uri_set_port</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>evhttp_uri_set_path</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>evhttp_uri_set_path</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="string">"/documents/public/index.html"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>evhttp_uri_set_path</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>evhttp_uri_set_query</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="string">"key=val&amp;key2=val2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>evhttp_uri_set_query</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="string">"keyvalblarg"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>evhttp_uri_set_query</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>evhttp_uri_set_query</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>evhttp_uri_set_fragment</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>evhttp_uri_set_fragment</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="string">"here?i?am"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>evhttp_uri_set_fragment</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_uri_free</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name>URI_PARSE</name><argument_list>(<argument><expr><literal type="string">"http://www.test.com/?q=t%33est"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_scheme</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_host</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"www.test.com"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_path</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_query</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"q=t%33est"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_userinfo</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_port</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_fragment</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TT_URI</name><argument_list>(<argument><expr><literal type="string">"http://www.test.com/?q=t%33est"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_uri_free</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name>URI_PARSE</name><argument_list>(<argument><expr><literal type="string">"http://%77ww.test.com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_scheme</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_host</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%77ww.test.com"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_path</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_query</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_userinfo</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_port</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_fragment</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TT_URI</name><argument_list>(<argument><expr><literal type="string">"http://%77ww.test.com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_uri_free</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name>URI_PARSE</name><argument_list>(<argument><expr><literal type="string">"http://www.test.com?q=test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_scheme</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_host</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"www.test.com"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_path</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_query</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"q=test"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_userinfo</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_port</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_fragment</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TT_URI</name><argument_list>(<argument><expr><literal type="string">"http://www.test.com?q=test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_uri_free</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name>URI_PARSE</name><argument_list>(<argument><expr><literal type="string">"http://www.test.com#fragment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_scheme</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_host</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"www.test.com"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_path</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_query</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_userinfo</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_port</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want_str_op</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_fragment</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="string">"fragment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TT_URI</name><argument_list>(<argument><expr><literal type="string">"http://www.test.com#fragment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_uri_free</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name>URI_PARSE</name><argument_list>(<argument><expr><literal type="string">"http://8000/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_scheme</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_host</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"8000"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_path</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_query</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_userinfo</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_port</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_fragment</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TT_URI</name><argument_list>(<argument><expr><literal type="string">"http://8000/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_uri_free</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name>URI_PARSE</name><argument_list>(<argument><expr><literal type="string">"http://:8000/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_scheme</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_host</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_path</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_query</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_userinfo</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_port</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">8000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_fragment</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TT_URI</name><argument_list>(<argument><expr><literal type="string">"http://:8000/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_uri_free</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name>URI_PARSE</name><argument_list>(<argument><expr><literal type="string">"http://www.test.com:/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_scheme</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_host</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"www.test.com"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want_str_op</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_path</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_query</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_userinfo</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_port</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_fragment</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TT_URI</name><argument_list>(<argument><expr><literal type="string">"http://www.test.com/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_uri_free</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name>URI_PARSE</name><argument_list>(<argument><expr><literal type="string">"http://www.test.com:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_scheme</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_host</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"www.test.com"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_path</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_query</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_userinfo</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_port</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_fragment</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TT_URI</name><argument_list>(<argument><expr><literal type="string">"http://www.test.com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_uri_free</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name>URI_PARSE</name><argument_list>(<argument><expr><literal type="string">"ftp://www.test.com/?q=test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_scheme</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ftp"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_host</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"www.test.com"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_path</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_query</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"q=test"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_userinfo</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_port</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_fragment</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TT_URI</name><argument_list>(<argument><expr><literal type="string">"ftp://www.test.com/?q=test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_uri_free</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name>URI_PARSE</name><argument_list>(<argument><expr><literal type="string">"ftp://[::1]:999/?q=test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_scheme</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ftp"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_host</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"[::1]"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_path</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_query</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"q=test"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_userinfo</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_port</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">999</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_fragment</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TT_URI</name><argument_list>(<argument><expr><literal type="string">"ftp://[::1]:999/?q=test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_uri_free</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name>URI_PARSE</name><argument_list>(<argument><expr><literal type="string">"ftp://[ff00::127.0.0.1]/?q=test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_scheme</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ftp"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_host</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"[ff00::127.0.0.1]"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_path</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_query</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"q=test"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_userinfo</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_port</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_fragment</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TT_URI</name><argument_list>(<argument><expr><literal type="string">"ftp://[ff00::127.0.0.1]/?q=test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_uri_free</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name>URI_PARSE</name><argument_list>(<argument><expr><literal type="string">"ftp://[v99.not_(any:time)_soon]/?q=test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_scheme</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ftp"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_host</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"[v99.not_(any:time)_soon]"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_path</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_query</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"q=test"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_userinfo</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_port</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_fragment</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TT_URI</name><argument_list>(<argument><expr><literal type="string">"ftp://[v99.not_(any:time)_soon]/?q=test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_uri_free</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name>URI_PARSE</name><argument_list>(<argument><expr><literal type="string">"scheme://user:pass@foo.com:42/?q=test&amp;s=some+thing#fragment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_scheme</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"scheme"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_userinfo</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"user:pass"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_host</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"foo.com"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_port</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_path</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_query</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"q=test&amp;s=some+thing"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_fragment</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"fragment"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TT_URI</name><argument_list>(<argument><expr><literal type="string">"scheme://user:pass@foo.com:42/?q=test&amp;s=some+thing#fragment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_uri_free</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name>URI_PARSE</name><argument_list>(<argument><expr><literal type="string">"scheme://user@foo.com/#fragment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_scheme</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"scheme"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_userinfo</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"user"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_host</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"foo.com"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_port</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_path</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_query</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_fragment</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"fragment"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TT_URI</name><argument_list>(<argument><expr><literal type="string">"scheme://user@foo.com/#fragment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_uri_free</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name>URI_PARSE</name><argument_list>(<argument><expr><literal type="string">"scheme://%75ser@foo.com/#frag@ment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_scheme</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"scheme"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_userinfo</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%75ser"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_host</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"foo.com"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_port</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_path</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_query</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_fragment</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"frag@ment"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TT_URI</name><argument_list>(<argument><expr><literal type="string">"scheme://%75ser@foo.com/#frag@ment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_uri_free</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name>URI_PARSE</name><argument_list>(<argument><expr><literal type="string">"file:///some/path/to/the/file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_scheme</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_userinfo</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_host</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_port</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_path</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/some/path/to/the/file"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_query</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_fragment</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TT_URI</name><argument_list>(<argument><expr><literal type="string">"file:///some/path/to/the/file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_uri_free</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name>URI_PARSE</name><argument_list>(<argument><expr><literal type="string">"///some/path/to/the-file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><name>uri</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_scheme</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_userinfo</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_host</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_port</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_path</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/some/path/to/the-file"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_query</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_fragment</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TT_URI</name><argument_list>(<argument><expr><literal type="string">"///some/path/to/the-file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_uri_free</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name>URI_PARSE</name><argument_list>(<argument><expr><literal type="string">"/s:ome/path/to/the-file?q=99#fred"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><name>uri</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_scheme</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_userinfo</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_host</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_port</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_path</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/s:ome/path/to/the-file"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_query</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"q=99"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_fragment</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"fred"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TT_URI</name><argument_list>(<argument><expr><literal type="string">"/s:ome/path/to/the-file?q=99#fred"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_uri_free</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name>URI_PARSE</name><argument_list>(<argument><expr><literal type="string">"relative/path/with/co:lon"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><name>uri</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_scheme</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_userinfo</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_host</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_port</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_path</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"relative/path/with/co:lon"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_query</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_fragment</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TT_URI</name><argument_list>(<argument><expr><literal type="string">"relative/path/with/co:lon"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_uri_free</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name>URI_PARSE</name><argument_list>(<argument><expr><literal type="string">"bob?q=99&amp;q2=q?33#fr?ed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><name>uri</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_scheme</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_userinfo</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_host</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_port</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_path</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"bob"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_query</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"q=99&amp;q2=q?33"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_fragment</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"fr?ed"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TT_URI</name><argument_list>(<argument><expr><literal type="string">"bob?q=99&amp;q2=q?33#fr?ed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_uri_free</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name>URI_PARSE</name><argument_list>(<argument><expr><literal type="string">"#fr?ed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><name>uri</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_scheme</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_userinfo</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_host</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_port</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_path</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_query</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>evhttp_uri_get_fragment</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"fr?ed"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TT_URI</name><argument_list>(<argument><expr><literal type="string">"#fr?ed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_uri_free</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>URI_PARSE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TT_URI</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BAD</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_uriencode_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name><init>=<expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s2</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bytes_decoded</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC</name><parameter_list>(<parameter><type><name>from</name></type></parameter>,<parameter><type><name>want</name></type></parameter>,<parameter><type><name>plus</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { s = evhttp_uriencode((from), -1, (plus)); tt_assert(s); tt_str_op(s,==,(want)); sz = -1; s2 = evhttp_uridecode((s), (plus), &amp;sz); tt_assert(s2); tt_str_op(s2,==,(from)); tt_int_op(sz,==,strlen(from)); free(s); free(s2); s = s2 = NULL; } while (0)</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEC</name><parameter_list>(<parameter><type><name>from</name></type></parameter>,<parameter><type><name>want</name></type></parameter>,<parameter><type><name>dp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { s = evhttp_uridecode((from),(dp),&amp;sz); tt_assert(s); tt_str_op(s,==,(want)); tt_int_op(sz,==,strlen(want)); free(s); s = NULL; } while (0)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OLD_DEC</name><parameter_list>(<parameter><type><name>from</name></type></parameter>,<parameter><type><name>want</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { s = evhttp_decode_uri((from)); tt_assert(s); tt_str_op(s,==,(want)); free(s); s = NULL; } while (0)</cpp:value></cpp:define>








<expr_stmt><expr><call><name>ENC</name><argument_list>(<argument><expr><literal type="string">"Hello"</literal></expr></argument>, <argument><expr><literal type="string">"Hello"</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENC</name><argument_list>(<argument><expr><literal type="string">"99"</literal></expr></argument>, <argument><expr><literal type="string">"99"</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENC</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENC</name><argument_list>(
<argument><expr><literal type="string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789-.~_"</literal></expr></argument>,
<argument><expr><literal type="string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789-.~_"</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENC</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="string">"%20"</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENC</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENC</name><argument_list>(<argument><expr><literal type="string">"\xff\xf0\xe0"</literal></expr></argument>, <argument><expr><literal type="string">"%FF%F0%E0"</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENC</name><argument_list>(<argument><expr><literal type="string">"\x01\x19"</literal></expr></argument>, <argument><expr><literal type="string">"%01%19"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENC</name><argument_list>(<argument><expr><literal type="string">"http://www.ietf.org/rfc/rfc3986.txt"</literal></expr></argument>,
<argument><expr><literal type="string">"http%3A%2F%2Fwww.ietf.org%2Frfc%2Frfc3986.txt"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENC</name><argument_list>(<argument><expr><literal type="string">"1+2=3"</literal></expr></argument>, <argument><expr><literal type="string">"1%2B2%3D3"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENC</name><argument_list>(<argument><expr><literal type="string">"1+2=3"</literal></expr></argument>, <argument><expr><literal type="string">"1%2B2%3D3"</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>evhttp_uriencode</name><argument_list>(<argument><expr><literal type="string">"hello\0world"</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_str_op</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><operator>==</operator></expr></argument>,<argument><expr><literal type="string">"hello%00world"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">6</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes_decoded</name> <operator>=</operator> <call><name>evhttp_decode_uri_internal</name><argument_list>(<argument><expr><literal type="string">"hello%20%20"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>bytes_decoded</name></expr></argument>,<argument><expr><operator>==</operator></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_str_op</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><operator>==</operator></expr></argument>,<argument><expr><literal type="string">"hello%"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>



<expr_stmt><expr><call><name>DEC</name><argument_list>(<argument><expr><literal type="string">"%%xhello th+ere \xff"</literal></expr></argument>,
<argument><expr><literal type="string">"%%xhello th+ere \xff"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEC</name><argument_list>(<argument><expr><literal type="string">"plus+should%20work+"</literal></expr></argument>, <argument><expr><literal type="string">"plus should work "</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEC</name><argument_list>(<argument><expr><literal type="string">"%f0%a0%b0"</literal></expr></argument>, <argument><expr><literal type="string">"\xf0\xa0\xb0"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>sz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>evhttp_uridecode</name><argument_list>(<argument><expr><literal type="string">"%00%00x%00%00"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>sz</name></expr></argument>,<argument><expr><operator>==</operator></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"\0\0x\0\0"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><name>sz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>evhttp_uridecode</name><argument_list>(<argument><expr><literal type="string">"%00%00x%00%00"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"\0\0x\0\0"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>



<expr_stmt><expr><call><name>OLD_DEC</name><argument_list>(<argument><expr><literal type="string">"http://example.com/normal+path/?key=val+with+spaces"</literal></expr></argument>,
<argument><expr><literal type="string">"http://example.com/normal+path/?key=val with spaces"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>s2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ENC</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DEC</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OLD_DEC</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_base_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>http_request</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name></decl>;</decl_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>event_base_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>http</name> <operator>=</operator> <call><name>http_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>http_connect</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&gt;=</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>bev</name> <operator>=</operator> <call><name>bufferevent_socket_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_setcb</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>http_readcb</name></expr></argument>, <argument><expr><name>http_writecb</name></expr></argument>,
<argument><expr><name>http_errorcb</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_base_set</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>http_request</name> <operator>=</operator>
<literal type="string">"GET /test HTTP/1.1\r\n"</literal>
<literal type="string">"Host: somehost\r\n"</literal>
<literal type="string">"Connection: close\r\n"</literal>
<literal type="string">"\r\n"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_write</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>http_request</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>http_request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_free</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>test_ok</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>base</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_base_free</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_incomplete_readcb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>exit_base</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_incomplete_errorcb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>what</name> <operator>&amp;</operator> <name>BEV_EVENT_CONNECTED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>what</name> <operator>==</operator> <operator>(</operator><name>BEV_EVENT_READING</name><operator>|</operator><name>BEV_EVENT_EOF</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>test_ok</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>exit_base</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_incomplete_writecb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>fd</name> <init>= <expr><operator>*</operator><operator>(</operator><name>evutil_socket_t</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>shutdown</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>EVUTIL_SHUT_WR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><call><name>bufferevent_get_output</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bufferevent_enable</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>test_ok</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_incomplete_test_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use_timeout</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ssl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>http_request</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv_start</name></decl>, <decl><type ref="prev"/><name>tv_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><call><name>http_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>ssl</name></expr> ?</condition><then> <expr><name>HTTP_BIND_SSL</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>exit_base</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_set_timeout</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>http_connect</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&gt;=</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>bev</name> <operator>=</operator> <call><name>create_bev</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_setcb</name><argument_list>(<argument><expr><name>bev</name></expr></argument>,
<argument><expr><name>http_incomplete_readcb</name></expr></argument>, <argument><expr><name>http_incomplete_writecb</name></expr></argument>,
<argument><expr><name>http_incomplete_errorcb</name></expr></argument>, <argument><expr><ternary><condition><expr><name>use_timeout</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>&amp;</operator><name>fd</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>http_request</name> <operator>=</operator>
<literal type="string">"GET /test HTTP/1.1\r\n"</literal>
<literal type="string">"Host: somehost\r\n"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_write</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>http_request</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>http_request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evutil_gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv_start</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evutil_gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv_end</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_timersub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv_end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_free</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>use_timeout</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_timeout</name> <operator>&amp;&amp;</operator> <name><name>tv_end</name><operator>.</operator><name>tv_sec</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>use_timeout</name> <operator>&amp;&amp;</operator> <name><name>tv_end</name><operator>.</operator><name>tv_sec</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>test_ok</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>http_incomplete_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name>http_incomplete_test_</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>http_incomplete_timeout_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name>http_incomplete_test_</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_chunked_readcb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_chunked_errorcb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>what</name> <operator>&amp;</operator> <name>BEV_EVENT_CONNECTED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>test_ok</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>what</name> <operator>&amp;</operator> <name>BEV_EVENT_EOF</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>message_read_status</name></name></type> <name>done</name></decl>;</decl_stmt>
<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>done</name> <operator>=</operator> <call><name>evhttp_parse_firstline_</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><call><name>bufferevent_get_input</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>done</name> <operator>!=</operator> <name>ALL_DATA_READ</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>done</name> <operator>=</operator> <call><name>evhttp_parse_headers_</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><call><name>bufferevent_get_input</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>done</name> <operator>!=</operator> <name>ALL_DATA_READ</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>header</name> <operator>=</operator> <call><name>evhttp_find_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Transfer-Encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>header</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="string">"chunked"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>header</name> <operator>=</operator> <call><name>evhttp_find_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>header</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>header</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><call><name>bufferevent_get_input</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_CRLF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>header</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>evbuffer_pullup</name><argument_list>(<argument><expr><call><name>bufferevent_get_input</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"This is funny"</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><call><name>bufferevent_get_input</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">13</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>header</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><call><name>bufferevent_get_input</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_CRLF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>header</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="string">"12"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>evbuffer_pullup</name><argument_list>(<argument><expr><call><name>bufferevent_get_input</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"but not hilarious."</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><call><name>bufferevent_get_input</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">18</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>header</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><call><name>bufferevent_get_input</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_CRLF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>header</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="string">"8"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>evbuffer_pullup</name><argument_list>(<argument><expr><call><name>bufferevent_get_input</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"bwv 1052."</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><call><name>bufferevent_get_input</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>header</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><call><name>bufferevent_get_input</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_CRLF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>header</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>out</name>:</label>
<if_stmt><if>if <condition>(<expr><name>req</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_request_free</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_chunked_writecb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><call><name>bufferevent_get_output</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bufferevent_enable</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>test_ok</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_chunked_request_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evhttp_request_get_response_code</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HTTP_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evhttp_find_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Transfer-Encoding"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_buffer</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">13</literal> <operator>+</operator> <literal type="number">18</literal> <operator>+</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>evbuffer_pullup</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_buffer</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">13</literal> <operator>+</operator> <literal type="number">18</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"This is funnybut not hilarious.bwv 1052"</literal></expr></argument>,
<argument><expr><literal type="number">13</literal> <operator>+</operator> <literal type="number">18</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_chunk_out_test_impl</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ssl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>http_request</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv_start</name></decl>, <decl><type ref="prev"/><name>tv_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><call><name>http_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>ssl</name></expr> ?</condition><then> <expr><name>HTTP_BIND_SSL</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>exit_base</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>http_connect</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>bev</name> <operator>=</operator> <call><name>create_bev</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_setcb</name><argument_list>(<argument><expr><name>bev</name></expr></argument>,
<argument><expr><name>http_chunked_readcb</name></expr></argument>, <argument><expr><name>http_chunked_writecb</name></expr></argument>,
<argument><expr><name>http_chunked_errorcb</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>http_request</name> <operator>=</operator>
<literal type="string">"GET /chunked HTTP/1.1\r\n"</literal>
<literal type="string">"Host: somehost\r\n"</literal>
<literal type="string">"Connection: close\r\n"</literal>
<literal type="string">"\r\n"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_write</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>http_request</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>http_request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evutil_gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv_start</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_free</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evutil_gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv_end</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_timersub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv_end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>tv_end</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><operator>&lt;</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>test_ok</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>bev</name> <operator>=</operator> <call><name>create_bev</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>evcon</name> <operator>=</operator> <call><name>evhttp_connection_base_bufferevent_new</name><argument_list>(
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_chunked_request_done</name></expr></argument>,<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>, <argument><expr><literal type="string">"somehost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>,
<argument><expr><name>EVHTTP_REQ_GET</name></expr></argument>, <argument><expr><literal type="string">"/chunked"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Couldn't make request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>test_ok</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>evcon</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_connection_free</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>http</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>http_chunk_out_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name>http_chunk_out_test_impl</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_stream_out_test_impl</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ssl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><call><name>http_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>ssl</name></expr> ?</condition><then> <expr><name>HTTP_BIND_SSL</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>exit_base</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bev</name> <operator>=</operator> <call><name>create_bev</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>evcon</name> <operator>=</operator> <call><name>evhttp_connection_base_bufferevent_new</name><argument_list>(
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_request_done</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="string">"This is funnybut not hilarious.bwv 1052"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>, <argument><expr><literal type="string">"somehost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_GET</name></expr></argument>, <argument><expr><literal type="string">"/streamed"</literal></expr></argument>)</argument_list></call>
<operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Couldn't make request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>evcon</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_connection_free</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>http</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>http_stream_out_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name>http_stream_out_test_impl</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_stream_in_chunk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>reply</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evhttp_request_get_response_code</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HTTP_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>evbuffer_add_buffer</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><call><name>evhttp_request_get_input_buffer</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_stream_in_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_buffer</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>exit_base</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_stream_in_test_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>url</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>expected_len</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>expected</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>reply</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><call><name>http_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>exit_base</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>evcon</name> <operator>=</operator> <call><name>evhttp_connection_base_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_stream_in_done</name></expr></argument>, <argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_request_set_chunked_cb</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>http_stream_in_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_GET</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Couldn't make request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>expected_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TT_DIE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"reply length %lu; expected %lu; FAILED (%s)\n"</literal><operator>,</operator>
<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call><operator>,</operator>
<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>expected_len</name><operator>,</operator>
<operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>evbuffer_pullup</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>evbuffer_pullup</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>expected</name></expr></argument>, <argument><expr><name>expected_len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Memory mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>reply</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>evcon</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_connection_free</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>http</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_stream_in_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>http_stream_in_test_</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"/chunked"</literal></expr></argument>, <argument><expr><literal type="number">13</literal> <operator>+</operator> <literal type="number">18</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>,
<argument><expr><literal type="string">"This is funnybut not hilarious.bwv 1052"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>http_stream_in_test_</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"/test"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>BASIC_REQUEST_BODY</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>BASIC_REQUEST_BODY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_stream_in_cancel_chunk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evhttp_request_get_response_code</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>HTTP_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>evhttp_cancel_request</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_stream_in_cancel_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>tt_fail_msg</name><argument_list>(<argument><expr><literal type="string">"In cancel done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_stream_in_cancel_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><call><name>http_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>evcon</name> <operator>=</operator> <call><name>evhttp_connection_base_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_stream_in_cancel_done</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_request_set_chunked_cb</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>http_stream_in_cancel_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_GET</name></expr></argument>, <argument><expr><literal type="string">"/chunked"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Couldn't make request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<label><name>end</name>:</label>
<expr_stmt><expr><call><name>evhttp_connection_free</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_connection_fail_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><call><name>evhttp_connection_get_base</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>





<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_connection_free</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_connection_fail_test_impl</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ssl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><call><name>http_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>ssl</name></expr> ?</condition><then> <expr><name>HTTP_BIND_SSL</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>exit_base</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bev</name> <operator>=</operator> <call><name>create_bev</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>evcon</name> <operator>=</operator> <call><name>evhttp_connection_base_bufferevent_new</name><argument_list>(
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>, <argument><expr><literal type="string">"239.10.20.30"</literal></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_connection_fail_done</name></expr></argument>, <argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_GET</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Couldn't make request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>test_ok</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<empty_stmt>;</empty_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>http_connection_fail_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name>http_connection_fail_test_impl</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_connection_retry_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evhttp_request_get_response_code</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>!=</operator></expr></argument>, <argument><expr><name>HTTP_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evhttp_find_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Content-Type"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"(content type)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tt_uint_op</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><call><name>evhttp_request_get_input_buffer</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<label><name>end</name>:</label>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>arg</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>http_server</name>
<block>{
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ssl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>http_make_web_server_base</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_make_web_server</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>http_server</name></name> <modifier>*</modifier></type><name>hs</name> <init>= <expr><operator>(</operator>struct <name>http_server</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>hs</name><operator>-&gt;</operator><name>http</name></name> <operator>=</operator> <call><name>http_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>http_make_web_server_base</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>hs</name><operator>-&gt;</operator><name>ssl</name></name></expr> ?</condition><then> <expr><name>HTTP_BIND_SSL</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_simple_test_impl</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ssl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dirty</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>http_server</name></name></type> <name>hs</name> <init>= <expr><block>{ <expr><operator>.</operator><name>port</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>ssl</name> <operator>=</operator> <name>ssl</name></expr>, }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><call><name>http_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><operator>.</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>ssl</name></expr> ?</condition><then> <expr><name>HTTP_BIND_SSL</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>exit_base</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bev</name> <operator>=</operator> <call><name>create_bev</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>bufferevent_openssl_set_allow_dirty_shutdown</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>dirty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>evcon</name> <operator>=</operator> <call><name>evhttp_connection_base_bufferevent_new</name><argument_list>(
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name><name>hs</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_connection_set_local_address</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_request_done</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>BASIC_REQUEST_BODY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_GET</name></expr></argument>, <argument><expr><literal type="string">"/test"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Couldn't make request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>test_ok</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>evcon</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_connection_free</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>http</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>http_simple_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name>http_simple_test_impl</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_connection_retry_test_basic</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>dns_base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ssl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>, <decl><type ref="prev"/><name>tv_start</name></decl>, <decl><type ref="prev"/><name>tv_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>http_server</name></name></type> <name>hs</name> <init>= <expr><block>{ <expr><operator>.</operator><name>port</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>ssl</name> <operator>=</operator> <name>ssl</name></expr>, }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><call><name>http_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><operator>.</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>ssl</name></expr> ?</condition><then> <expr><name>HTTP_BIND_SSL</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>exit_base</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bev</name> <operator>=</operator> <call><name>create_bev</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>evcon</name> <operator>=</operator> <call><name>evhttp_connection_base_bufferevent_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>dns_base</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>hs</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dns_base</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>evhttp_connection_set_flags</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>EVHTTP_CON_REUSE_CONNECTED_ADDR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>evhttp_connection_set_timeout</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_connection_set_local_address</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_connection_retry_done</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>, <argument><expr><literal type="string">"somehost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_GET</name></expr></argument>,
<argument><expr><literal type="string">"/?arg=val"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Couldn't make request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>evutil_gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv_start</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv_end</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_timersub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv_end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>tv_end</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><operator>&lt;</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>test_ok</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dns_base</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>regress_clean_dnsserver</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name></type> <name>tv_timeout</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">500000</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name></type> <name>tv_retry</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">500000</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>evhttp_connection_set_timeout_tv</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_connection_set_initial_retry_tv</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv_retry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>evhttp_connection_set_retries</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_connection_retry_done</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>, <argument><expr><literal type="string">"somehost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_GET</name></expr></argument>,
<argument><expr><literal type="string">"/?arg=val"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Couldn't make request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>evutil_gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv_start</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv_end</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>test_timeval_diff_leq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv_end</name></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>test_ok</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_connection_set_timeout</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_connection_set_retries</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_dispatcher_test_done</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>, <argument><expr><literal type="string">"somehost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_GET</name></expr></argument>,
<argument><expr><literal type="string">"/?arg=val"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Couldn't make request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>evutil_timerclear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">200000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>http_make_web_server_base</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_once</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>EV_TIMEOUT</name></expr></argument>, <argument><expr><name>http_make_web_server</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evutil_gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv_start</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv_end</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_timeval_diff_leq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv_end</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>test_ok</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>evcon</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_connection_free</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>http</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name><name>hs</name><operator>.</operator><name>http</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_connection_retry_conn_address_test_impl</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ssl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>portnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>dns_base</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>address</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>regress_dnsserver</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>portnum</name></expr></argument>, <argument><expr><name>search_table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dns_base</name> <operator>=</operator> <call><name>evdns_base_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"127.0.0.1:%d"</literal></expr></argument>, <argument><expr><name>portnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_base_nameserver_ip_add</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>http_connection_retry_test_basic</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"localhost"</literal></expr></argument>, <argument><expr><name>dns_base</name></expr></argument>, <argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>dns_base</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evdns_base_free</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>http_connection_retry_conn_address_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name>http_connection_retry_conn_address_test_impl</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_connection_retry_test_impl</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ssl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>http_connection_retry_test_basic</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_connection_retry_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name>http_connection_retry_test_impl</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_primitives</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>escaped</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>escaped</name> <operator>=</operator> <call><name>evhttp_htmlescape</name><argument_list>(<argument><expr><literal type="string">"&lt;script&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_str_op</name><argument_list>(<argument><expr><name>escaped</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="string">"&amp;lt;script&amp;gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>escaped</name> <operator>=</operator> <call><name>evhttp_htmlescape</name><argument_list>(<argument><expr><literal type="string">"\"\'&amp;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_str_op</name><argument_list>(<argument><expr><name>escaped</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="string">"&amp;quot;&amp;#039;&amp;amp;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>http</name> <operator>=</operator> <call><name>evhttp_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evhttp_set_cb</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><literal type="string">"/test"</literal></expr></argument>, <argument><expr><name>http_basic_cb</name></expr></argument>, <argument><expr><name>http</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evhttp_set_cb</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><literal type="string">"/test"</literal></expr></argument>, <argument><expr><name>http_basic_cb</name></expr></argument>, <argument><expr><name>http</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evhttp_del_cb</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><literal type="string">"/test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evhttp_del_cb</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><literal type="string">"/test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evhttp_set_cb</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><literal type="string">"/test"</literal></expr></argument>, <argument><expr><name>http_basic_cb</name></expr></argument>, <argument><expr><name>http</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>escaped</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>http</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_multi_line_header_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name><init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>http_start_request</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><call><name>http_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>exit_base</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_ptr_op</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><operator>!=</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>http_connect</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>!=</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>bev</name> <operator>=</operator> <call><name>bufferevent_socket_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_ptr_op</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><operator>!=</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_setcb</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>http_readcb</name></expr></argument>, <argument><expr><name>http_writecb</name></expr></argument>,
<argument><expr><name>http_errorcb</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>http_start_request</name> <operator>=</operator>
<literal type="string">"GET /test HTTP/1.1\r\n"</literal>
<literal type="string">"Host: somehost\r\n"</literal>
<literal type="string">"Connection: close\r\n"</literal>
<literal type="string">"X-Multi-Extra-WS: libevent \r\n"</literal>
<literal type="string">"\t\t\t2.1 \r\n"</literal>
<literal type="string">"X-Multi: aaaaaaaa\r\n"</literal>
<literal type="string">" a\r\n"</literal>
<literal type="string">"\tEND\r\n"</literal>
<literal type="string">"X-Last: last\r\n"</literal>
<literal type="string">"\r\n"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_write</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>http_start_request</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>http_start_request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>found_multi</name> <operator>=</operator> <name>found_multi2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>found_multi</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>found_multi2</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>test_ok</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>bev</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_free</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>http</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_request_bad</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>req</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_negative_content_length_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><call><name>http_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>evcon</name> <operator>=</operator> <call><name>evhttp_connection_base_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_request_bad</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"X-Negative"</literal></expr></argument>, <argument><expr><literal type="string">"makeitso"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_GET</name></expr></argument>, <argument><expr><literal type="string">"/test"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Couldn't make request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>evcon</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_connection_free</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>http</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_data_length_constraints_test_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evhttp_request_get_response_code</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>HTTP_BADREQUEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>end</name>:</label>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_large_entity_test_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evhttp_request_get_response_code</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>HTTP_ENTITYTOOLARGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>end</name>:</label>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_expectation_failed_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evhttp_request_get_response_code</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>HTTP_EXPECTATIONFAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>end</name>:</label>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_data_length_constraints_test_impl</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>read_on_write_error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>long_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>continue_size</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>size</name> <init>= <expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">20</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><call><name>http_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cb</name> <operator>=</operator> <name>http_failed_request_done</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>read_on_write_error</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cb</name> <operator>=</operator> <name>http_data_length_constraints_test_done</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>continue_size</name> <operator>&lt;</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>evcon</name> <operator>=</operator> <call><name>evhttp_connection_base_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>read_on_write_error</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>evhttp_connection_set_flags</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>EVHTTP_CON_READ_ON_WRITE_ERROR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>evhttp_connection_set_local_address</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_data_length_constraints_test_done</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>long_str</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>long_str</name></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>long_str</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_set_max_headers_size</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>, <argument><expr><literal type="string">"somehost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Longheader"</literal></expr></argument>, <argument><expr><name>long_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_GET</name></expr></argument>, <argument><expr><literal type="string">"/?arg=val"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Couldn't make request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_data_length_constraints_test_done</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>, <argument><expr><literal type="string">"somehost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_GET</name></expr></argument>, <argument><expr><name>long_str</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Couldn't make request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>read_on_write_error</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cb</name> <operator>=</operator> <name>http_large_entity_test_done</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>evhttp_set_max_body_size</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>, <argument><expr><literal type="string">"somehost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_buffer</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>long_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_POST</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Couldn't make request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_large_entity_test_done</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>, <argument><expr><literal type="string">"somehost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Expect"</literal></expr></argument>, <argument><expr><literal type="string">"100-continue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_buffer</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>long_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_POST</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Couldn't make request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_dispatcher_test_done</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>, <argument><expr><literal type="string">"somehost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Expect"</literal></expr></argument>, <argument><expr><literal type="string">"100-continue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>long_str</name><index>[<expr><name>continue_size</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_buffer</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>long_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_POST</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Couldn't make request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>read_on_write_error</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cb</name> <operator>=</operator> <name>http_expectation_failed_done</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>, <argument><expr><literal type="string">"somehost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Expect"</literal></expr></argument>, <argument><expr><literal type="string">"101-continue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_buffer</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>long_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_POST</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Couldn't make request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>evcon</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_connection_free</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>http</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>long_str</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>long_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>http_data_length_constraints_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name>http_data_length_constraints_test_impl</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>http_read_on_write_error_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name>http_data_length_constraints_test_impl</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_lingering_close_test_impl</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lingering</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>long_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">20</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><call><name>http_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lingering</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>evhttp_set_flags</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><name>EVHTTP_SERVER_LINGERING_CLOSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>evhttp_set_max_body_size</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><name>size</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>evcon</name> <operator>=</operator> <call><name>evhttp_connection_base_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_connection_set_local_address</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>long_str</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>long_str</name></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>long_str</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lingering</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cb</name> <operator>=</operator> <name>http_large_entity_test_done</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cb</name> <operator>=</operator> <name>http_failed_request_done</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>, <argument><expr><literal type="string">"somehost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><call><name>evhttp_request_get_output_buffer</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>long_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_POST</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Couldn't make request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>evcon</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_connection_free</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>http</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>long_str</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>long_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>http_non_lingering_close_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name>http_lingering_close_test_impl</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>http_lingering_close_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name>http_lingering_close_test_impl</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>





<struct>struct <name>terminate_state</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gotclosecb</name><range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>oneshot</name><range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>terminate_chunked_trickle_cb</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>terminate_state</name></name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>evb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>req</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evhttp_request_get_connection</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>req</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_request_free</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>base</name></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>evb</name> <operator>=</operator> <call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>, <argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_send_reply_chunk</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>req</name></name></expr></argument>, <argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>oneshot</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">3000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_once</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>EV_TIMEOUT</name></expr></argument>, <argument><expr><name>terminate_chunked_trickle_cb</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>terminate_chunked_close_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>terminate_state</name></name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>gotclosecb</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>oneshot</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evhttp_request_free</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>base</name></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>terminate_chunked_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>terminate_state</name></name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>evhttp_connection_set_closecb</name><argument_list>(
<argument><expr><call><name>evhttp_request_get_connection</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>terminate_chunked_close_cb</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_send_reply_start</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>HTTP_OK</name></expr></argument>, <argument><expr><literal type="string">"OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">3000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_once</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>EV_TIMEOUT</name></expr></argument>, <argument><expr><name>terminate_chunked_trickle_cb</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>terminate_chunked_client</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>terminate_state</name></name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bufferevent_free</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>bev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>terminate_readcb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><call><name>bufferevent_get_input</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_terminate_chunked_test_impl</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oneshot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>http_request</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>terminate_state</name></name></type> <name>terminate_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><call><name>http_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_del_cb</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><literal type="string">"/test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evhttp_set_cb</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><literal type="string">"/test"</literal></expr></argument>,
<argument><expr><name>terminate_chunked_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>terminate_state</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>http_connect</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>bev</name> <operator>=</operator> <call><name>bufferevent_socket_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_setcb</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>terminate_readcb</name></expr></argument>, <argument><expr><name>http_writecb</name></expr></argument>,
<argument><expr><name>http_errorcb</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>terminate_state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>terminate_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>terminate_state</name><operator>.</operator><name>base</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>terminate_state</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>terminate_state</name><operator>.</operator><name>bev</name></name> <operator>=</operator> <name>bev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>terminate_state</name><operator>.</operator><name>gotclosecb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>terminate_state</name><operator>.</operator><name>oneshot</name></name> <operator>=</operator> <name>oneshot</name></expr>;</expr_stmt>


<expr_stmt><expr><name>http_request</name> <operator>=</operator>
<literal type="string">"GET /test HTTP/1.1\r\n"</literal>
<literal type="string">"Host: some\r\n\r\n"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_write</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>http_request</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>http_request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_timerclear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_once</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>EV_TIMEOUT</name></expr></argument>, <argument><expr><name>terminate_chunked_client</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>terminate_state</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>terminate_state</name><operator>.</operator><name>gotclosecb</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>http</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_terminate_chunked_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>http_terminate_chunked_test_impl</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_terminate_chunked_oneshot_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>http_terminate_chunked_test_impl</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>regress_dns_server_table</name></name></type> <name><name>ipv6_search_table</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"localhost"</literal></expr>, <expr><literal type="string">"AAAA"</literal></expr>, <expr><literal type="string">"::1"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_ipv6_for_domain_test_impl</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>family</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>dns_base</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>portnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>address</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>regress_dnsserver</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>portnum</name></expr></argument>, <argument><expr><name>ipv6_search_table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dns_base</name> <operator>=</operator> <call><name>evdns_base_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"127.0.0.1:%d"</literal></expr></argument>, <argument><expr><name>portnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_base_nameserver_ip_add</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>http_connection_test_</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><literal type="string">"localhost"</literal></expr></argument>, <argument><expr><name>dns_base</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument> , <argument><expr><name>family</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>dns_base</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evdns_base_free</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>regress_clean_dnsserver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_ipv6_for_domain_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>http_ipv6_for_domain_test_impl</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>AF_UNSPEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_request_get_addr_on_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>storage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>addrbuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>local</name><index>[]</index></name> <init>= <expr><literal type="string">"127.0.0.1:"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>storage</name> <operator>=</operator> <call><name>evhttp_connection_get_addr</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evutil_format_sockaddr_port_</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><name>storage</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addrbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>local</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>local</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>

<label><name>end</name>:</label>
<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_get_addr_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><call><name>http_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>exit_base</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>evcon</name> <operator>=</operator> <call><name>evhttp_connection_base_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_connection_set_closecb</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>http_request_get_addr_on_close</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_request_done</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>BASIC_REQUEST_BODY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_GET</name></expr></argument>, <argument><expr><literal type="string">"/test"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Couldn't make request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>http_request_get_addr_on_close</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>evcon</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_connection_free</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>http</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_set_family_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>http_connection_test_</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AF_UNSPEC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_set_family_ipv4_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>http_connection_test_</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_set_family_ipv6_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>http_ipv6_for_domain_test_impl</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>AF_INET6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_write_during_read</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bufferevent_write</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><literal type="string">"foobar"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"foobar"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evutil_timerclear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>exit_base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_write_during_read_test_impl</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ssl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>http_request</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><call><name>http_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>ssl</name></expr> ?</condition><then> <expr><name>HTTP_BIND_SSL</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>exit_base</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>http_connect</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bev</name> <operator>=</operator> <call><name>create_bev</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_setcb</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_disable</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>http_request</name> <operator>=</operator>
<literal type="string">"GET /large HTTP/1.1\r\n"</literal>
<literal type="string">"Host: somehost\r\n"</literal>
<literal type="string">"\r\n"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_write</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>http_request</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>http_request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_timerclear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_once</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>EV_TIMEOUT</name></expr></argument>, <argument><expr><name>http_write_during_read</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bev</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_free</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>http</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>http_write_during_read_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name>http_write_during_read_test_impl</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_request_own_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><call><name>http_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>exit_base</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>evcon</name> <operator>=</operator> <call><name>evhttp_connection_base_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>http_request_no_action_done</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>EVHTTP_REQ_GET</name></expr></argument>, <argument><expr><literal type="string">"/test"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Couldn't make request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>evhttp_request_own</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>evcon</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_connection_free</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>req</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_request_free</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_LEGACY</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ #name, run_legacy_test_fn, TT_ISOLATED|TT_LEGACY, &amp;legacy_setup, http_##name##_test }</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_CAST_ARG</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void *)(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_OFF_N</name><parameter_list>(<parameter><type><name>title</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ #title, http_##name##_test, TT_ISOLATED|TT_OFF_BY_DEFAULT, &amp;basic_setup, HTTP_CAST_ARG(arg) }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_N</name><parameter_list>(<parameter><type><name>title</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ #title, http_##name##_test, TT_ISOLATED, &amp;basic_setup, HTTP_CAST_ARG(arg) }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HTTP_N(name, name, NULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTPS</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ "https_" #name, https_##name##_test, TT_ISOLATED, &amp;basic_setup, NULL }</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>https_basic_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name>http_basic_test_impl</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>https_filter_basic_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name>http_basic_test_impl</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>|</operator> <name>HTTP_SSL_FILTER</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>https_incomplete_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name>http_incomplete_test_</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>https_incomplete_timeout_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name>http_incomplete_test_</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>https_simple_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name>http_simple_test_impl</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>https_simple_dirty_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name>http_simple_test_impl</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>https_connection_retry_conn_address_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name>http_connection_retry_conn_address_test_impl</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>https_connection_retry_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name>http_connection_retry_test_impl</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>https_chunk_out_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name>http_chunk_out_test_impl</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>https_filter_chunk_out_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name>http_chunk_out_test_impl</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>|</operator> <name>HTTP_SSL_FILTER</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>https_stream_out_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name>http_stream_out_test_impl</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>https_connection_fail_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name>http_connection_fail_test_impl</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>https_write_during_read_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name>http_write_during_read_test_impl</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>https_connection_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name>http_connection_test_</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AF_UNSPEC</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>https_persist_connection_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name>http_connection_test_</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AF_UNSPEC</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>struct</name> <name>testcase_t</name></name></type> <name><name>http_testcases</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"primitives"</literal></expr>, <expr><name>http_primitives</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"base"</literal></expr>, <expr><name>http_base_test</name></expr>, <expr><name>TT_FORK</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bad_headers"</literal></expr>, <expr><name>http_bad_header_test</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"parse_query"</literal></expr>, <expr><name>http_parse_query_test</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"parse_uri"</literal></expr>, <expr><name>http_parse_uri_test</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"parse_uri_nc"</literal></expr>, <expr><name>http_parse_uri_test</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>basic_setup</name></expr>, <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="string">"nc"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"uriencode"</literal></expr>, <expr><name>http_uriencode_test</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>basic</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>simple</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>HTTP_N</name><argument_list>(<argument><expr><name>cancel</name></expr></argument>, <argument><expr><name>cancel</name></expr></argument>, <argument><expr><name>BASIC</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP_N</name><argument_list>(<argument><expr><name>cancel_by_host</name></expr></argument>, <argument><expr><name>cancel</name></expr></argument>, <argument><expr><name>BY_HOST</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP_N</name><argument_list>(<argument><expr><name>cancel_by_host_no_ns</name></expr></argument>, <argument><expr><name>cancel</name></expr></argument>, <argument><expr><name>BY_HOST</name> <operator>|</operator> <name>NO_NS</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP_N</name><argument_list>(<argument><expr><name>cancel_by_host_inactive_server</name></expr></argument>, <argument><expr><name>cancel</name></expr></argument>, <argument><expr><name>BY_HOST</name> <operator>|</operator> <name>INACTIVE_SERVER</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP_N</name><argument_list>(<argument><expr><name>cancel_inactive_server</name></expr></argument>, <argument><expr><name>cancel</name></expr></argument>, <argument><expr><name>INACTIVE_SERVER</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP_N</name><argument_list>(<argument><expr><name>cancel_by_host_no_ns_inactive_server</name></expr></argument>, <argument><expr><name>cancel</name></expr></argument>, <argument><expr><name>BY_HOST</name> <operator>|</operator> <name>NO_NS</name> <operator>|</operator> <name>INACTIVE_SERVER</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP_OFF_N</name><argument_list>(<argument><expr><name>cancel_by_host_server_timeout</name></expr></argument>, <argument><expr><name>cancel</name></expr></argument>, <argument><expr><name>BY_HOST</name> <operator>|</operator> <name>INACTIVE_SERVER</name> <operator>|</operator> <name>SERVER_TIMEOUT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP_OFF_N</name><argument_list>(<argument><expr><name>cancel_server_timeout</name></expr></argument>, <argument><expr><name>cancel</name></expr></argument>, <argument><expr><name>INACTIVE_SERVER</name> <operator>|</operator> <name>SERVER_TIMEOUT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP_OFF_N</name><argument_list>(<argument><expr><name>cancel_by_host_no_ns_server_timeout</name></expr></argument>, <argument><expr><name>cancel</name></expr></argument>, <argument><expr><name>BY_HOST</name> <operator>|</operator> <name>NO_NS</name> <operator>|</operator> <name>INACTIVE_SERVER</name> <operator>|</operator> <name>SERVER_TIMEOUT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP_OFF_N</name><argument_list>(<argument><expr><name>cancel_by_host_ns_timeout_server_timeout</name></expr></argument>, <argument><expr><name>cancel</name></expr></argument>, <argument><expr><name>BY_HOST</name> <operator>|</operator> <name>NO_NS</name> <operator>|</operator> <name>NS_TIMEOUT</name> <operator>|</operator> <name>INACTIVE_SERVER</name> <operator>|</operator> <name>SERVER_TIMEOUT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP_N</name><argument_list>(<argument><expr><name>cancel_by_host_ns_timeout</name></expr></argument>, <argument><expr><name>cancel</name></expr></argument>, <argument><expr><name>BY_HOST</name> <operator>|</operator> <name>NO_NS</name> <operator>|</operator> <name>NS_TIMEOUT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP_N</name><argument_list>(<argument><expr><name>cancel_by_host_ns_timeout_inactive_server</name></expr></argument>, <argument><expr><name>cancel</name></expr></argument>, <argument><expr><name>BY_HOST</name> <operator>|</operator> <name>NO_NS</name> <operator>|</operator> <name>NS_TIMEOUT</name> <operator>|</operator> <name>INACTIVE_SERVER</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>virtual_host</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>post</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>put</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>delete</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>allowed_methods</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>failure</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>persist_connection</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>autofree_connection</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>connection_async</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>close_detection</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>close_detection_delay</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>bad_request</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>incomplete</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>incomplete_timeout</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>terminate_chunked</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>terminate_chunked_oneshot</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>on_complete</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>highport</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>dispatcher</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>multi_line_header</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>negative_content_length</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>chunk_out</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>stream_out</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>stream_in</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>stream_in_cancel</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>connection_fail</name></expr></argument>)</argument_list></call></expr>,
<expr><block>{ <expr><literal type="string">"connection_retry"</literal></expr>, <expr><name>http_connection_retry_test</name></expr>, <expr><name>TT_ISOLATED</name><operator>|</operator><name>TT_OFF_BY_DEFAULT</name></expr>, <expr><operator>&amp;</operator><name>basic_setup</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"connection_retry_conn_address"</literal></expr>, <expr><name>http_connection_retry_conn_address_test</name></expr>,
<expr><name>TT_ISOLATED</name><operator>|</operator><name>TT_OFF_BY_DEFAULT</name></expr>, <expr><operator>&amp;</operator><name>basic_setup</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,

<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>data_length_constraints</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>read_on_write_error</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>non_lingering_close</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>lingering_close</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>ipv6_for_domain</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>get_addr</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>set_family</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>set_family_ipv4</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>set_family_ipv6</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>write_during_read</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTP</name><argument_list>(<argument><expr><name>request_own</name></expr></argument>)</argument_list></call></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>HTTPS</name><argument_list>(<argument><expr><name>basic</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTPS</name><argument_list>(<argument><expr><name>filter_basic</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTPS</name><argument_list>(<argument><expr><name>simple</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTPS</name><argument_list>(<argument><expr><name>simple_dirty</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTPS</name><argument_list>(<argument><expr><name>incomplete</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTPS</name><argument_list>(<argument><expr><name>incomplete_timeout</name></expr></argument>)</argument_list></call></expr>,
<expr><block>{ <expr><literal type="string">"https_connection_retry"</literal></expr>, <expr><name>https_connection_retry_test</name></expr>, <expr><name>TT_ISOLATED</name><operator>|</operator><name>TT_OFF_BY_DEFAULT</name></expr>, <expr><operator>&amp;</operator><name>basic_setup</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"https_connection_retry_conn_address"</literal></expr>, <expr><name>https_connection_retry_conn_address_test</name></expr>,
<expr><name>TT_ISOLATED</name><operator>|</operator><name>TT_OFF_BY_DEFAULT</name></expr>, <expr><operator>&amp;</operator><name>basic_setup</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><call><name>HTTPS</name><argument_list>(<argument><expr><name>chunk_out</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTPS</name><argument_list>(<argument><expr><name>filter_chunk_out</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTPS</name><argument_list>(<argument><expr><name>stream_out</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTPS</name><argument_list>(<argument><expr><name>connection_fail</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTPS</name><argument_list>(<argument><expr><name>write_during_read</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTPS</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HTTPS</name><argument_list>(<argument><expr><name>persist_connection</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>END_OF_TESTCASES</name></expr>
}</block></expr></init></decl>;</decl_stmt>

</unit>
