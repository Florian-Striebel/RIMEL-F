<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/test/regress_listener.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util-internal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_XOPEN_SOURCE_EXTENDED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_RESOURCE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/resource.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/listener.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/util.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tinytest.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tinytest_macros.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>acceptcb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evconnlistener</name></name> <modifier>*</modifier></type><name>listener</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>socklen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>--</operator><operator>*</operator><name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TT_BLATHER</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Got one for %p"</literal><operator>,</operator> <name>ptr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>*</operator><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evconnlistener_disable</name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>regress_pick_a_port</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evconnlistener</name></name> <modifier>*</modifier></type><name>listener1</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>listener2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>sin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count1</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>count2</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>ss1</name></decl>, <decl><type ref="prev"/><name>ss2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>sin1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sin2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_socklen_t</name></type> <name>slen1</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>ss1</name></expr></argument>)</argument_list></sizeof></expr></init></decl>, <decl><type ref="prev"/><name>slen2</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>ss2</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name> <init>=
<expr><name>LEV_OPT_CLOSE_ON_FREE</name><operator>|</operator><name>LEV_OPT_REUSEABLE</name><operator>|</operator><name>LEV_OPT_CLOSE_ON_EXEC</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>fd1</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>fd2</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>fd3</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>setup_data</name></name> <operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>setup_data</name></name></expr></argument>, <argument><expr><literal type="string">"ts"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>LEV_OPT_THREADSAFE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><literal type="number">0x7f000001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>listener1</name> <operator>=</operator> <call><name>evconnlistener_new_bind</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>acceptcb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count1</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sin</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>listener1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>listener2</name> <operator>=</operator> <call><name>evconnlistener_new_bind</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>acceptcb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count2</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sin</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>listener2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evconnlistener_get_fd</name><argument_list>(<argument><expr><name>listener1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&gt;=</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evconnlistener_get_fd</name><argument_list>(<argument><expr><name>listener2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&gt;=</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>getsockname</name><argument_list>(<argument><expr><call><name>evconnlistener_get_fd</name><argument_list>(<argument><expr><name>listener1</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ss1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slen1</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>getsockname</name><argument_list>(<argument><expr><call><name>evconnlistener_get_fd</name><argument_list>(<argument><expr><name>listener2</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ss2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slen2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>ss1</name><operator>.</operator><name>ss_family</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>AF_INET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>ss2</name><operator>.</operator><name>ss_family</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>AF_INET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sin1</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ss1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sin2</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ss2</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>sin1</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0x7f000001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>sin2</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0x7f000001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>sin1</name><operator>-&gt;</operator><name>sin_port</name></name></expr></argument>, <argument><expr><operator>!=</operator></expr></argument>, <argument><expr><name><name>sin2</name><operator>-&gt;</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_ptr_op</name><argument_list>(<argument><expr><call><name>evconnlistener_get_base</name><argument_list>(<argument><expr><name>listener1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_ptr_op</name><argument_list>(<argument><expr><call><name>evconnlistener_get_base</name><argument_list>(<argument><expr><name>listener2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd1</name> <operator>=</operator> <name>fd2</name> <operator>=</operator> <name>fd3</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_socket_connect_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fd1</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ss1</name></expr></argument>, <argument><expr><name>slen1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_socket_connect_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fd2</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ss1</name></expr></argument>, <argument><expr><name>slen1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_socket_connect_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fd3</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ss2</name></expr></argument>, <argument><expr><name>slen2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>count1</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>count2</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>fd1</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EVUTIL_CLOSESOCKET</name><argument_list>(<argument><expr><name>fd1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fd2</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EVUTIL_CLOSESOCKET</name><argument_list>(<argument><expr><name>fd2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fd3</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EVUTIL_CLOSESOCKET</name><argument_list>(<argument><expr><name>fd3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>listener1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evconnlistener_free</name><argument_list>(<argument><expr><name>listener1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>listener2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evconnlistener_free</name><argument_list>(<argument><expr><name>listener2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>errorcb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evconnlistener</name></name> <modifier>*</modifier></type><name>lis</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>data_</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evconnlistener_disable</name><argument_list>(<argument><expr><name>lis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>regress_listener_error</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evconnlistener</name></name> <modifier>*</modifier></type><name>listener</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name> <init>= <expr><name>LEV_OPT_CLOSE_ON_FREE</name><operator>|</operator><name>LEV_OPT_REUSEABLE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>setup_data</name></name> <operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>setup_data</name></name></expr></argument>, <argument><expr><literal type="string">"ts"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>LEV_OPT_THREADSAFE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>send</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"hello"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&gt;</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>listener</name> <operator>=</operator> <call><name>evconnlistener_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>acceptcb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evconnlistener_set_error_cb</name><argument_list>(<argument><expr><name>listener</name></expr></argument>, <argument><expr><name>errorcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>count</name></expr></argument>,<argument><expr><operator>==</operator></expr></argument>,<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>listener</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evconnlistener_free</name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SETRLIMIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>regress_listener_error_unlock</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evconnlistener</name></name> <modifier>*</modifier></type><name>listener</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name> <init>=
<expr><name>LEV_OPT_CLOSE_ON_FREE</name><operator>|</operator><name>LEV_OPT_REUSEABLE</name><operator>|</operator><name>LEV_OPT_THREADSAFE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>send</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"hello"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&gt;</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>listener</name> <operator>=</operator> <call><name>evconnlistener_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>acceptcb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rlimit</name></name></type> <name>rl</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>rl</name><operator>.</operator><name>rlim_cur</name></name> <operator>=</operator> <name><name>rl</name><operator>.</operator><name>rlim_max</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>setrlimit</name><argument_list>(<argument><expr><name>RLIMIT_NOFILE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TT_DIE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Can't change RLIMIT_NOFILE"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>event_base_loop</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>EVLOOP_ONCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>listener</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evconnlistener_free</name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>struct</name> <name>testcase_t</name></name></type> <name><name>listener_testcases</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"randport"</literal></expr>, <expr><name>regress_pick_a_port</name></expr>, <expr><name>TT_FORK</name><operator>|</operator><name>TT_NEED_BASE</name></expr>,
<expr><operator>&amp;</operator><name>basic_setup</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"randport_ts"</literal></expr>, <expr><name>regress_pick_a_port</name></expr>, <expr><name>TT_FORK</name><operator>|</operator><name>TT_NEED_BASE</name></expr>,
<expr><operator>&amp;</operator><name>basic_setup</name></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"ts"</literal></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SETRLIMIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"error_unlock"</literal></expr>, <expr><name>regress_listener_error_unlock</name></expr>,
<expr><name>TT_FORK</name><operator>|</operator><name>TT_NEED_BASE</name><operator>|</operator><name>TT_NEED_SOCKETPAIR</name></expr>,
<expr><operator>&amp;</operator><name>basic_setup</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><literal type="string">"error"</literal></expr>, <expr><name>regress_listener_error</name></expr>,
<expr><name>TT_FORK</name><operator>|</operator><name>TT_NEED_BASE</name><operator>|</operator><name>TT_NEED_SOCKETPAIR</name></expr>,
<expr><operator>&amp;</operator><name>basic_setup</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"error_ts"</literal></expr>, <expr><name>regress_listener_error</name></expr>,
<expr><name>TT_FORK</name><operator>|</operator><name>TT_NEED_BASE</name><operator>|</operator><name>TT_NEED_SOCKETPAIR</name></expr>,
<expr><operator>&amp;</operator><name>basic_setup</name></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"ts"</literal></expr>}</block></expr>,

<expr><name>END_OF_TESTCASES</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>testcase_t</name></name></type> <name><name>listener_iocp_testcases</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"randport"</literal></expr>, <expr><name>regress_pick_a_port</name></expr>,
<expr><name>TT_FORK</name><operator>|</operator><name>TT_NEED_BASE</name><operator>|</operator><name>TT_ENABLE_IOCP</name></expr>,
<expr><operator>&amp;</operator><name>basic_setup</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"error"</literal></expr>, <expr><name>regress_listener_error</name></expr>,
<expr><name>TT_FORK</name><operator>|</operator><name>TT_NEED_BASE</name><operator>|</operator><name>TT_NEED_SOCKETPAIR</name><operator>|</operator><name>TT_ENABLE_IOCP</name></expr>,
<expr><operator>&amp;</operator><name>basic_setup</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><name>END_OF_TESTCASES</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
