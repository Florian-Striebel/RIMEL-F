<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/test/tinytest.h">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TINYTEST_H_INCLUDED_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TINYTEST_H_INCLUDED_</name></cpp:macro></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TT_FORK</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TT_SKIP</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TT_ENABLED_</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TT_OFF_BY_DEFAULT</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TT_FIRST_USER_FLAG</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>testcase_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct_decl>struct <name>testcase_t</name>;</struct_decl>


<struct>struct <name>testcase_setup_t</name> <block>{

<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>setup_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>testcase_t</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cleanup_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>testcase_t</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>


<struct>struct <name>testcase_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>testcase_fn</name></type> <name>fn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>testcase_setup_t</name></name> <modifier>*</modifier></type><name>setup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>setup_data</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>END_OF_TESTCASES</name></cpp:macro> <cpp:value>{ NULL, NULL, 0, NULL, NULL }</cpp:value></cpp:define>


<struct>struct <name>testgroup_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>testcase_t</name></name> <modifier>*</modifier></type><name>cases</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>END_OF_GROUPS</name></cpp:macro> <cpp:value>{ NULL, NULL}</cpp:value></cpp:define>

<struct>struct <name>testlist_alias_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>tests</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>END_OF_ALIASES</name></cpp:macro> <cpp:value>{ NULL, NULL }</cpp:value></cpp:define>


<function_decl><type><name>void</name></type> <name>tinytest_set_test_failed_</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>tinytest_set_test_skipped_</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>tinytest_get_verbosity_</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>tinytest_set_flag_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>testgroup_t</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>set</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>tinytest_format_hex_</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tinytest_skip</name><parameter_list>(<parameter><type><name>groups</name></type></parameter>, <parameter><type><name>named</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tinytest_set_flag_(groups, named, 1, TT_SKIP)</cpp:value></cpp:define>



<function_decl><type><name>int</name></type> <name>testcase_run_one</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>testgroup_t</name></name> <modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>testcase_t</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>tinytest_set_aliases</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>testlist_alias_t</name></name> <modifier>*</modifier></type><name>aliases</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>int</name></type> <name>tinytest_main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>testgroup_t</name></name> <modifier>*</modifier></type><name>groups</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
