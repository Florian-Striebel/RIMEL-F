<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/test/regress_buffer.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util-internal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event-config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/buffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/buffer_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/util.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"defer-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evbuffer-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log-internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regress.h"</cpp:file></cpp:include>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>evbuffer_validate_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found_last_with_datap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>first</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>last</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>total_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>first</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>found_last_with_datap</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>chain</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>&amp;</operator><name><name>chain</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>found_last_with_datap</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>chain</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>last</name></name> <operator>==</operator> <name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>chain</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>&gt;=</operator> <name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name> <operator>+</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>first</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>*</operator><name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <operator>*</operator><name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>buf</name><operator>-&gt;</operator><name>total_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<macro><name>tt_assert</name><argument_list>(<argument>chain-&gt;off == <literal type="number">0</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>chain</name> <operator>==</operator> <name><name>buf</name><operator>-&gt;</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>total_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>chain</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>chain</name><operator>-&gt;</operator><name>off</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>last_with_datap</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>found_last_with_datap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>sum</name> <operator>==</operator> <name><name>buf</name><operator>-&gt;</operator><name>total_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<label><name>end</name>:</label>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>evbuffer_get_waste</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>allocatedp</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>wastedp</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>usedp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_chain</name></name> <modifier>*</modifier></type><name>chain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>u</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>u</name> <operator>=</operator> <name>a</name> <operator>=</operator> <name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>chain</name> <operator>&amp;&amp;</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>chain</name><operator>-&gt;</operator><name>buffer_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>chain</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>chain</name><operator>-&gt;</operator><name>buffer_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>u</name> <operator>+=</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>chain</name><operator>-&gt;</operator><name>next</name></name> <operator>&amp;&amp;</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>off</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>w</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>chain</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>-</operator> <operator>(</operator><name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name> <operator>+</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>chain</name> <operator>&amp;&amp;</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>chain</name><operator>-&gt;</operator><name>buffer_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>u</name> <operator>+=</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>chain</name><operator>-&gt;</operator><name>next</name></name> <operator>&amp;&amp;</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>off</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>w</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>chain</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>-</operator> <operator>(</operator><name><name>chain</name><operator>-&gt;</operator><name>misalign</name></name> <operator>+</operator> <name><name>chain</name><operator>-&gt;</operator><name>off</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<while>while <condition>(<expr><name>chain</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>chain</name><operator>-&gt;</operator><name>buffer_len</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>allocatedp</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>wastedp</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>usedp</name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>evbuffer_validate</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TT_STMT_BEGIN if (!evbuffer_validate_(buf)) TT_DIE(("Buffer format invalid")); TT_STMT_END</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evbuffer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>evb</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>evb_two</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sz_tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><literal type="string">"%s/%d"</literal></expr></argument>, <argument><expr><literal type="string">"hello"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>EVBUFFER_DATA</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"hello/1"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_add_buffer</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><name>evb_two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"hello/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>EVBUFFER_DATA</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>evb_two</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"/hello"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_buffer</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><name>evb_two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>evb_two</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>EVBUFFER_DATA</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1/hello"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>evbuffer_pullup</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><literal type="number">7</literal> <operator>+</operator> <literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"1/hello"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_prepend</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><literal type="string">"something"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_prepend</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><literal type="string">"else"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>evbuffer_pullup</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">9</literal> <operator>+</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"elsesomething1/hello"</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">9</literal> <operator>+</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><name>evb_two</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>evb_two</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb_two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_buffer</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><name>evb_two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb_two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>evb_two</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>i</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>sz_tmp</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">2.5</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_remove_buffer</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><name>evb_two</name></expr></argument>, <argument><expr><name>sz_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>evb_two</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>sz_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>evbuffer_pullup</name><argument_list>(
<argument><expr><name>evb</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>memcmp</name><argument_list>(<argument><expr><call><name>evbuffer_pullup</name><argument_list>(
<argument><expr><name>evb_two</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Pullup did not preserve content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_iovec</name></name></type> <name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evbuffer_reserve_space</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>&gt;=</operator> <literal type="number">10000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_commit_space</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">10000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><name>j</name> <operator>*</operator> <literal type="number">5000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>evb_two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>no_cleanup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>datalen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evbuffer_remove_buffer_with_empty</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>evbuffer_add_reference</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>no_cleanup</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_reference</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>no_cleanup</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_reference</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>no_cleanup</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evbuffer_remove_buffer</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evbuffer_remove_buffer_with_empty2</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_reference</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_add_reference</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_reference</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_buffer</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_reference</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_add_reference</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_reference</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_buffer</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_remove_buffer</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evbuffer_remove_buffer_with_empty3</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_reference</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_add_reference</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_reference</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_prepend_buffer</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_reference</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_add_reference</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_reference</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_prepend_buffer</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_remove_buffer</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evbuffer_add_buffer_with_empty</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_add_reference</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_reference</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_buffer</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_add_reference</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_reference</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_buffer</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evbuffer_add_buffer_with_empty2</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_add_reference</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_buffer</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_add_reference</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_buffer</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evbuffer_reserve2</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_iovec</name></name></type> <name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>remaining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cp2</name></decl>;</decl_stmt>


<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>evbuffer_reserve_space</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name></expr></argument>, <argument><expr><operator>&gt;=</operator></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name></expr></argument>, <argument><expr><literal type="char">'X'</literal></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name></expr>;</expr_stmt>
<expr_stmt><expr><name>remaining</name> <operator>=</operator> <name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>-</operator> <literal type="number">512</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <literal type="number">512</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>evbuffer_commit_space</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>evbuffer_reserve_space</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>cp</name> <operator>+</operator> <literal type="number">512</literal> <operator>==</operator> <name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>remaining</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name></expr></argument>, <argument><expr><literal type="char">'Y'</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>evbuffer_commit_space</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">520</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>remaining</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>evbuffer_reserve_space</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>remaining</name><operator>+</operator><literal type="number">64</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>cp</name> <operator>+</operator> <literal type="number">520</literal> <operator>==</operator> <name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>remaining</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iov_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>&gt;=</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp2</name> <operator>=</operator> <name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iov_base</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name></expr></argument>, <argument><expr><literal type="char">'Z'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>evbuffer_commit_space</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">521</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>remaining</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>evbuffer_reserve_space</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>remaining</name><operator>+</operator><literal type="number">64</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>cp</name> <operator>+</operator> <literal type="number">521</literal> <operator>==</operator> <name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>remaining</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>==</operator> <name>cp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>&gt;=</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name></expr></argument>, <argument><expr><literal type="char">'W'</literal></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <literal type="number">400</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iov_base</name></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>evbuffer_commit_space</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">981</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>evbuffer_peek</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">921</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iov_len</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">512</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>cp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="char">'X'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">512</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">520</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>cp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="char">'Y'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">520</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">521</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>cp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="char">'Z'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">521</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">921</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>cp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="char">'W'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iov_base</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">60</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>cp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evbuffer_reserve_many</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_iovec</name></name></type> <name><name>v</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>add_data</name> <init>= <expr><name>ptr</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"add"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fill_first</name> <init>= <expr><name>ptr</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"fill"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cp2</name></decl>;</decl_stmt>


<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>evbuffer_reserve_space</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>&gt;=</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sz</name> <operator>=</operator> <name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cp1</name> <operator>=</operator> <name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>add_data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <literal type="char">'X'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>evbuffer_commit_space</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>fill_first</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name></expr></argument>, <argument><expr><literal type="char">'X'</literal></expr></argument>, <argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>evbuffer_commit_space</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>evbuffer_reserve_space</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sz</name> <operator>=</operator> <name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>!=</operator> <name>cp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp1</name> <operator>=</operator> <name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>evbuffer_reserve_space</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name><operator>+</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sz</name> <operator>=</operator> <name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>+</operator> <name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iov_len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><operator>&gt;=</operator></expr></argument>, <argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name><operator>+</operator><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>add_data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>==</operator> <name>cp1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>==</operator> <name>cp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>cp1</name> <operator>=</operator> <name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cp2</name> <operator>=</operator> <name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iov_base</name></expr>;</expr_stmt>


<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>evbuffer_reserve_space</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name><operator>+</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>cp1</name> <operator>==</operator> <name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>cp2</name> <operator>==</operator> <name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iov_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sz</name> <operator>=</operator> <name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>+</operator> <name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>+</operator> <name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>iov_len</name></expr>;</expr_stmt>



<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>evbuffer_reserve_space</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name><operator>+</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>add_data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>cp1</name> <operator>==</operator> <name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evbuffer_expand</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>data</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>u</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="char">'X'</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_expand</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">20000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name><operator>=</operator><name>w</name><operator>=</operator><name>u</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_get_waste</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>w</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>w</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>u</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>a</name> <operator>&gt;=</operator> <literal type="number">20000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>first</name></name> <operator>==</operator> <name><name>buf</name><operator>-&gt;</operator><name>last</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>first</name><operator>-&gt;</operator><name>off</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>first</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>&gt;=</operator> <literal type="number">20000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>buffer</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>first</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_expand</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>first</name><operator>-&gt;</operator><name>buffer</name></name> <operator>==</operator> <name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>first</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>-</operator> <name><name>buf</name><operator>-&gt;</operator><name>first</name><operator>-&gt;</operator><name>off</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>first</name></name> <operator>==</operator> <name><name>buf</name><operator>-&gt;</operator><name>last</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>first</name><operator>-&gt;</operator><name>off</name></name> <operator>==</operator> <name><name>buf</name><operator>-&gt;</operator><name>first</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>first</name><operator>-&gt;</operator><name>off</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>==</operator> <call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>first</name><operator>-&gt;</operator><name>misalign</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>first</name><operator>-&gt;</operator><name>off</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buffer</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>first</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_expand</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>first</name></name> <operator>==</operator> <name><name>buf</name><operator>-&gt;</operator><name>last</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>first</name><operator>-&gt;</operator><name>off</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>first</name><operator>-&gt;</operator><name>buffer</name></name> <operator>==</operator> <name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>first</name><operator>-&gt;</operator><name>misalign</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_expand</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_pullup</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evbuffer_expand_overflow</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_expand</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>EVBUFFER_CHAIN_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_expand</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>EV_SIZE_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evbuffer_add1</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_expand</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">2048</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>evbuffer_pullup</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'3'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>end</name>:</label>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evbuffer_add2</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>data</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>data_len</name> <init>= <expr><name>MIN_BUFFER_SIZE</name><operator>-</operator><name>EVBUFFER_CHAIN_SIZE</name><operator>-</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_expand</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>len</name> <operator>==</operator> <name>data_len</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>evbuffer_pullup</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'3'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>end</name>:</label>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>reference_cb_called</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>reference_cb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>tt_str_op</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="string">"this is what we add as read-only memory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><name>extra</name> <operator>==</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xdeadaffe</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>reference_cb_called</name></expr>;</expr_stmt>
<label><name>end</name>:</label>
<empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evbuffer_reference</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_iovec</name></name></type> <name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><literal type="string">"this is what we add as read-only memory."</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>reference_cb_called</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_add_reference</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>reference_cb</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xdeadaffe</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_reserve_space</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_remove</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evbuffer_prepend</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="string">"aaaaa"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_remove</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">10</literal></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_commit_space</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>reference_cb_called</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><call><name>evbuffer_pullup</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evbuffer_reference2</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>data</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>data_len</name> <init>= <expr><name>MIN_BUFFER_SIZE</name><operator>-</operator><name>EVBUFFER_CHAIN_SIZE</name><operator>-</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_expand</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_reference</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>no_cleanup</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>len</name> <operator>==</operator> <name>data_len</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>evbuffer_pullup</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'3'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>end</name>:</label>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>addfile_test_event_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>addfile_test_done_writing</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>addfile_test_total_written</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>addfile_test_total_read</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>addfile_test_writecb</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evbuffer_write</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>addfile_test_total_written</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TT_BLATHER</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Wrote %d/%d bytes"</literal><operator>,</operator> <name>r</name><operator>,</operator> <name>addfile_test_total_written</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><call><name>evutil_socket_geterror</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EVUTIL_ERR_RW_RETRIABLE</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>tt_fail_perror</name><argument_list>(<argument><expr><literal type="string">"write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>addfile_test_event_base</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>addfile_test_done_writing</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
<label><name>end</name>:</label>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>addfile_test_event_base</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>addfile_test_readcb</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evbuffer_read</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>addfile_test_total_read</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TT_BLATHER</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Read %d/%d bytes"</literal><operator>,</operator> <name>r</name><operator>,</operator> <name>addfile_test_total_read</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>evutil_socket_geterror</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>EVUTIL_ERR_RW_RETRIABLE</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_fail_perror</name><argument_list>(<argument><expr><literal type="string">"read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>addfile_test_event_base</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>addfile_test_done_writing</name> <operator>&amp;&amp;</operator>
<name>addfile_test_total_read</name> <operator>&gt;=</operator> <name>addfile_test_total_written</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>addfile_test_event_base</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evbuffer_add_file</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>testdata</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>impl</name> <init>= <expr><name><name>testdata</name><operator>-&gt;</operator><name>setup_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dest</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmpfilename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expect_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>datalen</name></decl>, <decl><type ref="prev"/><name>expect_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>compare</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>want_ismapping</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>want_cansendfile</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_segment</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>use_bigfile</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>map_from_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><type ref="prev"/><name>view_from_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_file_segment</name></name> <modifier>*</modifier></type><name>seg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_off_t</name></type> <name>starting_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>mapping_len</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_off_t</name></type> <name>segment_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>segment_len</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>rev</name><init>=<expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>wev</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name><name>testdata</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name><name>pair</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evutil_weakrand_state</name></name></type> <name>seed</name> <init>= <expr><block>{ <expr><literal type="number">123456789U</literal></expr> }</block></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>impl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>impl</name></expr></argument>, <argument><expr><literal type="string">"nosegment"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>use_segment</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>impl</name></expr></argument>, <argument><expr><literal type="string">"bigfile"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>use_bigfile</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>impl</name></expr></argument>, <argument><expr><literal type="string">"map_offset"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>map_from_offset</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>impl</name></expr></argument>, <argument><expr><literal type="string">"offset_in_segment"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>view_from_offset</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>impl</name></expr></argument>, <argument><expr><literal type="string">"sendfile"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>EVBUF_FS_DISABLE_MMAP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>want_cansendfile</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>want_ismapping</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>impl</name></expr></argument>, <argument><expr><literal type="string">"mmap"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>EVBUF_FS_DISABLE_SENDFILE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>want_ismapping</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>want_cansendfile</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>impl</name></expr></argument>, <argument><expr><literal type="string">"linear"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>EVBUF_FS_DISABLE_SENDFILE</name><operator>|</operator><name>EVBUF_FS_DISABLE_MMAP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>want_ismapping</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>want_cansendfile</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>impl</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<empty_stmt>;</empty_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>TT_DIE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Didn't recognize the implementation"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_bigfile</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>datalen</name> <operator>=</operator> <literal type="number">1024</literal><operator>*</operator><literal type="number">512</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">1024</literal><operator>*</operator><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>datalen</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><call><name>evutil_weakrand_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"here is a relatively small string."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>datalen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>regress_make_tmpfile</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>datalen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpfilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>map_from_offset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>starting_offset</name> <operator>=</operator> <name>datalen</name><operator>/</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mapping_len</name> <operator>=</operator> <name>datalen</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>expect_data</name> <operator>=</operator> <name>data</name> <operator>+</operator> <name>starting_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>expect_len</name> <operator>=</operator> <name>mapping_len</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>expect_data</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name>expect_len</name> <operator>=</operator> <name>datalen</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>view_from_offset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>use_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>segment_offset</name> <operator>=</operator> <name>expect_len</name> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>segment_len</name> <operator>=</operator> <name>expect_len</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>expect_data</name> <operator>=</operator> <name>expect_data</name> <operator>+</operator> <name>segment_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>expect_len</name> <operator>=</operator> <name>segment_len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_segment</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>seg</name> <operator>=</operator> <call><name>evbuffer_file_segment_new</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>starting_offset</name></expr></argument>,
<argument><expr><name>mapping_len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>want_ismapping</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>seg</name><operator>-&gt;</operator><name>is_mapping</name></name> <operator>!=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>want_ismapping</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_skip</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>want_cansendfile</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>seg</name><operator>-&gt;</operator><name>can_sendfile</name></name> <operator>!=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>want_cansendfile</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_skip</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>evbuffer_set_flags</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>EVBUFFER_FLAG_DRAINS_TO_FD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SENDFILE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__sun__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__svr4__</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><call><name>evutil_ersatz_socketpair_</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pair</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"ersatz_socketpair failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>evutil_socketpair</name><argument_list>(<argument><expr><name>AF_UNIX</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pair</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"socketpair failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>evutil_make_socket_nonblocking</name><argument_list>(<argument><expr><name><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_make_socket_nonblocking</name><argument_list>(<argument><expr><name><name>pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_segment</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_add_file_segment</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>seg</name></expr></argument>,
<argument><expr><name>segment_offset</name></expr></argument>, <argument><expr><name>segment_len</name></expr></argument>)</argument_list></call><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_add_file</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>starting_offset</name></expr></argument>,
<argument><expr><name>mapping_len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>addfile_test_event_base</name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>
<expr_stmt><expr><name>addfile_test_done_writing</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>addfile_test_total_written</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>addfile_test_total_read</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>wev</name> <operator>=</operator> <call><name>event_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>EV_WRITE</name><operator>|</operator><name>EV_PERSIST</name></expr></argument>,
<argument><expr><name>addfile_test_writecb</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rev</name> <operator>=</operator> <call><name>event_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>EV_READ</name><operator>|</operator><name>EV_PERSIST</name></expr></argument>,
<argument><expr><name>addfile_test_readcb</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_add</name><argument_list>(<argument><expr><name>wev</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_add</name><argument_list>(<argument><expr><name>rev</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>addfile_test_done_writing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>addfile_test_total_written</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>expect_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>addfile_test_total_read</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>expect_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>compare</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>evbuffer_pullup</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>expect_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>compare</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>compare</name></expr></argument>, <argument><expr><name>expect_data</name></expr></argument>, <argument><expr><name>expect_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Data from add_file differs."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>seg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_file_segment_free</name><argument_list>(<argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>src</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dest</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name><name>pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>wev</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_free</name><argument_list>(<argument><expr><name>wev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rev</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_free</name><argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tmpfilename</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>tmpfilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmpfilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>file_segment_cleanup_cb_called_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>evbuffer_file_segment</name></name> <specifier>const</specifier><modifier>*</modifier></type> <name>file_segment_cleanup_cb_called_with</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>file_segment_cleanup_cb_called_with_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>file_segment_cleanup_cb_called_with_arg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>file_segment_cleanup_cp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer_file_segment</name></name> <specifier>const</specifier><modifier>*</modifier></type> <name>seg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>file_segment_cleanup_cb_called_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>file_segment_cleanup_cb_called_with</name> <operator>=</operator> <name>seg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>file_segment_cleanup_cb_called_with_flags</name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name>file_segment_cleanup_cb_called_with_arg</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evbuffer_file_segment_add_cleanup_cb</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmpfilename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>evb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_file_segment</name></name> <modifier>*</modifier></type><name>seg</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>segptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>arg</name> <init>= <expr><literal type="string">"token"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>regress_make_tmpfile</name><argument_list>(<argument><expr><literal type="string">"file_segment_test_file"</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpfilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&gt;=</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>evb</name> <operator>=</operator> <call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>segptr</name> <operator>=</operator> <name>seg</name> <operator>=</operator> <call><name>evbuffer_file_segment_new</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_file_segment_add_cleanup_cb</name><argument_list>(
<argument><expr><name>seg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_segment_cleanup_cp</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_add_file_segment</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><name>seg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>file_segment_cleanup_cb_called_count</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_file_segment_free</name><argument_list>(<argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>seg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>file_segment_cleanup_cb_called_count</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>evb</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>file_segment_cleanup_cb_called_count</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>file_segment_cleanup_cb_called_with</name> <operator>==</operator> <name>segptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>file_segment_cleanup_cb_called_with_flags</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>file_segment_cleanup_cb_called_with_arg</name> <operator>==</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>evb</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>seg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_file_segment_free</name><argument_list>(<argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tmpfilename</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>tmpfilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmpfilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_MM_REPLACEMENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>failing_malloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>how_much</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evbuffer_readln</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>evb</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>evb_tmp</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tt_line_eq</name><parameter_list>(<parameter><type><name>content</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TT_STMT_BEGIN if (!cp || sz != strlen(content) || strcmp(cp, content)) { TT_DIE(("Wanted %s; got %s [%d]", content, cp, (int)sz)); } TT_STMT_END</cpp:value></cpp:define>







<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"complex silly newline\r\n\n\r\n\n\rmore\0\n"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_ANY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_line_eq</name><argument_list>(<argument><expr><literal type="string">"complex silly newline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_ANY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cp</name> <operator>||</operator> <name>sz</name> <operator>!=</operator> <literal type="number">5</literal> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="string">"more\0\0"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Not as expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>tt_uint_op</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"\nno newline"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_ANY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_line_eq</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_ANY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"Line with\rin the middle\nLine with good crlf\r\n\nfinal\n"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_CRLF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_line_eq</name><argument_list>(<argument><expr><literal type="string">"Line with\rin the middle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_CRLF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_line_eq</name><argument_list>(<argument><expr><literal type="string">"Line with good crlf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_CRLF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_line_eq</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_CRLF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_line_eq</name><argument_list>(<argument><expr><literal type="string">"final"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"x"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_CRLF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">" and a bad crlf\nand a good one\r\n\r\nMore\r"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_CRLF_STRICT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_line_eq</name><argument_list>(<argument><expr><literal type="string">"x and a bad crlf\nand a good one"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_CRLF_STRICT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_line_eq</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_CRLF_STRICT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_CRLF_STRICT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_line_eq</name><argument_list>(<argument><expr><literal type="string">"More"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"An internal CR\r is not an eol\r\nNor is a lack of one"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_CRLF_STRICT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_line_eq</name><argument_list>(<argument><expr><literal type="string">"An internal CR\r is not an eol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_CRLF_STRICT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_CRLF_STRICT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_line_eq</name><argument_list>(<argument><expr><literal type="string">"Nor is a lack of one"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"An\rand a nl\n\nText"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_LF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_line_eq</name><argument_list>(<argument><expr><literal type="string">"An\rand a nl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_LF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_line_eq</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_LF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_LF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_line_eq</name><argument_list>(<argument><expr><literal type="string">"Text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>x</name><index>[]</index></name> <init>=
<expr><literal type="string">"NUL\n\0\0"</literal>
<literal type="string">"The all-zeros character which may serve\0"</literal>
<literal type="string">"to accomplish time fill\0and media fill"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_line_eq</name><argument_list>(<argument><expr><literal type="string">"NUL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_line_eq</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_line_eq</name><argument_list>(<argument><expr><literal type="string">"The all-zeros character which may serve"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_line_eq</name><argument_list>(<argument><expr><literal type="string">"to accomplish time fill"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_ptr_op</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">" and a bad crlf\nand a good one\r"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>evb_tmp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_buffer</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><name>evb_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"\n\r"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>evb_tmp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_buffer</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><name>evb_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"\nMore\r"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>evb_tmp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_buffer</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><name>evb_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_CRLF_STRICT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_line_eq</name><argument_list>(<argument><expr><literal type="string">" and a bad crlf\nand a good one"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_CRLF_STRICT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_line_eq</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_CRLF_STRICT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_CRLF_STRICT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_line_eq</name><argument_list>(<argument><expr><literal type="string">"More"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>cp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"one line\ntwo line\nblue line"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>evb_tmp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_buffer</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><name>evb_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_LF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_line_eq</name><argument_list>(<argument><expr><literal type="string">"one line"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>cp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_MM_REPLACEMENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>event_set_mem_functions</name><argument_list>(<argument><expr><name>failing_malloc</name></expr></argument>, <argument><expr><name>realloc</name></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_LF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>cp</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>event_set_mem_functions</name><argument_list>(<argument><expr><name>malloc</name></expr></argument>, <argument><expr><name>realloc</name></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><name>evb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_LF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_line_eq</name><argument_list>(<argument><expr><literal type="string">"two line"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>cp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>evb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>evb_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evbuffer_search_eol</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_ptr</name></name></type> <name>ptr1</name></decl>, <decl><type ref="prev"/><name>ptr2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>eol_len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"string! \r\n\r\nx\n"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>eol_len</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr1</name> <operator>=</operator> <call><name>evbuffer_search_eol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eol_len</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_CRLF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>ptr1</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>eol_len</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>eol_len</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr2</name> <operator>=</operator> <call><name>evbuffer_search_eol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eol_len</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_CRLF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>ptr2</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>eol_len</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_ptr_set</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>EVBUFFER_PTR_ADD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>eol_len</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr2</name> <operator>=</operator> <call><name>evbuffer_search_eol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eol_len</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_CRLF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>ptr2</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>eol_len</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>eol_len</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr2</name> <operator>=</operator> <call><name>evbuffer_search_eol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eol_len</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_CRLF_STRICT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>ptr2</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>eol_len</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>eol_len</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr1</name> <operator>=</operator> <call><name>evbuffer_search_eol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eol_len</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_LF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>ptr1</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>eol_len</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>eol_len</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr2</name> <operator>=</operator> <call><name>evbuffer_search_eol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eol_len</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_LF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>ptr2</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>eol_len</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_ptr_set</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>EVBUFFER_PTR_ADD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>eol_len</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr2</name> <operator>=</operator> <call><name>evbuffer_search_eol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eol_len</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_LF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>ptr2</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>eol_len</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_ptr_set</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr1</name></expr></argument>, <argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EVBUFFER_PTR_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>eol_len</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr2</name> <operator>=</operator> <call><name>evbuffer_search_eol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eol_len</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_LF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>ptr2</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>eol_len</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evbuffer_iterative</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>abc</name> <init>= <expr><literal type="string">"abcdefghijklmnopqrstvuwxyzabcdefghijklmnopqrstvuwxyzabcdefghijklmnopqrstvuwxyzabcdefghijklmnopqrstvuwxyz"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>sum</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>abc</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>format</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%%%u.%us"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>abc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>%</operator> <literal type="number">337</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_uint_op</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>u</name></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name><operator>=</operator><name>w</name><operator>=</operator><name>u</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_get_waste</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Allocated: %u.\nWasted: %u.\nUsed: %u."</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>w</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>( <argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>w</name><operator>)</operator><operator>/</operator><name>a</name> <operator>&lt;</operator> <literal type="number">.125</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<label><name>end</name>:</label>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evbuffer_find</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>test1</name> <init>= <expr><literal type="string">"1234567890\r\n"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>test2</name> <init>= <expr><literal type="string">"1234567890\r"</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVBUFFER_INITIAL_LENGTH</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<decl_stmt><decl><type><name>char</name></type> <name><name>test3</name><index>[<expr><name>EVBUFFER_INITIAL_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>test1</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>test1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>test1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>test2</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>test2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>evbuffer_find</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><name>p</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>test2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>EVBUFFER_INITIAL_LENGTH</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>test3</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'a'</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>test3</name><index>[<expr><name>EVBUFFER_INITIAL_LENGTH</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'x'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>test3</name></expr></argument>, <argument><expr><name>EVBUFFER_INITIAL_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>evbuffer_find</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"xy"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><name>p</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>evbuffer_find</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"ax"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>strncmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><literal type="string">"ax"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evbuffer_ptr_set</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_ptr</name></name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_iovec</name></name></type> <name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_ptr_set</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>EVBUFFER_PTR_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>pos</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_ptr_set</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>EVBUFFER_PTR_ADD</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>pos</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_ptr_set</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>EVBUFFER_PTR_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>pos</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evbuffer_reserve_space</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <literal type="number">5000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_commit_space</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_reserve_space</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">4000</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <literal type="number">4000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_commit_space</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_reserve_space</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">3000</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <literal type="number">3000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_commit_space</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">12000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_ptr_set</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><literal type="number">13000</literal></expr></argument>, <argument><expr><name>EVBUFFER_PTR_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>pos</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_ptr_set</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>EVBUFFER_PTR_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>pos</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_ptr_set</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><literal type="number">13000</literal></expr></argument>, <argument><expr><name>EVBUFFER_PTR_ADD</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_ptr_set</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>EVBUFFER_PTR_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>pos</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_ptr_set</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>, <argument><expr><name>EVBUFFER_PTR_ADD</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>pos</name></name> <operator>==</operator> <literal type="number">10000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_ptr_set</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name>EVBUFFER_PTR_ADD</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>pos</name></name> <operator>==</operator> <literal type="number">11000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_ptr_set</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name>EVBUFFER_PTR_ADD</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>pos</name></name> <operator>==</operator> <literal type="number">12000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_ptr_set</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name>EVBUFFER_PTR_ADD</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>pos</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evbuffer_search</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_ptr</name></name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>evbuffer_search</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_ptr_set</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>EVBUFFER_PTR_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>evbuffer_search</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_ptr_set</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>EVBUFFER_PTR_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>evbuffer_search_range</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_ptr_set</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>EVBUFFER_PTR_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>evbuffer_search_range</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"hello"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_buffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_buffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"cat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_buffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"attack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_buffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>evbuffer_search</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"attack"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>evbuffer_search</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"attacker"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>evbuffer_search</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"oc"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>evbuffer_search</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"cat"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>evbuffer_search</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"tacking"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_ptr_set</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>EVBUFFER_PTR_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>evbuffer_search</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_ptr_set</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>EVBUFFER_PTR_ADD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>evbuffer_search</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"tat"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>evbuffer_ptr_set</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>EVBUFFER_PTR_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>evbuffer_search_range</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>evbuffer_search_range</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"foocata"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>evbuffer_search_range</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"foocatat"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>evbuffer_search_range</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"ack"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_ptr_set</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><name>EVBUFFER_PTR_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>evbuffer_search_range</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"attack"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_ptr_set</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><name>EVBUFFER_PTR_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>evbuffer_search_range</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"attack"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_ptr_set</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><name>EVBUFFER_PTR_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>evbuffer_search_range</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"attack"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_ptr_set</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><name>EVBUFFER_PTR_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>evbuffer_search_range</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"attack"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>log_change_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evbuffer_cb_info</name></name> <modifier>*</modifier></type><name>cbinfo</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>old_len</name> <init>= <expr><name><name>cbinfo</name><operator>-&gt;</operator><name>orig_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>new_len</name> <init>= <expr><name>old_len</name> <operator>+</operator> <name><name>cbinfo</name><operator>-&gt;</operator><name>n_added</name></name> <operator>-</operator> <name><name>cbinfo</name><operator>-&gt;</operator><name>n_deleted</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%lu-&gt;%lu; "</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>old_len</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>new_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>self_draining_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>evbuffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>old_len</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>new_len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>new_len</name> <operator>&gt;</operator> <name>old_len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><name>evbuffer</name></expr></argument>, <argument><expr><name>new_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evbuffer_callbacks</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf_out1</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf_out2</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_cb_entry</name></name> <modifier>*</modifier></type><name>cb1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cb2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>buf_out1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>buf_out2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cb1</name> <operator>=</operator> <call><name>evbuffer_add_cb</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>log_change_callback</name></expr></argument>, <argument><expr><name>buf_out1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cb2</name> <operator>=</operator> <call><name>evbuffer_add_cb</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>log_change_callback</name></expr></argument>, <argument><expr><name>buf_out2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"The %d magic words are spotty pudding"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_cb_clear_flags</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>cb2</name></expr></argument>, <argument><expr><name>EVBUFFER_CB_ENABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_prepend</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Hello"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_cb_set_flags</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>cb2</name></expr></argument>, <argument><expr><name>EVBUFFER_CB_ENABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_reference</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Goodbye"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_remove_cb_entry</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>cb1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>evbuffer_remove_cb</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>log_change_callback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"X"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>evbuffer_remove_cb</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>log_change_callback</name></expr></argument>, <argument><expr><name>buf_out2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_str_op</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>evbuffer_pullup</name><argument_list>(<argument><expr><name>buf_out1</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>,
<argument><expr><literal type="string">"0-&gt;36; 36-&gt;26; 26-&gt;31; 31-&gt;38; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_str_op</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>evbuffer_pullup</name><argument_list>(<argument><expr><name>buf_out2</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>,
<argument><expr><literal type="string">"0-&gt;36; 31-&gt;38; 38-&gt;0; 0-&gt;1; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><name>buf_out1</name></expr></argument>, <argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf_out1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><name>buf_out2</name></expr></argument>, <argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf_out2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cb1</name> <operator>=</operator> <call><name>evbuffer_add_cb</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>log_change_callback</name></expr></argument>, <argument><expr><name>buf_out1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>cb1</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cb2</name> <operator>=</operator> <call><name>evbuffer_add_cb</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>log_change_callback</name></expr></argument>, <argument><expr><name>buf_out2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>cb2</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_setcb</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>self_draining_callback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"This should get drained right away."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_uint_op</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_uint_op</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf_out1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_uint_op</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf_out2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_setcb</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"This will not."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_str_op</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>evbuffer_pullup</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="string">"This will not."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

cb1 = evbuffer_add_cb(buf, log_change_callback, buf_out1);
cb2 = evbuffer_add_cb(buf, log_change_callback, buf_out2);
evbuffer_cb_suspend(buf,cb2);
evbuffer_prepend(buf,"Hello world",11);
evbuffer_validate(buf);
evbuffer_cb_suspend(buf,cb1);
evbuffer_add(buf,"more",4);
evbuffer_cb_unsuspend(buf,cb2);
evbuffer_drain(buf, 4);
evbuffer_cb_unsuspend(buf,cb1);
evbuffer_drain(buf, evbuffer_get_length(buf));

tt_str_op(evbuffer_pullup(buf_out1, -1), ==,
"0-&gt;11; 11-&gt;11; 11-&gt;0; ");
tt_str_op(evbuffer_pullup(buf_out2, -1), ==,
"0-&gt;15; 15-&gt;11; 11-&gt;0; ");
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_out1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf_out1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_out2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf_out2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ref_done_cb_called_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>ref_done_cb_called_with</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ref_done_cb_called_with_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>ref_done_cb_called_with_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ref_done_cb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>ref_done_cb_called_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ref_done_cb_called_with</name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ref_done_cb_called_with_data</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ref_done_cb_called_with_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evbuffer_add_reference</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>chunk1</name><index>[]</index></name> <init>= <expr><literal type="string">"If you have found the answer to such a problem"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>chunk2</name><index>[]</index></name> <init>= <expr><literal type="string">"you ought to write it up for publication"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len1</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>chunk1</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>len2</name><init>=<expr><call><name>strlen</name><argument_list>(<argument><expr><name>chunk2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf1</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>buf1</name> <operator>=</operator> <call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_add_reference</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>chunk1</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>, <argument><expr><name>ref_done_cb</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="number">111</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_reference</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>chunk2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>, <argument><expr><name>ref_done_cb</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="number">222</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>len1</name><operator>+</operator><name>len2</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_remove</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"If you"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_remove</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">" have"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_prepend</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="string">"I have "</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>chunk1</name></expr></argument>, <argument><expr><literal type="string">"If you"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>len1</name><operator>-</operator><literal type="number">11</literal><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>ref_done_cb_called_count</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_remove</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="char">'m'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>ref_done_cb_called_with</name> <operator>==</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="number">111</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>ref_done_cb_called_with_data</name> <operator>==</operator> <name>chunk1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>ref_done_cb_called_with_len</name> <operator>==</operator> <name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>ref_done_cb_called_count</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf2</name> <operator>=</operator> <call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>ref_done_cb_called_count</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><literal type="string">"I "</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_add_buffer</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>ref_done_cb_called_count</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_remove</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"I ought to write"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>ref_done_cb_called_count</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>ref_done_cb_called_with</name> <operator>==</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="number">222</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="string">"You shake and shake the "</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_reference</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="string">"ketchup bottle"</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><name>ref_done_cb</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="number">3333</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="string">". Nothing comes and then a lot'll."</literal></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf1</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>ref_done_cb_called_count</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>ref_done_cb_called_with</name> <operator>==</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="number">3333</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>buf1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>buf2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evbuffer_multicast</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>chunk1</name><index>[]</index></name> <init>= <expr><literal type="string">"If you have found the answer to such a problem"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>chunk2</name><index>[]</index></name> <init>= <expr><literal type="string">"you ought to write it up for publication"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len1</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>chunk1</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>len2</name><init>=<expr><call><name>strlen</name><argument_list>(<argument><expr><name>chunk2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf1</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>buf1</name> <operator>=</operator> <call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>chunk1</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>chunk2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>len1</name><operator>+</operator><name>len2</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf2</name> <operator>=</operator> <call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_add_buffer_reference</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_add_buffer_reference</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_add_buffer_reference</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_remove</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"If you"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_remove</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">" have"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_prepend</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="string">"I have "</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>chunk1</name></expr></argument>, <argument><expr><literal type="string">"If you"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_remove</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"If you"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_remove</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">" have"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_prepend</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><literal type="string">"I have "</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>chunk1</name></expr></argument>, <argument><expr><literal type="string">"If you"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf1</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_remove</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"I have"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_remove</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">" foun"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>buf1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>buf2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evbuffer_multicast_drain</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>chunk1</name><index>[]</index></name> <init>= <expr><literal type="string">"If you have found the answer to such a problem"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>chunk2</name><index>[]</index></name> <init>= <expr><literal type="string">"you ought to write it up for publication"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len1</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>chunk1</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>len2</name><init>=<expr><call><name>strlen</name><argument_list>(<argument><expr><name>chunk2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf1</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>buf1</name> <operator>=</operator> <call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>chunk1</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>chunk2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>len1</name><operator>+</operator><name>len2</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf2</name> <operator>=</operator> <call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_add_buffer_reference</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>len1</name><operator>+</operator><name>len2</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>len1</name><operator>+</operator><name>len2</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>buf1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>buf2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_prepend</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evbuffer_cb_info</name></name> <modifier>*</modifier></type><name>cbinfo</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>cbinfo</name><operator>-&gt;</operator><name>orig_size</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>cbinfo</name><operator>-&gt;</operator><name>n_added</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">8096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>cbinfo</name><operator>-&gt;</operator><name>n_deleted</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>end</name>:</label>
<empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evbuffer_prepend</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf1</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><literal type="number">8096</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf1</name> <operator>=</operator> <call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evbuffer_prepend</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="string">"This string has 29 characters"</literal></expr></argument>, <argument><expr><literal type="number">29</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evbuffer_prepend</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="string">"Short."</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="number">6</literal><operator>+</operator><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_prepend</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="string">"it"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>buf1</name><operator>-&gt;</operator><name>first</name><operator>-&gt;</operator><name>buffer</name></name><operator>+</operator><name><name>buf1</name><operator>-&gt;</operator><name>first</name><operator>-&gt;</operator><name>misalign</name></name></expr></argument>,
<argument><expr><literal type="string">"it has"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evbuffer_prepend</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="string">"It is no longer true to say "</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>evbuffer_remove</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&gt;=</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>n</name></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_str_op</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>,<argument><expr><operator>==</operator></expr></argument>,<argument><expr><literal type="string">"It is no longer true to say it has 29 characters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf2</name> <operator>=</operator> <call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">999</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="string">"Here is string %d. "</literal></expr></argument>, <argument><expr><name>n</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_prepend_buffer</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="string">"Here is string %d. "</literal></expr></argument>, <argument><expr><name>n</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_prepend_buffer</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>evbuffer_remove</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&gt;=</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>n</name></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_str_op</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>,<argument><expr><operator>==</operator></expr></argument>,<argument><expr><literal type="string">"Here is string 1000. Here is string 999. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><literal type="number">8096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf2</name> <operator>=</operator> <call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_prepend</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_cb</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>check_prepend</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_prepend</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">8096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_remove_cb</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>check_prepend</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_validate</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_nstr_op</name><argument_list>(<argument><expr><literal type="number">8096</literal></expr></argument>,<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>evbuffer_pullup</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><literal type="number">8096</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><operator>==</operator></expr></argument>,<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><literal type="number">8096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_nstr_op</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>evbuffer_pullup</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><operator>==</operator></expr></argument>,<argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>buf2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evbuffer_peek_first_gt</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_ptr</name></name></type> <name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_iovec</name></name></type> <name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_buf</name> <operator>=</operator> <call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>tmp_buf</name></expr></argument>, <argument><expr><literal type="string">"Contents of chunk 100\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_buffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>tmp_buf</name></expr></argument>, <argument><expr><literal type="string">"Contents of chunk 1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_buffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_ptr_set</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>EVBUFFER_PTR_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_peek</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_peek</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_ptr_set</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>EVBUFFER_PTR_ADD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_peek</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_peek</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_peek</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_peek</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_peek</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_peek</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp_buf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>tmp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evbuffer_peek</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_iovec</name></name></type> <name><name>v</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_ptr</name></name></type> <name>ptr</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tt_iov_eq</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tt_int_op((v)-&gt;iov_len, ==, strlen(s)); tt_assert(!memcmp((v)-&gt;iov_base, (s), strlen(s)))</cpp:value></cpp:define>




<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_buf</name> <operator>=</operator> <call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>tmp_buf</name></expr></argument>, <argument><expr><literal type="string">"Contents of chunk [%d]\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_buffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>evbuffer_peek</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>evbuffer_peek</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_iov_eq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Contents of chunk [0]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_iov_eq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Contents of chunk [3]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_iov_eq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Contents of chunk [12]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_iov_eq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Contents of chunk [15]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>evbuffer_peek</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_iov_eq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Contents of chunk [0]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>evbuffer_peek</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_iov_eq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Contents of chunk [0]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_iov_eq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Contents of chunk [1]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>evbuffer_peek</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>evbuffer_peek</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_iov_eq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Contents of chunk [0]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>evbuffer_peek</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">65536</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_iov_eq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Contents of chunk [0]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_iov_eq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Contents of chunk [3]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_iov_eq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Contents of chunk [12]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_iov_eq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Contents of chunk [15]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">16</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>evbuffer_peek</name><argument_list>(<argument><expr><name>tmp_buf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>evbuffer_peek</name><argument_list>(<argument><expr><name>tmp_buf</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_ptr_set</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><name>EVBUFFER_PTR_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>evbuffer_peek</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_iov_eq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">" of chunk [1]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_iov_eq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Contents of chunk [2]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_iov_eq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Contents of chunk [3]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_ptr_set</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><name>EVBUFFER_PTR_ADD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>evbuffer_peek</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_iov_eq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Contents of chunk [2]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_iov_eq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Contents of chunk [3]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_ptr_set</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EVBUFFER_PTR_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>evbuffer_peek</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp_buf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>tmp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evbuffer_freeze</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp_buf</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>string</name><index>[]</index></name> <init>=
<expr><literal type="string">"I've known the wind by water banks to shake\n"</literal>
<literal type="string">"The late leaves down, which frozen where they fell\n"</literal>
<literal type="string">"And held in ice as dancers in a spell\n"</literal>
<literal type="string">"Fluttered all winter long into a lake..."</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>start</name> <init>= <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"start"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>charbuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>orig_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_iovec</name></name></type> <name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>start</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_str_op</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="string">"end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_buf</name> <operator>=</operator> <call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>tmp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_freeze</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREEZE_EQ</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>startcase</name></type></parameter>, <parameter><type><name>endcase</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (start) { tt_int_op((a), ==, (startcase)); } else { tt_int_op((a), ==, (endcase)); } } while (0)</cpp:value></cpp:define>









<expr_stmt><expr><name>orig_length</name> <operator>=</operator> <call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"abc"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREEZE_EQ</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evbuffer_reserve_space</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREEZE_EQ</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name></expr></argument>, <argument><expr><literal type="char">'X'</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evbuffer_commit_space</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREEZE_EQ</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evbuffer_add_reference</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREEZE_EQ</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Hello %s"</literal></expr></argument>, <argument><expr><literal type="string">"world"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREEZE_EQ</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>start</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>orig_length</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>orig_length</name> <operator>=</operator> <call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evbuffer_remove</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>charbuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREEZE_EQ</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evbuffer_drain</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREEZE_EQ</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evbuffer_prepend</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"dummy"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREEZE_EQ</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>evbuffer_readln</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EVBUFFER_EOL_LF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREEZE_EQ</name><argument_list>(<argument><expr><name>cp</name><operator>==</operator><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>start</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>orig_length</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp_buf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>tmp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evbuffer_add_iovec</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type> <name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_iovec</name></name></type> <name><name>vec</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>data</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"Guilt resembles a sword with two edges."</literal></expr>,
<expr><literal type="string">"On the one hand, it cuts for Justice, imposing practical morality upon those who fear it."</literal></expr>,
<expr><literal type="string">"Conscience does not always adhere to rational judgment."</literal></expr>,
<expr><literal type="string">"Guilt is always a self-imposed burden, but it is not always rightly imposed."</literal></expr>

}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>expected_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>returned_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>expected_length</name> <operator>+=</operator> <name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>returned_length</name> <operator>=</operator> <call><name>evbuffer_add_iovec</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>returned_length</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>expected_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>charbuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>charbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_remove</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>charbuf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>charbuf</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evbuffer_copyout</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dummy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>string</name><index>[]</index></name> <init>=
<expr><literal type="string">"Still they skirmish to and fro, men my messmates on the snow "</literal>
<literal type="string">"When we headed off the aurochs turn for turn; "</literal>
<literal type="string">"When the rich Allobrogenses never kept amanuenses, "</literal>
<literal type="string">"And our only plots were piled in lakes at Berne."</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_ptr</name></name></type> <name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dummy</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">206</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evbuffer_add_reference</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><name>no_cleanup</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_reference</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>string</name><operator>+</operator><literal type="number">80</literal></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><name>no_cleanup</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>string</name><operator>+</operator><literal type="number">160</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">160</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><literal type="number">206</literal></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>evbuffer_copyout</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"Still they"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>evbuffer_copyout</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><literal type="number">206</literal></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>evbuffer_copyout</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">230</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="number">206</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><literal type="number">206</literal></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>evbuffer_ptr_set</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name>EVBUFFER_PTR_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>evbuffer_copyout_from</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"mish to an"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><literal type="number">65</literal></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>evbuffer_copyout_from</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">65</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>string</name><operator>+</operator><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">65</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><literal type="number">90</literal></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>evbuffer_copyout_from</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">90</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>string</name><operator>+</operator><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">90</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><literal type="number">160</literal></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>evbuffer_copyout_from</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">160</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>string</name><operator>+</operator><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">160</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><literal type="number">206</literal><operator>-</operator><literal type="number">15</literal></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>evbuffer_copyout_from</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">999</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>string</name><operator>+</operator><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">206</literal><operator>-</operator><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><literal type="number">206</literal></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>setup_passthrough</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>testcase_t</name></name> <modifier>*</modifier></type><name>testcase</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>testcase</name><operator>-&gt;</operator><name>setup_data</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>cleanup_passthrough</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>testcase_t</name></name> <modifier>*</modifier></type><name>testcase</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>ptr</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>testcase_setup_t</name></name></type> <name>nil_setup</name> <init>= <expr><block>{
<expr><name>setup_passthrough</name></expr>,
<expr><name>cleanup_passthrough</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>testcase_t</name></name></type> <name><name>evbuffer_testcases</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"evbuffer"</literal></expr>, <expr><name>test_evbuffer</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"remove_buffer_with_empty"</literal></expr>, <expr><name>test_evbuffer_remove_buffer_with_empty</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"remove_buffer_with_empty2"</literal></expr>, <expr><name>test_evbuffer_remove_buffer_with_empty2</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"remove_buffer_with_empty3"</literal></expr>, <expr><name>test_evbuffer_remove_buffer_with_empty3</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"add_buffer_with_empty"</literal></expr>, <expr><name>test_evbuffer_add_buffer_with_empty</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"add_buffer_with_empty2"</literal></expr>, <expr><name>test_evbuffer_add_buffer_with_empty2</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"reserve2"</literal></expr>, <expr><name>test_evbuffer_reserve2</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"reserve_many"</literal></expr>, <expr><name>test_evbuffer_reserve_many</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"reserve_many2"</literal></expr>, <expr><name>test_evbuffer_reserve_many</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>nil_setup</name></expr>, <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="string">"add"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"reserve_many3"</literal></expr>, <expr><name>test_evbuffer_reserve_many</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>nil_setup</name></expr>, <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="string">"fill"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"expand"</literal></expr>, <expr><name>test_evbuffer_expand</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"expand_overflow"</literal></expr>, <expr><name>test_evbuffer_expand_overflow</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"add1"</literal></expr>, <expr><name>test_evbuffer_add1</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"add2"</literal></expr>, <expr><name>test_evbuffer_add2</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"reference"</literal></expr>, <expr><name>test_evbuffer_reference</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"reference2"</literal></expr>, <expr><name>test_evbuffer_reference2</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"iterative"</literal></expr>, <expr><name>test_evbuffer_iterative</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"readln"</literal></expr>, <expr><name>test_evbuffer_readln</name></expr>, <expr><name>TT_NO_LOGS</name></expr>, <expr><operator>&amp;</operator><name>basic_setup</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"search_eol"</literal></expr>, <expr><name>test_evbuffer_search_eol</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"find"</literal></expr>, <expr><name>test_evbuffer_find</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ptr_set"</literal></expr>, <expr><name>test_evbuffer_ptr_set</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"search"</literal></expr>, <expr><name>test_evbuffer_search</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"callbacks"</literal></expr>, <expr><name>test_evbuffer_callbacks</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"add_reference"</literal></expr>, <expr><name>test_evbuffer_add_reference</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"multicast"</literal></expr>, <expr><name>test_evbuffer_multicast</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"multicast_drain"</literal></expr>, <expr><name>test_evbuffer_multicast_drain</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"prepend"</literal></expr>, <expr><name>test_evbuffer_prepend</name></expr>, <expr><name>TT_FORK</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"peek"</literal></expr>, <expr><name>test_evbuffer_peek</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"peek_first_gt"</literal></expr>, <expr><name>test_evbuffer_peek_first_gt</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"freeze_start"</literal></expr>, <expr><name>test_evbuffer_freeze</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>nil_setup</name></expr>, <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="string">"start"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"freeze_end"</literal></expr>, <expr><name>test_evbuffer_freeze</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>nil_setup</name></expr>, <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="string">"end"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"add_iovec"</literal></expr>, <expr><name>test_evbuffer_add_iovec</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"copyout"</literal></expr>, <expr><name>test_evbuffer_copyout</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"file_segment_add_cleanup_cb"</literal></expr>, <expr><name>test_evbuffer_file_segment_add_cleanup_cb</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDFILE_TEST</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>parameters</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ name, test_evbuffer_add_file, TT_FORK|TT_NEED_BASE, &amp;basic_setup, (void*)(parameters) }</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDFILE_TEST_GROUP</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>parameters</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ADDFILE_TEST(name "_sendfile", "sendfile " parameters), ADDFILE_TEST(name "_mmap", "mmap " parameters), ADDFILE_TEST(name "_linear", "linear " parameters)</cpp:value></cpp:define>




<expr><call><name>ADDFILE_TEST_GROUP</name><argument_list>(<argument><expr><literal type="string">"add_file"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>ADDFILE_TEST</name><argument_list>(<argument><expr><literal type="string">"add_file_nosegment"</literal></expr></argument>, <argument><expr><literal type="string">"default nosegment"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ADDFILE_TEST_GROUP</name><argument_list>(<argument><expr><literal type="string">"add_big_file"</literal></expr></argument>, <argument><expr><literal type="string">"bigfile"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>ADDFILE_TEST</name><argument_list>(<argument><expr><literal type="string">"add_big_file_nosegment"</literal></expr></argument>, <argument><expr><literal type="string">"default nosegment bigfile"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ADDFILE_TEST_GROUP</name><argument_list>(<argument><expr><literal type="string">"add_file_offset"</literal></expr></argument>, <argument><expr><literal type="string">"bigfile map_offset"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>ADDFILE_TEST</name><argument_list>(<argument><expr><literal type="string">"add_file_offset_nosegment"</literal></expr></argument>,
<argument><expr><literal type="string">"default nosegment bigfile map_offset"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ADDFILE_TEST_GROUP</name><argument_list>(<argument><expr><literal type="string">"add_file_offset2"</literal></expr></argument>, <argument><expr><literal type="string">"bigfile offset_in_segment"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ADDFILE_TEST_GROUP</name><argument_list>(<argument><expr><literal type="string">"add_file_offset3"</literal></expr></argument>,
<argument><expr><literal type="string">"bigfile offset_in_segment map_offset"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>END_OF_TESTCASES</name></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
