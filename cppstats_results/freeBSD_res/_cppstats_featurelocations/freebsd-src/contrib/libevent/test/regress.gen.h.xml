<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/test/regress.gen.h">



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT_RPCOUT___TEST_REGRESS_RPC_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT_RPCOUT___TEST_REGRESS_RPC_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/rpc.h&gt;</cpp:file></cpp:include>

<struct_decl>struct <name>msg</name>;</struct_decl>
<struct_decl>struct <name>kill</name>;</struct_decl>
<struct_decl>struct <name>run</name>;</struct_decl>


<enum>enum <name>msg_</name> <block>{
<decl><name>MSG_FROM_NAME</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>MSG_TO_NAME</name><init>=<expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>MSG_ATTACK</name><init>=<expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>MSG_RUN</name><init>=<expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>MSG_MAX_TAGS</name></decl>
}</block>;</enum>


<struct>struct <name>msg_access_</name> <block>{
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>from_name_assign</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>from_name_get</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>to_name_assign</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>to_name_get</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>attack_assign</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>kill</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>attack_get</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>kill</name></name><modifier>*</modifier> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>run_assign</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>run</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>run_get</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>run</name></name><modifier>*</modifier> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>run</name></name><modifier>*</modifier></type> (<modifier>*</modifier><name>run_add</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<struct>struct <name>msg</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>msg_access_</name></name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>from_name_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>to_name_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>kill</name></name><modifier>*</modifier></type> <name>attack_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>run</name></name><modifier>*</modifier> <modifier>*</modifier></type><name>run_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>run_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>run_num_allocated</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ev_uint8_t</name></type> <name>from_name_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint8_t</name></type> <name>to_name_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint8_t</name></type> <name>attack_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint8_t</name></type> <name>run_set</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type><name>msg_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type><name>msg_new_with_arg</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>msg_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>msg_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>msg_marshal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>msg_unmarshal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>msg_complete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>evtag_marshal_msg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ev_uint32_t</name></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>evtag_unmarshal_msg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ev_uint32_t</name></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>msg_from_name_assign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>msg_from_name_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>msg_to_name_assign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>msg_to_name_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>msg_attack_assign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>kill</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>msg_attack_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>kill</name></name><modifier>*</modifier> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>msg_run_assign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>run</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>msg_run_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>run</name></name><modifier>*</modifier> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>run</name></name><modifier>*</modifier></type> <name>msg_run_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>



<enum>enum <name>kill_</name> <block>{
<decl><name>KILL_WEAPON</name><init>=<expr><literal type="number">65825</literal></expr></init></decl>,
<decl><name>KILL_ACTION</name><init>=<expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>KILL_HOW_OFTEN</name><init>=<expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>KILL_MAX_TAGS</name></decl>
}</block>;</enum>


<struct>struct <name>kill_access_</name> <block>{
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>weapon_assign</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>weapon_get</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>action_assign</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>action_get</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>how_often_assign</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ev_uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>how_often_get</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>ev_uint32_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ev_uint32_t</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>how_often_add</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ev_uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<struct>struct <name>kill</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>kill_access_</name></name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>weapon_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>action_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint32_t</name> <modifier>*</modifier></type><name>how_often_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>how_often_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>how_often_num_allocated</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ev_uint8_t</name></type> <name>weapon_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint8_t</name></type> <name>action_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint8_t</name></type> <name>how_often_set</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type><name>kill_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type><name>kill_new_with_arg</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>kill_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>kill_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>kill_marshal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>kill_unmarshal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>kill_complete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>evtag_marshal_kill</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ev_uint32_t</name></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>evtag_unmarshal_kill</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ev_uint32_t</name></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>kill_weapon_assign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>kill_weapon_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>kill_action_assign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>kill_action_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>kill_how_often_assign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ev_uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>kill_how_often_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>ev_uint32_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ev_uint32_t</name> <modifier>*</modifier></type> <name>kill_how_often_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ev_uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>



<enum>enum <name>run_</name> <block>{
<decl><name>RUN_HOW</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>RUN_SOME_BYTES</name><init>=<expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>RUN_FIXED_BYTES</name><init>=<expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>RUN_NOTES</name><init>=<expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>RUN_LARGE_NUMBER</name><init>=<expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>RUN_OTHER_NUMBERS</name><init>=<expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>RUN_MAX_TAGS</name></decl>
}</block>;</enum>


<struct>struct <name>run_access_</name> <block>{
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>how_assign</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>how_get</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>some_bytes_assign</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ev_uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ev_uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>some_bytes_get</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ev_uint8_t</name> <modifier>*</modifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ev_uint32_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>fixed_bytes_assign</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ev_uint8_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>fixed_bytes_get</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ev_uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>notes_assign</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>notes_get</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier> <modifier>*</modifier></type> (<modifier>*</modifier><name>notes_add</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>large_number_assign</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ev_uint64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>large_number_get</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ev_uint64_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>other_numbers_assign</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ev_uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>other_numbers_get</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>ev_uint32_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ev_uint32_t</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>other_numbers_add</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ev_uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<struct>struct <name>run</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>run_access_</name></name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>how_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint8_t</name> <modifier>*</modifier></type><name>some_bytes_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint32_t</name></type> <name>some_bytes_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint8_t</name></type> <name><name>fixed_bytes_data</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier> <modifier>*</modifier></type><name>notes_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>notes_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>notes_num_allocated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint64_t</name></type> <name>large_number_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint32_t</name> <modifier>*</modifier></type><name>other_numbers_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>other_numbers_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>other_numbers_num_allocated</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ev_uint8_t</name></type> <name>how_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint8_t</name></type> <name>some_bytes_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint8_t</name></type> <name>fixed_bytes_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint8_t</name></type> <name>notes_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint8_t</name></type> <name>large_number_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint8_t</name></type> <name>other_numbers_set</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type><name>run_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type><name>run_new_with_arg</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>run_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>run_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>run_marshal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>run_unmarshal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>run_complete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>evtag_marshal_run</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ev_uint32_t</name></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>evtag_unmarshal_run</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ev_uint32_t</name></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>run_how_assign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>run_how_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>run_some_bytes_assign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ev_uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ev_uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>run_some_bytes_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ev_uint8_t</name> <modifier>*</modifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ev_uint32_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>run_fixed_bytes_assign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ev_uint8_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>run_fixed_bytes_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ev_uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>run_notes_assign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>run_notes_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier> <modifier>*</modifier></type> <name>run_notes_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>run_large_number_assign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ev_uint64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>run_large_number_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ev_uint64_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>run_other_numbers_assign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ev_uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>run_other_numbers_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>ev_uint32_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ev_uint32_t</name> <modifier>*</modifier></type> <name>run_other_numbers_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ev_uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
