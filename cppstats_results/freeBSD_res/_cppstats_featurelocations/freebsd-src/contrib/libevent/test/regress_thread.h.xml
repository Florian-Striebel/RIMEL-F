<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/test/regress_thread.h">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>REGRESS_THREAD_H_INCLUDED_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGRESS_THREAD_H_INCLUDED_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_PTHREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_T</name></cpp:macro> <cpp:value>pthread_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_FN</name></cpp:macro> <cpp:value>void *</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_RETURN</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>return (NULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_START</name><parameter_list>(<parameter><type><name>threadvar</name></type></parameter>, <parameter><type><name>fn</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pthread_create(&amp;(threadvar), NULL, fn, arg)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_JOIN</name><parameter_list>(<parameter><type><name>th</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pthread_join(th, NULL)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_T</name></cpp:macro> <cpp:value>HANDLE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_FN</name></cpp:macro> <cpp:value>unsigned __stdcall</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_RETURN</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>return (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_START</name><parameter_list>(<parameter><type><name>threadvar</name></type></parameter>, <parameter><type><name>fn</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { uintptr_t threadhandle = _beginthreadex(NULL,0,fn,(arg),0,NULL); (threadvar) = (HANDLE) threadhandle; } while (0)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_JOIN</name><parameter_list>(<parameter><type><name>th</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>WaitForSingleObject(th, INFINITE)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
