<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/test/regress_rpc.c">



























<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NDEBUG</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event-config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/buffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/http.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/http_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/http_struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/rpc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/rpc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/rpc_struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/tag.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log-internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regress.gen.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regress_testutils.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_PYTHON_EXISTS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type>
<name>http_setup</name><parameter_list>(<parameter><decl><type><name>ev_uint16_t</name> <modifier>*</modifier></type><name>pport</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>myhttp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_bound_socket</name></name> <modifier>*</modifier></type><name>sock</name></decl>;</decl_stmt>

<expr_stmt><expr><name>myhttp</name> <operator>=</operator> <call><name>evhttp_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>myhttp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Could not start web server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>sock</name> <operator>=</operator> <call><name>evhttp_bind_socket_with_handle</name><argument_list>(<argument><expr><name>myhttp</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sock</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Couldn't open web port"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>regress_get_socket_port</name><argument_list>(<argument><expr><call><name>evhttp_bound_socket_get_fd</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pport</name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>myhttp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<macro><name>EVRPC_HEADER</name><argument_list>(<argument>Message</argument>, <argument>msg</argument>, <argument>kill</argument>)</argument_list></macro>
<macro><name>EVRPC_HEADER</name><argument_list>(<argument>NeverReply</argument>, <argument>msg</argument>, <argument>kill</argument>)</argument_list></macro>

<macro><name>EVRPC_GENERATE</name><argument_list>(<argument>Message</argument>, <argument>msg</argument>, <argument>kill</argument>)</argument_list></macro>
<macro><name>EVRPC_GENERATE</name><argument_list>(<argument>NeverReply</argument>, <argument>msg</argument>, <argument>kill</argument>)</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>need_input_hook</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>need_output_hook</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type>
<name>MessageCb</name><argument_list>(<argument><expr><call><name>EVRPC_STRUCT</name><argument_list>(<argument><expr><name>Message</name></expr></argument>)</argument_list></call><operator>*</operator> <name>rpc</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>arg</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>kill</name></name><modifier>*</modifier></type> <name>kill_reply</name> <init>= <expr><name><name>rpc</name><operator>-&gt;</operator><name>reply</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>need_input_hook</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name><modifier>*</modifier></type> <name>req</name> <init>= <expr><call><name>EVRPC_REQUEST_HTTP</name><argument_list>(<argument><expr><name>rpc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><call><name>evhttp_find_header</name><argument_list>(
<argument><expr><name><name>req</name><operator>-&gt;</operator><name>input_headers</name></name></expr></argument>, <argument><expr><literal type="string">"X-Hook"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="string">"input"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>EVTAG_ASSIGN</name><argument_list>(<argument><expr><name>kill_reply</name></expr></argument>, <argument><expr><name>weapon</name></expr></argument>, <argument><expr><literal type="string">"dagger"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVTAG_ASSIGN</name><argument_list>(<argument><expr><name>kill_reply</name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><literal type="string">"wave around like an idiot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>EVRPC_REQUEST_DONE</name><argument_list>(<argument><expr><name>rpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <call><name>EVRPC_STRUCT</name><argument_list>(<argument><expr><name>NeverReply</name></expr></argument>)</argument_list></call> <operator>*</operator><name>saved_rpc</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type>
<name>NeverReplyCb</name><argument_list>(<argument><expr><call><name>EVRPC_STRUCT</name><argument_list>(<argument><expr><name>NeverReply</name></expr></argument>)</argument_list></call><operator>*</operator> <name>rpc</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>arg</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><name>test_ok</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>saved_rpc</name> <operator>=</operator> <name>rpc</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rpc_setup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>phttp</name></decl></parameter>, <parameter><decl><type><name>ev_uint16_t</name> <modifier>*</modifier></type><name>pport</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evrpc_base</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pbase</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>http</name> <operator>=</operator> <call><name>http_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>evrpc_init</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVRPC_REGISTER</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>Message</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>kill</name></expr></argument>, <argument><expr><name>MessageCb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVRPC_REGISTER</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>NeverReply</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>kill</name></expr></argument>, <argument><expr><name>NeverReplyCb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>phttp</name> <operator>=</operator> <name>http</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pport</name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pbase</name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>

<expr_stmt><expr><name>need_input_hook</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>need_output_hook</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rpc_teardown</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>EVRPC_UNREGISTER</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>Message</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>EVRPC_UNREGISTER</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>NeverReply</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evrpc_free</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rpc_postrequest_failure</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>response_code</name></name> <operator>!=</operator> <name>HTTP_SERVUNAVAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FAILED (response code)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_loopexit</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>rpc_basic_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rpc_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>http</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>evcon</name> <operator>=</operator> <call><name>evhttp_connection_new</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>rpc_postrequest_failure</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_headers</name></name></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>, <argument><expr><literal type="string">"somehost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_printf</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_buffer</name></name></expr></argument>, <argument><expr><literal type="string">"Some Nonsense"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>,
<argument><expr><name>EVHTTP_REQ_POST</name></expr></argument>,
<argument><expr><literal type="string">"/.rpc.Message"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_dispatch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_connection_free</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rpc_teardown</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>test_ok</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rpc_postrequest_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>kill</name></name><modifier>*</modifier></type> <name>kill_reply</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>response_code</name></name> <operator>!=</operator> <name>HTTP_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FAILED (response code)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>kill_reply</name> <operator>=</operator> <call><name>kill_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>kill_unmarshal</name><argument_list>(<argument><expr><name>kill_reply</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>input_buffer</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FAILED (unmarshal)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>kill_free</name><argument_list>(<argument><expr><name>kill_reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_loopexit</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rpc_basic_message</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rpc_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>http</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>evcon</name> <operator>=</operator> <call><name>evhttp_connection_new</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>rpc_postrequest_done</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>req</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_headers</name></name></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>, <argument><expr><literal type="string">"somehost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>msg_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVTAG_ASSIGN</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>from_name</name></expr></argument>, <argument><expr><literal type="string">"niels"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVTAG_ASSIGN</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>to_name</name></expr></argument>, <argument><expr><literal type="string">"tester"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_marshal</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_buffer</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>, <argument><expr><name>req</name></expr></argument>,
<argument><expr><name>EVHTTP_REQ_POST</name></expr></argument>,
<argument><expr><literal type="string">"/.rpc.Message"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_dispatch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_connection_free</name><argument_list>(<argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rpc_teardown</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>evrpc_pool</name></name> <modifier>*</modifier></type>
<name>rpc_pool_with_connection</name><parameter_list>(<parameter><decl><type><name>ev_uint16_t</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_pool</name></name> <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pool</name> <operator>=</operator> <call><name>evrpc_pool_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pool</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>evcon</name> <operator>=</operator> <call><name>evhttp_connection_new</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>evcon</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evrpc_pool_add_connection</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>evcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>pool</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>GotKillCb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_status</name></name> <modifier>*</modifier></type><name>status</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type><name>kill</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>weapon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>action</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>need_output_hook</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name><name>status</name><operator>-&gt;</operator><name>http_req</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><call><name>evhttp_find_header</name><argument_list>(
<argument><expr><name><name>req</name><operator>-&gt;</operator><name>input_headers</name></name></expr></argument>, <argument><expr><literal type="string">"X-Pool-Hook"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="string">"ran"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>status</name><operator>-&gt;</operator><name>error</name></name> <operator>!=</operator> <name>EVRPC_STATUS_ERR_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EVTAG_GET</name><argument_list>(<argument><expr><name>kill</name></expr></argument>, <argument><expr><name>weapon</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>weapon</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"get weapon\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EVTAG_GET</name><argument_list>(<argument><expr><name>kill</name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"get action\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>weapon</name></expr></argument>, <argument><expr><literal type="string">"dagger"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>action</name></expr></argument>, <argument><expr><literal type="string">"wave around like an idiot"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<label><name>done</name>:</label>
<expr_stmt><expr><call><name>event_loopexit</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>GotKillCbTwo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_status</name></name> <modifier>*</modifier></type><name>status</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type><name>kill</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>weapon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>action</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>status</name><operator>-&gt;</operator><name>error</name></name> <operator>!=</operator> <name>EVRPC_STATUS_ERR_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EVTAG_GET</name><argument_list>(<argument><expr><name>kill</name></expr></argument>, <argument><expr><name>weapon</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>weapon</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"get weapon\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EVTAG_GET</name><argument_list>(<argument><expr><name>kill</name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"get action\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>weapon</name></expr></argument>, <argument><expr><literal type="string">"dagger"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>action</name></expr></argument>, <argument><expr><literal type="string">"wave around like an idiot"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<label><name>done</name>:</label>
<if_stmt><if>if <condition>(<expr><name>test_ok</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_loopexit</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rpc_hook_add_header</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>evbuf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hook_type</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"input"</literal></expr></argument>, <argument><expr><name>hook_type</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>input_headers</name></name></expr></argument>, <argument><expr><literal type="string">"X-Hook"</literal></expr></argument>, <argument><expr><name>hook_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>output_headers</name></name></expr></argument>, <argument><expr><literal type="string">"X-Hook"</literal></expr></argument>, <argument><expr><name>hook_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>evrpc_hook_get_connection</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>EVRPC_CONTINUE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rpc_hook_add_meta</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>evbuf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>evrpc_hook_add_meta</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"meta"</literal></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>evrpc_hook_get_connection</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>EVRPC_CONTINUE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rpc_hook_remove_header</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>evbuf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><call><name>evhttp_find_header</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>input_headers</name></name></expr></argument>, <argument><expr><literal type="string">"X-Hook"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>data_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>header</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evhttp_remove_header</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>input_headers</name></name></expr></argument>, <argument><expr><literal type="string">"X-Hook"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>input_headers</name></name></expr></argument>, <argument><expr><literal type="string">"X-Pool-Hook"</literal></expr></argument>, <argument><expr><literal type="string">"ran"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>evrpc_hook_find_meta</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"meta"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>data_len</name> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>evrpc_hook_get_connection</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>EVRPC_CONTINUE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rpc_basic_client</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_pool</name></name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type><name>kill</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rpc_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>http</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>need_input_hook</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>need_output_hook</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>evrpc_add_hook</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>EVRPC_INPUT</name></expr></argument>, <argument><expr><name>rpc_hook_add_header</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="string">"input"</literal></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>evrpc_add_hook</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>EVRPC_OUTPUT</name></expr></argument>, <argument><expr><name>rpc_hook_add_header</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="string">"output"</literal></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pool</name> <operator>=</operator> <call><name>rpc_pool_with_connection</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>evrpc_add_hook</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>EVRPC_OUTPUT</name></expr></argument>, <argument><expr><name>rpc_hook_add_meta</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>evrpc_add_hook</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>EVRPC_INPUT</name></expr></argument>, <argument><expr><name>rpc_hook_remove_header</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="string">"output"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>msg_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVTAG_ASSIGN</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>from_name</name></expr></argument>, <argument><expr><literal type="string">"niels"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVTAG_ASSIGN</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>to_name</name></expr></argument>, <argument><expr><literal type="string">"tester"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>kill</name> <operator>=</operator> <call><name>kill_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVRPC_MAKE_REQUEST</name><argument_list>(<argument><expr><name>Message</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>kill</name></expr></argument>, <argument><expr><name>GotKillCb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_dispatch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>test_ok</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>kill_clear</name><argument_list>(<argument><expr><name>kill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVRPC_MAKE_REQUEST</name><argument_list>(<argument><expr><name>Message</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>kill</name></expr></argument>, <argument><expr><name>GotKillCb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_dispatch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>test_ok</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>kill_clear</name><argument_list>(<argument><expr><name>kill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_request_wrapper</name></name> <modifier>*</modifier></type><name>ctx</name> <init>=
<expr><call><name>EVRPC_MAKE_CTX</name><argument_list>(<argument><expr><name>Message</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>kill</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>kill</name></expr></argument>, <argument><expr><name>GotKillCb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>evrpc_make_request</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>event_dispatch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rpc_teardown</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>test_ok</name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>kill</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>kill_free</name><argument_list>(<argument><expr><name>kill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pool</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evrpc_pool_free</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>http</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>need_input_hook</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>need_output_hook</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>rpc_basic_queued_client</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_pool</name></name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type><name>msg</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type><name>kill_one</name><init>=<expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>kill_two</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rpc_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>http</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pool</name> <operator>=</operator> <call><name>rpc_pool_with_connection</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>msg_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVTAG_ASSIGN</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>from_name</name></expr></argument>, <argument><expr><literal type="string">"niels"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVTAG_ASSIGN</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>to_name</name></expr></argument>, <argument><expr><literal type="string">"tester"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>kill_one</name> <operator>=</operator> <call><name>kill_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>kill_two</name> <operator>=</operator> <call><name>kill_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVRPC_MAKE_REQUEST</name><argument_list>(<argument><expr><name>Message</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>kill_one</name></expr></argument>, <argument><expr><name>GotKillCbTwo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVRPC_MAKE_REQUEST</name><argument_list>(<argument><expr><name>Message</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>kill_two</name></expr></argument>, <argument><expr><name>GotKillCb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_dispatch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rpc_teardown</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>test_ok</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>kill_one</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>kill_free</name><argument_list>(<argument><expr><name>kill_one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>kill_two</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>kill_free</name><argument_list>(<argument><expr><name>kill_two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pool</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evrpc_pool_free</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>http</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>GotErrorCb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_status</name></name> <modifier>*</modifier></type><name>status</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type><name>kill</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>status</name><operator>-&gt;</operator><name>error</name></name> <operator>!=</operator> <name>EVRPC_STATUS_ERR_TIMEOUT</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>kill_complete</name><argument_list>(<argument><expr><name>kill</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<label><name>done</name>:</label>
<expr_stmt><expr><call><name>event_loopexit</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<struct>struct <name>rpc_hook_ctx_</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>vbase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>hook_pause_cb_called</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rpc_hook_pause_cb</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rpc_hook_ctx_</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>hook_pause_cb_called</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evrpc_resume_request</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>vbase</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>EVRPC_CONTINUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rpc_hook_pause</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>evbuf</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rpc_hook_ctx_</name></name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tmp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>vbase</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_once</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>EV_TIMEOUT</name></expr></argument>, <argument><expr><name>rpc_hook_pause_cb</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EVRPC_PAUSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rpc_basic_client_with_pause</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_pool</name></name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type><name>kill</name><init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rpc_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>http</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>evrpc_add_hook</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>EVRPC_INPUT</name></expr></argument>, <argument><expr><name>rpc_hook_pause</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>evrpc_add_hook</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>EVRPC_OUTPUT</name></expr></argument>, <argument><expr><name>rpc_hook_pause</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pool</name> <operator>=</operator> <call><name>rpc_pool_with_connection</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>evrpc_add_hook</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>EVRPC_INPUT</name></expr></argument>, <argument><expr><name>rpc_hook_pause</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>evrpc_add_hook</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>EVRPC_OUTPUT</name></expr></argument>, <argument><expr><name>rpc_hook_pause</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>msg_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVTAG_ASSIGN</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>from_name</name></expr></argument>, <argument><expr><literal type="string">"niels"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVTAG_ASSIGN</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>to_name</name></expr></argument>, <argument><expr><literal type="string">"tester"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>kill</name> <operator>=</operator> <call><name>kill_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVRPC_MAKE_REQUEST</name><argument_list>(<argument><expr><name>Message</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>kill</name></expr></argument>, <argument><expr><name>GotKillCb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_dispatch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>test_ok</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>hook_pause_cb_called</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>base</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rpc_teardown</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>kill</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>kill_free</name><argument_list>(<argument><expr><name>kill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pool</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evrpc_pool_free</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>http</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rpc_client_timeout</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_pool</name></name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type><name>kill</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rpc_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>http</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pool</name> <operator>=</operator> <call><name>rpc_pool_with_connection</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evrpc_pool_set_timeout</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>msg_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVTAG_ASSIGN</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>from_name</name></expr></argument>, <argument><expr><literal type="string">"niels"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVTAG_ASSIGN</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>to_name</name></expr></argument>, <argument><expr><literal type="string">"tester"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>kill</name> <operator>=</operator> <call><name>kill_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVRPC_MAKE_REQUEST</name><argument_list>(<argument><expr><name>NeverReply</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>kill</name></expr></argument>, <argument><expr><name>GotErrorCb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_dispatch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>EVRPC_REQUEST_DONE</name><argument_list>(<argument><expr><name>saved_rpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rpc_teardown</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>test_ok</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>kill</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>kill_free</name><argument_list>(<argument><expr><name>kill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pool</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evrpc_pool_free</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>http</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evhttp_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rpc_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>msg2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>kill</name></name> <modifier>*</modifier></type><name>attack</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>run</name></name> <modifier>*</modifier></type><name>run</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv_start</name></decl>, <decl><type ref="prev"/><name>tv_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint32_t</name></type> <name>tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>msg_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVTAG_ASSIGN</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>from_name</name></expr></argument>, <argument><expr><literal type="string">"niels"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVTAG_ASSIGN</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>to_name</name></expr></argument>, <argument><expr><literal type="string">"phoenix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EVTAG_GET</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>attack</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attack</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Failed to set kill message."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EVTAG_ASSIGN</name><argument_list>(<argument><expr><name>attack</name></expr></argument>, <argument><expr><name>weapon</name></expr></argument>, <argument><expr><literal type="string">"feather"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVTAG_ASSIGN</name><argument_list>(<argument><expr><name>attack</name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><literal type="string">"tickle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>EVTAG_ARRAY_ADD_VALUE</name><argument_list>(<argument><expr><name>attack</name></expr></argument>, <argument><expr><name>how_often</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Failed to add how_often."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>evutil_gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv_start</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>run</name> <operator>=</operator> <call><name>EVTAG_ARRAY_ADD</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>run</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Failed to add run message."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>EVTAG_ASSIGN</name><argument_list>(<argument><expr><name>run</name></expr></argument>, <argument><expr><name>how</name></expr></argument>, <argument><expr><literal type="string">"very fast but with some data in it"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVTAG_ASSIGN</name><argument_list>(<argument><expr><name>run</name></expr></argument>, <argument><expr><name>fixed_bytes</name></expr></argument>,
<argument><expr><operator>(</operator><name>ev_uint8_t</name><operator>*</operator><operator>)</operator><literal type="string">"012345678901234567890123"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EVTAG_ARRAY_ADD_VALUE</name><argument_list>(
<argument><expr><name>run</name></expr></argument>, <argument><expr><name>notes</name></expr></argument>, <argument><expr><literal type="string">"this is my note"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Failed to add note."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EVTAG_ARRAY_ADD_VALUE</name><argument_list>(<argument><expr><name>run</name></expr></argument>, <argument><expr><name>notes</name></expr></argument>, <argument><expr><literal type="string">"pps"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Failed to add note"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EVTAG_ASSIGN</name><argument_list>(<argument><expr><name>run</name></expr></argument>, <argument><expr><name>large_number</name></expr></argument>, <argument><expr><literal type="number">0xdead0a0bcafebeefLL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVTAG_ARRAY_ADD_VALUE</name><argument_list>(<argument><expr><name>run</name></expr></argument>, <argument><expr><name>other_numbers</name></expr></argument>, <argument><expr><literal type="number">0xdead0a0b</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVTAG_ARRAY_ADD_VALUE</name><argument_list>(<argument><expr><name>run</name></expr></argument>, <argument><expr><name>other_numbers</name></expr></argument>, <argument><expr><literal type="number">0xbeefcafe</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>msg_complete</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Failed to make complete message."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>evtag_marshal_msg</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0xdeaf</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evtag_peek</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Failed to peak tag."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>!=</operator> <literal type="number">0xdeaf</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TT_DIE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Got incorrect tag: %0x."</literal><operator>,</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>tag</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>msg2</name> <operator>=</operator> <call><name>msg_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evtag_unmarshal_msg</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0xdeaf</literal></expr></argument>, <argument><expr><name>msg2</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Failed to unmarshal message."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>evutil_gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv_end</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_timersub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv_end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TT_BLATHER</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"(%.1f us/add) "</literal><operator>,</operator>
<operator>(</operator><name>float</name><operator>)</operator><name><name>tv_end</name><operator>.</operator><name>tv_sec</name></name><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name>i</name> <operator>*</operator> <literal type="number">1000000.0</literal> <operator>+</operator>
<name><name>tv_end</name><operator>.</operator><name>tv_usec</name></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVTAG_HAS</name><argument_list>(<argument><expr><name>msg2</name></expr></argument>, <argument><expr><name>from_name</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>EVTAG_HAS</name><argument_list>(<argument><expr><name>msg2</name></expr></argument>, <argument><expr><name>to_name</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>EVTAG_HAS</name><argument_list>(<argument><expr><name>msg2</name></expr></argument>, <argument><expr><name>attack</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Missing data structures."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EVTAG_GET</name><argument_list>(<argument><expr><name>msg2</name></expr></argument>, <argument><expr><name>attack</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attack</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Could not get attack."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EVTAG_ARRAY_LEN</name><argument_list>(<argument><expr><name>msg2</name></expr></argument>, <argument><expr><name>run</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Wrong number of run messages."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>EVTAG_ARRAY_GET</name><argument_list>(<argument><expr><name>msg2</name></expr></argument>, <argument><expr><name>run</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>run</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Failed to get run msg."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>note_one</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>note_two</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint64_t</name></type> <name>large_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint32_t</name></type> <name>short_number</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EVTAG_ARRAY_LEN</name><argument_list>(<argument><expr><name>run</name></expr></argument>, <argument><expr><name>notes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Wrong number of note strings."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EVTAG_ARRAY_GET</name><argument_list>(<argument><expr><name>run</name></expr></argument>, <argument><expr><name>notes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>note_one</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<call><name>EVTAG_ARRAY_GET</name><argument_list>(<argument><expr><name>run</name></expr></argument>, <argument><expr><name>notes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>note_two</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Could not get note strings."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>note_one</name></expr></argument>, <argument><expr><literal type="string">"this is my note"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>note_two</name></expr></argument>, <argument><expr><literal type="string">"pps"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Incorrect note strings encoded."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EVTAG_GET</name><argument_list>(<argument><expr><name>run</name></expr></argument>, <argument><expr><name>large_number</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>large_number</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<name>large_number</name> <operator>!=</operator> <literal type="number">0xdead0a0bcafebeefLL</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Incorrrect large_number."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EVTAG_ARRAY_LEN</name><argument_list>(<argument><expr><name>run</name></expr></argument>, <argument><expr><name>other_numbers</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Wrong number of other_numbers."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EVTAG_ARRAY_GET</name><argument_list>(
<argument><expr><name>run</name></expr></argument>, <argument><expr><name>other_numbers</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>short_number</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Could not get short number."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>tt_uint_op</name><argument_list>(<argument><expr><name>short_number</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0xdead0a0b</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>EVTAG_ARRAY_LEN</name><argument_list>(<argument><expr><name>attack</name></expr></argument>, <argument><expr><name>how_often</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ev_uint32_t</name></type> <name>res</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EVTAG_ARRAY_GET</name><argument_list>(<argument><expr><name>attack</name></expr></argument>, <argument><expr><name>how_often</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TT_DIE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Cannot get %dth how_often msg."</literal><operator>,</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name>res</name> <operator>!=</operator> <name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TT_DIE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Wrong message encoded %d != %d"</literal><operator>,</operator> <name>i</name><operator>,</operator> <name>res</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>msg2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_free</name><argument_list>(<argument><expr><name>msg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPC_LEGACY</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ #name, run_legacy_test_fn, TT_FORK|TT_NEED_BASE|TT_LEGACY, &amp;legacy_setup, rpc_##name }</cpp:value></cpp:define>



<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPC_LEGACY</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ #name, NULL, TT_SKIP, NULL, NULL }</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>struct</name> <name>testcase_t</name></name></type> <name><name>rpc_testcases</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>RPC_LEGACY</name><argument_list>(<argument><expr><name>basic_test</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>RPC_LEGACY</name><argument_list>(<argument><expr><name>basic_message</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>RPC_LEGACY</name><argument_list>(<argument><expr><name>basic_client</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>RPC_LEGACY</name><argument_list>(<argument><expr><name>basic_queued_client</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>RPC_LEGACY</name><argument_list>(<argument><expr><name>basic_client_with_pause</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>RPC_LEGACY</name><argument_list>(<argument><expr><name>client_timeout</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>RPC_LEGACY</name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>,

<expr><name>END_OF_TESTCASES</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
