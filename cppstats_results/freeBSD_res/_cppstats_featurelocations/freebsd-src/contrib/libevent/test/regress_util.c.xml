<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/test/regress_util.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util-internal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ws2tcpip.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event-config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_NETINET_IN6_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in6.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_WAIT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ipv6-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../log-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../strlcpy-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../mm-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../time-internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regress.h"</cpp:file></cpp:include>

<enum>enum <name>entry_status</name> <block>{ <decl><name>NORMAL</name></decl>, <decl><name>CANONICAL</name></decl>, <decl><name>BAD</name></decl> }</block>;</enum>


<struct><specifier>static</specifier> struct <name>ipv4_entry</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint32_t</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>entry_status</name></name></type> <name>status</name></decl>;</decl_stmt>
}</block> <decl><name><name>ipv4_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"1.2.3.4"</literal></expr>, <expr><literal type="number">0x01020304u</literal></expr>, <expr><name>CANONICAL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"255.255.255.255"</literal></expr>, <expr><literal type="number">0xffffffffu</literal></expr>, <expr><name>CANONICAL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"256.0.0.0"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>BAD</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ABC"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>BAD</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"1.2.3.4.5"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>BAD</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"176.192.208.244"</literal></expr>, <expr><literal type="number">0xb0c0d0f4</literal></expr>, <expr><name>CANONICAL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>BAD</name></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>

<struct><specifier>static</specifier> struct <name>ipv6_entry</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint32_t</name></type> <name><name>res</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>entry_status</name></name></type> <name>status</name></decl>;</decl_stmt>
}</block> <decl><name><name>ipv6_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"::"</literal></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>, <expr><name>CANONICAL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"0:0:0:0:0:0:0:0"</literal></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>, <expr><name>NORMAL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"::1"</literal></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, }</block></expr>, <expr><name>CANONICAL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"::1.2.3.4"</literal></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x01020304</literal></expr>, }</block></expr>, <expr><name>CANONICAL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ffff:1::"</literal></expr>, <expr><block>{ <expr><literal type="number">0xffff0001u</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>, <expr><name>CANONICAL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ffff:0000::"</literal></expr>, <expr><block>{ <expr><literal type="number">0xffff0000u</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>, <expr><name>NORMAL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ffff::1234"</literal></expr>, <expr><block>{ <expr><literal type="number">0xffff0000u</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x1234</literal></expr>, }</block></expr>, <expr><name>CANONICAL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"0102::1.2.3.4"</literal></expr>, <expr><block>{<expr><literal type="number">0x01020000u</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x01020304u</literal></expr> }</block></expr>, <expr><name>NORMAL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"::9:c0a8:1:1"</literal></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x0009c0a8u</literal></expr>, <expr><literal type="number">0x00010001u</literal></expr> }</block></expr>, <expr><name>CANONICAL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"::ffff:1.2.3.4"</literal></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x000ffffu</literal></expr>, <expr><literal type="number">0x01020304u</literal></expr> }</block></expr>, <expr><name>CANONICAL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"FFFF::"</literal></expr>, <expr><block>{ <expr><literal type="number">0xffff0000u</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><name>NORMAL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"foobar."</literal></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><name>BAD</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"foobar"</literal></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><name>BAD</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fo:obar"</literal></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><name>BAD</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ffff"</literal></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><name>BAD</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fffff::"</literal></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><name>BAD</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fffff::"</literal></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><name>BAD</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"::1.0.1.1000"</literal></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><name>BAD</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"1:2:33333:4::"</literal></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><name>BAD</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"1:2:3:4:5:6:7:8:9"</literal></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><name>BAD</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"1::2::3"</literal></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><name>BAD</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">":::1"</literal></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><name>BAD</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>, <expr><name>BAD</name></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>regress_ipv4_parse</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ipv4_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>written</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ipv4_entry</name></name> <modifier>*</modifier></type><name>ent</name> <init>= <expr><operator>&amp;</operator><name><name>ipv4_entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evutil_inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name><name>ent</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ent</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>BAD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TT_FAIL</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s did not parse, but it's a good address!"</literal><operator>,</operator>
<name><name>ent</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ent</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>BAD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TT_FAIL</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s parsed, but we expected an error"</literal><operator>,</operator> <name><name>ent</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>in</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>ent</name><operator>-&gt;</operator><name>res</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TT_FAIL</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s parsed to %lx, but we expected %lx"</literal><operator>,</operator> <name><name>ent</name><operator>-&gt;</operator><name>addr</name></name><operator>,</operator>
<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>ntohl</name><argument_list>(<argument><expr><name><name>in</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call><operator>,</operator>
<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>ent</name><operator>-&gt;</operator><name>res</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ent</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>CANONICAL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>w</name> <init>= <expr><call><name>evutil_inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><name>written</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>written</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>w</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TT_FAIL</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Tried to write out %s; got NULL."</literal><operator>,</operator> <name><name>ent</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>written</name></expr></argument>, <argument><expr><name><name>ent</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TT_FAIL</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Tried to write out %s; got %s"</literal><operator>,</operator>
<name><name>ent</name><operator>-&gt;</operator><name>addr</name></name><operator>,</operator> <name>written</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>regress_ipv6_parse</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ipv6_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>written</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ipv6_entry</name></name> <modifier>*</modifier></type><name>ent</name> <init>= <expr><operator>&amp;</operator><name><name>ipv6_entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>in6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evutil_inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name><name>ent</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ent</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>BAD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TT_FAIL</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s did not parse, but it's a good address!"</literal><operator>,</operator>
<name><name>ent</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ent</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>BAD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TT_FAIL</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s parsed, but we expected an error"</literal><operator>,</operator> <name><name>ent</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ev_uint32_t</name></type> <name>u</name> <init>=
<expr><operator>(</operator><operator>(</operator><name>ev_uint32_t</name><operator>)</operator><name><name>in6</name><operator>.</operator><name>s6_addr</name><index>[<expr><name>j</name><operator>*</operator><literal type="number">4</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>ev_uint32_t</name><operator>)</operator><name><name>in6</name><operator>.</operator><name>s6_addr</name><index>[<expr><name>j</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>ev_uint32_t</name><operator>)</operator><name><name>in6</name><operator>.</operator><name>s6_addr</name><index>[<expr><name>j</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>ev_uint32_t</name><operator>)</operator><name><name>in6</name><operator>.</operator><name>s6_addr</name><index>[<expr><name>j</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>u</name> <operator>!=</operator> <name><name>ent</name><operator>-&gt;</operator><name>res</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TT_FAIL</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s did not parse as expected."</literal><operator>,</operator> <name><name>ent</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>ent</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>CANONICAL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>w</name> <init>= <expr><call><name>evutil_inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in6</name></expr></argument>, <argument><expr><name>written</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>written</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>w</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TT_FAIL</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Tried to write out %s; got NULL."</literal><operator>,</operator> <name><name>ent</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>written</name></expr></argument>, <argument><expr><name><name>ent</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TT_FAIL</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Tried to write out %s; got %s"</literal><operator>,</operator> <name><name>ent</name><operator>-&gt;</operator><name>addr</name></name><operator>,</operator> <name>written</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>TT_BLATHER</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Skipping IPv6 address parsing."</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<struct><specifier>static</specifier> struct <name>sa_port_ent</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>safamily</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>
}</block> <decl><name><name>sa_port_ents</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"[ffff::1]:1000"</literal></expr>, <expr><name>AF_INET6</name></expr>, <expr><literal type="string">"ffff::1"</literal></expr>, <expr><literal type="number">1000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"[ffff::1]"</literal></expr>, <expr><name>AF_INET6</name></expr>, <expr><literal type="string">"ffff::1"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"[ffff::1"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"[ffff::1]:65599"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"[ffff::1]:0"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"[ffff::1]:-1"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"::1"</literal></expr>, <expr><name>AF_INET6</name></expr>, <expr><literal type="string">"::1"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"1:2::1"</literal></expr>, <expr><name>AF_INET6</name></expr>, <expr><literal type="string">"1:2::1"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"192.168.0.1:50"</literal></expr>, <expr><name>AF_INET</name></expr>, <expr><literal type="string">"192.168.0.1"</literal></expr>, <expr><literal type="number">50</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"1.2.3.4"</literal></expr>, <expr><name>AF_INET</name></expr>, <expr><literal type="string">"1.2.3.4"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>regress_sockaddr_port_parse</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>ss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>sa_port_ents</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>parse</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sa_port_ent</name></name> <modifier>*</modifier></type><name>ent</name> <init>= <expr><operator>&amp;</operator><name><name>sa_port_ents</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evutil_parse_sockaddr_port</name><argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>parse</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ent</name><operator>-&gt;</operator><name>safamily</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TT_FAIL</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Couldn't parse %s!"</literal><operator>,</operator> <name><name>ent</name><operator>-&gt;</operator><name>parse</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator> <name><name>ent</name><operator>-&gt;</operator><name>safamily</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TT_FAIL</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Shouldn't have been able to parse %s!"</literal><operator>,</operator> <name><name>ent</name><operator>-&gt;</operator><name>parse</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ent</name><operator>-&gt;</operator><name>safamily</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>sin</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_STRUCT_SOCKADDR_IN_SIN_LEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>sin</name><operator>.</operator><name>sin_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sin</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>sin</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evutil_inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name><name>ent</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sin</name><operator>.</operator><name>sin_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <name>r</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TT_FAIL</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Couldn't parse ipv4 target %s."</literal><operator>,</operator> <name><name>ent</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TT_FAIL</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Parse for %s was not as expected."</literal><operator>,</operator> <name><name>ent</name><operator>-&gt;</operator><name>parse</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sin</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TT_FAIL</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Length for %s not as expected."</literal><operator>,</operator><name><name>ent</name><operator>-&gt;</operator><name>parse</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name></type> <name>sin6</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sin6</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_STRUCT_SOCKADDR_IN6_SIN6_LEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>sin6</name><operator>.</operator><name>sin6_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sin6</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>sin6</name><operator>.</operator><name>sin6_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin6</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evutil_inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name><name>ent</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sin6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <name>r</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TT_FAIL</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Couldn't parse ipv6 target %s."</literal><operator>,</operator> <name><name>ent</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sin6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TT_FAIL</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Parse for %s was not as expected."</literal><operator>,</operator> <name><name>ent</name><operator>-&gt;</operator><name>parse</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sin6</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TT_FAIL</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Length for %s not as expected."</literal><operator>,</operator><name><name>ent</name><operator>-&gt;</operator><name>parse</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>regress_sockaddr_port_format</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>ss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>cbuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evutil_parse_sockaddr_port</name><argument_list>(<argument><expr><literal type="string">"192.168.1.1:80"</literal></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><operator>==</operator></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>evutil_format_sockaddr_port_</name><argument_list>(
<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><name>cbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_ptr_op</name><argument_list>(<argument><expr><name>cp</name></expr></argument>,<argument><expr><operator>==</operator></expr></argument>,<argument><expr><name>cbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_str_op</name><argument_list>(<argument><expr><name>cp</name></expr></argument>,<argument><expr><operator>==</operator></expr></argument>,<argument><expr><literal type="string">"192.168.1.1:80"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evutil_parse_sockaddr_port</name><argument_list>(<argument><expr><literal type="string">"[ff00::8010]:999"</literal></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><operator>==</operator></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>evutil_format_sockaddr_port_</name><argument_list>(
<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><name>cbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_ptr_op</name><argument_list>(<argument><expr><name>cp</name></expr></argument>,<argument><expr><operator>==</operator></expr></argument>,<argument><expr><name>cbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_str_op</name><argument_list>(<argument><expr><name>cp</name></expr></argument>,<argument><expr><operator>==</operator></expr></argument>,<argument><expr><literal type="string">"[ff00::8010]:999"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ss</name><operator>.</operator><name>ss_family</name></name><operator>=</operator><literal type="number">99</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>evutil_format_sockaddr_port_</name><argument_list>(
<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><name>cbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_ptr_op</name><argument_list>(<argument><expr><name>cp</name></expr></argument>,<argument><expr><operator>==</operator></expr></argument>,<argument><expr><name>cbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_str_op</name><argument_list>(<argument><expr><name>cp</name></expr></argument>,<argument><expr><operator>==</operator></expr></argument>,<argument><expr><literal type="string">"&lt;addr with socktype 99&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>end</name>:</label>
<empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<struct><specifier>static</specifier> struct <name>sa_pred_ent</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parse</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_loopback</name></decl>;</decl_stmt>
}</block> <decl><name><name>sa_pred_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"127.0.0.1"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"127.0.3.2"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"128.1.2.3"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"18.0.0.1"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"129.168.1.1"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"::1"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"::0"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"f::1"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"::501"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evutil_sockaddr_predicates</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>ss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>sa_pred_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>parse</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sa_pred_ent</name></name> <modifier>*</modifier></type><name>ent</name> <init>= <expr><operator>&amp;</operator><name><name>sa_pred_entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evutil_parse_sockaddr_port</name><argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>parse</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TT_FAIL</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Couldn't parse %s!"</literal><operator>,</operator> <name><name>ent</name><operator>-&gt;</operator><name>parse</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ent</name><operator>-&gt;</operator><name>is_loopback</name></name> <operator>!=</operator> <call><name>evutil_sockaddr_is_loopback_</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ss</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TT_FAIL</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"evutil_sockaddr_loopback(%s) not as expected"</literal><operator>,</operator>
<name><name>ent</name><operator>-&gt;</operator><name>parse</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evutil_strtoll</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evutil_strtoll</name><argument_list>(<argument><expr><literal type="string">"5000000000"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>==</operator>
<operator>(</operator><operator>(</operator><name>ev_int64_t</name><operator>)</operator><literal type="number">5000000</literal><operator>)</operator><operator>*</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evutil_strtoll</name><argument_list>(<argument><expr><literal type="string">"-5000000000"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>==</operator>
<operator>(</operator><operator>(</operator><name>ev_int64_t</name><operator>)</operator><literal type="number">5000000</literal><operator>)</operator><operator>*</operator><operator>-</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">" 99999stuff"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evutil_strtoll</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>ev_int64_t</name><operator>)</operator><literal type="number">99999</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><name>endptr</name> <operator>==</operator> <name>s</name><operator>+</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><call><name>evutil_strtoll</name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evutil_snprintf</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint64_t</name></type> <name>u64</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ev_uint64_t</name><operator>)</operator><literal type="number">1000000000</literal><operator>)</operator><operator>*</operator><literal type="number">200</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_int64_t</name></type> <name>i64</name> <init>= <expr><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <operator>(</operator><name>ev_int64_t</name><operator>)</operator> <name>u64</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><literal type="number">8000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>ssize</name> <init>= <expr><operator>-</operator><literal type="number">9000</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d %d"</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_str_op</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="string">"50 100"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"longish %d"</literal></expr></argument>, <argument><expr><literal type="number">1234567890</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_str_op</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="string">"longish 1234567"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>EV_U64_FMT</name></expr></argument>, <argument><expr><call><name>EV_U64_ARG</name><argument_list>(<argument><expr><name>u64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_str_op</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="string">"200000000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>EV_I64_FMT</name></expr></argument>, <argument><expr><call><name>EV_I64_ARG</name><argument_list>(<argument><expr><name>i64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_str_op</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="string">"-200000000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>EV_SIZE_FMT</name><literal type="string">" "</literal><name>EV_SSIZE_FMT</name></expr></argument>,
<argument><expr><call><name>EV_SIZE_ARG</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>EV_SSIZE_ARG</name><argument_list>(<argument><expr><name>ssize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_str_op</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="string">"8000 -9000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evutil_casecmp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evutil_ascii_strcasecmp</name><argument_list>(<argument><expr><literal type="string">"ABC"</literal></expr></argument>, <argument><expr><literal type="string">"ABC"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evutil_ascii_strcasecmp</name><argument_list>(<argument><expr><literal type="string">"ABC"</literal></expr></argument>, <argument><expr><literal type="string">"abc"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evutil_ascii_strcasecmp</name><argument_list>(<argument><expr><literal type="string">"ABC"</literal></expr></argument>, <argument><expr><literal type="string">"abcd"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&lt;</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evutil_ascii_strcasecmp</name><argument_list>(<argument><expr><literal type="string">"ABC"</literal></expr></argument>, <argument><expr><literal type="string">"abb"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&gt;</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evutil_ascii_strcasecmp</name><argument_list>(<argument><expr><literal type="string">"ABCd"</literal></expr></argument>, <argument><expr><literal type="string">"abc"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&gt;</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evutil_ascii_strncasecmp</name><argument_list>(<argument><expr><literal type="string">"Libevent"</literal></expr></argument>, <argument><expr><literal type="string">"LibEvEnT"</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evutil_ascii_strncasecmp</name><argument_list>(<argument><expr><literal type="string">"Libevent"</literal></expr></argument>, <argument><expr><literal type="string">"LibEvEnT"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evutil_ascii_strncasecmp</name><argument_list>(<argument><expr><literal type="string">"Libevent"</literal></expr></argument>, <argument><expr><literal type="string">"LibEXXXX"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evutil_ascii_strncasecmp</name><argument_list>(<argument><expr><literal type="string">"Libevent"</literal></expr></argument>, <argument><expr><literal type="string">"LibE"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evutil_ascii_strncasecmp</name><argument_list>(<argument><expr><literal type="string">"Libe"</literal></expr></argument>, <argument><expr><literal type="string">"LibEvEnT"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evutil_ascii_strncasecmp</name><argument_list>(<argument><expr><literal type="string">"Lib"</literal></expr></argument>, <argument><expr><literal type="string">"LibEvEnT"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&lt;</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evutil_ascii_strncasecmp</name><argument_list>(<argument><expr><literal type="string">"abc"</literal></expr></argument>, <argument><expr><literal type="string">"def"</literal></expr></argument>, <argument><expr><literal type="number">99</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&lt;</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evutil_ascii_strncasecmp</name><argument_list>(<argument><expr><literal type="string">"Z"</literal></expr></argument>, <argument><expr><literal type="string">"qrst"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&gt;</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>end</name>:</label>
<empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evutil_rtrim</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_TRIM</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>result</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (cp) mm_free(cp); cp = mm_strdup(s); tt_assert(cp); evutil_rtrim_lws_(cp); tt_str_op(cp, ==, result); } while(0)</cpp:value></cpp:define>








<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TEST_TRIM</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_TRIM</name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_TRIM</name><argument_list>(<argument><expr><literal type="string">"abcdef ghi"</literal></expr></argument>, <argument><expr><literal type="string">"abcdef ghi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TEST_TRIM</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_TRIM</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_TRIM</name><argument_list>(<argument><expr><literal type="string">"a "</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_TRIM</name><argument_list>(<argument><expr><literal type="string">"abcdef gH "</literal></expr></argument>, <argument><expr><literal type="string">"abcdef gH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TEST_TRIM</name><argument_list>(<argument><expr><literal type="string">"\t\t"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_TRIM</name><argument_list>(<argument><expr><literal type="string">" \t"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_TRIM</name><argument_list>(<argument><expr><literal type="string">"\t"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_TRIM</name><argument_list>(<argument><expr><literal type="string">"a \t"</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_TRIM</name><argument_list>(<argument><expr><literal type="string">"a\t "</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_TRIM</name><argument_list>(<argument><expr><literal type="string">"a\t"</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_TRIM</name><argument_list>(<argument><expr><literal type="string">"abcdef gH \t "</literal></expr></argument>, <argument><expr><literal type="string">"abcdef gH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>cp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>logsev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>logmsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>logfn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>severity</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>logsev</name> <operator>=</operator> <name>severity</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>logmsg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>logmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>logmsg</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>fatal_want_severity</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fatal_want_message</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>fatalfn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>exitcode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>logsev</name> <operator>!=</operator> <name>fatal_want_severity</name> <operator>||</operator>
<operator>!</operator><name>logmsg</name> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>logmsg</name></expr></argument>, <argument><expr><name>fatal_want_message</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>exitcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAN_CHECK_ERR</name></cpp:macro></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_error_logging</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wantexitcode</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>wantseverity</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>wantmsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>exitcode</name></decl>;</decl_stmt>
<expr_stmt><expr><name>fatal_want_severity</name> <operator>=</operator> <name>wantseverity</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fatal_want_message</name> <operator>=</operator> <name>wantmsg</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pid</name> <operator>=</operator> <call><name>regress_fork</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fn</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>exitcode</name> <operator>=</operator> <call><name>WEXITSTATUS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>wantexitcode</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>exitcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<label><name>end</name>:</label>
<empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>errx_fn</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>event_errx</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"Fatal error; too many kumquats (%d)"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>err_fn</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_err</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="string">"Couldn't open %s"</literal></expr></argument>, <argument><expr><literal type="string">"/very/bad/file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sock_err_fn</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>fd</name> <init>= <expr><call><name>socket</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>EVUTIL_SET_SOCKET_ERROR</name><argument_list>(<argument><expr><name>WSAEWOULDBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EAGAIN</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>event_sock_err</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"Unhappy socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evutil_log</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>event_set_log_callback</name><argument_list>(<argument><expr><name>logfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_set_fatal_callback</name><argument_list>(<argument><expr><name>fatalfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESET</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { logsev = 0; if (logmsg) free(logmsg); logmsg = NULL; } while (0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOGEQ</name><parameter_list>(<parameter><type><name>sev</name></type></parameter>,<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { tt_int_op(logsev,==,sev); tt_assert(logmsg != NULL); tt_str_op(logmsg,==,msg); } while (0)</cpp:value></cpp:define>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_CHECK_ERR</name></expr></argument>)</argument_list></call></expr></cpp:if>




<expr_stmt><expr><call><name>check_error_logging</name><argument_list>(<argument><expr><name>errx_fn</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>EVENT_LOG_ERR</name></expr></argument>,
<argument><expr><literal type="string">"Fatal error; too many kumquats (5)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RESET</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>event_warnx</name><argument_list>(<argument><expr><literal type="string">"Far too many %s (%d)"</literal></expr></argument>, <argument><expr><literal type="string">"wombats"</literal></expr></argument>, <argument><expr><literal type="number">99</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOGEQ</name><argument_list>(<argument><expr><name>EVENT_LOG_WARN</name></expr></argument>, <argument><expr><literal type="string">"Far too many wombats (99)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RESET</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_msgx</name><argument_list>(<argument><expr><literal type="string">"Connecting lime to coconut"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOGEQ</name><argument_list>(<argument><expr><name>EVENT_LOG_MSG</name></expr></argument>, <argument><expr><literal type="string">"Connecting lime to coconut"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RESET</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"A millisecond passed! We should log that!"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>LOGEQ</name><argument_list>(<argument><expr><name>EVENT_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"A millisecond passed! We should log that!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>logsev</name></expr></argument>,<argument><expr><operator>==</operator></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_ptr_op</name><argument_list>(<argument><expr><name>logmsg</name></expr></argument>,<argument><expr><operator>==</operator></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>RESET</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_warn</name><argument_list>(<argument><expr><literal type="string">"Couldn't open %s"</literal></expr></argument>, <argument><expr><literal type="string">"/bad/file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"Couldn't open /bad/file: %s"</literal></expr></argument>,<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>ENOENT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOGEQ</name><argument_list>(<argument><expr><name>EVENT_LOG_WARN</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RESET</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_CHECK_ERR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"Couldn't open /very/bad/file: %s"</literal></expr></argument>,<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>ENOENT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_error_logging</name><argument_list>(<argument><expr><name>err_fn</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>EVENT_LOG_ERR</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RESET</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"Unhappy socket: %s"</literal></expr></argument>,
<argument><expr><call><name>evutil_socket_error_to_string</name><argument_list>(<argument><expr><name>WSAEWOULDBLOCK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_SET_SOCKET_ERROR</name><argument_list>(<argument><expr><name>WSAEWOULDBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"Unhappy socket: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EAGAIN</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>event_sock_warn</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"Unhappy socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOGEQ</name><argument_list>(<argument><expr><name>EVENT_LOG_WARN</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RESET</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_CHECK_ERR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>check_error_logging</name><argument_list>(<argument><expr><name>sock_err_fn</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>EVENT_LOG_ERR</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RESET</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RESET</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LOGEQ</name></cpp:undef>
<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>logmsg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>logmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evutil_strlcpy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Hello"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_str_op</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="string">"Hello"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"pentasyllabic"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_str_op</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="string">"pentasy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"overlong"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_str_op</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="string">"overlon"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>end</name>:</label>
<empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<struct>struct <name>example_struct</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>c</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evutil_upcast</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>example_struct</name></name></type> <name>es1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>es1</name><operator>.</operator><name>a</name></name> <operator>=</operator> <literal type="string">"World"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es1</name><operator>.</operator><name>b</name></name> <operator>=</operator> <literal type="string">"Hello"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es1</name><operator>.</operator><name>c</name></name> <operator>=</operator> <operator>-</operator><literal type="number">99</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evutil_offsetof</name><argument_list>(<argument><expr>struct <name>example_struct</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <operator>&amp;</operator><name><name>es1</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_ptr_op</name><argument_list>(<argument><expr><call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr>struct <name>example_struct</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>es1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evutil_integers</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ev_int64_t</name></type> <name>i64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint64_t</name></type> <name>u64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_int32_t</name></type> <name>i32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint32_t</name></type> <name>u32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_int16_t</name></type> <name>i16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>u16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_int8_t</name></type> <name>i8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint8_t</name></type> <name>u8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_intptr_t</name></type> <name>iptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uintptr_t</name></type> <name>uptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>ssize</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>i64</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>i32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u16</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>i16</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u8</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>i8</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ev_ssize_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ev_intptr_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&gt;=</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ev_uintptr_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>intptr_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>u64</name> <operator>=</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>u64</name> <operator>*=</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>u64</name> <operator>/</operator> <literal type="number">1000000000</literal> <operator>==</operator> <literal type="number">1000000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1000000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i64</name> <operator>*=</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>i64</name> <operator>/</operator> <literal type="number">1000000000</literal> <operator>==</operator> <operator>-</operator><literal type="number">1000000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>u64</name> <operator>=</operator> <name>EV_UINT64_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i64</name> <operator>=</operator> <name>EV_INT64_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>u64</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>i64</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>u64</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>u64</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>u32</name> <operator>=</operator> <name>EV_UINT32_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i32</name> <operator>=</operator> <name>EV_INT32_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>u32</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>i32</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>u32</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>u32</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>u16</name> <operator>=</operator> <name>EV_UINT16_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i16</name> <operator>=</operator> <name>EV_INT16_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>u16</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>i16</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>u16</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>u16</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>u8</name> <operator>=</operator> <name>EV_UINT8_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i8</name> <operator>=</operator> <name>EV_INT8_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>u8</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>i8</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>u8</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>u8</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>











<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>&amp;</operator><name>ssize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>iptr</name> <operator>=</operator> <operator>(</operator><name>ev_intptr_t</name><operator>)</operator><name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>uptr</name> <operator>=</operator> <operator>(</operator><name>ev_uintptr_t</name><operator>)</operator><name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>iptr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>ptr</name> <operator>==</operator> <operator>&amp;</operator><name>ssize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>uptr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>ptr</name> <operator>==</operator> <operator>&amp;</operator><name>ssize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>iptr</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>iptr</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>end</name>:</label>
<empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type>
<name>ai_find_by_family</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>ai</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>family</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>ai</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ai</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name>family</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ai</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ai</name> <operator>=</operator> <name><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type>
<name>ai_find_by_protocol</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>ai</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>ai</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ai</name><operator>-&gt;</operator><name>ai_protocol</name></name> <operator>==</operator> <name>protocol</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ai</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ai</name> <operator>=</operator> <name><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>test_ai_eq_</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>ai</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sockaddr_port</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>socktype</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>ss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gotport</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>socktype</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>socktype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>protocol</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evutil_parse_sockaddr_port</name><argument_list>(
<argument><expr><name>sockaddr_port</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slen</name></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TT_FAIL</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Couldn't parse expected address %s on line %d"</literal><operator>,</operator>
<name>sockaddr_port</name><operator>,</operator> <name>line</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ai</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>!=</operator> <name><name>ss</name><operator>.</operator><name>ss_family</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TT_FAIL</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Address family %d did not match %d on line %d"</literal><operator>,</operator>
<name><name>ai</name><operator>-&gt;</operator><name>ai_family</name></name><operator>,</operator> <name><name>ss</name><operator>.</operator><name>ss_family</name></name><operator>,</operator> <name>line</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>sin</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in</name><operator>*</operator><operator>)</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>evutil_inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sin</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gotport</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>sin</name><operator>-&gt;</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addrlen</name></name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TT_FAIL</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Addr size mismatch on line %d"</literal><operator>,</operator> <name>line</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>sin6</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in6</name><operator>*</operator><operator>)</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>evutil_inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sin6</name><operator>-&gt;</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gotport</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>sin6</name><operator>-&gt;</operator><name>sin6_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addrlen</name></name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TT_FAIL</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Addr size mismatch on line %d"</literal><operator>,</operator> <name>line</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evutil_sockaddr_cmp</name><argument_list>(<argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TT_FAIL</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Wanted %s, got %s:%d on line %d"</literal><operator>,</operator> <name>sockaddr_port</name><operator>,</operator>
<name>buf</name><operator>,</operator> <name>gotport</name><operator>,</operator> <name>line</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>TT_BLATHER</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Wanted %s, got %s:%d on line %d"</literal><operator>,</operator> <name>sockaddr_port</name><operator>,</operator>
<name>buf</name><operator>,</operator> <name>gotport</name><operator>,</operator> <name>line</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>end</name>:</label>
<expr_stmt><expr><call><name>TT_FAIL</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Test failed on line %d"</literal><operator>,</operator> <name>line</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evutil_rand</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf1</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf2</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>counts</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>n</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evutil_weakrand_state</name></name></type> <name>seed</name> <init>= <expr><block>{ <expr><literal type="number">12346789U</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>counts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>counts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>k</name><operator>&lt;</operator><literal type="number">32</literal></expr>;</condition><incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>startpoint</name> <init>= <expr><call><name>evutil_weakrand_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>seed</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>endpoint</name> <init>= <expr><literal type="number">32</literal> <operator>-</operator> <operator>(</operator><call><name>evutil_weakrand_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>seed</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_secure_rng_get_bytes</name><argument_list>(<argument><expr><name>buf1</name> <operator>+</operator> <name>startpoint</name></expr></argument>,
<argument><expr><name>endpoint</name><operator>-</operator><name>startpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <name>endpoint</name> <operator>-</operator> <name>startpoint</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">32</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name>startpoint</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>endpoint</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf2</name><index>[<expr><name>j</name></expr>]</index></name> <operator>|=</operator> <name><name>buf1</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>counts</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>buf1</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>buf1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>buf1</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>



<for>for <control>(<init><expr><name>j</name><operator>=</operator><name>startpoint</name></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>endpoint</name></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>buf2</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>!=</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>evutil_weakrand_seed_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>seed</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ev_int32_t</name></type> <name>r</name> <init>= <expr><call><name>evutil_weakrand_range_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>seed</name></expr></argument>, <argument><expr><literal type="number">9999</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&lt;=</operator></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&lt;</operator></expr></argument>, <argument><expr><literal type="number">9999</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<label><name>end</name>:</label>
<empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evutil_getaddrinfo</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>ai</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name></type> <name>hints</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evutil_getaddrinfo</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4"</literal></expr></argument>, <argument><expr><literal type="string">"8080"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_ptr_op</name><argument_list>(<argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_ai_eq</name><argument_list>(<argument><expr><name>ai</name></expr></argument>, <argument><expr><literal type="string">"1.2.3.4:8080"</literal></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_freeaddrinfo</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ai</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_protocol</name></name> <operator>=</operator> <name>IPPROTO_UDP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evutil_getaddrinfo</name><argument_list>(<argument><expr><literal type="string">"1001:b0b::f00f"</literal></expr></argument>, <argument><expr><literal type="string">"4321"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_ptr_op</name><argument_list>(<argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_ai_eq</name><argument_list>(<argument><expr><name>ai</name></expr></argument>, <argument><expr><literal type="string">"[1001:b0b::f00f]:4321"</literal></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><name>IPPROTO_UDP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_freeaddrinfo</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ai</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_protocol</name></name> <operator>=</operator> <name>IPPROTO_TCP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <name>EVUTIL_AI_PASSIVE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evutil_getaddrinfo</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"9999"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><operator>==</operator></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_ptr_op</name><argument_list>(<argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_ai_eq</name><argument_list>(<argument><expr><name>ai</name></expr></argument>, <argument><expr><literal type="string">"0.0.0.0:9999"</literal></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_freeaddrinfo</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ai</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evutil_getaddrinfo</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"9998"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><operator>==</operator></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_ai_eq</name><argument_list>(<argument><expr><name>ai</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1:9998"</literal></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_ptr_op</name><argument_list>(<argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_freeaddrinfo</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ai</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_INET6</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evutil_getaddrinfo</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"9997"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><operator>==</operator></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_ptr_op</name><argument_list>(<argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_ai_eq</name><argument_list>(<argument><expr><name>ai</name></expr></argument>, <argument><expr><literal type="string">"[::1]:9997"</literal></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_freeaddrinfo</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ai</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <name>EVUTIL_AI_PASSIVE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_INET6</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evutil_getaddrinfo</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"9996"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><operator>==</operator></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_ptr_op</name><argument_list>(<argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_ai_eq</name><argument_list>(<argument><expr><name>ai</name></expr></argument>, <argument><expr><literal type="string">"[::]:9996"</literal></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_freeaddrinfo</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ai</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evutil_getaddrinfo</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"9996"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><operator>==</operator></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>ai_find_by_family</name><argument_list>(<argument><expr><name>ai</name></expr></argument>, <argument><expr><name>PF_INET6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_ai_eq</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"[::]:9996"</literal></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>ai_find_by_family</name><argument_list>(<argument><expr><name>ai</name></expr></argument>, <argument><expr><name>PF_INET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_ai_eq</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"0.0.0.0:9996"</literal></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_freeaddrinfo</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ai</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>



<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <name>EVUTIL_AI_NUMERICHOST</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evutil_getaddrinfo</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>ai_find_by_protocol</name><argument_list>(<argument><expr><name>ai</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_ai_eq</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"1.2.3.4"</literal></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>ai_find_by_protocol</name><argument_list>(<argument><expr><name>ai</name></expr></argument>, <argument><expr><name>IPPROTO_UDP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_ai_eq</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"1.2.3.4"</literal></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><name>IPPROTO_UDP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_freeaddrinfo</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ai</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <name>EVUTIL_AI_NUMERICHOST</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evutil_getaddrinfo</name><argument_list>(<argument><expr><literal type="string">"www.google.com"</literal></expr></argument>, <argument><expr><literal type="string">"80"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>EVUTIL_EAI_NONAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_ptr_op</name><argument_list>(<argument><expr><name>ai</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <name>EVUTIL_AI_NUMERICSERV</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evutil_getaddrinfo</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4"</literal></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><operator>==</operator></expr></argument>,<argument><expr><name>EVUTIL_EAI_NONAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evutil_getaddrinfo</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4"</literal></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TT_DECLARE</name><argument_list>(<argument><expr><literal type="string">"SKIP"</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="string">"Symbolic service names seem broken."</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_ai_eq</name><argument_list>(<argument><expr><name>ai</name></expr></argument>, <argument><expr><literal type="string">"1.2.3.4:80"</literal></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_freeaddrinfo</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ai</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>ai</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evutil_freeaddrinfo</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evutil_getaddrinfo_live</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>ai</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name></type> <name>hints</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>sin6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>sin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_protocol</name></name> <operator>=</operator> <name>IPPROTO_TCP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evutil_getaddrinfo</name><argument_list>(<argument><expr><literal type="string">"www.google.com"</literal></expr></argument>, <argument><expr><literal type="string">"80"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TT_DECLARE</name><argument_list>(<argument><expr><literal type="string">"SKIP"</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="string">"Couldn't resolve www.google.com"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>PF_INET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sin</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in</name><operator>*</operator><operator>)</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>sin</name><operator>-&gt;</operator><name>sin_family</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>AF_INET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>sin</name><operator>-&gt;</operator><name>sin_port</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>htons</name><argument_list>(<argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>sin</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>, <argument><expr><operator>!=</operator></expr></argument>, <argument><expr><literal type="number">0xffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>evutil_inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sin</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TT_BLATHER</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"www.google.com resolved to %s"</literal><operator>,</operator>
<ternary><condition><expr><name>cp</name></expr>?</condition><then><expr><name>cp</name></expr></then><else>:<expr><literal type="string">"&lt;unwriteable&gt;"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_freeaddrinfo</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ai</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_INET6</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evutil_getaddrinfo</name><argument_list>(<argument><expr><literal type="string">"ipv6.google.com"</literal></expr></argument>, <argument><expr><literal type="string">"80"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TT_BLATHER</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Couldn't do an ipv6 lookup for ipv6.google.com"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>PF_INET6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sin6</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in6</name><operator>*</operator><operator>)</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>sin6</name><operator>-&gt;</operator><name>sin6_port</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>htons</name><argument_list>(<argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>evutil_inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sin6</name><operator>-&gt;</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TT_BLATHER</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"ipv6.google.com resolved to %s"</literal><operator>,</operator>
<ternary><condition><expr><name>cp</name></expr>?</condition><then><expr><name>cp</name></expr></then><else>:<expr><literal type="string">"&lt;unwriteable&gt;"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>ai</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evutil_freeaddrinfo</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evutil_loadsyslib</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HMODULE</name></type> <name>h</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>evutil_load_windows_system_library_</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"kernel32.dll"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>h</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_event_malloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>arg</name></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_MM_REPLACEMENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>p</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mm_malloc</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_event_calloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>arg</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_MM_REPLACEMENT</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>p</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>p</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>p</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>



<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><name>EV_SIZE_MAX</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>EV_SIZE_MAX</name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>p</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_event_strdup</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>arg</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_MM_REPLACEMENT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>p</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_str_op</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_str_op</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<label><name>end</name>:</label>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evutil_usleep</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv1</name></decl>, <decl><type ref="prev"/><name>tv2</name></decl>, <decl><type ref="prev"/><name>tv3</name></decl>, <decl><type ref="prev"/><name>diff1</name></decl>, <decl><type ref="prev"/><name>diff2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name></type> <name>quarter_sec</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">250</literal><operator>*</operator><literal type="number">1000</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name></type> <name>tenth_sec</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">100</literal><operator>*</operator><literal type="number">1000</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>usec1</name></decl>, <decl><type ref="prev"/><name>usec2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>evutil_gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_usleep_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>quarter_sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_usleep_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tenth_sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evutil_timersub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>diff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_timersub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>diff2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>usec1</name> <operator>=</operator> <name><name>diff1</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000000</literal> <operator>+</operator> <name><name>diff1</name><operator>.</operator><name>tv_usec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>usec2</name> <operator>=</operator> <name><name>diff2</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000000</literal> <operator>+</operator> <name><name>diff2</name><operator>.</operator><name>tv_usec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>usec1</name></expr></argument>, <argument><expr><operator>&gt;</operator></expr></argument>, <argument><expr><literal type="number">200000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>usec1</name></expr></argument>, <argument><expr><operator>&lt;</operator></expr></argument>, <argument><expr><literal type="number">300000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>usec2</name></expr></argument>, <argument><expr><operator>&gt;</operator></expr></argument>, <argument><expr><literal type="number">80000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>usec2</name></expr></argument>, <argument><expr><operator>&lt;</operator></expr></argument>, <argument><expr><literal type="number">120000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evutil_monotonic_res</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data_</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>data_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evutil_monotonic_timer</name></name></type> <name>timer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>precise</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>setup_data</name></name></expr></argument>, <argument><expr><literal type="string">"precise"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>fallback</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>setup_data</name></name></expr></argument>, <argument><expr><literal type="string">"fallback"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name><name>tv</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>delay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>total_diff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>wantres</name></decl>, <decl><type ref="prev"/><name>acceptdiff</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>precise</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>EV_MONOT_PRECISE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fallback</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>EV_MONOT_FALLBACK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>precise</name> <operator>||</operator> <name>fallback</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>wantres</name> <operator>=</operator> <literal type="number">10</literal><operator>*</operator><literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>acceptdiff</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>wantres</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>acceptdiff</name> <operator>=</operator> <literal type="number">300</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>wantres</name> <operator>=</operator> <literal type="number">40</literal><operator>*</operator><literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>acceptdiff</name> <operator>=</operator> <literal type="number">20</literal><operator>*</operator><literal type="number">1000</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>TT_BLATHER</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Precise = %d"</literal><operator>,</operator> <name>precise</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TT_BLATHER</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Fallback = %d"</literal><operator>,</operator> <name>fallback</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>delay</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>delay</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <name>wantres</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evutil_configure_monotonic_time_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timer</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>evutil_gettime_monotonic_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_usleep_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>diff</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evutil_timercmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&lt;</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_timersub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>diff</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>total_diff</name> <operator>+=</operator> <name><name>diff</name><operator>.</operator><name>tv_usec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TT_BLATHER</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Difference = %d"</literal><operator>,</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>diff</name><operator>.</operator><name>tv_usec</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name>total_diff</name><operator>/</operator><literal type="number">9</literal> <operator>-</operator> <name>wantres</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&lt;</operator></expr></argument>, <argument><expr><name>acceptdiff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evutil_monotonic_prc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>data_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evutil_monotonic_timer</name></name></type> <name>timer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>precise</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>setup_data</name></name></expr></argument>, <argument><expr><literal type="string">"precise"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>fallback</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>setup_data</name></name></expr></argument>, <argument><expr><literal type="string">"fallback"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name><name>tv</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>total_diff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>maxstep</name> <init>= <expr><literal type="number">25</literal><operator>*</operator><literal type="number">1000</literal></expr></init></decl>,<decl><type ref="prev"/><name>flags</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>precise</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maxstep</name> <operator>=</operator> <literal type="number">500</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>precise</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>EV_MONOT_PRECISE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fallback</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>EV_MONOT_FALLBACK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evutil_configure_monotonic_time_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timer</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>evutil_gettime_monotonic_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>evutil_gettime_monotonic_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>evutil_timercmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tv</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>)</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></for>

<expr_stmt><expr><name>total_diff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>diff</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evutil_timercmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&lt;</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_timersub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>diff</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>total_diff</name> <operator>+=</operator> <name><name>diff</name><operator>.</operator><name>tv_usec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TT_BLATHER</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Step difference = %d"</literal><operator>,</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>diff</name><operator>.</operator><name>tv_usec</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>TT_BLATHER</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Average step difference = %d"</literal><operator>,</operator> <name>total_diff</name> <operator>/</operator> <literal type="number">9</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>total_diff</name><operator>/</operator><literal type="number">9</literal></expr></argument>, <argument><expr><operator>&lt;</operator></expr></argument>, <argument><expr><name>maxstep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>create_tm_from_unix_epoch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>cur_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>time_t</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>gmtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"gmtime: %s (%i)"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>cur_p</name> <operator>=</operator> <operator>*</operator><name>tmp</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>gmtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>cur_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<struct><specifier>static</specifier> struct <name>date_rfc1123_case</name> <block>{
<decl_stmt><decl><type><name>time_t</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>date</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name><name>date_rfc1123_cases</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"Thu, 01 Jan 1970 00:00:00 GMT"</literal></expr>}</block></expr> ,
<expr><block>{ <expr><literal type="number">946684799</literal></expr>, <expr><literal type="string">"Fri, 31 Dec 1999 23:59:59 GMT"</literal></expr>}</block></expr> ,
<expr><block>{ <expr><literal type="number">946684800</literal></expr>, <expr><literal type="string">"Sat, 01 Jan 2000 00:00:00 GMT"</literal></expr>}</block></expr> ,
<expr><block>{ <expr><literal type="number">981072000</literal></expr>, <expr><literal type="string">"Fri, 02 Feb 2001 00:00:00 GMT"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">1015113600</literal></expr>, <expr><literal type="string">"Sun, 03 Mar 2002 00:00:00 GMT"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">1049414400</literal></expr>, <expr><literal type="string">"Fri, 04 Apr 2003 00:00:00 GMT"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">1083715200</literal></expr>, <expr><literal type="string">"Wed, 05 May 2004 00:00:00 GMT"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">1118016000</literal></expr>, <expr><literal type="string">"Mon, 06 Jun 2005 00:00:00 GMT"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">1152230400</literal></expr>, <expr><literal type="string">"Fri, 07 Jul 2006 00:00:00 GMT"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">1186531200</literal></expr>, <expr><literal type="string">"Wed, 08 Aug 2007 00:00:00 GMT"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">1220918400</literal></expr>, <expr><literal type="string">"Tue, 09 Sep 2008 00:00:00 GMT"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">1255132800</literal></expr>, <expr><literal type="string">"Sat, 10 Oct 2009 00:00:00 GMT"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">1289433600</literal></expr>, <expr><literal type="string">"Thu, 11 Nov 2010 00:00:00 GMT"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">1323648000</literal></expr>, <expr><literal type="string">"Mon, 12 Dec 2011 00:00:00 GMT"</literal></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><block>{ <expr><literal type="number">4294967296</literal></expr>, <expr><literal type="string">"Sun, 07 Feb 2106 06:28:16 GMT"</literal></expr>}</block></expr> ,

<expr><block>{<expr><literal type="number">253402300799</literal></expr>, <expr><literal type="string">"Fri, 31 Dec 9999 23:59:59 GMT"</literal></expr>}</block></expr> ,
<expr><block>{ <expr><literal type="number">1456704000</literal></expr>, <expr><literal type="string">"Mon, 29 Feb 2016 00:00:00 GMT"</literal></expr>}</block></expr> ,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><literal type="number">1435708800</literal></expr>, <expr><literal type="string">"Wed, 01 Jul 2015 00:00:00 GMT"</literal></expr>}</block></expr> ,
<expr><block>{ <expr><literal type="number">1481866376</literal></expr>, <expr><literal type="string">"Fri, 16 Dec 2016 05:32:56 GMT"</literal></expr>}</block></expr> ,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_evutil_date_rfc1123</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>query</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>result</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<block>{<block_content>
<expr_stmt><expr><call><name>create_tm_from_unix_epoch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>query</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_date_rfc1123</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_str_op</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="string">"Thu, 01"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>date_rfc1123_case</name></name></type> <name>c</name> <init>= <expr><name><name>date_rfc1123_cases</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>c</name><operator>.</operator><name>date</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>create_tm_from_unix_epoch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>query</name></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>t</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_date_rfc1123</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_str_op</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>date</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<label><name>end</name>:</label>
<empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>testcase_t</name></name></type> <name><name>util_testcases</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"ipv4_parse"</literal></expr>, <expr><name>regress_ipv4_parse</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ipv6_parse"</literal></expr>, <expr><name>regress_ipv6_parse</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sockaddr_port_parse"</literal></expr>, <expr><name>regress_sockaddr_port_parse</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sockaddr_port_format"</literal></expr>, <expr><name>regress_sockaddr_port_format</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sockaddr_predicates"</literal></expr>, <expr><name>test_evutil_sockaddr_predicates</name></expr>, <expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"evutil_snprintf"</literal></expr>, <expr><name>test_evutil_snprintf</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"evutil_strtoll"</literal></expr>, <expr><name>test_evutil_strtoll</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"evutil_casecmp"</literal></expr>, <expr><name>test_evutil_casecmp</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"evutil_rtrim"</literal></expr>, <expr><name>test_evutil_rtrim</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"strlcpy"</literal></expr>, <expr><name>test_evutil_strlcpy</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"log"</literal></expr>, <expr><name>test_evutil_log</name></expr>, <expr><name>TT_FORK</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"upcast"</literal></expr>, <expr><name>test_evutil_upcast</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"integers"</literal></expr>, <expr><name>test_evutil_integers</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rand"</literal></expr>, <expr><name>test_evutil_rand</name></expr>, <expr><name>TT_FORK</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"getaddrinfo"</literal></expr>, <expr><name>test_evutil_getaddrinfo</name></expr>, <expr><name>TT_FORK</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"getaddrinfo_live"</literal></expr>, <expr><name>test_evutil_getaddrinfo_live</name></expr>, <expr><name>TT_FORK</name><operator>|</operator><name>TT_OFF_BY_DEFAULT</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"loadsyslib"</literal></expr>, <expr><name>test_evutil_loadsyslib</name></expr>, <expr><name>TT_FORK</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><literal type="string">"mm_malloc"</literal></expr>, <expr><name>test_event_malloc</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mm_calloc"</literal></expr>, <expr><name>test_event_calloc</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mm_strdup"</literal></expr>, <expr><name>test_event_strdup</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"usleep"</literal></expr>, <expr><name>test_evutil_usleep</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"monotonic_res"</literal></expr>, <expr><name>test_evutil_monotonic_res</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>basic_setup</name></expr>, <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"monotonic_res_precise"</literal></expr>, <expr><name>test_evutil_monotonic_res</name></expr>, <expr><name>TT_OFF_BY_DEFAULT</name></expr>, <expr><operator>&amp;</operator><name>basic_setup</name></expr>, <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="string">"precise"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"monotonic_res_fallback"</literal></expr>, <expr><name>test_evutil_monotonic_res</name></expr>, <expr><name>TT_OFF_BY_DEFAULT</name></expr>, <expr><operator>&amp;</operator><name>basic_setup</name></expr>, <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="string">"fallback"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"monotonic_prc"</literal></expr>, <expr><name>test_evutil_monotonic_prc</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>basic_setup</name></expr>, <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"monotonic_prc_precise"</literal></expr>, <expr><name>test_evutil_monotonic_prc</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>basic_setup</name></expr>, <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="string">"precise"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"monotonic_prc_fallback"</literal></expr>, <expr><name>test_evutil_monotonic_prc</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>basic_setup</name></expr>, <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="string">"fallback"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"date_rfc1123"</literal></expr>, <expr><name>test_evutil_date_rfc1123</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><name>END_OF_TESTCASES</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

</unit>
