<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/test/regress_main.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util-internal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__</name> <operator>&gt;=</operator> <literal type="number">1060</literal> <operator>&amp;&amp;</operator> <name>__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__</name> <operator>&lt;</operator> <literal type="number">1070</literal><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORK_BREAKS_GCOV</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vproc.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event-config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_STAT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/dns.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/dns_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/thread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event-config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tinytest.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tinytest_macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../iocp-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../event-internal.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name><name>struct</name> <name>evutil_weakrand_state</name></name></type> <name>test_weakrand_state</name></decl>;</decl_stmt>

<function><type><name>long</name></type>
<name>timeval_msec_diff</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>ms</name> <init>= <expr><name><name>end</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>start</name><operator>-&gt;</operator><name>tv_sec</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ms</name> <operator>*=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ms</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name><name>end</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>-</operator> <name><name>start</name><operator>-&gt;</operator><name>tv_usec</name></name><operator>)</operator><operator>+</operator><literal type="number">500</literal><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<return>return <expr><name>ms</name></expr>;</return>
</block_content>}</block></function>













<decl_stmt><decl><type><name>int</name></type> <name>in_legacy_test_wrapper</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dnslogcb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>TT_BLATHER</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s"</literal><operator>,</operator> <name>m</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>int</name></type>
<name>regress_make_tmpfile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>datalen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>filename_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmpfilename</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>filename_out</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tmpfilename</name></expr></argument>, <argument><expr><literal type="string">"/tmp/eventtmp.XXXXXX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_UMASK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>umask</name><argument_list>(<argument><expr><literal type="number">0077</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>mkstemp</name><argument_list>(<argument><expr><name>tmpfilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>datalen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>datalen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>lseek</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>tmpfilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>fd</name><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>char</name></type> <name><name>tmpfilepath</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmpfilename</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>written</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tries</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>GetTempPathA</name><argument_list>(<argument><expr><name>MAX_PATH</name></expr></argument>, <argument><expr><name>tmpfilepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name>MAX_PATH</name> <operator>||</operator> <name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>tries</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>tries</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>GetTempFileNameA</name><argument_list>(<argument><expr><name>tmpfilepath</name></expr></argument>, <argument><expr><literal type="string">"LIBEVENT"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmpfilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>CreateFileA</name><argument_list>(<argument><expr><name>tmpfilename</name></expr></argument>, <argument><expr><name>GENERIC_READ</name><operator>|</operator><name>GENERIC_WRITE</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CREATE_ALWAYS</name></expr></argument>, <argument><expr><name>FILE_ATTRIBUTE_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>tries</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>written</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>filename_out</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>tmpfilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WriteFile</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><name>datalen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>written</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>_open_osfhandle</name><argument_list>(<argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name>h</name></expr></argument>,<argument><expr><name>_O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>pid_t</name></type>
<name>regress_fork</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name> <init>= <expr><call><name>fork</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FORK_BREAKS_GCOV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vproc_transaction_begin</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>pid</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ignore_log_cb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>basic_test_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>testcase_t</name></name> <modifier>*</modifier></type><name>testcase</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name><name>spair</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>testcase</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TT_ENABLE_IOCP_FLAG</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>TT_SKIP</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>testcase</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TT_NEED_THREADS</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>testcase</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TT_FORK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVTHREAD_USE_PTHREADS_IMPLEMENTED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>evthread_use_pthreads</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVTHREAD_USE_WINDOWS_THREADS_IMPLEMENTED</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<if_stmt><if>if <condition>(<expr><call><name>evthread_use_windows_threads</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>TT_SKIP</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>testcase</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TT_NEED_SOCKETPAIR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evutil_socketpair</name><argument_list>(<argument><expr><name>AF_UNIX</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>spair</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: socketpair\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evutil_make_socket_nonblocking</name><argument_list>(<argument><expr><name><name>spair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"fcntl(O_NONBLOCK)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evutil_make_socket_nonblocking</name><argument_list>(<argument><expr><name><name>spair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"fcntl(O_NONBLOCK)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>testcase</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TT_NEED_BASE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>testcase</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TT_LEGACY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>event_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>event_base_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>base</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>testcase</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TT_ENABLE_IOCP_FLAG</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>event_base_start_iocp_</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_base_free</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>TT_SKIP</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>testcase</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TT_NEED_DNS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evdns_set_log_fn</name><argument_list>(<argument><expr><name>dnslogcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evdns_init</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>testcase</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TT_NO_LOGS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_set_log_callback</name><argument_list>(<argument><expr><name>ignore_log_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>spair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>spair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>setup_data</name></name> <operator>=</operator> <name><name>testcase</name><operator>-&gt;</operator><name>setup_data</name></name></expr>;</expr_stmt>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>basic_test_cleanup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>testcase_t</name></name> <modifier>*</modifier></type><name>testcase</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>testcase</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TT_NO_LOGS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_set_log_callback</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>testcase</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TT_NEED_SOCKETPAIR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>testcase</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TT_NEED_DNS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evdns_shutdown</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>testcase</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TT_NEED_BASE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_base_assert_ok_</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>testcase</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TT_FORK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>libevent_global_shutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>testcase_setup_t</name></name></type> <name>basic_setup</name> <init>= <expr><block>{
<expr><name>basic_test_setup</name></expr>, <expr><name>basic_test_cleanup</name></expr>
}</block></expr></init></decl>;</decl_stmt>






<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>legacy_test_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>testcase_t</name></name> <modifier>*</modifier></type><name>testcase</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>basic_test_setup</name><argument_list>(<argument><expr><name>testcase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>TT_SKIP</name> <operator>||</operator> <name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>global_base</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>legacy_test_fn</name></name> <operator>=</operator> <name><name>testcase</name><operator>-&gt;</operator><name>setup_data</name></name></expr>;</expr_stmt>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>run_legacy_test_fn</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <name>called</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>in_legacy_test_wrapper</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>legacy_test_fn</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in_legacy_test_wrapper</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>test_ok</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Legacy unit test failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>legacy_test_cleanup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>testcase_t</name></name> <modifier>*</modifier></type><name>testcase</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>basic_test_cleanup</name><argument_list>(<argument><expr><name>testcase</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>global_base</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>testcase_setup_t</name></name></type> <name>legacy_setup</name> <init>= <expr><block>{
<expr><name>legacy_test_setup</name></expr>, <expr><name>legacy_test_cleanup</name></expr>
}</block></expr></init></decl>;</decl_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_PTHREADS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_THREAD_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>testcase_t</name></name></type> <name><name>thread_testcases</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"basic"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>TT_SKIP</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><name>END_OF_TESTCASES</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>struct</name> <name>testgroup_t</name></name></type> <name><name>testgroups</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"main/"</literal></expr>, <expr><name>main_testcases</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"heap/"</literal></expr>, <expr><name>minheap_testcases</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"et/"</literal></expr>, <expr><name>edgetriggered_testcases</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"finalize/"</literal></expr>, <expr><name>finalize_testcases</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"evbuffer/"</literal></expr>, <expr><name>evbuffer_testcases</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"signal/"</literal></expr>, <expr><name>signal_testcases</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"util/"</literal></expr>, <expr><name>util_testcases</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bufferevent/"</literal></expr>, <expr><name>bufferevent_testcases</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"http/"</literal></expr>, <expr><name>http_testcases</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dns/"</literal></expr>, <expr><name>dns_testcases</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"evtag/"</literal></expr>, <expr><name>evtag_testcases</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rpc/"</literal></expr>, <expr><name>rpc_testcases</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"thread/"</literal></expr>, <expr><name>thread_testcases</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"listener/"</literal></expr>, <expr><name>listener_testcases</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"iocp/"</literal></expr>, <expr><name>iocp_testcases</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"iocp/bufferevent/"</literal></expr>, <expr><name>bufferevent_iocp_testcases</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"iocp/listener/"</literal></expr>, <expr><name>listener_iocp_testcases</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"ssl/"</literal></expr>, <expr><name>ssl_testcases</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><name>END_OF_GROUPS</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>alltests</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"+.."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>livenettests</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"+util/getaddrinfo_live"</literal></expr>,
<expr><literal type="string">"+dns/gethostby.."</literal></expr>,
<expr><literal type="string">"+dns/resolve_reverse"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>finetimetests</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"+util/monotonic_res_precise"</literal></expr>,
<expr><literal type="string">"+util/monotonic_res_fallback"</literal></expr>,
<expr><literal type="string">"+thread/deferred_cb_skew"</literal></expr>,
<expr><literal type="string">"+http/connection_retry"</literal></expr>,
<expr><literal type="string">"+http/https_connection_retry"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>testlist_alias_t</name></name></type> <name><name>testaliases</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"all"</literal></expr>, <expr><name>alltests</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"live_net"</literal></expr>, <expr><name>livenettests</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fine_timing"</literal></expr>, <expr><name>finetimetests</name></expr> }</block></expr>,
<expr><name>END_OF_ALIASES</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>libevent_tests_running_in_debug_mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>WORD</name></type> <name>wVersionRequested</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WSADATA</name></type> <name>wsaData</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wVersionRequested</name> <operator>=</operator> <call><name>MAKEWORD</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>WSAStartup</name><argument_list>(<argument><expr><name>wVersionRequested</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wsaData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SIG_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>tinytest_skip</name><argument_list>(<argument><expr><name>testgroups</name></expr></argument>, <argument><expr><literal type="string">"http/connection_retry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tinytest_skip</name><argument_list>(<argument><expr><name>testgroups</name></expr></argument>, <argument><expr><literal type="string">"http/https_connection_retry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_THREAD_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"EVENT_NO_DEBUG_LOCKS"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evthread_enable_lock_debugging</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"EVENT_DEBUG_MODE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_enable_debug_mode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>libevent_tests_running_in_debug_mode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"EVENT_DEBUG_LOGGING_ALL"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_enable_debug_logging</name><argument_list>(<argument><expr><name>EVENT_DBG_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tinytest_set_aliases</name><argument_list>(<argument><expr><name>testaliases</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evutil_weakrand_seed_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_weakrand_state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tinytest_main</name><argument_list>(<argument><expr><name>argc</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>testgroups</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>libevent_global_shutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

</unit>
