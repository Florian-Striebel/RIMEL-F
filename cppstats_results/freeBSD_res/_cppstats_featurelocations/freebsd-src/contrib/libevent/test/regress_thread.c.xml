<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/test/regress_thread.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util-internal.h"</cpp:file></cpp:include>


<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NDEBUG</name></cpp:undef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event-config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_WAIT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_PTHREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sys/queue.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event_struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evthread-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"defer-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tinytest_macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"time-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regress_thread.h"</cpp:file></cpp:include>

<struct>struct <name>cond_wait</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cond</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>wake_all_timeout</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cond_wait</name></name> <modifier>*</modifier></type><name>cw</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVLOCK_LOCK</name><argument_list>(<argument><expr><name><name>cw</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVTHREAD_COND_BROADCAST</name><argument_list>(<argument><expr><name><name>cw</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVLOCK_UNLOCK</name><argument_list>(<argument><expr><name><name>cw</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>wake_one_timeout</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cond_wait</name></name> <modifier>*</modifier></type><name>cw</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EVLOCK_LOCK</name><argument_list>(<argument><expr><name><name>cw</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVTHREAD_COND_SIGNAL</name><argument_list>(<argument><expr><name><name>cw</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVLOCK_UNLOCK</name><argument_list>(<argument><expr><name><name>cw</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_THREADS</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_ITERATIONS</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>count_lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>count</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>THREAD_FN</name></type>
<name>basic_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cond_wait</name></name></type> <name>cw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name></type> <name>ev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVTHREAD_ALLOC_LOCK</name><argument_list>(<argument><expr><name><name>cw</name><operator>.</operator><name>lock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVTHREAD_ALLOC_COND</name><argument_list>(<argument><expr><name><name>cw</name><operator>.</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cw</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cw</name><operator>.</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evtimer_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>wake_all_timeout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_ITERATIONS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>evutil_timerclear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">3000</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVLOCK_LOCK</name><argument_list>(<argument><expr><name><name>cw</name><operator>.</operator><name>lock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>evtimer_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>EVTHREAD_COND_WAIT</name><argument_list>(<argument><expr><name><name>cw</name><operator>.</operator><name>cond</name></name></expr></argument>, <argument><expr><name><name>cw</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVLOCK_UNLOCK</name><argument_list>(<argument><expr><name><name>cw</name><operator>.</operator><name>lock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVLOCK_LOCK</name><argument_list>(<argument><expr><name>count_lock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVLOCK_UNLOCK</name><argument_list>(<argument><expr><name>count_lock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>EVLOCK_LOCK</name><argument_list>(<argument><expr><name>count_lock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <name>NUM_THREADS</name> <operator>*</operator> <name>NUM_ITERATIONS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>EVLOCK_UNLOCK</name><argument_list>(<argument><expr><name>count_lock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVTHREAD_FREE_LOCK</name><argument_list>(<argument><expr><name><name>cw</name><operator>.</operator><name>lock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVTHREAD_FREE_COND</name><argument_list>(<argument><expr><name><name>cw</name><operator>.</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>THREAD_RETURN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>notification_fd_used</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>got_sigchld</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>sigchld_cb</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>got_sigchld</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">100000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>notify_fd_cb</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>notification_fd_used</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>thread_basic</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>THREAD_T</name></type> <name><name>threads</name><index>[<expr><name>NUM_THREADS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name></type> <name>ev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>notification_event</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>sigchld_event</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVTHREAD_ALLOC_LOCK</name><argument_list>(<argument><expr><name>count_lock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>count_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>evthread_make_base_notifiable</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_msg</name><argument_list>(<argument><expr><literal type="string">"Couldn't make base notifiable!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>setup_data</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>setup_data</name></name></expr></argument>, <argument><expr><literal type="string">"forking"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><name>sigchld_event</name> <operator>=</operator> <call><name>evsignal_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>SIGCHLD</name></expr></argument>, <argument><expr><name>sigchld_cb</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>notification_event</name> <operator>=</operator> <call><name>event_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>,
<argument><expr><name><name>base</name><operator>-&gt;</operator><name>th_notify_fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>EV_READ</name><operator>|</operator><name>EV_PERSIST</name></expr></argument>, <argument><expr><name>notify_fd_cb</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_add</name><argument_list>(<argument><expr><name>sigchld_event</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_add</name><argument_list>(<argument><expr><name>notification_event</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pid</name> <operator>=</operator> <call><name>fork</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><name>notification_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>event_reinit</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TT_FAIL</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"reinit"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>event_assign</name><argument_list>(<argument><expr><name>notification_event</name></expr></argument>, <argument><expr><name>base</name></expr></argument>,
<argument><expr><name><name>base</name><operator>-&gt;</operator><name>th_notify_fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>EV_READ</name><operator>|</operator><name>EV_PERSIST</name></expr></argument>,
<argument><expr><name>notify_fd_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_add</name><argument_list>(<argument><expr><name>notification_event</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>child</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>waitpid</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_abort_perror</name><argument_list>(<argument><expr><literal type="string">"waitpid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>TT_BLATHER</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Waitpid okay\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>got_sigchld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>notification_fd_used</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<label><name>child</name>:</label>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_THREADS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>THREAD_START</name><argument_list>(<argument><expr><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>basic_thread</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>evtimer_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_timerclear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_THREADS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>THREAD_JOIN</name><argument_list>(<argument><expr><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>NUM_THREADS</name> <operator>*</operator> <name>NUM_ITERATIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVTHREAD_FREE_LOCK</name><argument_list>(<argument><expr><name>count_lock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TT_BLATHER</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"notifiations==%d"</literal><operator>,</operator> <name>notification_fd_used</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>

<if_stmt><if>if <condition>(<expr><name>notification_event</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_free</name><argument_list>(<argument><expr><name>notification_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sigchld_event</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_free</name><argument_list>(<argument><expr><name>sigchld_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NUM_THREADS</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_THREADS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<struct>struct <name>alerted_record</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>cond_wait</name></name> <modifier>*</modifier></type><name>cond</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>delay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>alerted_at</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>timed_out</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>THREAD_FN</name></type>
<name>wait_for_condition</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>alerted_record</name></name> <modifier>*</modifier></type><name>rec</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVLOCK_LOCK</name><argument_list>(<argument><expr><name><name>rec</name><operator>-&gt;</operator><name>cond</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rec</name><operator>-&gt;</operator><name>delay</name><operator>.</operator><name>tv_sec</name></name> <operator>||</operator> <name><name>rec</name><operator>-&gt;</operator><name>delay</name><operator>.</operator><name>tv_usec</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>EVTHREAD_COND_WAIT_TIMED</name><argument_list>(<argument><expr><name><name>rec</name><operator>-&gt;</operator><name>cond</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>cond</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>rec</name><operator>-&gt;</operator><name>delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>EVTHREAD_COND_WAIT</name><argument_list>(<argument><expr><name><name>rec</name><operator>-&gt;</operator><name>cond</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>cond</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>EVLOCK_UNLOCK</name><argument_list>(<argument><expr><name><name>rec</name><operator>-&gt;</operator><name>cond</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evutil_gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rec</name><operator>-&gt;</operator><name>alerted_at</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>timed_out</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>THREAD_RETURN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>thread_conditions_simple</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv_signal</name></decl>, <decl><type ref="prev"/><name>tv_timeout</name></decl>, <decl><type ref="prev"/><name>tv_broadcast</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>alerted_record</name></name></type> <name><name>alerted</name><index>[<expr><name>NUM_THREADS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>THREAD_T</name></type> <name><name>threads</name><index>[<expr><name>NUM_THREADS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cond_wait</name></name></type> <name>cond</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>launched_at</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name></type> <name>wake_one</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name></type> <name>wake_all</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_timed_out</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n_signal</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n_broadcast</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tv_signal</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>tv_timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>tv_broadcast</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv_signal</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">30</literal><operator>*</operator><literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv_timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">150</literal><operator>*</operator><literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv_broadcast</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">500</literal><operator>*</operator><literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVTHREAD_ALLOC_LOCK</name><argument_list>(<argument><expr><name><name>cond</name><operator>.</operator><name>lock</name></name></expr></argument>, <argument><expr><name>EVTHREAD_LOCKTYPE_RECURSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVTHREAD_ALLOC_COND</name><argument_list>(<argument><expr><name><name>cond</name><operator>.</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>cond</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>cond</name><operator>.</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_THREADS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>alerted</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>alerted_record</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>alerted</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cond</name> <operator>=</operator> <operator>&amp;</operator><name>cond</name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>alerted</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>delay</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv_timeout</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tv_timeout</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>alerted</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>delay</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv_timeout</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tv_timeout</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evtimer_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wake_one</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>wake_one_timeout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evtimer_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wake_all</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>wake_all_timeout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evutil_gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>launched_at</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_THREADS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>THREAD_START</name><argument_list>(<argument><expr><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>wait_for_condition</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>alerted</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>event_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wake_one</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv_signal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>event_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wake_all</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv_broadcast</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_THREADS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>THREAD_JOIN</name><argument_list>(<argument><expr><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



<expr_stmt><expr><name>n_timed_out</name> <operator>=</operator> <name><name>alerted</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>timed_out</name> <operator>+</operator> <name><name>alerted</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>timed_out</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>n_timed_out</name></expr></argument>, <argument><expr><operator>&gt;=</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>n_timed_out</name></expr></argument>, <argument><expr><operator>&lt;=</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_THREADS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>target_delay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>target_time</name></decl>, <decl><type ref="prev"/><name>actual_delay</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>alerted</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>timed_out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TT_BLATHER</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%d looks like a timeout\n"</literal><operator>,</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>target_delay</name> <operator>=</operator> <operator>&amp;</operator><name>tv_timeout</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>i</name> <operator>==</operator> <literal type="number">5</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>evutil_timerisset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>alerted</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alerted_at</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>diff1</name></decl>,<decl><type ref="prev"/><name>diff2</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>evutil_timersub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>alerted</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alerted_at</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>launched_at</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>actual_delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff1</name> <operator>=</operator> <call><name>timeval_msec_diff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>actual_delay</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>tv_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff2</name> <operator>=</operator> <call><name>timeval_msec_diff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>actual_delay</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>tv_broadcast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>labs</name><argument_list>(<argument><expr><name>diff1</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>labs</name><argument_list>(<argument><expr><name>diff2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TT_BLATHER</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%d looks like a signal\n"</literal><operator>,</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>target_delay</name> <operator>=</operator> <operator>&amp;</operator><name>tv_signal</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>n_signal</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>TT_BLATHER</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%d looks like a broadcast\n"</literal><operator>,</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>target_delay</name> <operator>=</operator> <operator>&amp;</operator><name>tv_broadcast</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>n_broadcast</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>TT_FAIL</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Thread %d never got woken"</literal><operator>,</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>evutil_timeradd</name><argument_list>(<argument><expr><name>target_delay</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>launched_at</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_timeval_diff_leq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>target_time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>alerted</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alerted_at</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>n_broadcast</name> <operator>+</operator> <name>n_signal</name> <operator>+</operator> <name>n_timed_out</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>NUM_THREADS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>n_signal</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>EVTHREAD_FREE_LOCK</name><argument_list>(<argument><expr><name><name>cond</name><operator>.</operator><name>lock</name></name></expr></argument>, <argument><expr><name>EVTHREAD_LOCKTYPE_RECURSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVTHREAD_FREE_COND</name><argument_list>(<argument><expr><name><name>cond</name><operator>.</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CB_COUNT</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUEUE_THREAD_COUNT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SLEEP_MS</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ms</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>ms</name><operator>/</operator><literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>ms</name><operator>%</operator><literal type="number">1000</literal><operator>)</operator><operator>*</operator><literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_usleep_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>deferred_test_data</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>event_callback</name></name></type> <name><name>cbs</name><index>[<expr><name>CB_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>timeval</name></name></type> <name>timer_start</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>timeval</name></name></type> <name>timer_end</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>callback_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>THREAD_T</name></type> <name><name>load_threads</name><index>[<expr><name>QUEUE_THREAD_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>deferred_test_data</name></name></type> <name><name>deferred_data</name><index>[<expr><name>QUEUE_THREAD_COUNT</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>deferred_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_callback</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>SLEEP_MS</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>callback_count</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>THREAD_FN</name></type>
<name>load_deferred_queue</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>deferred_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CB_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>event_deferred_cb_init_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>cbs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>deferred_callback</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_deferred_cb_schedule_</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>cbs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLEEP_MS</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>THREAD_RETURN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>timer_callback</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>evutil_gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timer_end</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>start_threads_callback</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>QUEUE_THREAD_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>THREAD_START</name><argument_list>(<argument><expr><name><name>load_threads</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>load_deferred_queue</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>deferred_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>thread_deferred_cb_skew</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv_timer</name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_config</name></name> <modifier>*</modifier></type><name>cfg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>elapsed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>elapsed_usec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cfg</name> <operator>=</operator> <call><name>event_config_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_config_set_max_dispatch_interval</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>event_base_new_with_config</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>QUEUE_THREAD_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>deferred_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>queue</name> <operator>=</operator> <name>base</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>evutil_gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timer_start</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_once</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>EV_TIMEOUT</name></expr></argument>, <argument><expr><name>timer_callback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>tv_timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_once</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>EV_TIMEOUT</name></expr></argument>, <argument><expr><name>start_threads_callback</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evutil_timersub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timer_end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timer_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elapsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TT_BLATHER</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"callback count, %u"</literal><operator>,</operator> <name>callback_count</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>elapsed_usec</name> <operator>=</operator>
<operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>elapsed</name><operator>.</operator><name>tv_sec</name></name><operator>*</operator><literal type="number">1000000</literal> <operator>+</operator> <name><name>elapsed</name><operator>.</operator><name>tv_usec</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TT_BLATHER</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"elapsed time, %u usec"</literal><operator>,</operator> <name>elapsed_usec</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>elapsed_usec</name> <operator>&gt;=</operator> <literal type="number">600000</literal> <operator>&amp;&amp;</operator> <name>elapsed_usec</name> <operator>&lt;=</operator> <literal type="number">1400000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>QUEUE_THREAD_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>THREAD_JOIN</name><argument_list>(<argument><expr><name><name>load_threads</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>base</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_base_free</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cfg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_config_free</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>event</name></name></type> <name><name>time_events</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>timeval</name></name></type> <name><name>times</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>exit_base</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>note_time_cb</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>evutil_gettimeofday</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <operator>&amp;</operator><name><name>times</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_base_loopbreak</name><argument_list>(<argument><expr><name>exit_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>THREAD_FN</name></type>
<name>register_events_subthread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SLEEP_MS</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_active</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>time_events</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>EV_TIMEOUT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLEEP_MS</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_active</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>time_events</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>EV_TIMEOUT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLEEP_MS</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">100</literal><operator>*</operator><literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>time_events</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">150</literal><operator>*</operator><literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>time_events</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLEEP_MS</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_active</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>time_events</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>EV_TIMEOUT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>THREAD_RETURN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>thread_no_events</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>THREAD_T</name></type> <name>thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>starttime</name></decl>, <decl><type ref="prev"/><name>endtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>exit_base</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>times</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>times</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">5</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>event_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>time_events</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>,
<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>note_time_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>times</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>evutil_gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>starttime</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>THREAD_START</name><argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><name>register_events_subthread</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_loop</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>EVLOOP_NO_EXIT_ON_EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>endtime</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>event_base_got_break</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>THREAD_JOIN</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">5</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>diff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>sec</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>evutil_timersub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>times</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>starttime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sec</name> <operator>=</operator> <name><name>diff</name><operator>.</operator><name>tv_sec</name></name> <operator>+</operator> <name><name>diff</name><operator>.</operator><name>tv_usec</name></name><operator>/</operator><literal type="number">1.0e6</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TT_BLATHER</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"event %d at %.4f seconds"</literal><operator>,</operator> <name>i</name><operator>,</operator> <name>sec</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>test_timeval_diff_eq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>starttime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>times</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_timeval_diff_eq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>starttime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>times</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_timeval_diff_eq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>starttime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>times</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_timeval_diff_eq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>starttime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>times</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">450</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_timeval_diff_eq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>starttime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>times</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_timeval_diff_eq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>starttime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endtime</name></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ #name, thread_##name, TT_FORK|TT_NEED_THREADS|TT_NEED_BASE, &amp;basic_setup, NULL }</cpp:value></cpp:define>



<decl_stmt><decl><type><name><name>struct</name> <name>testcase_t</name></name></type> <name><name>thread_testcases</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"basic"</literal></expr>, <expr><name>thread_basic</name></expr>, <expr><name>TT_FORK</name><operator>|</operator><name>TT_NEED_THREADS</name><operator>|</operator><name>TT_NEED_BASE</name></expr>,
<expr><operator>&amp;</operator><name>basic_setup</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"forking"</literal></expr>, <expr><name>thread_basic</name></expr>, <expr><name>TT_FORK</name><operator>|</operator><name>TT_NEED_THREADS</name><operator>|</operator><name>TT_NEED_BASE</name></expr>,
<expr><operator>&amp;</operator><name>basic_setup</name></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"forking"</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><call><name>TEST</name><argument_list>(<argument><expr><name>conditions_simple</name></expr></argument>)</argument_list></call></expr>,
<expr><block>{ <expr><literal type="string">"deferred_cb_skew"</literal></expr>, <expr><name>thread_deferred_cb_skew</name></expr>,
<expr><name>TT_FORK</name><operator>|</operator><name>TT_NEED_THREADS</name><operator>|</operator><name>TT_OFF_BY_DEFAULT</name></expr>,
<expr><operator>&amp;</operator><name>basic_setup</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>



<expr><call><name>TEST</name><argument_list>(<argument><expr><name>no_events</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><name>END_OF_TESTCASES</name></expr>
}</block></expr></init></decl>;</decl_stmt>

</unit>
