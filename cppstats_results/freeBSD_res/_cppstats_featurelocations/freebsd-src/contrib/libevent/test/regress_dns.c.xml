<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/test/regress_dns.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util-internal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ws2tcpip.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event-config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_NETINET_IN6_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in6.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETDB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/dns.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/dns_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/dns_struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event_struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/listener.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/bufferevent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regress_testutils.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARRAY_SIZE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(a) / sizeof(a[0]))</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>dns_ok</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>dns_got_cancel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>dns_err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>dns_gethostbyname_cb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ttl</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addresses</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>dns_ok</name> <operator>=</operator> <name>dns_err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>DNS_ERR_TIMEOUT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[Timed out] "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dns_err</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>DNS_ERR_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[Error code %d] "</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>TT_BLATHER</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"type: %d, count: %d, ttl: %d: "</literal><operator>,</operator> <name>type</name><operator>,</operator> <name>count</name><operator>,</operator> <name>ttl</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DNS_IPv6_AAAA</name></expr>:</case> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_STRUCT_IN6_ADDR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_INET_NTOP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>INET6_ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>in6_addrs</name> <init>= <expr><name>addresses</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>INET6_ADDRSTRLEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ttl</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>evutil_inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>in6_addrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TT_BLATHER</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s "</literal><operator>,</operator> <name>b</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TT_BLATHER</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s "</literal><operator>,</operator> <call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>DNS_IPv4_A</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name> <modifier>*</modifier></type><name>in_addrs</name> <init>= <expr><name>addresses</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ttl</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TT_BLATHER</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s "</literal><operator>,</operator> <call><name>inet_ntoa</name><argument_list>(<argument><expr><name><name>in_addrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>DNS_PTR</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>TT_BLATHER</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s "</literal><operator>,</operator> <operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>addresses</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></switch>

<expr_stmt><expr><name>dns_ok</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<label><name>out</name>:</label>
<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_loopexit</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><operator>(</operator>struct <name>event_base</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dns_gethostbyname</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>dns_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_resolve_ipv4</name><argument_list>(<argument><expr><literal type="string">"www.monkey.org"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dns_gethostbyname_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_dispatch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>dns_ok</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DNS_IPv4_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <name>dns_ok</name></expr>;</expr_stmt>
<label><name>end</name>:</label>
<empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dns_gethostbyname6</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>dns_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_resolve_ipv6</name><argument_list>(<argument><expr><literal type="string">"www.ietf.org"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dns_gethostbyname_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_dispatch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dns_ok</name> <operator>&amp;&amp;</operator> <name>dns_err</name> <operator>==</operator> <name>DNS_ERR_TIMEOUT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_skip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>dns_ok</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DNS_IPv6_AAAA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<label><name>end</name>:</label>
<empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dns_gethostbyaddr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>in</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>in</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><literal type="number">0x7f000001ul</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dns_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_resolve_reverse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dns_gethostbyname_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_dispatch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>dns_ok</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DNS_PTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <name>dns_ok</name></expr>;</expr_stmt>
<label><name>end</name>:</label>
<empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dns_resolve_reverse</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><call><name>event_base_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>dns</name> <init>= <expr><call><name>evdns_base_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>dns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><literal type="number">0x7f000001ul</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dns_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evdns_base_resolve_reverse</name><argument_list>(
<argument><expr><name>dns</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dns_gethostbyname_cb</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>dns_ok</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DNS_PTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>dns</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evdns_base_free</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>base</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_base_free</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>n_server_responses</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dns_server_request_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_server_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>TEST_ARPA</name><index>[]</index></name> <init>= <expr><literal type="string">"11.11.168.192.in-addr.arpa"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>TEST_IN6</name><index>[]</index></name> <init>=
<expr><literal type="string">"f.e.f.e."</literal> <literal type="string">"0.0.0.0."</literal> <literal type="string">"0.0.0.0."</literal> <literal type="string">"1.1.1.1."</literal>
<literal type="string">"a.a.a.a."</literal> <literal type="string">"0.0.0.0."</literal> <literal type="string">"0.0.0.0."</literal> <literal type="string">"0.f.f.f.ip6.arpa"</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>req</name><operator>-&gt;</operator><name>nquestions</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>qtype</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>questions</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>type</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>qclass</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>questions</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>dns_question_class</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>qname</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>questions</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>ans</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ans</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><literal type="number">0xc0a80b0bUL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>EVDNS_TYPE_A</name> <operator>&amp;&amp;</operator>
<name>qclass</name> <operator>==</operator> <name>EVDNS_CLASS_INET</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>evutil_ascii_strcasecmp</name><argument_list>(<argument><expr><name>qname</name></expr></argument>, <argument><expr><literal type="string">"zz.example.com"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evdns_server_request_add_a_reply</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>qname</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ans</name><operator>.</operator><name>s_addr</name></name></expr></argument>, <argument><expr><literal type="number">12345</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dns_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>EVDNS_TYPE_AAAA</name> <operator>&amp;&amp;</operator>
<name>qclass</name> <operator>==</operator> <name>EVDNS_CLASS_INET</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>evutil_ascii_strcasecmp</name><argument_list>(<argument><expr><name>qname</name></expr></argument>, <argument><expr><literal type="string">"zz.example.com"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>addr6</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <init>= <expr><literal type="string">"abcdefghijklmnop"</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evdns_server_request_add_aaaa_reply</name><argument_list>(<argument><expr><name>req</name></expr></argument>,
<argument><expr><name>qname</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>addr6</name></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dns_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>EVDNS_TYPE_PTR</name> <operator>&amp;&amp;</operator>
<name>qclass</name> <operator>==</operator> <name>EVDNS_CLASS_INET</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>evutil_ascii_strcasecmp</name><argument_list>(<argument><expr><name>qname</name></expr></argument>, <argument><expr><name>TEST_ARPA</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evdns_server_request_add_ptr_reply</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>qname</name></expr></argument>, <argument><expr><literal type="string">"ZZ.EXAMPLE.COM"</literal></expr></argument>, <argument><expr><literal type="number">54321</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dns_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>EVDNS_TYPE_PTR</name> <operator>&amp;&amp;</operator>
<name>qclass</name> <operator>==</operator> <name>EVDNS_CLASS_INET</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>evutil_ascii_strcasecmp</name><argument_list>(<argument><expr><name>qname</name></expr></argument>, <argument><expr><name>TEST_IN6</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evdns_server_request_add_ptr_reply</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>qname</name></expr></argument>,
<argument><expr><literal type="string">"ZZ-INET6.EXAMPLE.COM"</literal></expr></argument>, <argument><expr><literal type="number">54322</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dns_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>EVDNS_TYPE_A</name> <operator>&amp;&amp;</operator>
<name>qclass</name> <operator>==</operator> <name>EVDNS_CLASS_INET</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>evutil_ascii_strcasecmp</name><argument_list>(<argument><expr><name>qname</name></expr></argument>, <argument><expr><literal type="string">"drop.example.com"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evdns_server_request_drop</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dns_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Unexpected question %d %d \"%s\" "</literal></expr></argument>,
<argument><expr><name>qtype</name></expr></argument>, <argument><expr><name>qclass</name></expr></argument>, <argument><expr><name>qname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dns_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evdns_server_request_respond</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Couldn't send reply. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dns_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dns_server_gethostbyname_cb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ttl</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addresses</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>DNS_ERR_CANCEL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>!=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">90909</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Unexpected cancelation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dns_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dns_got_cancel</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>DNS_ERR_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Unexpected result %d. "</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dns_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Unexpected answer count %d. "</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dns_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DNS_IPv4_A</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name> <modifier>*</modifier></type><name>in_addrs</name> <init>= <expr><name>addresses</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>in_addrs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>s_addr</name> <operator>!=</operator> <call><name>htonl</name><argument_list>(<argument><expr><literal type="number">0xc0a80b0bUL</literal></expr></argument>)</argument_list></call> <operator>||</operator> <name>ttl</name> <operator>!=</operator> <literal type="number">12345</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Bad IPv4 response \"%s\" %d. "</literal></expr></argument>,
<argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name><name>in_addrs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ttl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dns_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>DNS_IPv6_AAAA</name></expr>:</case> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>EVENT__HAVE_STRUCT_IN6_ADDR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_INET_NTOP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>INET6_ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>in6_addrs</name> <init>= <expr><name>addresses</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>INET6_ADDRSTRLEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>in6_addrs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>s6_addr</name></expr></argument>, <argument><expr><literal type="string">"abcdefghijklmnop"</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <name>ttl</name> <operator>!=</operator> <literal type="number">123</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>evutil_inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>in6_addrs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Bad IPv6 response \"%s\" %d. "</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>ttl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dns_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>DNS_PTR</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>addrs</name> <init>= <expr><name>addresses</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>!=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>addrs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ZZ.EXAMPLE.COM"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<name>ttl</name> <operator>!=</operator> <literal type="number">54321</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Bad PTR response \"%s\" %d. "</literal></expr></argument>,
<argument><expr><name><name>addrs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ttl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dns_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>addrs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ZZ-INET6.EXAMPLE.COM"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<name>ttl</name> <operator>!=</operator> <literal type="number">54322</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Bad ipv6 PTR response \"%s\" %d. "</literal></expr></argument>,
<argument><expr><name><name>addrs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ttl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dns_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
<default>default:</default>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Bad response type %d. "</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dns_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></switch>
<label><name>out</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>n_server_responses</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>event_loopexit</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dns_server</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>sock</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>my_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>ss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_socklen_t</name></type> <name>slen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_server_port</name></name> <modifier>*</modifier></type><name>port</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>resolve_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>resolve_addr6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>base</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_request</name></name> <modifier>*</modifier></type><name>req</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dns_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>evdns_base_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>sock</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sock</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_perror</name><argument_list>(<argument><expr><literal type="string">"socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>evutil_make_socket_nonblocking</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>my_addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>my_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>my_addr</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>my_addr</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>my_addr</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><literal type="number">0x7f000001UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>my_addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>my_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_perror</name><argument_list>(<argument><expr><literal type="string">"bind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>slen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getsockname</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slen</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_perror</name><argument_list>(<argument><expr><literal type="string">"getsockname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>evdns_add_server_port</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dns_server_request_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>evdns_base_nameserver_sockaddr_add</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><call><name>evdns_base_count_nameservers</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>ss2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slen2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ss2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ss2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>slen2</name> <operator>=</operator> <call><name>evdns_base_get_nameserver_addr</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ss2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>slen2</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>ss2</name><operator>.</operator><name>ss_family</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slen2</name> <operator>=</operator> <call><name>evdns_base_get_nameserver_addr</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ss2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ss2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>slen2</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_mem_op</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ss2</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>slen2</name> <operator>=</operator> <call><name>evdns_base_get_nameserver_addr</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ss2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ss2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>slen2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<expr_stmt><expr><call><name>evdns_base_resolve_ipv4</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="string">"zz.example.com"</literal></expr></argument>, <argument><expr><name>DNS_QUERY_NO_SEARCH</name></expr></argument>,
<argument><expr><name>dns_server_gethostbyname_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_base_resolve_ipv6</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="string">"zz.example.com"</literal></expr></argument>, <argument><expr><name>DNS_QUERY_NO_SEARCH</name></expr></argument>,
<argument><expr><name>dns_server_gethostbyname_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resolve_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><literal type="number">0xc0a80b0bUL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_base_resolve_reverse</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resolve_addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>dns_server_gethostbyname_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>resolve_addr6</name><operator>.</operator><name>s6_addr</name></name></expr></argument>,
<argument><expr><literal type="string">"\xff\xf0\x00\x00\x00\x00\xaa\xaa"</literal>
<literal type="string">"\x11\x11\x00\x00\x00\x00\xef\xef"</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_base_resolve_reverse_ipv6</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resolve_addr6</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>dns_server_gethostbyname_cb</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>evdns_base_resolve_ipv4</name><argument_list>(<argument><expr><name>base</name></expr></argument>,
<argument><expr><literal type="string">"drop.example.com"</literal></expr></argument>, <argument><expr><name>DNS_QUERY_NO_SEARCH</name></expr></argument>,
<argument><expr><name>dns_server_gethostbyname_cb</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">90909</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evdns_cancel_request</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_dispatch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>dns_got_cancel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <name>dns_ok</name></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>port</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evdns_close_server_port</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sock</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>base</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evdns_base_free</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>n_replies_left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>exit_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>evdns_server_port</name></name> <modifier>*</modifier></type><name>exit_port</name></decl>;</decl_stmt>

<struct>struct <name>generic_dns_callback_result</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ttl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>addrs_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>addrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>addrs_buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>generic_dns_callback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ttl</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addresses</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>generic_dns_callback_result</name></name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>ttl</name></name> <operator>=</operator> <name>ttl</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>DNS_IPv4_A</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>count</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>DNS_IPv6_AAAA</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>count</name> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>DNS_PTR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>addresses</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>addrs_len</name></name> <operator>=</operator> <name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>addrs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>addrs_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>addrs_buf</name></name></expr></argument>, <argument><expr><name>addresses</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>addrs</name></name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>addrs_buf</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>n_replies_left</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n_replies_left</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>exit_port</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evdns_close_server_port</name><argument_list>(<argument><expr><name>exit_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>exit_port</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>exit_base</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>regress_dns_server_table</name></name></type> <name><name>search_table</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"host.a.example.com"</literal></expr>, <expr><literal type="string">"err"</literal></expr>, <expr><literal type="string">"3"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"host.b.example.com"</literal></expr>, <expr><literal type="string">"err"</literal></expr>, <expr><literal type="string">"3"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"host.c.example.com"</literal></expr>, <expr><literal type="string">"A"</literal></expr>, <expr><literal type="string">"11.22.33.44"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"host2.a.example.com"</literal></expr>, <expr><literal type="string">"err"</literal></expr>, <expr><literal type="string">"3"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"host2.b.example.com"</literal></expr>, <expr><literal type="string">"A"</literal></expr>, <expr><literal type="string">"200.100.0.100"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"host2.c.example.com"</literal></expr>, <expr><literal type="string">"err"</literal></expr>, <expr><literal type="string">"3"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"hostn.a.example.com"</literal></expr>, <expr><literal type="string">"errsoa"</literal></expr>, <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"hostn.b.example.com"</literal></expr>, <expr><literal type="string">"errsoa"</literal></expr>, <expr><literal type="string">"3"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"hostn.c.example.com"</literal></expr>, <expr><literal type="string">"err"</literal></expr>, <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"host"</literal></expr>, <expr><literal type="string">"err"</literal></expr>, <expr><literal type="string">"3"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"host2"</literal></expr>, <expr><literal type="string">"err"</literal></expr>, <expr><literal type="string">"3"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"*"</literal></expr>, <expr><literal type="string">"err"</literal></expr>, <expr><literal type="string">"3"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dns_search_test_impl</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lower</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>regress_dns_server_table</name></name></type> <name><name>table</name><index>[<expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>search_table</name></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>dns</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>portnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>generic_dns_callback_result</name></name></type> <name><name>r</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>search_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lower</name> <operator>=</operator> <name>lower</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>regress_dnsserver</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>portnum</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"127.0.0.1:%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>portnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dns</name> <operator>=</operator> <call><name>evdns_base_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>evdns_base_nameserver_ip_add</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evdns_base_search_add</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="string">"a.example.com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_base_search_add</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="string">"b.example.com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_base_search_add</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="string">"c.example.com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n_replies_left</name> <operator>=</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>exit_base</name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evdns_base_resolve_ipv4</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="string">"host"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>generic_dns_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_base_resolve_ipv4</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="string">"host2"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>generic_dns_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_base_resolve_ipv4</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="string">"host"</literal></expr></argument>, <argument><expr><name>DNS_NO_SEARCH</name></expr></argument>, <argument><expr><name>generic_dns_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_base_resolve_ipv4</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="string">"host2"</literal></expr></argument>, <argument><expr><name>DNS_NO_SEARCH</name></expr></argument>, <argument><expr><name>generic_dns_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_base_resolve_ipv4</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="string">"host3"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>generic_dns_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_base_resolve_ipv4</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="string">"hostn.a.example.com"</literal></expr></argument>, <argument><expr><name>DNS_NO_SEARCH</name></expr></argument>, <argument><expr><name>generic_dns_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_base_resolve_ipv4</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="string">"hostn.b.example.com"</literal></expr></argument>, <argument><expr><name>DNS_NO_SEARCH</name></expr></argument>, <argument><expr><name>generic_dns_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_base_resolve_ipv4</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="string">"hostn.c.example.com"</literal></expr></argument>, <argument><expr><name>DNS_NO_SEARCH</name></expr></argument>, <argument><expr><name>generic_dns_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DNS_IPv4_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>count</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ev_uint32_t</name><operator>*</operator><operator>)</operator><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>addrs</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>htonl</name><argument_list>(<argument><expr><literal type="number">0x0b16212c</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DNS_IPv4_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>count</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ev_uint32_t</name><operator>*</operator><operator>)</operator><name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>addrs</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>htonl</name><argument_list>(<argument><expr><literal type="number">0xc8640064</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>result</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DNS_ERR_NOTEXIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>result</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DNS_ERR_NOTEXIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>result</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DNS_ERR_NOTEXIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>result</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DNS_ERR_NODATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>ttl</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>result</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DNS_ERR_NOTEXIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>ttl</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>result</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DNS_ERR_NODATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>ttl</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>dns</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evdns_base_free</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>regress_clean_dnsserver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dns_search_empty_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>dns</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dns</name> <operator>=</operator> <call><name>evdns_base_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evdns_base_search_add</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="string">"whatever.example.com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n_replies_left</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>exit_base</name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_ptr_op</name><argument_list>(<argument><expr><call><name>evdns_base_resolve_ipv4</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>generic_dns_callback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>dns</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evdns_base_free</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dns_search_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>dns_search_test_impl</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dns_search_lower_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>dns_search_test_impl</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>request_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>evdns_request</name></name> <modifier>*</modifier></type><name>current_req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>search_cancel_server_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_server_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>question</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>nquestions</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TT_DIE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Only handling one question at a time; got %d"</literal><operator>,</operator>
<name><name>req</name><operator>-&gt;</operator><name>nquestions</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>question</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>questions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TT_BLATHER</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"got question, %s"</literal><operator>,</operator> <name>question</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>request_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>evdns_server_request_respond</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>--</operator><name>request_count</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evdns_cancel_request</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>current_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>end</name>:</label>
<empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dns_search_cancel_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>dns</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_server_port</name></name> <modifier>*</modifier></type><name>port</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>portnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>generic_dns_callback_result</name></name></type> <name>r1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>regress_get_dnsserver</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>portnum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>search_cancel_server_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"127.0.0.1:%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>portnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dns</name> <operator>=</operator> <call><name>evdns_base_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>evdns_base_nameserver_ip_add</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evdns_base_search_add</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="string">"a.example.com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_base_search_add</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="string">"b.example.com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_base_search_add</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="string">"c.example.com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_base_search_add</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="string">"d.example.com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>exit_base</name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>
<expr_stmt><expr><name>request_count</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n_replies_left</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>current_req</name> <operator>=</operator> <call><name>evdns_base_resolve_ipv4</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="string">"host"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>generic_dns_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>r1</name><operator>.</operator><name>result</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DNS_ERR_CANCEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>port</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evdns_close_server_port</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dns</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evdns_base_free</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>fail_server_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_server_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>question</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>count</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>in</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><operator>*</operator><name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><operator>!</operator> <call><name>evdns_server_request_drop</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>nquestions</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TT_DIE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Only handling one question at a time; got %d"</literal><operator>,</operator>
<name><name>req</name><operator>-&gt;</operator><name>nquestions</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>question</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>questions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>evutil_ascii_strcasecmp</name><argument_list>(<argument><expr><name>question</name></expr></argument>, <argument><expr><literal type="string">"google.com"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>exit_base</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evutil_inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><literal type="string">"16.32.64.128"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_server_request_add_a_reply</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>question</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>in</name><operator>.</operator><name>s_addr</name></name></expr></argument>,
<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>tt_assert</name><argument_list>(<argument>! evdns_server_request_respond(req, <literal type="number">0</literal>)</argument>)</argument_list></macro>
<return>return;</return>
<label><name>end</name>:</label>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><operator>!</operator> <call><name>evdns_server_request_drop</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dns_retry_test_impl</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_server_port</name></name> <modifier>*</modifier></type><name>port</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>dns</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>drop_count</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>portnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>generic_dns_callback_result</name></name></type> <name>r1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>regress_get_dnsserver</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>portnum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>fail_server_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>drop_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"127.0.0.1:%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>portnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dns</name> <operator>=</operator> <call><name>evdns_base_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>evdns_base_nameserver_ip_add</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator> <call><name>evdns_base_set_option</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="string">"timeout"</literal></expr></argument>, <argument><expr><literal type="string">"0.2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator> <call><name>evdns_base_set_option</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="string">"max-timeouts:"</literal></expr></argument>, <argument><expr><literal type="string">"10"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator> <call><name>evdns_base_set_option</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="string">"initial-probe-timeout"</literal></expr></argument>, <argument><expr><literal type="string">"0.1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evdns_base_resolve_ipv4</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="string">"host.example.com"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>generic_dns_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n_replies_left</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>exit_base</name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>drop_count</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>r1</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DNS_IPv4_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>r1</name><operator>.</operator><name>count</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ev_uint32_t</name><operator>*</operator><operator>)</operator><name><name>r1</name><operator>.</operator><name>addrs</name></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>htonl</name><argument_list>(<argument><expr><literal type="number">0x10204080</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>drop_count</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator> <call><name>evdns_base_set_option</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="string">"max-timeouts:"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator> <call><name>evdns_base_set_option</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="string">"attempts:"</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>r1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evdns_base_resolve_ipv4</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="string">"host.example.com"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>generic_dns_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n_replies_left</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>r1</name><operator>.</operator><name>result</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DNS_ERR_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>drop_count</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_base_resolve_ipv4</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="string">"host.example.com"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>generic_dns_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>r1</name><operator>.</operator><name>result</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DNS_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>r1</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DNS_IPv4_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>r1</name><operator>.</operator><name>count</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ev_uint32_t</name><operator>*</operator><operator>)</operator><name><name>r1</name><operator>.</operator><name>addrs</name></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>htonl</name><argument_list>(<argument><expr><literal type="number">0x10204080</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>dns</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evdns_base_free</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>port</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evdns_close_server_port</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dns_retry_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dns_retry_test_impl</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dns_retry_disable_when_inactive_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dns_retry_test_impl</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>EVDNS_BASE_DISABLE_WHEN_INACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>regress_dns_server_table</name></name></type> <name><name>internal_error_table</name><index>[]</index></name> <init>= <expr><block>{





<expr><block>{ <expr><literal type="string">"foof.example.com"</literal></expr>, <expr><literal type="string">"err"</literal></expr>, <expr><literal type="string">"4"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>regress_dns_server_table</name></name></type> <name><name>reissue_table</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"foof.example.com"</literal></expr>, <expr><literal type="string">"A"</literal></expr>, <expr><literal type="string">"240.15.240.15"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dns_reissue_test_impl</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_server_port</name></name> <modifier>*</modifier></type><name>port1</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>port2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>dns</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>generic_dns_callback_result</name></name></type> <name>r1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>portnum1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>portnum2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf1</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>buf2</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>port1</name> <operator>=</operator> <call><name>regress_get_dnsserver</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>portnum1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>regress_dns_server_cb</name></expr></argument>, <argument><expr><name>internal_error_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>port1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>port2</name> <operator>=</operator> <call><name>regress_get_dnsserver</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>portnum2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>regress_dns_server_cb</name></expr></argument>, <argument><expr><name>reissue_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>port2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"127.0.0.1:%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>portnum1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"127.0.0.1:%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>portnum2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dns</name> <operator>=</operator> <call><name>evdns_base_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>evdns_base_nameserver_ip_add</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator> <call><name>evdns_base_set_option</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="string">"timeout:"</literal></expr></argument>, <argument><expr><literal type="string">"0.3"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator> <call><name>evdns_base_set_option</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="string">"max-timeouts:"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator> <call><name>evdns_base_set_option</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="string">"attempts:"</literal></expr></argument>, <argument><expr><literal type="string">"5"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>r1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_base_resolve_ipv4</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="string">"foof.example.com"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>generic_dns_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>evdns_base_nameserver_ip_add</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n_replies_left</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>exit_base</name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>r1</name><operator>.</operator><name>result</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DNS_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>r1</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DNS_IPv4_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>r1</name><operator>.</operator><name>count</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ev_uint32_t</name><operator>*</operator><operator>)</operator><name><name>r1</name><operator>.</operator><name>addrs</name></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>htonl</name><argument_list>(<argument><expr><literal type="number">0xf00ff00f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>internal_error_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>seen</name></expr></argument>, <argument><expr><operator>&gt;</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>dns</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evdns_base_free</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>port1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evdns_close_server_port</name><argument_list>(<argument><expr><name>port1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>port2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evdns_close_server_port</name><argument_list>(<argument><expr><name>port2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dns_reissue_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dns_reissue_test_impl</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dns_reissue_disable_when_inactive_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dns_reissue_test_impl</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>EVDNS_BASE_DISABLE_WHEN_INACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static void
dumb_bytes_fn(char *p, size_t n)
{
unsigned i;


for (i=0;i&lt;n;++i)
p[i] = (char)(rand() &amp; 7);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dns_inflight_test_impl</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>dns</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_server_port</name></name> <modifier>*</modifier></type><name>dns_port</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>portnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>disable_when_inactive</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>EVDNS_BASE_DISABLE_WHEN_INACTIVE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>generic_dns_callback_result</name></name></type> <name><name>r</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dns_port</name> <operator>=</operator> <call><name>regress_get_dnsserver</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>portnum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>regress_dns_server_cb</name></expr></argument>, <argument><expr><name>reissue_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>dns_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>disable_when_inactive</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>exit_port</name> <operator>=</operator> <name>dns_port</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"127.0.0.1:%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>portnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dns</name> <operator>=</operator> <call><name>evdns_base_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>evdns_base_nameserver_ip_add</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator> <call><name>evdns_base_set_option</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="string">"max-inflight:"</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator> <call><name>evdns_base_set_option</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="string">"randomize-case:"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">20</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evdns_base_resolve_ipv4</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="string">"foof.example.com"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>generic_dns_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>n_replies_left</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>exit_base</name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">20</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DNS_IPv4_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ev_uint32_t</name><operator>*</operator><operator>)</operator><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addrs</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>htonl</name><argument_list>(<argument><expr><literal type="number">0xf00ff00f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>dns</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evdns_base_free</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>exit_port</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evdns_close_server_port</name><argument_list>(<argument><expr><name>exit_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>exit_port</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator> <name>disable_when_inactive</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evdns_close_server_port</name><argument_list>(<argument><expr><name>dns_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dns_inflight_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dns_inflight_test_impl</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dns_disable_when_inactive_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dns_inflight_test_impl</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>EVDNS_BASE_DISABLE_WHEN_INACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dns_disable_when_inactive_no_ns_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>inactive_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>dns</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>portnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>generic_dns_callback_result</name></name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>inactive_base</name> <operator>=</operator> <call><name>event_base_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>inactive_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>regress_dnsserver</name><argument_list>(<argument><expr><name>inactive_base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>portnum</name></expr></argument>, <argument><expr><name>search_table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"127.0.0.1:%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>portnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dns</name> <operator>=</operator> <call><name>evdns_base_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>EVDNS_BASE_DISABLE_WHEN_INACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>evdns_base_nameserver_ip_add</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator> <call><name>evdns_base_set_option</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="string">"timeout:"</literal></expr></argument>, <argument><expr><literal type="string">"0.1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evdns_base_resolve_ipv4</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="string">"foof.example.com"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>generic_dns_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n_replies_left</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>exit_base</name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>n_replies_left</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>result</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DNS_ERR_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>count</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_ptr_op</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>addrs</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>dns</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evdns_base_free</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>regress_clean_dnsserver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>inactive_base</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_base_free</name><argument_list>(<argument><expr><name>inactive_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>



<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>total_connected_or_failed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>total_n_accepted</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>be_connect_hostname_base</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>be_getaddrinfo_server_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_server_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>n_got_p</name><init>=<expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>added_any</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><operator>*</operator><name>n_got_p</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>req</name><operator>-&gt;</operator><name>nquestions</name></name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>qtype</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>questions</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>type</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>qclass</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>questions</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>dns_question_class</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>qname</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>questions</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>ans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>ans6</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ans6</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ans6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TT_BLATHER</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Got question about %s, type=%d"</literal><operator>,</operator> <name>qname</name><operator>,</operator> <name>qtype</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>EVDNS_TYPE_A</name> <operator>&amp;&amp;</operator>
<name>qclass</name> <operator>==</operator> <name>EVDNS_CLASS_INET</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>evutil_ascii_strcasecmp</name><argument_list>(<argument><expr><name>qname</name></expr></argument>, <argument><expr><literal type="string">"nobodaddy.example.com"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ans</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><literal type="number">0x7f000001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_server_request_add_a_reply</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>qname</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ans</name><operator>.</operator><name>s_addr</name></name></expr></argument>, <argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>added_any</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>evutil_ascii_strcasecmp</name><argument_list>(<argument><expr><name>qname</name></expr></argument>,
<argument><expr><literal type="string">"nosuchplace.example.com"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>evutil_ascii_strcasecmp</name><argument_list>(<argument><expr><name>qname</name></expr></argument>,
<argument><expr><literal type="string">"both.example.com"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>EVDNS_TYPE_A</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ans</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><literal type="number">0x50502020</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_server_request_add_a_reply</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>qname</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ans</name><operator>.</operator><name>s_addr</name></name></expr></argument>, <argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>added_any</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>EVDNS_TYPE_AAAA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ans6</name><operator>.</operator><name>s6_addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ans6</name><operator>.</operator><name>s6_addr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ans6</name><operator>.</operator><name>s6_addr</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xbb</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ans6</name><operator>.</operator><name>s6_addr</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xbb</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_server_request_add_aaaa_reply</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>qname</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ans6</name><operator>.</operator><name>s6_addr</name></name></expr></argument>, <argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>added_any</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>evdns_server_request_add_cname_reply</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>qname</name></expr></argument>,
<argument><expr><literal type="string">"both-canonical.example.com"</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>evutil_ascii_strcasecmp</name><argument_list>(<argument><expr><name>qname</name></expr></argument>,
<argument><expr><literal type="string">"v4only.example.com"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>evutil_ascii_strcasecmp</name><argument_list>(<argument><expr><name>qname</name></expr></argument>, <argument><expr><literal type="string">"v4assert.example.com"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>EVDNS_TYPE_A</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ans</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><literal type="number">0x12345678</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_server_request_add_a_reply</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>qname</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ans</name><operator>.</operator><name>s_addr</name></name></expr></argument>, <argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>added_any</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>evutil_ascii_strcasecmp</name><argument_list>(<argument><expr><name>qname</name></expr></argument>,
<argument><expr><literal type="string">"v4assert.example.com"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TT_FAIL</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Got an AAAA request for v4assert"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>evutil_ascii_strcasecmp</name><argument_list>(<argument><expr><name>qname</name></expr></argument>,
<argument><expr><literal type="string">"v6only.example.com"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>evutil_ascii_strcasecmp</name><argument_list>(<argument><expr><name>qname</name></expr></argument>, <argument><expr><literal type="string">"v6assert.example.com"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>EVDNS_TYPE_AAAA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ans6</name><operator>.</operator><name>s6_addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x0b</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ans6</name><operator>.</operator><name>s6_addr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x0b</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ans6</name><operator>.</operator><name>s6_addr</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xf0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ans6</name><operator>.</operator><name>s6_addr</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x0d</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_server_request_add_aaaa_reply</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>qname</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ans6</name><operator>.</operator><name>s6_addr</name></name></expr></argument>, <argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>added_any</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>evutil_ascii_strcasecmp</name><argument_list>(<argument><expr><name>qname</name></expr></argument>,
<argument><expr><literal type="string">"v6assert.example.com"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TT_FAIL</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Got a A request for v6assert"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>evutil_ascii_strcasecmp</name><argument_list>(<argument><expr><name>qname</name></expr></argument>,
<argument><expr><literal type="string">"v6timeout.example.com"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>EVDNS_TYPE_A</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ans</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><literal type="number">0xabcdef01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_server_request_add_a_reply</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>qname</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ans</name><operator>.</operator><name>s_addr</name></name></expr></argument>, <argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>added_any</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>EVDNS_TYPE_AAAA</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>evdns_server_request_drop</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>evutil_ascii_strcasecmp</name><argument_list>(<argument><expr><name>qname</name></expr></argument>,
<argument><expr><literal type="string">"v4timeout.example.com"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>EVDNS_TYPE_AAAA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ans6</name><operator>.</operator><name>s6_addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x0a</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ans6</name><operator>.</operator><name>s6_addr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x0a</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ans6</name><operator>.</operator><name>s6_addr</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ans6</name><operator>.</operator><name>s6_addr</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_server_request_add_aaaa_reply</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>qname</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ans6</name><operator>.</operator><name>s6_addr</name></name></expr></argument>, <argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>added_any</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>EVDNS_TYPE_A</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>evdns_server_request_drop</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>evutil_ascii_strcasecmp</name><argument_list>(<argument><expr><name>qname</name></expr></argument>,
<argument><expr><literal type="string">"v6timeout-nonexist.example.com"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>EVDNS_TYPE_A</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>EVDNS_TYPE_AAAA</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>evdns_server_request_drop</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>evutil_ascii_strcasecmp</name><argument_list>(<argument><expr><name>qname</name></expr></argument>,
<argument><expr><literal type="string">"all-timeout.example.com"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>evdns_server_request_drop</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>TT_GRIPE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Got weird request for %s"</literal><operator>,</operator><name>qname</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>added_any</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TT_BLATHER</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"answering"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_server_request_respond</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>TT_BLATHER</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"saying nexist."</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_server_request_respond</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>nil_accept_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evconnlistener</name></name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>socklen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>total_n_accepted</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>total_n_accepted</name> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>total_connected_or_failed</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>be_connect_hostname_base</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<struct>struct <name>be_conn_hostname_result</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>dnserr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>what</name></decl>;</decl_stmt>
}</block>;</struct>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>be_connect_hostname_event_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>be_conn_hostname_result</name></name> <modifier>*</modifier></type><name>got</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>got</name><operator>-&gt;</operator><name>what</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TT_BLATHER</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Got a bufferevent event %d"</literal><operator>,</operator> <name>what</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>got</name><operator>-&gt;</operator><name>what</name></name> <operator>=</operator> <name>what</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>what</name> <operator>&amp;</operator> <name>BEV_EVENT_CONNECTED</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>what</name> <operator>&amp;</operator> <name>BEV_EVENT_ERROR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>bufferevent_socket_get_dns_error</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>got</name><operator>-&gt;</operator><name>dnserr</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TT_BLATHER</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"DNS error %d: %s"</literal><operator>,</operator> <name>r</name><operator>,</operator>
<call><name>evutil_gai_strerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt> <expr_stmt><expr><operator>++</operator><name>total_connected_or_failed</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TT_BLATHER</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Got %d connections or errors."</literal><operator>,</operator> <name>total_connected_or_failed</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>total_n_accepted</name> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>total_connected_or_failed</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>be_connect_hostname_base</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>TT_FAIL</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Two events on one bufferevent. %d,%d"</literal><operator>,</operator>
<name><name>got</name><operator>-&gt;</operator><name>what</name></name><operator>,</operator> <operator>(</operator><name>int</name><operator>)</operator><name>what</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_bufferevent_connect_hostname</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evconnlistener</name></name> <modifier>*</modifier></type><name>listener</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>be1</name><init>=<expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>be2</name><init>=<expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>be3</name><init>=<expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>be4</name><init>=<expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>be5</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>be_conn_hostname_result</name></name></type> <name>be1_outcome</name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>, <decl><type ref="prev"/><name>be2_outcome</name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>,
<decl><type ref="prev"/><name>be3_outcome</name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>, <decl><type ref="prev"/><name>be4_outcome</name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>, <decl><type ref="prev"/><name>be5_outcome</name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>expect_err5</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>dns</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_server_port</name></name> <modifier>*</modifier></type><name>port</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>sin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>listener_port</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>dns_port</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_accept</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n_dns</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>be_connect_hostname_base</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><literal type="number">0x7f000001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>listener</name> <operator>=</operator> <call><name>evconnlistener_new_bind</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>nil_accept_cb</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>n_accept</name></expr></argument>,
<argument><expr><name>LEV_OPT_REUSEABLE</name><operator>|</operator><name>LEV_OPT_CLOSE_ON_EXEC</name></expr></argument>,
<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sin</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>listener_port</name> <operator>=</operator> <call><name>regress_get_socket_port</name><argument_list>(
<argument><expr><call><name>evconnlistener_get_fd</name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>regress_get_dnsserver</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dns_port</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>be_getaddrinfo_server_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_dns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>dns_port</name></expr></argument>, <argument><expr><operator>&gt;=</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>dns</name> <operator>=</operator> <call><name>evdns_base_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"127.0.0.1:%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>dns_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_base_nameserver_ip_add</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>be1</name> <operator>=</operator> <call><name>bufferevent_socket_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>BEV_OPT_CLOSE_ON_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>be2</name> <operator>=</operator> <call><name>bufferevent_socket_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>BEV_OPT_CLOSE_ON_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>be3</name> <operator>=</operator> <call><name>bufferevent_socket_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>BEV_OPT_CLOSE_ON_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>be4</name> <operator>=</operator> <call><name>bufferevent_socket_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>BEV_OPT_CLOSE_ON_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>be5</name> <operator>=</operator> <call><name>bufferevent_socket_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>BEV_OPT_CLOSE_ON_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_setcb</name><argument_list>(<argument><expr><name>be1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>be_connect_hostname_event_cb</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>be1_outcome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_setcb</name><argument_list>(<argument><expr><name>be2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>be_connect_hostname_event_cb</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>be2_outcome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_setcb</name><argument_list>(<argument><expr><name>be3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>be_connect_hostname_event_cb</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>be3_outcome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_setcb</name><argument_list>(<argument><expr><name>be4</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>be_connect_hostname_event_cb</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>be4_outcome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_setcb</name><argument_list>(<argument><expr><name>be5</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>be_connect_hostname_event_cb</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>be5_outcome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>bufferevent_socket_connect_hostname</name><argument_list>(<argument><expr><name>be4</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AF_INET</name></expr></argument>,
<argument><expr><literal type="string">"localhost"</literal></expr></argument>, <argument><expr><name>listener_port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>bufferevent_socket_connect_hostname</name><argument_list>(<argument><expr><name>be5</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AF_INET</name></expr></argument>,
<argument><expr><literal type="string">"nonesuch.nowhere.example.com"</literal></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>



<decl_stmt><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name></type> <name>hints</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ai</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_protocol</name></name> <operator>=</operator> <name>IPPROTO_TCP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>expect_err5</name> <operator>=</operator> <call><name>evutil_getaddrinfo</name><argument_list>(
<argument><expr><literal type="string">"nonesuch.nowhere.example.com"</literal></expr></argument>, <argument><expr><literal type="string">"80"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>bufferevent_socket_connect_hostname</name><argument_list>(<argument><expr><name>be1</name></expr></argument>, <argument><expr><name>dns</name></expr></argument>, <argument><expr><name>AF_INET</name></expr></argument>,
<argument><expr><literal type="string">"nosuchplace.example.com"</literal></expr></argument>, <argument><expr><name>listener_port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>bufferevent_socket_connect_hostname</name><argument_list>(<argument><expr><name>be2</name></expr></argument>, <argument><expr><name>dns</name></expr></argument>, <argument><expr><name>AF_INET</name></expr></argument>,
<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>listener_port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>bufferevent_socket_connect_hostname</name><argument_list>(<argument><expr><name>be3</name></expr></argument>, <argument><expr><name>dns</name></expr></argument>, <argument><expr><name>AF_INET</name></expr></argument>,
<argument><expr><literal type="string">"nobodaddy.example.com"</literal></expr></argument>, <argument><expr><name>listener_port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>be1_outcome</name><operator>.</operator><name>what</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>BEV_EVENT_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>be1_outcome</name><operator>.</operator><name>dnserr</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>EVUTIL_EAI_NONAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>be2_outcome</name><operator>.</operator><name>what</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>BEV_EVENT_CONNECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>be2_outcome</name><operator>.</operator><name>dnserr</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>be3_outcome</name><operator>.</operator><name>what</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>BEV_EVENT_CONNECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>be3_outcome</name><operator>.</operator><name>dnserr</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>be4_outcome</name><operator>.</operator><name>what</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>BEV_EVENT_CONNECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>be4_outcome</name><operator>.</operator><name>dnserr</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>expect_err5</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>be5_outcome</name><operator>.</operator><name>what</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>BEV_EVENT_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>be5_outcome</name><operator>.</operator><name>dnserr</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>expect_err5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>n_accept</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>n_dns</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>listener</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evconnlistener_free</name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>port</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evdns_close_server_port</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dns</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evdns_base_free</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>be1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_free</name><argument_list>(<argument><expr><name>be1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>be2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_free</name><argument_list>(<argument><expr><name>be2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>be3</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_free</name><argument_list>(<argument><expr><name>be3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>be4</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_free</name><argument_list>(<argument><expr><name>be4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>be5</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_free</name><argument_list>(<argument><expr><name>be5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<struct>struct <name>gai_outcome</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>ai</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>n_gai_results_pending</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>exit_base_on_no_pending_results</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gai_cb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gai_outcome</name></name> <modifier>*</modifier></type><name>go</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>go</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>go</name><operator>-&gt;</operator><name>ai</name></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>n_gai_results_pending</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>exit_base_on_no_pending_results</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>exit_base_on_no_pending_results</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n_gai_results_pending</name> <operator>&lt;</operator> <literal type="number">900</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TT_BLATHER</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Got an answer; expecting %d more."</literal><operator>,</operator>
<name>n_gai_results_pending</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cancel_gai_cb</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_getaddrinfo_request</name></name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>evdns_getaddrinfo_cancel</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_getaddrinfo_async</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name></type> <name>hints</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>gai_outcome</name></name></type> <name>local_outcome</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>gai_outcome</name></name></type> <name><name>a_out</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_getaddrinfo_request</name></name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_server_port</name></name> <modifier>*</modifier></type><name>port</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>dns_port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_dns_questions</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>dns_base</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>a_out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>a_out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>local_outcome</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>local_outcome</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dns_base</name> <operator>=</operator> <call><name>evdns_base_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>evdns_base_load_hosts</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator> <call><name>evdns_base_set_option</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><literal type="string">"timeout"</literal></expr></argument>, <argument><expr><literal type="string">"0.3"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator> <call><name>evdns_base_set_option</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><literal type="string">"getaddrinfo-allow-skew"</literal></expr></argument>, <argument><expr><literal type="string">"0.2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n_gai_results_pending</name> <operator>=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>



<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>local_outcome</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>local_outcome</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evdns_getaddrinfo</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><literal type="string">"1.2.3.4"</literal></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><name>gai_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>local_outcome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>local_outcome</name><operator>.</operator><name>err</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_ptr_op</name><argument_list>(<argument><expr><name><name>local_outcome</name><operator>.</operator><name>ai</name></name></expr></argument>,<argument><expr><operator>!=</operator></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_ai_eq</name><argument_list>(<argument><expr><name><name>local_outcome</name><operator>.</operator><name>ai</name></name></expr></argument>, <argument><expr><literal type="string">"1.2.3.4:80"</literal></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_freeaddrinfo</name><argument_list>(<argument><expr><name><name>local_outcome</name><operator>.</operator><name>ai</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>local_outcome</name><operator>.</operator><name>ai</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>TT_BLATHER</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Apparently we have no getservbyname."</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <name>EVUTIL_AI_NUMERICHOST</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>local_outcome</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>local_outcome</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evdns_getaddrinfo</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><literal type="string">"www.google.com"</literal></expr></argument>, <argument><expr><literal type="string">"80"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><name>gai_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>local_outcome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_ptr_op</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><operator>==</operator></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>local_outcome</name><operator>.</operator><name>err</name></name></expr></argument>,<argument><expr><operator>==</operator></expr></argument>,<argument><expr><name>EVUTIL_EAI_NONAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_ptr_op</name><argument_list>(<argument><expr><name><name>local_outcome</name><operator>.</operator><name>ai</name></name></expr></argument>,<argument><expr><operator>==</operator></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>local_outcome</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>local_outcome</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_protocol</name></name> <operator>=</operator> <name>IPPROTO_TCP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evdns_getaddrinfo</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><literal type="string">"f::f"</literal></expr></argument>, <argument><expr><literal type="string">"8008"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><name>gai_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>local_outcome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>local_outcome</name><operator>.</operator><name>err</name></name></expr></argument>,<argument><expr><operator>==</operator></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>local_outcome</name><operator>.</operator><name>ai</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_ptr_op</name><argument_list>(<argument><expr><name><name>local_outcome</name><operator>.</operator><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name></expr></argument>,<argument><expr><operator>==</operator></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_ai_eq</name><argument_list>(<argument><expr><name><name>local_outcome</name><operator>.</operator><name>ai</name></name></expr></argument>, <argument><expr><literal type="string">"[f::f]:8008"</literal></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_freeaddrinfo</name><argument_list>(<argument><expr><name><name>local_outcome</name><operator>.</operator><name>ai</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>local_outcome</name><operator>.</operator><name>ai</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>local_outcome</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>local_outcome</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evdns_getaddrinfo</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><literal type="string">"5.6.7.8"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><name>gai_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>local_outcome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>local_outcome</name><operator>.</operator><name>err</name></name></expr></argument>,<argument><expr><operator>==</operator></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>local_outcome</name><operator>.</operator><name>ai</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>ai_find_by_protocol</name><argument_list>(<argument><expr><name><name>local_outcome</name><operator>.</operator><name>ai</name></name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_ai_eq</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"5.6.7.8"</literal></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>ai_find_by_protocol</name><argument_list>(<argument><expr><name><name>local_outcome</name><operator>.</operator><name>ai</name></name></expr></argument>, <argument><expr><name>IPPROTO_UDP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_ai_eq</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"5.6.7.8"</literal></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><name>IPPROTO_UDP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_freeaddrinfo</name><argument_list>(<argument><expr><name><name>local_outcome</name><operator>.</operator><name>ai</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>local_outcome</name><operator>.</operator><name>ai</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>local_outcome</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>local_outcome</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_DGRAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <name>EVUTIL_AI_PASSIVE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evdns_getaddrinfo</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"9090"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><name>gai_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>local_outcome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>local_outcome</name><operator>.</operator><name>err</name></name></expr></argument>,<argument><expr><operator>==</operator></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>local_outcome</name><operator>.</operator><name>ai</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>ai_find_by_family</name><argument_list>(<argument><expr><name><name>local_outcome</name><operator>.</operator><name>ai</name></name></expr></argument>, <argument><expr><name>PF_INET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_ai_eq</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"0.0.0.0:9090"</literal></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><name>IPPROTO_UDP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>ai_find_by_family</name><argument_list>(<argument><expr><name><name>local_outcome</name><operator>.</operator><name>ai</name></name></expr></argument>, <argument><expr><name>PF_INET6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_ai_eq</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"[::]:9090"</literal></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><name>IPPROTO_UDP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_freeaddrinfo</name><argument_list>(<argument><expr><name><name>local_outcome</name><operator>.</operator><name>ai</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>local_outcome</name><operator>.</operator><name>ai</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>local_outcome</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>local_outcome</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evdns_getaddrinfo</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><name>gai_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>local_outcome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>local_outcome</name><operator>.</operator><name>err</name></name></expr></argument>,<argument><expr><operator>==</operator></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>local_outcome</name><operator>.</operator><name>ai</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>ai_find_by_family</name><argument_list>(<argument><expr><name><name>local_outcome</name><operator>.</operator><name>ai</name></name></expr></argument>, <argument><expr><name>PF_INET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_ai_eq</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1:2"</literal></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>ai_find_by_family</name><argument_list>(<argument><expr><name><name>local_outcome</name><operator>.</operator><name>ai</name></name></expr></argument>, <argument><expr><name>PF_INET6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_ai_eq</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"[::1]:2"</literal></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_freeaddrinfo</name><argument_list>(<argument><expr><name><name>local_outcome</name><operator>.</operator><name>ai</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>local_outcome</name><operator>.</operator><name>ai</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>local_outcome</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>local_outcome</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evdns_getaddrinfo</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><literal type="string">"LOCALHOST"</literal></expr></argument>, <argument><expr><literal type="string">"80"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><name>gai_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>local_outcome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>local_outcome</name><operator>.</operator><name>err</name></name></expr></argument>,<argument><expr><operator>==</operator></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>local_outcome</name><operator>.</operator><name>ai</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>ai_find_by_family</name><argument_list>(<argument><expr><name><name>local_outcome</name><operator>.</operator><name>ai</name></name></expr></argument>, <argument><expr><name>PF_INET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_ai_eq</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1:80"</literal></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>ai_find_by_family</name><argument_list>(<argument><expr><name><name>local_outcome</name><operator>.</operator><name>ai</name></name></expr></argument>, <argument><expr><name>PF_INET6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_ai_eq</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"[::1]:80"</literal></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_freeaddrinfo</name><argument_list>(<argument><expr><name><name>local_outcome</name><operator>.</operator><name>ai</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>local_outcome</name><operator>.</operator><name>ai</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>local_outcome</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>local_outcome</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_INET6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evdns_getaddrinfo</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><literal type="string">"LOCALHOST"</literal></expr></argument>, <argument><expr><literal type="string">"9999"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><name>gai_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>local_outcome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>local_outcome</name><operator>.</operator><name>err</name></name></expr></argument>,<argument><expr><operator>==</operator></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>local_outcome</name><operator>.</operator><name>ai</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>local_outcome</name><operator>.</operator><name>ai</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_ai_eq</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"[::1]:9999"</literal></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_ptr_op</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>ai_next</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_freeaddrinfo</name><argument_list>(<argument><expr><name><name>local_outcome</name><operator>.</operator><name>ai</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>local_outcome</name><operator>.</operator><name>ai</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>



<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>regress_get_dnsserver</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dns_port</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>be_getaddrinfo_server_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_dns_questions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>dns_port</name></expr></argument>, <argument><expr><operator>&gt;=</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"127.0.0.1:%d"</literal></expr></argument>, <argument><expr><name>dns_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_base_nameserver_ip_add</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <name>EVUTIL_AI_CANONNAME</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evdns_getaddrinfo</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><literal type="string">"both.example.com"</literal></expr></argument>, <argument><expr><literal type="string">"8000"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><name>gai_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evdns_getaddrinfo</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><literal type="string">"v4only.example.com"</literal></expr></argument>, <argument><expr><literal type="string">"8001"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><name>gai_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a_out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evdns_getaddrinfo</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><literal type="string">"v6only.example.com"</literal></expr></argument>, <argument><expr><literal type="string">"8002"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><name>gai_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a_out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evdns_getaddrinfo</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><literal type="string">"v4assert.example.com"</literal></expr></argument>, <argument><expr><literal type="string">"8003"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><name>gai_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a_out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_INET6</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evdns_getaddrinfo</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><literal type="string">"v6assert.example.com"</literal></expr></argument>, <argument><expr><literal type="string">"8004"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><name>gai_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a_out</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evdns_getaddrinfo</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><literal type="string">"nosuchplace.example.com"</literal></expr></argument>, <argument><expr><literal type="string">"8005"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><name>gai_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a_out</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evdns_getaddrinfo</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><literal type="string">"nosuchplace.example.com"</literal></expr></argument>, <argument><expr><literal type="string">"8006"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><name>gai_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a_out</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evdns_getaddrinfo</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><literal type="string">"v6timeout.example.com"</literal></expr></argument>, <argument><expr><literal type="string">"8007"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><name>gai_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a_out</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evdns_getaddrinfo</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><literal type="string">"v6timeout-nonexist.example.com"</literal></expr></argument>,
<argument><expr><literal type="string">"8008"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><name>gai_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a_out</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>|=</operator> <name>EVUTIL_AI_ADDRCONFIG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evdns_getaddrinfo</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><literal type="string">"both.example.com"</literal></expr></argument>,
<argument><expr><literal type="string">"8009"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><name>gai_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a_out</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evdns_getaddrinfo</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><literal type="string">"v4timeout.example.com"</literal></expr></argument>, <argument><expr><literal type="string">"8010"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><name>gai_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a_out</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>evdns_getaddrinfo</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><literal type="string">"all-timeout.example.com"</literal></expr></argument>, <argument><expr><literal type="string">"8011"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><name>gai_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a_out</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">100</literal><operator>*</operator><literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_once</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>EV_TIMEOUT</name></expr></argument>, <argument><expr><name>cancel_gai_cb</name></expr></argument>,
<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<expr_stmt><expr><name>n_gai_results_pending</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>exit_base_on_no_pending_results</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>a_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>err</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>a_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>a_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>a_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_next</name><operator>-&gt;</operator><name>ai_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>ai_find_by_family</name><argument_list>(<argument><expr><name><name>a_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ai</name></expr></argument>, <argument><expr><name>PF_INET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_ai_eq</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"80.80.32.32:8000"</literal></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>ai_find_by_family</name><argument_list>(<argument><expr><name><name>a_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ai</name></expr></argument>, <argument><expr><name>PF_INET6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_ai_eq</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"[80ff::bbbb]:8000"</literal></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>a_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_canonname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_str_op</name><argument_list>(<argument><expr><name><name>a_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_canonname</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="string">"both-canonical.example.com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>a_out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>err</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>a_out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator> <name><name>a_out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_ai_eq</name><argument_list>(<argument><expr><name><name>a_out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ai</name></expr></argument>, <argument><expr><literal type="string">"18.52.86.120:8001"</literal></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>a_out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_canonname</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>a_out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>err</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>a_out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator> <name><name>a_out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_ai_eq</name><argument_list>(<argument><expr><name><name>a_out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>ai</name></expr></argument>, <argument><expr><literal type="string">"[b0b::f00d]:8002"</literal></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>a_out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>err</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>a_out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator> <name><name>a_out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_ai_eq</name><argument_list>(<argument><expr><name><name>a_out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>ai</name></expr></argument>, <argument><expr><literal type="string">"18.52.86.120:8003"</literal></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>a_out</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>err</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>a_out</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator> <name><name>a_out</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_ai_eq</name><argument_list>(<argument><expr><name><name>a_out</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>ai</name></expr></argument>, <argument><expr><literal type="string">"[b0b::f00d]:8004"</literal></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>a_out</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>err</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>EVUTIL_EAI_NONAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator> <name><name>a_out</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>a_out</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>err</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>EVUTIL_EAI_NONAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator> <name><name>a_out</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>a_out</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>err</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>a_out</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator> <name><name>a_out</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_ai_eq</name><argument_list>(<argument><expr><name><name>a_out</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>ai</name></expr></argument>, <argument><expr><literal type="string">"171.205.239.1:8007"</literal></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>a_out</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>err</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>EVUTIL_EAI_NONAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator> <name><name>a_out</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>a_out</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>err</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>a_out</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>ai_find_by_family</name><argument_list>(<argument><expr><name><name>a_out</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>ai</name></expr></argument>, <argument><expr><name>PF_INET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>test_ai_eq</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"80.80.32.32:8009"</literal></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>ai_find_by_family</name><argument_list>(<argument><expr><name><name>a_out</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>ai</name></expr></argument>, <argument><expr><name>PF_INET6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>ai_find_by_family</name><argument_list>(<argument><expr><name><name>a_out</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>ai</name></expr></argument>, <argument><expr><name>PF_INET6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>test_ai_eq</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"[80ff::bbbb]:8009"</literal></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>ai_find_by_family</name><argument_list>(<argument><expr><name><name>a_out</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>ai</name></expr></argument>, <argument><expr><name>PF_INET</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>a_out</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>err</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>a_out</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator> <name><name>a_out</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_ai_eq</name><argument_list>(<argument><expr><name><name>a_out</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>ai</name></expr></argument>, <argument><expr><literal type="string">"[a0a::ff01]:8010"</literal></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>a_out</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>.</operator><name>err</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>EVUTIL_EAI_CANCEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>a_out</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>.</operator><name>ai</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>local_outcome</name><operator>.</operator><name>ai</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evutil_freeaddrinfo</name><argument_list>(<argument><expr><name><name>local_outcome</name><operator>.</operator><name>ai</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><operator>(</operator><name>int</name><operator>)</operator><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>a_out</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>a_out</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ai</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evutil_freeaddrinfo</name><argument_list>(<argument><expr><name><name>a_out</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>port</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evdns_close_server_port</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dns_base</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evdns_base_free</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<struct>struct <name>gaic_request_status</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>magic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>dns_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_getaddrinfo_request</name></name> <modifier>*</modifier></type><name>request</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name></type> <name>cancel_event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>canceled</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GAIC_MAGIC</name></cpp:macro> <cpp:value>0x1234abcd</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>pending</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gaic_cancel_request_cb</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gaic_request_status</name></name> <modifier>*</modifier></type><name>status</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>status</name><operator>-&gt;</operator><name>magic</name></name> <operator>==</operator> <name>GAIC_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>status</name><operator>-&gt;</operator><name>canceled</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_getaddrinfo_cancel</name><argument_list>(<argument><expr><name><name>status</name><operator>-&gt;</operator><name>request</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<label><name>end</name>:</label>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name><name>status</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gaic_server_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evdns_server_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ev_uint32_t</name></type> <name>answer</name> <init>= <expr><literal type="number">0x7f000001</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>nquestions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_server_request_add_a_reply</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>questions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>answer</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evdns_server_request_respond</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<label><name>end</name>:</label>
<expr_stmt><expr><call><name>evdns_server_request_respond</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>DNS_ERR_REFUSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>gaic_getaddrinfo_cb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gaic_request_status</name></name> <modifier>*</modifier></type><name>status</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name><name>status</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>status</name><operator>-&gt;</operator><name>magic</name></name> <operator>==</operator> <name>GAIC_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>EVUTIL_EAI_CANCEL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name><name>status</name><operator>-&gt;</operator><name>canceled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>status</name><operator>-&gt;</operator><name>cancel_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><literal type="number">0xf0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>status</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>pending</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gaic_launch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>dns_base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gaic_request_status</name></name> <modifier>*</modifier></type><name>status</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>status</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10000</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>status</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GAIC_MAGIC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>status</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>status</name><operator>-&gt;</operator><name>dns_base</name></name> <operator>=</operator> <name>dns_base</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>status</name><operator>-&gt;</operator><name>cancel_event</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>gaic_cancel_request_cb</name></expr></argument>,
<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>status</name><operator>-&gt;</operator><name>request</name></name> <operator>=</operator> <call><name>evdns_getaddrinfo</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>,
<argument><expr><literal type="string">"foobar.bazquux.example.com"</literal></expr></argument>, <argument><expr><literal type="string">"80"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>gaic_getaddrinfo_cb</name></expr></argument>,
<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>status</name><operator>-&gt;</operator><name>cancel_event</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>pending</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT_SET_MEM_FUNCTIONS_IMPLEMENTED</name></expr></argument>)</argument_list></call></expr></cpp:if>




<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>allocated_chunks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>cnt_malloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>allocated_chunks</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><call><name>malloc</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>cnt_realloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>old</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>old</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>allocated_chunks</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sz</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>allocated_chunks</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>realloc</name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cnt_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>allocated_chunks</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>testleak_env_t</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>dns_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_request</name></name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>generic_dns_callback_result</name></name></type> <name>r</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>testleak_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>testcase_t</name></name> <modifier>*</modifier></type><name>testcase</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>testleak_env_t</name></name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>

<expr_stmt><expr><name>allocated_chunks</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<expr_stmt><expr><call><name>libevent_global_shutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_set_mem_functions</name><argument_list>(<argument><expr><name>cnt_malloc</name></expr></argument>, <argument><expr><name>cnt_realloc</name></expr></argument>, <argument><expr><name>cnt_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_enable_debug_mode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>env</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>testleak_env_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>env</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <call><name>event_base_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>env</name><operator>-&gt;</operator><name>dns_base</name></name> <operator>=</operator> <call><name>evdns_base_new</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>env</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <call><name>evdns_base_resolve_ipv4</name><argument_list>(
<argument><expr><name><name>env</name><operator>-&gt;</operator><name>dns_base</name></name></expr></argument>, <argument><expr><literal type="string">"example.com"</literal></expr></argument>, <argument><expr><name>DNS_QUERY_NO_SEARCH</name></expr></argument>,
<argument><expr><name>generic_dns_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>env</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>env</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>testleak_cleanup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>testcase_t</name></name> <modifier>*</modifier></type><name>testcase</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>env_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>testleak_env_t</name></name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>env_</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__DISABLE_DEBUG_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>allocated_chunks</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>libevent_global_shutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>allocated_chunks</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>env</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>env</name><operator>-&gt;</operator><name>dns_base</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evdns_base_free</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>dns_base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>env</name><operator>-&gt;</operator><name>base</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_base_free</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ok</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>testcase_setup_t</name></name></type> <name>testleak_funcs</name> <init>= <expr><block>{
<expr><name>testleak_setup</name></expr>, <expr><name>testleak_cleanup</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_dbg_leak_cancel</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>env_</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>testleak_env_t</name></name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>env_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>send_err_shutdown</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>evdns_cancel_request</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>dns_base</name></name></expr></argument>, <argument><expr><name><name>env</name><operator>-&gt;</operator><name>req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>env</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>event_base_loop</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>EVLOOP_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>evdns_base_free</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>dns_base</name></name></expr></argument>, <argument><expr><name>send_err_shutdown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>env</name><operator>-&gt;</operator><name>dns_base</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_free</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>env</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dbg_leak_resume</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>env_</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cancel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>send_err_shutdown</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>testleak_env_t</name></name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>env_</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cancel</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evdns_cancel_request</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>dns_base</name></name></expr></argument>, <argument><expr><name><name>env</name><operator>-&gt;</operator><name>req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>evdns_base_resume</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>dns_base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>evdns_base_resume</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>dns_base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>event_base_loop</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>EVLOOP_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>










<expr_stmt><expr><call><name>evdns_base_free</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>dns_base</name></name></expr></argument>, <argument><expr><name>send_err_shutdown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>env</name><operator>-&gt;</operator><name>dns_base</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_loop</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>EVLOOP_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>event_base_free</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>env</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMPL_DBG_LEAK_RESUME</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>cancel</name></type></parameter>, <parameter><type><name>send_err_shutdown</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void test_dbg_leak_##name##_(void *env_) { dbg_leak_resume(env_, cancel, send_err_shutdown); }</cpp:value></cpp:define>





<macro><name>IMPL_DBG_LEAK_RESUME</name><argument_list>(<argument>resume</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>IMPL_DBG_LEAK_RESUME</name><argument_list>(<argument>cancel_and_resume</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>IMPL_DBG_LEAK_RESUME</name><argument_list>(<argument>resume_send_err</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>IMPL_DBG_LEAK_RESUME</name><argument_list>(<argument>cancel_and_resume_send_err</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_dbg_leak_shutdown</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>env_</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>testleak_env_t</name></name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>env_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>send_err_shutdown</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name><name>env</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evdns_base_free</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>dns_base</name></name></expr></argument>, <argument><expr><name>send_err_shutdown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>env</name><operator>-&gt;</operator><name>dns_base</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>event_base_loop</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>EVLOOP_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_free</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>env</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_getaddrinfo_async_cancel_stress</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>dns_base</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_server_port</name></name> <modifier>*</modifier></type><name>server</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>sin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>ss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_socklen_t</name></type> <name>slen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>event_base_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dns_base</name> <operator>=</operator> <call><name>evdns_base_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><literal type="number">0x7f000001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_perror</name><argument_list>(<argument><expr><literal type="string">"socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>evutil_make_socket_nonblocking</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sin</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_perror</name><argument_list>(<argument><expr><literal type="string">"bind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>server</name> <operator>=</operator> <call><name>evdns_add_server_port_with_base</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>gaic_server_cb</name></expr></argument>,
<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getsockname</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slen</name></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_perror</name><argument_list>(<argument><expr><literal type="string">"getsockname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>evdns_base_nameserver_sockaddr_add</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>gaic_launch</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>dns_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>dns_base</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evdns_base_free</name><argument_list>(<argument><expr><name>dns_base</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>server</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evdns_close_server_port</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>base</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_base_free</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dns_client_fail_requests_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>dns</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_server_port</name></name> <modifier>*</modifier></type><name>dns_port</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>portnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>generic_dns_callback_result</name></name></type> <name><name>r</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dns_port</name> <operator>=</operator> <call><name>regress_get_dnsserver</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>portnum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>regress_dns_server_cb</name></expr></argument>, <argument><expr><name>reissue_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>dns_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"127.0.0.1:%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>portnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dns</name> <operator>=</operator> <call><name>evdns_base_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>EVDNS_BASE_DISABLE_WHEN_INACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>evdns_base_nameserver_ip_add</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evdns_base_resolve_ipv4</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="string">"foof.example.com"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>generic_dns_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>n_replies_left</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>exit_base</name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evdns_base_free</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>n_replies_left</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>result</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DNS_ERR_SHUTDOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>evdns_close_server_port</name><argument_list>(<argument><expr><name>dns_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>getaddrinfo_cb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evutil_addrinfo</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>generic_dns_callback</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dns_client_fail_requests_getaddrinfo_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>basic_test_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_base</name></name> <modifier>*</modifier></type><name>dns</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evdns_server_port</name></name> <modifier>*</modifier></type><name>dns_port</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint16_t</name></type> <name>portnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>generic_dns_callback_result</name></name></type> <name><name>r</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dns_port</name> <operator>=</operator> <call><name>regress_get_dnsserver</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>portnum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>regress_dns_server_cb</name></expr></argument>, <argument><expr><name>reissue_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><name>dns_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evutil_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"127.0.0.1:%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>portnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dns</name> <operator>=</operator> <call><name>evdns_base_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>EVDNS_BASE_DISABLE_WHEN_INACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>evdns_base_nameserver_ip_add</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_assert</name><argument_list>(<argument><expr><call><name>evdns_getaddrinfo</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="string">"foof.example.com"</literal></expr></argument>, <argument><expr><literal type="string">"ssh"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>getaddrinfo_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>n_replies_left</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>exit_base</name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evdns_base_free</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>n_replies_left</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>result</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>EVUTIL_EAI_FAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>evdns_close_server_port</name><argument_list>(<argument><expr><name>dns_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DNS_LEGACY</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ #name, run_legacy_test_fn, flags|TT_LEGACY, &amp;legacy_setup, dns_##name }</cpp:value></cpp:define>



<decl_stmt><decl><type><name><name>struct</name> <name>testcase_t</name></name></type> <name><name>dns_testcases</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>DNS_LEGACY</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name>TT_FORK</name><operator>|</operator><name>TT_NEED_BASE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DNS_LEGACY</name><argument_list>(<argument><expr><name>gethostbyname</name></expr></argument>, <argument><expr><name>TT_FORK</name><operator>|</operator><name>TT_NEED_BASE</name><operator>|</operator><name>TT_NEED_DNS</name><operator>|</operator><name>TT_OFF_BY_DEFAULT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DNS_LEGACY</name><argument_list>(<argument><expr><name>gethostbyname6</name></expr></argument>, <argument><expr><name>TT_FORK</name><operator>|</operator><name>TT_NEED_BASE</name><operator>|</operator><name>TT_NEED_DNS</name><operator>|</operator><name>TT_OFF_BY_DEFAULT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DNS_LEGACY</name><argument_list>(<argument><expr><name>gethostbyaddr</name></expr></argument>, <argument><expr><name>TT_FORK</name><operator>|</operator><name>TT_NEED_BASE</name><operator>|</operator><name>TT_NEED_DNS</name><operator>|</operator><name>TT_OFF_BY_DEFAULT</name></expr></argument>)</argument_list></call></expr>,
<expr><block>{ <expr><literal type="string">"resolve_reverse"</literal></expr>, <expr><name>dns_resolve_reverse</name></expr>, <expr><name>TT_FORK</name><operator>|</operator><name>TT_OFF_BY_DEFAULT</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"search_empty"</literal></expr>, <expr><name>dns_search_empty_test</name></expr>, <expr><name>TT_FORK</name><operator>|</operator><name>TT_NEED_BASE</name></expr>, <expr><operator>&amp;</operator><name>basic_setup</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"search"</literal></expr>, <expr><name>dns_search_test</name></expr>, <expr><name>TT_FORK</name><operator>|</operator><name>TT_NEED_BASE</name></expr>, <expr><operator>&amp;</operator><name>basic_setup</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"search_lower"</literal></expr>, <expr><name>dns_search_lower_test</name></expr>, <expr><name>TT_FORK</name><operator>|</operator><name>TT_NEED_BASE</name></expr>, <expr><operator>&amp;</operator><name>basic_setup</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"search_cancel"</literal></expr>, <expr><name>dns_search_cancel_test</name></expr>,
<expr><name>TT_FORK</name><operator>|</operator><name>TT_NEED_BASE</name></expr>, <expr><operator>&amp;</operator><name>basic_setup</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"retry"</literal></expr>, <expr><name>dns_retry_test</name></expr>, <expr><name>TT_FORK</name><operator>|</operator><name>TT_NEED_BASE</name><operator>|</operator><name>TT_NO_LOGS</name></expr>, <expr><operator>&amp;</operator><name>basic_setup</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"retry_disable_when_inactive"</literal></expr>, <expr><name>dns_retry_disable_when_inactive_test</name></expr>,
<expr><name>TT_FORK</name><operator>|</operator><name>TT_NEED_BASE</name><operator>|</operator><name>TT_NO_LOGS</name></expr>, <expr><operator>&amp;</operator><name>basic_setup</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"reissue"</literal></expr>, <expr><name>dns_reissue_test</name></expr>, <expr><name>TT_FORK</name><operator>|</operator><name>TT_NEED_BASE</name><operator>|</operator><name>TT_NO_LOGS</name></expr>, <expr><operator>&amp;</operator><name>basic_setup</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"reissue_disable_when_inactive"</literal></expr>, <expr><name>dns_reissue_disable_when_inactive_test</name></expr>,
<expr><name>TT_FORK</name><operator>|</operator><name>TT_NEED_BASE</name><operator>|</operator><name>TT_NO_LOGS</name></expr>, <expr><operator>&amp;</operator><name>basic_setup</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"inflight"</literal></expr>, <expr><name>dns_inflight_test</name></expr>, <expr><name>TT_FORK</name><operator>|</operator><name>TT_NEED_BASE</name></expr>, <expr><operator>&amp;</operator><name>basic_setup</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bufferevent_connect_hostname"</literal></expr>, <expr><name>test_bufferevent_connect_hostname</name></expr>,
<expr><name>TT_FORK</name><operator>|</operator><name>TT_NEED_BASE</name></expr>, <expr><operator>&amp;</operator><name>basic_setup</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"disable_when_inactive"</literal></expr>, <expr><name>dns_disable_when_inactive_test</name></expr>,
<expr><name>TT_FORK</name><operator>|</operator><name>TT_NEED_BASE</name></expr>, <expr><operator>&amp;</operator><name>basic_setup</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"disable_when_inactive_no_ns"</literal></expr>, <expr><name>dns_disable_when_inactive_no_ns_test</name></expr>,
<expr><name>TT_FORK</name><operator>|</operator><name>TT_NEED_BASE</name></expr>, <expr><operator>&amp;</operator><name>basic_setup</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"getaddrinfo_async"</literal></expr>, <expr><name>test_getaddrinfo_async</name></expr>,
<expr><name>TT_FORK</name><operator>|</operator><name>TT_NEED_BASE</name></expr>, <expr><operator>&amp;</operator><name>basic_setup</name></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"getaddrinfo_cancel_stress"</literal></expr>, <expr><name>test_getaddrinfo_async_cancel_stress</name></expr>,
<expr><name>TT_FORK</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT_SET_MEM_FUNCTIONS_IMPLEMENTED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"leak_shutdown"</literal></expr>, <expr><name>test_dbg_leak_shutdown</name></expr>, <expr><name>TT_FORK</name></expr>, <expr><operator>&amp;</operator><name>testleak_funcs</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"leak_cancel"</literal></expr>, <expr><name>test_dbg_leak_cancel</name></expr>, <expr><name>TT_FORK</name></expr>, <expr><operator>&amp;</operator><name>testleak_funcs</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"leak_resume"</literal></expr>, <expr><name>test_dbg_leak_resume_</name></expr>, <expr><name>TT_FORK</name></expr>, <expr><operator>&amp;</operator><name>testleak_funcs</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"leak_cancel_and_resume"</literal></expr>, <expr><name>test_dbg_leak_cancel_and_resume_</name></expr>,
<expr><name>TT_FORK</name></expr>, <expr><operator>&amp;</operator><name>testleak_funcs</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"leak_resume_send_err"</literal></expr>, <expr><name>test_dbg_leak_resume_send_err_</name></expr>,
<expr><name>TT_FORK</name></expr>, <expr><operator>&amp;</operator><name>testleak_funcs</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"leak_cancel_and_resume_send_err"</literal></expr>, <expr><name>test_dbg_leak_cancel_and_resume_send_err_</name></expr>,
<expr><name>TT_FORK</name></expr>, <expr><operator>&amp;</operator><name>testleak_funcs</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><literal type="string">"client_fail_requests"</literal></expr>, <expr><name>dns_client_fail_requests_test</name></expr>,
<expr><name>TT_FORK</name><operator>|</operator><name>TT_NEED_BASE</name></expr>, <expr><operator>&amp;</operator><name>basic_setup</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"client_fail_requests_getaddrinfo"</literal></expr>,
<expr><name>dns_client_fail_requests_getaddrinfo_test</name></expr>,
<expr><name>TT_FORK</name><operator>|</operator><name>TT_NEED_BASE</name></expr>, <expr><operator>&amp;</operator><name>basic_setup</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,

<expr><name>END_OF_TESTCASES</name></expr>
}</block></expr></init></decl>;</decl_stmt>

</unit>
