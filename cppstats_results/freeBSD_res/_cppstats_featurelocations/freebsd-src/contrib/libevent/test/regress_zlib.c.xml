<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/test/regress_zlib.c">


























<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NDEBUG</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event-config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/buffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/bufferevent.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mm-internal.h"</cpp:file></cpp:include>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LARGEFILE64_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LARGEFILE64_SOURCE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LFS64_LARGEFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LFS64_LARGEFILE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_FILE_OFFSET_BITS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_FILE_OFFSET_BITS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>off64_t</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>off64_t</name></cpp:macro> <cpp:value>ev_int64_t</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>infilter_calls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>outfilter_calls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>readcb_finished</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>writecb_finished</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>errorcb_invoked</name></decl>;</decl_stmt>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>zlib_deflate_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>z_streamp</name></type> <name>p</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>deflateEnd</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>Z_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>zlib_inflate_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>z_streamp</name></type> <name>p</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>inflateEnd</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>Z_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>getstate</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>bufferevent_flush_mode</name></name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BEV_FINISHED</name></expr>:</case>
<return>return <expr><name>Z_FINISH</name></expr>;</return>
<case>case <expr><name>BEV_FLUSH</name></expr>:</case>
<return>return <expr><name>Z_SYNC_FLUSH</name></expr>;</return>
<case>case <expr><name>BEV_NORMAL</name></expr>:</case>
<default>default:</default>
<return>return <expr><name>Z_NO_FLUSH</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name><name>enum</name> <name>bufferevent_filter_result</name></name></type>
<name>zlib_input_filter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>ev_ssize_t</name></type> <name>lim</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>bufferevent_flush_mode</name></name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_iovec</name></name></type> <name><name>v_in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_iovec</name></name></type> <name><name>v_out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nread</name></decl>, <decl><type ref="prev"/><name>nwrite</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>z_streamp</name></type> <name>p</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>evbuffer_peek</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v_in</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>=</operator> <name><name>v_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next_in</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>v_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>evbuffer_reserve_space</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>, <argument><expr><name>v_out</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next_out</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>v_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>=</operator> <name><name>v_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name></expr>;</expr_stmt>


<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>inflate</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>getstate</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>nread</name> <operator>=</operator> <name><name>v_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>avail_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nwrite</name> <operator>=</operator> <name><name>v_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>avail_out</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <name>nwrite</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_commit_space</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>v_out</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name><operator>==</operator><name>Z_BUF_ERROR</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>nwrite</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BEV_NEED_MORE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <name>Z_OK</name> <operator>||</operator> <name>res</name> <operator>==</operator> <name>Z_STREAM_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

</block_content>}</block> while <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<expr_stmt><expr><operator>++</operator><name>infilter_calls</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>BEV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>bufferevent_filter_result</name></name></type>
<name>zlib_output_filter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>ev_ssize_t</name></type> <name>lim</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>bufferevent_flush_mode</name></name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_iovec</name></name></type> <name><name>v_in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer_iovec</name></name></type> <name><name>v_out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nread</name></decl>, <decl><type ref="prev"/><name>nwrite</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>z_streamp</name></type> <name>p</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>evbuffer_peek</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v_in</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>=</operator> <name><name>v_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next_in</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>v_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>evbuffer_reserve_space</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>, <argument><expr><name>v_out</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next_out</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>v_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>=</operator> <name><name>v_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name></expr>;</expr_stmt>


<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>deflate</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>getstate</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>nread</name> <operator>=</operator> <name><name>v_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>avail_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nwrite</name> <operator>=</operator> <name><name>v_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>avail_out</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <name>nwrite</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_commit_space</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>v_out</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name><operator>==</operator><name>Z_BUF_ERROR</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>nwrite</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BEV_NEED_MORE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <name>Z_OK</name> <operator>||</operator> <name>res</name> <operator>==</operator> <name>Z_STREAM_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

</block_content>}</block> while <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<expr_stmt><expr><operator>++</operator><name>outfilter_calls</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>BEV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>readcb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><call><name>bufferevent_get_input</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">8333</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>evbuf</name> <init>= <expr><call><name>evbuffer_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>evbuf</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bufferevent_read_buffer</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>evbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_disable</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">8333</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>readcb_finished</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>evbuffer_free</name><argument_list>(<argument><expr><name>evbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>writecb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><call><name>bufferevent_get_output</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>writecb_finished</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>errorcb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>errorcb_invoked</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>test_bufferevent_zlib</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev1</name><init>=<expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bev2</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">8333</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>z_stream</name> <modifier>*</modifier></type><name>z_input</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>z_output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name><name>pair</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>infilter_calls</name> <operator>=</operator> <name>outfilter_calls</name> <operator>=</operator> <name>readcb_finished</name> <operator>=</operator> <name>writecb_finished</name>
<operator>=</operator> <name>errorcb_invoked</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evutil_socketpair</name><argument_list>(<argument><expr><name>AF_UNIX</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pair</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tt_abort_perror</name><argument_list>(<argument><expr><literal type="string">"socketpair"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>evutil_make_socket_nonblocking</name><argument_list>(<argument><expr><name><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_make_socket_nonblocking</name><argument_list>(<argument><expr><name><name>pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bev1</name> <operator>=</operator> <call><name>bufferevent_socket_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bev2</name> <operator>=</operator> <call><name>bufferevent_socket_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>z_output</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>z_output</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>deflateInit</name><argument_list>(<argument><expr><name>z_output</name></expr></argument>, <argument><expr><name>Z_DEFAULT_COMPRESSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>Z_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z_input</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>z_input</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>inflateInit</name><argument_list>(<argument><expr><name>z_input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_int_op</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>Z_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>bev1</name> <operator>=</operator> <call><name>bufferevent_filter_new</name><argument_list>(<argument><expr><name>bev1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>zlib_output_filter</name></expr></argument>,
<argument><expr><name>BEV_OPT_CLOSE_ON_FREE</name></expr></argument>, <argument><expr><name>zlib_deflate_free</name></expr></argument>, <argument><expr><name>z_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bev2</name> <operator>=</operator> <call><name>bufferevent_filter_new</name><argument_list>(<argument><expr><name>bev2</name></expr></argument>, <argument><expr><name>zlib_input_filter</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>BEV_OPT_CLOSE_ON_FREE</name></expr></argument>, <argument><expr><name>zlib_inflate_free</name></expr></argument>, <argument><expr><name>z_input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_setcb</name><argument_list>(<argument><expr><name>bev1</name></expr></argument>, <argument><expr><name>readcb</name></expr></argument>, <argument><expr><name>writecb</name></expr></argument>, <argument><expr><name>errorcb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_setcb</name><argument_list>(<argument><expr><name>bev2</name></expr></argument>, <argument><expr><name>readcb</name></expr></argument>, <argument><expr><name>writecb</name></expr></argument>, <argument><expr><name>errorcb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_disable</name><argument_list>(<argument><expr><name>bev1</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_enable</name><argument_list>(<argument><expr><name>bev1</name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_enable</name><argument_list>(<argument><expr><name>bev2</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><call><name>bufferevent_write</name><argument_list>(<argument><expr><name>bev1</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1800</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_write</name><argument_list>(<argument><expr><name>bev1</name></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <literal type="number">1800</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1800</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bufferevent_flush</name><argument_list>(<argument><expr><name>bev1</name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>, <argument><expr><name>BEV_FINISHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_dispatch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><name>infilter_calls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><name>outfilter_calls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><name>readcb_finished</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><name>writecb_finished</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_want</name><argument_list>(<argument><expr><operator>!</operator><name>errorcb_invoked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>test_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>bev1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_free</name><argument_list>(<argument><expr><name>bev1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bev2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_free</name><argument_list>(<argument><expr><name>bev2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evutil_closesocket</name><argument_list>(<argument><expr><name><name>pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
