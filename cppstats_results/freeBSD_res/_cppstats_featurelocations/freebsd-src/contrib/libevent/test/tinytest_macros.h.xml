<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/test/tinytest_macros.h">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TINYTEST_MACROS_H_INCLUDED_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TINYTEST_MACROS_H_INCLUDED_</name></cpp:macro></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TT_STMT_BEGIN</name></cpp:macro> <cpp:value>do {</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TT_STMT_END</name></cpp:macro> <cpp:value>} while (0)</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TT_EXIT_TEST_FUNCTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TT_EXIT_TEST_FUNCTION</name></cpp:macro> <cpp:value>TT_STMT_BEGIN goto end; TT_STMT_END</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TT_DECLARE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TT_DECLARE</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>, <parameter><type><name>args</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TT_STMT_BEGIN printf("\n %s %s:%d: ",prefix,__FILE__,__LINE__); printf args ; TT_STMT_END</cpp:value></cpp:define>




<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TT_GRIPE</name><parameter_list>(<parameter><type><name>args</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TT_DECLARE("FAIL", args)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TT_BLATHER</name><parameter_list>(<parameter><type><name>args</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TT_STMT_BEGIN if (tinytest_get_verbosity_()&gt;1) TT_DECLARE(" OK", args); TT_STMT_END</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TT_DIE</name><parameter_list>(<parameter><type><name>args</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TT_STMT_BEGIN tinytest_set_test_failed_(); TT_GRIPE(args); TT_EXIT_TEST_FUNCTION; TT_STMT_END</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TT_FAIL</name><parameter_list>(<parameter><type><name>args</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TT_STMT_BEGIN tinytest_set_test_failed_(); TT_GRIPE(args); TT_STMT_END</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tt_abort_printf</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TT_DIE(msg)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tt_abort_perror</name><parameter_list>(<parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TT_DIE(("%s: %s [%d]",(op),strerror(errno), errno))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tt_abort_msg</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TT_DIE(("%s", msg))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tt_abort</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>TT_DIE(("%s", "(Failed.)"))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tt_failprint_f</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TT_FAIL(msg)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tt_fail_perror</name><parameter_list>(<parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TT_FAIL(("%s: %s [%d]",(op),strerror(errno), errno))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tt_fail_msg</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TT_FAIL(("%s", msg))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tt_fail</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>TT_FAIL(("%s", "(Failed.)"))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tt_skip</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>TT_STMT_BEGIN tinytest_set_test_skipped_(); TT_EXIT_TEST_FUNCTION; TT_STMT_END</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tt_want_</name><parameter_list>(<parameter><type><name>b</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>, <parameter><type><name>fail</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TT_STMT_BEGIN if (!(b)) { tinytest_set_test_failed_(); TT_GRIPE(("%s",msg)); fail; } else { TT_BLATHER(("%s",msg)); } TT_STMT_END</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tt_want_msg</name><parameter_list>(<parameter><type><name>b</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tt_want_(b, msg, );</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tt_assert_msg</name><parameter_list>(<parameter><type><name>b</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tt_want_(b, msg, TT_EXIT_TEST_FUNCTION);</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tt_want</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tt_want_msg( (b), "want("#b")")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tt_assert</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tt_assert_msg((b), "assert("#b")")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tt_assert_test_fmt_type</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>str_test</name></type></parameter>,<parameter><type><name>type</name></type></parameter>,<parameter><type><name>test</name></type></parameter>,<parameter><type><name>printf_type</name></type></parameter>,<parameter><type><name>printf_fmt</name></type></parameter>, <parameter><type><name>setup_block</name></type></parameter>,<parameter><type><name>cleanup_block</name></type></parameter>,<parameter><type><name>die_on_fail</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TT_STMT_BEGIN type val1_ = (a); type val2_ = (b); int tt_status_ = (test); if (!tt_status_ || tinytest_get_verbosity_()&gt;1) { printf_type print_; printf_type print1_; printf_type print2_; type value_ = val1_; setup_block; print1_ = print_; value_ = val2_; setup_block; print2_ = print_; TT_DECLARE(tt_status_?" OK":"FAIL", ("assert(%s): "printf_fmt" vs "printf_fmt, str_test, print1_, print2_)); print_ = print1_; cleanup_block; print_ = print2_; cleanup_block; if (!tt_status_) { tinytest_set_test_failed_(); die_on_fail ; } } TT_STMT_END</cpp:value></cpp:define>





























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tt_assert_test_type</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>str_test</name></type></parameter>,<parameter><type><name>type</name></type></parameter>,<parameter><type><name>test</name></type></parameter>,<parameter><type><name>fmt</name></type></parameter>,<parameter><type><name>die_on_fail</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tt_assert_test_fmt_type(a,b,str_test,type,test,type,fmt, {print_=value_;},{},die_on_fail)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tt_assert_test_type_opt</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>str_test</name></type></parameter>,<parameter><type><name>type</name></type></parameter>,<parameter><type><name>test</name></type></parameter>,<parameter><type><name>fmt</name></type></parameter>,<parameter><type><name>die_on_fail</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tt_assert_test_fmt_type(a,b,str_test,type,test,type,fmt, {print_=value_?value_:"&lt;NULL&gt;";},{},die_on_fail)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tt_assert_op_type</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>op</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>type</name></type></parameter>,<parameter><type><name>fmt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tt_assert_test_type(a,b,#a" "#op" "#b,type,(val1_ op val2_),fmt, TT_EXIT_TEST_FUNCTION)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tt_int_op</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>op</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tt_assert_test_type(a,b,#a" "#op" "#b,long,(val1_ op val2_), "%ld",TT_EXIT_TEST_FUNCTION)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tt_uint_op</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>op</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tt_assert_test_type(a,b,#a" "#op" "#b,unsigned long, (val1_ op val2_),"%lu",TT_EXIT_TEST_FUNCTION)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tt_ptr_op</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>op</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tt_assert_test_type(a,b,#a" "#op" "#b,const void*, (val1_ op val2_),"%p",TT_EXIT_TEST_FUNCTION)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tt_nstr_op</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>op</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tt_assert_test_type_opt(a,b,#a" "#op" "#b,const char *, (val1_ &amp;&amp; val2_ &amp;&amp; strncmp(val1_,val2_,(n)) op 0),"&lt;%s&gt;", TT_EXIT_TEST_FUNCTION)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tt_str_op</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>op</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tt_assert_test_type_opt(a,b,#a" "#op" "#b,const char *, (val1_ &amp;&amp; val2_ &amp;&amp; strcmp(val1_,val2_) op 0),"&lt;%s&gt;", TT_EXIT_TEST_FUNCTION)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tt_mem_op</name><parameter_list>(<parameter><type><name>expr1</name></type></parameter>, <parameter><type><name>op</name></type></parameter>, <parameter><type><name>expr2</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tt_assert_test_fmt_type(expr1,expr2,#expr1" "#op" "#expr2, const void *, (val1_ &amp;&amp; val2_ &amp;&amp; memcmp(val1_, val2_, len) op 0), char *, "%s", { print_ = tinytest_format_hex_(value_, (len)); }, { if (print_) free(print_); }, TT_EXIT_TEST_FUNCTION );</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tt_want_int_op</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>op</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tt_assert_test_type(a,b,#a" "#op" "#b,long,(val1_ op val2_),"%ld",(void)0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tt_want_uint_op</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>op</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tt_assert_test_type(a,b,#a" "#op" "#b,unsigned long, (val1_ op val2_),"%lu",(void)0)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tt_want_ptr_op</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>op</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tt_assert_test_type(a,b,#a" "#op" "#b,const void*, (val1_ op val2_),"%p",(void)0)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tt_want_str_op</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>op</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tt_assert_test_type(a,b,#a" "#op" "#b,const char *, (strcmp(val1_,val2_) op 0),"&lt;%s&gt;",(void)0)</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
