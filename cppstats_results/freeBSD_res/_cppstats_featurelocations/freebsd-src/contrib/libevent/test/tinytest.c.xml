<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/test/tinytest.c">























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TINYTEST_LOCAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tinytest_local.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_FORKING</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__</name> <operator>&gt;=</operator> <literal type="number">1060</literal> <operator>&amp;&amp;</operator> <name>__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__</name> <operator>&lt;</operator> <literal type="number">1070</literal><operator>)</operator></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORK_BREAKS_GCOV</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vproc.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__attribute__</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tinytest.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tinytest_macros.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONGEST_TEST_NAME</name></cpp:macro> <cpp:value>16384</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>in_tinytest_main</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>n_ok</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>n_bad</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>n_skipped</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>opt_forked</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>opt_nofork</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>opt_verbosity</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>verbosity_flag</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>testlist_alias_t</name></name> <modifier>*</modifier></type><name>cfg_aliases</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<enum>enum <name>outcome</name> <block>{ <decl><name>SKIP</name><init>=<expr><literal type="number">2</literal></expr></init></decl>, <decl><name>OK</name><init>=<expr><literal type="number">1</literal></expr></init></decl>, <decl><name>FAIL</name><init>=<expr><literal type="number">0</literal></expr></init></decl> }</block>;</enum>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>enum</name> <name>outcome</name></name></type> <name>cur_test_outcome</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cur_test_prefix</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cur_test_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>commandname</name><index>[<expr><name>MAX_PATH</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>testgroup_t</name></name> <modifier>*</modifier></type><name>groups</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>list_groups</name></decl></parameter>)</parameter_list>
__attribute__<parameter_list>(<parameter/></parameter_list>(noreturn</function_decl>))<empty_stmt>;</empty_stmt>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>process_test_option</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>testgroup_t</name></name> <modifier>*</modifier></type><name>groups</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>test</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>outcome</name></name></type>
<name>testcase_run_bare_</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>testcase_t</name></name> <modifier>*</modifier></type><name>testcase</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>outcome</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>testcase</name><operator>-&gt;</operator><name>setup</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>env</name> <operator>=</operator> <call><name><name>testcase</name><operator>-&gt;</operator><name>setup</name><operator>-&gt;</operator><name>setup_fn</name></name><argument_list>(<argument><expr><name>testcase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>env</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>env</name> <operator>==</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>TT_SKIP</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>SKIP</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cur_test_outcome</name> <operator>=</operator> <name>OK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>testcase</name><operator>-&gt;</operator><name>fn</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>outcome</name> <operator>=</operator> <name>cur_test_outcome</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>testcase</name><operator>-&gt;</operator><name>setup</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>testcase</name><operator>-&gt;</operator><name>setup</name><operator>-&gt;</operator><name>cleanup_fn</name></name><argument_list>(<argument><expr><name>testcase</name></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>outcome</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>outcome</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAGIC_EXITCODE</name></cpp:macro> <cpp:value>42</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_FORKING</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>outcome</name></name></type>
<name>testcase_run_forked_</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>testgroup_t</name></name> <modifier>*</modifier></type><name>group</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>testcase_t</name></name> <modifier>*</modifier></type><name>testcase</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>








<decl_stmt><decl><type><name>int</name></type> <name>ok</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>LONGEST_TEST_NAME</name><operator>+</operator><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>STARTUPINFOA</name></type> <name>si</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PROCESS_INFORMATION</name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>exitcode</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_tinytest_main</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nERROR. On Windows, testcase_run_forked_ must be"</literal>
<literal type="string">" called from within tinytest_main.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>opt_verbosity</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[forking] "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s --RUNNING-FORKED %s %s%s"</literal></expr></argument>,
<argument><expr><name>commandname</name></expr></argument>, <argument><expr><name>verbosity_flag</name></expr></argument>, <argument><expr><name><name>group</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><name><name>testcase</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>si</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name><operator>.</operator><name>cb</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>CreateProcessA</name><argument_list>(<argument><expr><name>commandname</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>si</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"CreateProcess failed!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>hProcess</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetExitCodeProcess</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>hProcess</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exitcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>hProcess</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>hThread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>exitcode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OK</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>exitcode</name> <operator>==</operator> <name>MAGIC_EXITCODE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>SKIP</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name><name>outcome_pipe</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>group</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pipe</name><argument_list>(<argument><expr><name>outcome_pipe</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"opening pipe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_verbosity</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[forking] "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>fork</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FORK_BREAKS_GCOV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vproc_transaction_begin</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pid</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>test_r</name></decl>, <decl><type ref="prev"/><name>write_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>outcome_pipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>test_r</name> <operator>=</operator> <call><name>testcase_run_bare_</name><argument_list>(<argument><expr><name>testcase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>&lt;=</operator><operator>(</operator><name>int</name><operator>)</operator><name>test_r</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>test_r</name><operator>&lt;=</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"NYS"</literal><index>[<expr><name>test_r</name></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name>write_r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>write</name><argument_list>(<argument><expr><name><name>outcome_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>write_r</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"write outcome to pipe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>outcome_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>read</name><argument_list>(<argument><expr><name><name>outcome_pipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[Lost connection!] "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"read outcome from pipe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>waitpid</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>outcome_pipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'Y'</literal></expr> ?</condition><then> <expr><name>OK</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'S'</literal></expr> ?</condition><then> <expr><name>SKIP</name></expr> </then><else>: <expr><name>FAIL</name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</return>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>
<name>testcase_run_one</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>testgroup_t</name></name> <modifier>*</modifier></type><name>group</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>testcase_t</name></name> <modifier>*</modifier></type><name>testcase</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>outcome</name></name></type> <name>outcome</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>testcase</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>TT_SKIP</name><operator>|</operator><name>TT_OFF_BY_DEFAULT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>opt_verbosity</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s: %s\n"</literal></expr></argument>,
<argument><expr><name><name>group</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><name><name>testcase</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>testcase</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TT_SKIP</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"SKIPPED"</literal></expr> </then><else>: <expr><literal type="string">"DISABLED"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>n_skipped</name></expr>;</expr_stmt>
<return>return <expr><name>SKIP</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_verbosity</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>opt_forked</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s: "</literal></expr></argument>, <argument><expr><name><name>group</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><name><name>testcase</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>opt_verbosity</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cur_test_prefix</name> <operator>=</operator> <name><name>group</name><operator>-&gt;</operator><name>prefix</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_test_name</name> <operator>=</operator> <name><name>testcase</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_FORKING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>testcase</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TT_FORK</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>opt_forked</name><operator>||</operator><name>opt_nofork</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>outcome</name> <operator>=</operator> <call><name>testcase_run_forked_</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>testcase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>outcome</name> <operator>=</operator> <call><name>testcase_run_bare_</name><argument_list>(<argument><expr><name>testcase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>outcome</name> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>n_ok</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opt_verbosity</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>opt_forked</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><ternary><condition><expr><name>opt_verbosity</name><operator>==</operator><literal type="number">1</literal></expr>?</condition><then><expr><literal type="string">"OK"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>outcome</name> <operator>==</operator> <name>SKIP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>n_skipped</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opt_verbosity</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>opt_forked</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"SKIPPED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>n_bad</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opt_forked</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n [%s FAILED]\n"</literal></expr></argument>, <argument><expr><name><name>testcase</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_forked</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><ternary><condition><expr><name>outcome</name><operator>==</operator><name>OK</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>outcome</name><operator>==</operator><name>SKIP</name></expr>?</condition><then><expr><name>MAGIC_EXITCODE</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>outcome</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<function><type><name>int</name></type>
<name>tinytest_set_flag_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>testgroup_t</name></name> <modifier>*</modifier></type><name>groups</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>set</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name> <init>= <expr><name>LONGEST_TEST_NAME</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>fullname</name><index>[<expr><name>LONGEST_TEST_NAME</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>,<argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call><operator>-</operator><name>arg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prefix</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>cases</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>testcase_t</name></name> <modifier>*</modifier></type><name>testcase</name> <init>= <expr><operator>&amp;</operator><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>cases</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fullname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>,
<argument><expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prefix</name></expr></argument>, <argument><expr><name><name>testcase</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>flag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name>fullname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>testcase</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TT_OFF_BY_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">" (Off by default)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>testcase</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TT_SKIP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">" (DISABLED)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>set</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>testcase</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>flag</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>testcase</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>flag</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>++</operator><name>found</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><name>found</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>usage</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>testgroup_t</name></name> <modifier>*</modifier></type><name>groups</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>list_groups</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Options are: [--verbose|--quiet|--terse] [--no-fork]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">" Specify tests by name, or using a prefix ending with '..'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">" To skip a test, prefix its name with a colon."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">" To enable a disabled test, prefix its name with a plus."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">" Use --list-tests for a list of tests."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>list_groups</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Known tests are:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tinytest_set_flag_</name><argument_list>(<argument><expr><name>groups</name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>process_test_alias</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>testgroup_t</name></name> <modifier>*</modifier></type><name>groups</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>test</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>cfg_aliases</name> <operator>&amp;&amp;</operator> <name><name>cfg_aliases</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cfg_aliases</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cfg_aliases</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>tests</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>process_test_option</name><argument_list>(<argument><expr><name>groups</name></expr></argument>, <argument><expr><name><name>cfg_aliases</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>tests</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No such test alias as @%s!"</literal></expr></argument>,<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>process_test_option</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>testgroup_t</name></name> <modifier>*</modifier></type><name>groups</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>test</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><name>TT_ENABLED_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>test</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>process_test_alias</name><argument_list>(<argument><expr><name>groups</name></expr></argument>, <argument><expr><name>test</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>test</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>test</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>TT_SKIP</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>test</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>test</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tinytest_set_flag_</name><argument_list>(<argument><expr><name>groups</name></expr></argument>, <argument><expr><name>test</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TT_OFF_BY_DEFAULT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No such test as %s!\n"</literal></expr></argument>, <argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tinytest_set_flag_</name><argument_list>(<argument><expr><name>groups</name></expr></argument>, <argument><expr><name>test</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No such test as %s!\n"</literal></expr></argument>, <argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>tinytest_set_aliases</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>testlist_alias_t</name></name> <modifier>*</modifier></type><name>aliases</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>cfg_aliases</name> <operator>=</operator> <name>aliases</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>tinytest_main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>testgroup_t</name></name> <modifier>*</modifier></type><name>groups</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>n</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extension</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sp</name> <operator>||</operator> <call><name>stricmp</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="string">".exe"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>extension</name> <operator>=</operator> <literal type="string">".exe"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>commandname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>commandname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commandname</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>c</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--RUNNING-FORKED"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>opt_forked</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--no-fork"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>opt_nofork</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--quiet"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>opt_verbosity</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>verbosity_flag</name> <operator>=</operator> <literal type="string">"--quiet"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--verbose"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>opt_verbosity</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>verbosity_flag</name> <operator>=</operator> <literal type="string">"--verbose"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--terse"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>opt_verbosity</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>verbosity_flag</name> <operator>=</operator> <literal type="string">"--terse"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--help"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>groups</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--list-tests"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>groups</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Unknown option %s. Try --help\n"</literal></expr></argument>,<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>process_test_option</name><argument_list>(<argument><expr><name>groups</name></expr></argument>, <argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tinytest_set_flag_</name><argument_list>(<argument><expr><name>groups</name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TT_ENABLED_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_IONBF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>setvbuf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>_IONBF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>++</operator><name>in_tinytest_main</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prefix</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>cases</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>cases</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>TT_ENABLED_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>testcase_run_one</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>cases</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>

<expr_stmt><expr><operator>--</operator><name>in_tinytest_main</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_verbosity</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n_bad</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d/%d TESTS FAILED. (%d skipped)\n"</literal></expr></argument>, <argument><expr><name>n_bad</name></expr></argument>,
<argument><expr><name>n_bad</name><operator>+</operator><name>n_ok</name></expr></argument>,<argument><expr><name>n_skipped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>opt_verbosity</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d tests ok. (%d skipped)\n"</literal></expr></argument>, <argument><expr><name>n_ok</name></expr></argument>, <argument><expr><name>n_skipped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>n_bad</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>tinytest_get_verbosity_</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>opt_verbosity</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>tinytest_set_test_failed_</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>opt_verbosity</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>cur_test_name</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>opt_verbosity</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s: "</literal></expr></argument>, <argument><expr><name>cur_test_prefix</name></expr></argument>, <argument><expr><name>cur_test_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_test_name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cur_test_outcome</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>tinytest_set_test_skipped_</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cur_test_outcome</name><operator>==</operator><name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cur_test_outcome</name> <operator>=</operator> <name>SKIP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>tinytest_format_hex_</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>val_</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><name>val_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>result</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"&lt;allocation failure&gt;"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="string">"0123456789ABCDEF"</literal><index>[<expr><name><name>val</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="string">"0123456789ABCDEF"</literal><index>[<expr><name><name>val</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>]</index></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function></block_content></block></function>
</unit>
