<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/test/test-changelist.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event-config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EVENT__HAVE_SYS_SOCKET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<struct>struct <name>cpu_usage_timer</name> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILETIME</name></type> <name>usertimeBegin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILETIME</name></type> <name>kerneltimeBegin</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>clock_t</name></type> <name>ticksBegin</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeBegin</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>start_cpu_usage_timer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpu_usage_timer</name></name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILETIME</name></type> <name>createtime</name></decl>, <decl><type ref="prev"/><name>exittime</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>thread</name></name> <operator>=</operator> <call><name>GetCurrentThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>GetThreadTimes</name><argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createtime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exittime</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>usertimeBegin</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>kerneltimeBegin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"GetThreadTimes failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>ticksBegin</name></name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>evutil_gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>timeBegin</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>ev_int64_t</name></type>
<name>filetime_to_100nsec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FILETIME</name> <modifier>*</modifier></type><name>ft</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>ev_int64_t</name></type> <name>n</name> <init>= <expr><name><name>ft</name><operator>-&gt;</operator><name>dwHighDateTime</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>n</name> <operator>&lt;&lt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <name><name>ft</name><operator>-&gt;</operator><name>dwLowDateTime</name></name></expr>;</expr_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>double</name></type>
<name>filetime_diff</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FILETIME</name> <modifier>*</modifier></type><name>ftStart</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FILETIME</name> <modifier>*</modifier></type><name>ftEnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ev_int64_t</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>diff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>filetime_to_100nsec</name><argument_list>(<argument><expr><name>ftStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>filetime_to_100nsec</name><argument_list>(<argument><expr><name>ftEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <name>e</name> <operator>-</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>diff</name></expr>;</expr_stmt>
<return>return <expr><name>r</name> <operator>/</operator> <literal type="number">1.0e7</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_cpu_usage</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpu_usage_timer</name></name> <modifier>*</modifier></type><name>timer</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>secElapsedOut</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>secUsedOut</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>usageOut</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>double</name></type> <name>usertime_seconds</name></decl>, <decl><type ref="prev"/><name>kerneltime_seconds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILETIME</name></type> <name>createtime</name></decl>, <decl><type ref="prev"/><name>exittime</name></decl>, <decl><type ref="prev"/><name>usertimeEnd</name></decl>, <decl><type ref="prev"/><name>kerneltimeEnd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>clock_t</name></type> <name>ticksEnd</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeEnd</name></decl>, <decl><type ref="prev"/><name>timeDiff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>secondsPassed</name></decl>, <decl><type ref="prev"/><name>secondsUsed</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>GetThreadTimes</name><argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createtime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exittime</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>usertimeEnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kerneltimeEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"GetThreadTimes failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>usertime_seconds</name> <operator>=</operator> <call><name>filetime_diff</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>usertimeBegin</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>usertimeEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>kerneltime_seconds</name> <operator>=</operator> <call><name>filetime_diff</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>kerneltimeBegin</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kerneltimeEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>secondsUsed</name> <operator>=</operator> <name>kerneltime_seconds</name> <operator>+</operator> <name>usertime_seconds</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>ticksEnd</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>secondsUsed</name> <operator>=</operator> <operator>(</operator><name>ticksEnd</name> <operator>-</operator> <name><name>timer</name><operator>-&gt;</operator><name>ticksBegin</name></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>CLOCKS_PER_SEC</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>evutil_gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timeEnd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evutil_timersub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timeEnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>timeBegin</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeDiff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>secondsPassed</name> <operator>=</operator> <name><name>timeDiff</name><operator>.</operator><name>tv_sec</name></name> <operator>+</operator> <operator>(</operator><name><name>timeDiff</name><operator>.</operator><name>tv_usec</name></name> <operator>/</operator> <literal type="number">1.0e6</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>secElapsedOut</name> <operator>=</operator> <name>secondsPassed</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>secUsedOut</name> <operator>=</operator> <name>secondsUsed</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>usageOut</name> <operator>=</operator> <name>secondsUsed</name> <operator>/</operator> <name>secondsPassed</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>write_cb</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"write callback. should only see this once\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator>struct <name>event</name><operator>*</operator><operator>*</operator><operator>)</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>event_add</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator>struct <name>event</name><operator>*</operator><operator>*</operator><operator>)</operator><name>arg</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator>struct <name>event</name><operator>*</operator><operator>*</operator><operator>)</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>timeout_cb</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"timeout fired, time to end test\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator>struct <name>event</name><operator>*</operator><operator>*</operator><operator>)</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name><modifier>*</modifier></type> <name>ev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name><modifier>*</modifier></type> <name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name><modifier>*</modifier></type> <name>base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>evutil_socket_t</name></type> <name><name>pair</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cpu_usage_timer</name></name></type> <name>timer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>usage</name></decl>, <decl><type ref="prev"/><name>secPassed</name></decl>, <decl><type ref="prev"/><name>secUsed</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>WORD</name></type> <name>wVersionRequested</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WSADATA</name></type> <name>wsaData</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wVersionRequested</name> <operator>=</operator> <call><name>MAKEWORD</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>WSAStartup</name><argument_list>(<argument><expr><name>wVersionRequested</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wsaData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>evutil_socketpair</name><argument_list>(<argument><expr><name>AF_UNIX</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pair</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>base</name> <operator>=</operator> <call><name>event_base_new</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>timeout</name> <operator>=</operator> <call><name>evtimer_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>,<argument><expr><name>timeout_cb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>event_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>,<argument><expr><name><name>pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>EV_WRITE</name> <operator>|</operator> <name>EV_PERSIST</name></expr></argument>, <argument><expr><name>write_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">500</literal><operator>*</operator><literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evtimer_add</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_add</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>start_cpu_usage_timer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_free</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_free</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_base_free</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_cpu_usage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>secPassed</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>secUsed</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>usage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"usec used=%d, usec passed=%d, cpu usage=%.2f%%\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>secUsed</name><operator>*</operator><literal type="number">1e6</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>secPassed</name><operator>*</operator><literal type="number">1e6</literal><operator>)</operator></expr></argument>,
<argument><expr><name>usage</name><operator>*</operator><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>usage</name> <operator>&gt;</operator> <literal type="number">50.0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

</unit>
