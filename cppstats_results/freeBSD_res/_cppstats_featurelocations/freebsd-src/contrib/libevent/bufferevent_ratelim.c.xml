<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/bufferevent_ratelim.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evconfig-private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event_struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/bufferevent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/bufferevent_struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/buffer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ratelim-internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bufferevent-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mm-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event-internal.h"</cpp:file></cpp:include>

<function><type><name>int</name></type>
<name>ev_token_bucket_init_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ev_token_bucket</name></name> <modifier>*</modifier></type><name>bucket</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ev_token_bucket_cfg</name></name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>,
<parameter><decl><type><name>ev_uint32_t</name></type> <name>current_tick</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>reinitialize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>reinitialize</name></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><name><name>bucket</name><operator>-&gt;</operator><name>read_limit</name></name> <operator>&gt;</operator> <operator>(</operator><name>ev_int64_t</name><operator>)</operator> <name><name>cfg</name><operator>-&gt;</operator><name>read_maximum</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bucket</name><operator>-&gt;</operator><name>read_limit</name></name> <operator>=</operator> <name><name>cfg</name><operator>-&gt;</operator><name>read_maximum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bucket</name><operator>-&gt;</operator><name>write_limit</name></name> <operator>&gt;</operator> <operator>(</operator><name>ev_int64_t</name><operator>)</operator> <name><name>cfg</name><operator>-&gt;</operator><name>write_maximum</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bucket</name><operator>-&gt;</operator><name>write_limit</name></name> <operator>=</operator> <name><name>cfg</name><operator>-&gt;</operator><name>write_maximum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>bucket</name><operator>-&gt;</operator><name>read_limit</name></name> <operator>=</operator> <name><name>cfg</name><operator>-&gt;</operator><name>read_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bucket</name><operator>-&gt;</operator><name>write_limit</name></name> <operator>=</operator> <name><name>cfg</name><operator>-&gt;</operator><name>write_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bucket</name><operator>-&gt;</operator><name>last_updated</name></name> <operator>=</operator> <name>current_tick</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ev_token_bucket_update_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ev_token_bucket</name></name> <modifier>*</modifier></type><name>bucket</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ev_token_bucket_cfg</name></name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>,
<parameter><decl><type><name>ev_uint32_t</name></type> <name>current_tick</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><name>unsigned</name></type> <name>n_ticks</name> <init>= <expr><name>current_tick</name> <operator>-</operator> <name><name>bucket</name><operator>-&gt;</operator><name>last_updated</name></name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>n_ticks</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>n_ticks</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>










<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cfg</name><operator>-&gt;</operator><name>read_maximum</name></name> <operator>-</operator> <name><name>bucket</name><operator>-&gt;</operator><name>read_limit</name></name><operator>)</operator> <operator>/</operator> <name>n_ticks</name> <operator>&lt;</operator> <name><name>cfg</name><operator>-&gt;</operator><name>read_rate</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bucket</name><operator>-&gt;</operator><name>read_limit</name></name> <operator>=</operator> <name><name>cfg</name><operator>-&gt;</operator><name>read_maximum</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bucket</name><operator>-&gt;</operator><name>read_limit</name></name> <operator>+=</operator> <name>n_ticks</name> <operator>*</operator> <name><name>cfg</name><operator>-&gt;</operator><name>read_rate</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cfg</name><operator>-&gt;</operator><name>write_maximum</name></name> <operator>-</operator> <name><name>bucket</name><operator>-&gt;</operator><name>write_limit</name></name><operator>)</operator> <operator>/</operator> <name>n_ticks</name> <operator>&lt;</operator> <name><name>cfg</name><operator>-&gt;</operator><name>write_rate</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bucket</name><operator>-&gt;</operator><name>write_limit</name></name> <operator>=</operator> <name><name>cfg</name><operator>-&gt;</operator><name>write_maximum</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bucket</name><operator>-&gt;</operator><name>write_limit</name></name> <operator>+=</operator> <name>n_ticks</name> <operator>*</operator> <name><name>cfg</name><operator>-&gt;</operator><name>write_rate</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name><name>bucket</name><operator>-&gt;</operator><name>last_updated</name></name> <operator>=</operator> <name>current_tick</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>bufferevent_update_buckets</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>tick</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>event_base_gettimeofday_cached</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>ev_base</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tick</name> <operator>=</operator> <call><name>ev_token_bucket_get_tick_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>cfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tick</name> <operator>!=</operator> <name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>limit</name><operator>.</operator><name>last_updated</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ev_token_bucket_update_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>,
<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>cfg</name></name></expr></argument>, <argument><expr><name>tick</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>ev_uint32_t</name></type>
<name>ev_token_bucket_get_tick_</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ev_token_bucket_cfg</name></name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>)</parameter_list>
<block>{<block_content>








<decl_stmt><decl><type><name>ev_uint64_t</name></type> <name>msec</name> <init>= <expr><operator>(</operator><name>ev_uint64_t</name><operator>)</operator><name><name>tv</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000</literal> <operator>+</operator> <name><name>tv</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>msec</name> <operator>/</operator> <name><name>cfg</name><operator>-&gt;</operator><name>msec_per_tick</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>ev_token_bucket_cfg</name></name> <modifier>*</modifier></type>
<name>ev_token_bucket_cfg_new</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>read_rate</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>read_burst</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>write_rate</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>write_burst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tick_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ev_token_bucket_cfg</name></name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>g</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>tick_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tick_len</name> <operator>=</operator> <operator>&amp;</operator><name>g</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>read_rate</name> <operator>&gt;</operator> <name>read_burst</name> <operator>||</operator> <name>write_rate</name> <operator>&gt;</operator> <name>write_burst</name> <operator>||</operator>
<name>read_rate</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>write_rate</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>read_rate</name> <operator>&gt;</operator> <name>EV_RATE_LIMIT_MAX</name> <operator>||</operator>
<name>write_rate</name> <operator>&gt;</operator> <name>EV_RATE_LIMIT_MAX</name> <operator>||</operator>
<name>read_burst</name> <operator>&gt;</operator> <name>EV_RATE_LIMIT_MAX</name> <operator>||</operator>
<name>write_burst</name> <operator>&gt;</operator> <name>EV_RATE_LIMIT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ev_token_bucket_cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>read_rate</name></name> <operator>=</operator> <name>read_rate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>write_rate</name></name> <operator>=</operator> <name>write_rate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>read_maximum</name></name> <operator>=</operator> <name>read_burst</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>write_maximum</name></name> <operator>=</operator> <name>write_burst</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>tick_timeout</name></name></expr></argument>, <argument><expr><name>tick_len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>timeval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>msec_per_tick</name></name> <operator>=</operator> <operator>(</operator><name><name>tick_len</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator> <operator>+</operator>
<operator>(</operator><name><name>tick_len</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>&amp;</operator> <name>COMMON_TIMEOUT_MICROSECONDS_MASK</name><operator>)</operator><operator>/</operator><literal type="number">1000</literal></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ev_token_bucket_cfg_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ev_token_bucket_cfg</name></name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SINGLE_READ_DEFAULT</name></cpp:macro> <cpp:value>16384</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SINGLE_WRITE_DEFAULT</name></cpp:macro> <cpp:value>16384</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK_GROUP</name><parameter_list>(<parameter><type><name>g</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EVLOCK_LOCK((g)-&gt;lock, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNLOCK_GROUP</name><parameter_list>(<parameter><type><name>g</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EVLOCK_UNLOCK((g)-&gt;lock, 0)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>bev_group_suspend_reading_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_rate_limit_group</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>bev_group_suspend_writing_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_rate_limit_group</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>bev_group_unsuspend_reading_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_rate_limit_group</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>bev_group_unsuspend_writing_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_rate_limit_group</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>;</function_decl>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ev_ssize_t</name></type>
<name>bufferevent_get_rlim_max_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_write</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>max_so_far</name> <init>= <expr><ternary><condition><expr><name>is_write</name></expr>?</condition><then><expr><name><name>bev</name><operator>-&gt;</operator><name>max_single_write</name></name></expr></then><else>:<expr><name><name>bev</name><operator>-&gt;</operator><name>max_single_read</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(is_write ? (x).write_limit : (x).read_limit)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GROUP_SUSPENDED</name><parameter_list>(<parameter><type><name>g</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(is_write ? (g)-&gt;write_suspended : (g)-&gt;read_suspended)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLAMPTO</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (max_so_far &gt; (x)) max_so_far = (x); } while (0);</cpp:value></cpp:define>





<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>max_so_far</name></expr>;</return></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>cfg</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_update_buckets</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>max_so_far</name> <operator>=</operator> <call><name>LIM</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>group</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_rate_limit_group</name></name> <modifier>*</modifier></type><name>g</name> <init>=
<expr><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>group</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>share</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LOCK_GROUP</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GROUP_SUSPENDED</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>is_write</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_suspend_write_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>bev</name></name></expr></argument>,
<argument><expr><name>BEV_SUSPEND_BW_GROUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_suspend_read_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>bev</name></name></expr></argument>,
<argument><expr><name>BEV_SUSPEND_BW_GROUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>share</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name>share</name> <operator>=</operator> <call><name>LIM</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>rate_limit</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <name><name>g</name><operator>-&gt;</operator><name>n_members</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>share</name> <operator>&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>min_share</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>share</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>min_share</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>UNLOCK_GROUP</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLAMPTO</name><argument_list>(<argument><expr><name>share</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>max_so_far</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max_so_far</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>max_so_far</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ev_ssize_t</name></type>
<name>bufferevent_get_read_max_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>bufferevent_get_rlim_max_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ev_ssize_t</name></type>
<name>bufferevent_get_write_max_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>bufferevent_get_rlim_max_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_decrement_read_buckets_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>ev_ssize_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>cfg</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>limit</name><operator>.</operator><name>read_limit</name></name> <operator>-=</operator> <name>bytes</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>limit</name><operator>.</operator><name>read_limit</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_suspend_read_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>bev</name></name></expr></argument>, <argument><expr><name>BEV_SUSPEND_BW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>event_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>refill_bucket_event</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>tick_timeout</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>bev</name><operator>-&gt;</operator><name>read_suspended</name></name> <operator>&amp;</operator> <name>BEV_SUSPEND_BW</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>bev</name><operator>-&gt;</operator><name>write_suspended</name></name> <operator>&amp;</operator> <name>BEV_SUSPEND_BW</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>refill_bucket_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bufferevent_unsuspend_read_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>bev</name></name></expr></argument>, <argument><expr><name>BEV_SUSPEND_BW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>group</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LOCK_GROUP</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>group</name><operator>-&gt;</operator><name>rate_limit</name><operator>.</operator><name>read_limit</name></name> <operator>-=</operator> <name>bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>group</name><operator>-&gt;</operator><name>total_read</name></name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>group</name><operator>-&gt;</operator><name>rate_limit</name><operator>.</operator><name>read_limit</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bev_group_suspend_reading_</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>group</name><operator>-&gt;</operator><name>read_suspended</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bev_group_unsuspend_reading_</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>UNLOCK_GROUP</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_decrement_write_buckets_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>ev_ssize_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>cfg</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>limit</name><operator>.</operator><name>write_limit</name></name> <operator>-=</operator> <name>bytes</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>limit</name><operator>.</operator><name>write_limit</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_suspend_write_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>bev</name></name></expr></argument>, <argument><expr><name>BEV_SUSPEND_BW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>event_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>refill_bucket_event</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>tick_timeout</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>bev</name><operator>-&gt;</operator><name>write_suspended</name></name> <operator>&amp;</operator> <name>BEV_SUSPEND_BW</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>bev</name><operator>-&gt;</operator><name>read_suspended</name></name> <operator>&amp;</operator> <name>BEV_SUSPEND_BW</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>refill_bucket_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bufferevent_unsuspend_write_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>bev</name></name></expr></argument>, <argument><expr><name>BEV_SUSPEND_BW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>group</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LOCK_GROUP</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>group</name><operator>-&gt;</operator><name>rate_limit</name><operator>.</operator><name>write_limit</name></name> <operator>-=</operator> <name>bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>group</name><operator>-&gt;</operator><name>total_written</name></name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>group</name><operator>-&gt;</operator><name>rate_limit</name><operator>.</operator><name>write_limit</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bev_group_suspend_writing_</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>group</name><operator>-&gt;</operator><name>write_suspended</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bev_group_unsuspend_writing_</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>UNLOCK_GROUP</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>bev_group_suspend_reading_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_rate_limit_group</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bev</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>read_suspended</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>pending_unsuspend_read</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>







<macro><name>LIST_FOREACH</name><argument_list>(<argument>bev</argument>, <argument>&amp;g-&gt;members</argument>, <argument>rate_limiting-&gt;next_in_group</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>EVLOCK_TRY_LOCK_</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_suspend_read_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>bev</name></name></expr></argument>,
<argument><expr><name>BEV_SUSPEND_BW_GROUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVLOCK_UNLOCK</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>bev_group_suspend_writing_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_rate_limit_group</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bev</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>write_suspended</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>pending_unsuspend_write</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>LIST_FOREACH</name><argument_list>(<argument>bev</argument>, <argument>&amp;g-&gt;members</argument>, <argument>rate_limiting-&gt;next_in_group</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>EVLOCK_TRY_LOCK_</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_suspend_write_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>bev</name></name></expr></argument>,
<argument><expr><name>BEV_SUSPEND_BW_GROUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVLOCK_UNLOCK</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>bev_refill_callback_</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>tick</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bev</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>again</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>bev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name></name> <operator>||</operator> <operator>!</operator><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>cfg</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>bev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>event_base_gettimeofday_cached</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>ev_base</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tick</name> <operator>=</operator> <call><name>ev_token_bucket_get_tick_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>,
<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>cfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ev_token_bucket_update_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>,
<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>cfg</name></name></expr></argument>,
<argument><expr><name>tick</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>bev</name><operator>-&gt;</operator><name>read_suspended</name></name> <operator>&amp;</operator> <name>BEV_SUSPEND_BW</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>limit</name><operator>.</operator><name>read_limit</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_unsuspend_read_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>bev</name></name></expr></argument>, <argument><expr><name>BEV_SUSPEND_BW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>again</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>bev</name><operator>-&gt;</operator><name>write_suspended</name></name> <operator>&amp;</operator> <name>BEV_SUSPEND_BW</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>limit</name><operator>.</operator><name>write_limit</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_unsuspend_write_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>bev</name></name></expr></argument>, <argument><expr><name>BEV_SUSPEND_BW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>again</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>again</name></expr>)</condition> <block>{<block_content>







<expr_stmt><expr><call><name>event_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>refill_bucket_event</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>tick_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bev</name><operator>-&gt;</operator><name>bev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type>
<name>bev_group_random_element_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_rate_limit_group</name></name> <modifier>*</modifier></type><name>group</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>which</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bev</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>group</name><operator>-&gt;</operator><name>n_members</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><operator>!</operator> <call><name>LIST_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>members</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>which</name> <operator>=</operator> <call><name>evutil_weakrand_range_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>weakrand_seed</name></name></expr></argument>, <argument><expr><name><name>group</name><operator>-&gt;</operator><name>n_members</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bev</name> <operator>=</operator> <call><name>LIST_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>members</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>which</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bev</name> <operator>=</operator> <call><name>LIST_NEXT</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name><name>rate_limiting</name><operator>-&gt;</operator><name>next_in_group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>bev</name></expr>;</return>
</block_content>}</block></function>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOREACH_RANDOM_ORDER</name><parameter_list>(<parameter><type><name>block</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { first = bev_group_random_element_(g); for (bev = first; bev != LIST_END(&amp;g-&gt;members); bev = LIST_NEXT(bev, rate_limiting-&gt;next_in_group)) { block ; } for (bev = LIST_FIRST(&amp;g-&gt;members); bev &amp;&amp; bev != first; bev = LIST_NEXT(bev, rate_limiting-&gt;next_in_group)) { block ; } } while (0)</cpp:value></cpp:define>












<function><type><specifier>static</specifier> <name>void</name></type>
<name>bev_group_unsuspend_reading_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_rate_limit_group</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>again</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bev</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>read_suspended</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>FOREACH_RANDOM_ORDER</name><argument_list>(<argument>{
if (EVLOCK_TRY_LOCK_(bev-&gt;lock)) {
bufferevent_unsuspend_read_(&amp;bev-&gt;bev,
BEV_SUSPEND_BW_GROUP);
EVLOCK_UNLOCK(bev-&gt;lock, <literal type="number">0</literal>);
} else {
again = <literal type="number">1</literal>;
}
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>pending_unsuspend_read</name></name> <operator>=</operator> <name>again</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>bev_group_unsuspend_writing_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_rate_limit_group</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>again</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bev</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>write_suspended</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<macro><name>FOREACH_RANDOM_ORDER</name><argument_list>(<argument>{
if (EVLOCK_TRY_LOCK_(bev-&gt;lock)) {
bufferevent_unsuspend_write_(&amp;bev-&gt;bev,
BEV_SUSPEND_BW_GROUP);
EVLOCK_UNLOCK(bev-&gt;lock, <literal type="number">0</literal>);
} else {
again = <literal type="number">1</literal>;
}
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>pending_unsuspend_write</name></name> <operator>=</operator> <name>again</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>bev_group_refill_callback_</name><parameter_list>(<parameter><decl><type><name>evutil_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_rate_limit_group</name></name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>tick</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>now</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>event_base_gettimeofday_cached</name><argument_list>(<argument><expr><call><name>event_get_base</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>master_refill_event</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCK_GROUP</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tick</name> <operator>=</operator> <call><name>ev_token_bucket_get_tick_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>rate_limit_cfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ev_token_bucket_update_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>rate_limit</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>rate_limit_cfg</name></name></expr></argument>, <argument><expr><name>tick</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>pending_unsuspend_read</name></name> <operator>||</operator>
<operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>read_suspended</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>rate_limit</name><operator>.</operator><name>read_limit</name></name> <operator>&gt;=</operator> <name><name>g</name><operator>-&gt;</operator><name>min_share</name></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bev_group_unsuspend_reading_</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>pending_unsuspend_write</name></name> <operator>||</operator>
<operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>write_suspended</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>rate_limit</name><operator>.</operator><name>write_limit</name></name> <operator>&gt;=</operator> <name><name>g</name><operator>-&gt;</operator><name>min_share</name></name><operator>)</operator><operator>)</operator></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>bev_group_unsuspend_writing_</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><call><name>UNLOCK_GROUP</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_set_rate_limit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ev_token_bucket_cfg</name></name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bevp</name> <init>=
<expr><call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr>struct <name>bufferevent_private</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_rate_limit</name></name> <modifier>*</modifier></type><name>rlim</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint32_t</name></type> <name>tick</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reinit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>suspended</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cfg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bevp</name><operator>-&gt;</operator><name>rate_limiting</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rlim</name> <operator>=</operator> <name><name>bevp</name><operator>-&gt;</operator><name>rate_limiting</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rlim</name><operator>-&gt;</operator><name>cfg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_unsuspend_read_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>BEV_SUSPEND_BW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_unsuspend_write_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>BEV_SUSPEND_BW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>event_initialized</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rlim</name><operator>-&gt;</operator><name>refill_bucket_event</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rlim</name><operator>-&gt;</operator><name>refill_bucket_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_base_gettimeofday_cached</name><argument_list>(<argument><expr><name><name>bev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tick</name> <operator>=</operator> <call><name>ev_token_bucket_get_tick_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bevp</name><operator>-&gt;</operator><name>rate_limiting</name></name> <operator>&amp;&amp;</operator> <name><name>bevp</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>cfg</name></name> <operator>==</operator> <name>cfg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bevp</name><operator>-&gt;</operator><name>rate_limiting</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rlim</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>bufferevent_rate_limit</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rlim</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>bevp</name><operator>-&gt;</operator><name>rate_limiting</name></name> <operator>=</operator> <name>rlim</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>rlim</name> <operator>=</operator> <name><name>bevp</name><operator>-&gt;</operator><name>rate_limiting</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>reinit</name> <operator>=</operator> <name><name>rlim</name><operator>-&gt;</operator><name>cfg</name></name> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rlim</name><operator>-&gt;</operator><name>cfg</name></name> <operator>=</operator> <name>cfg</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ev_token_bucket_init_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rlim</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>tick</name></expr></argument>, <argument><expr><name>reinit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reinit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><call><name>event_initialized</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rlim</name><operator>-&gt;</operator><name>refill_bucket_event</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rlim</name><operator>-&gt;</operator><name>refill_bucket_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>event_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rlim</name><operator>-&gt;</operator><name>refill_bucket_event</name></name></expr></argument>, <argument><expr><name><name>bev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>,
<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>EV_FINALIZE</name></expr></argument>, <argument><expr><name>bev_refill_callback_</name></expr></argument>, <argument><expr><name>bevp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rlim</name><operator>-&gt;</operator><name>limit</name><operator>.</operator><name>read_limit</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_unsuspend_read_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>BEV_SUSPEND_BW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_suspend_read_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>BEV_SUSPEND_BW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>suspended</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rlim</name><operator>-&gt;</operator><name>limit</name><operator>.</operator><name>write_limit</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_unsuspend_write_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>BEV_SUSPEND_BW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_suspend_write_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>BEV_SUSPEND_BW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>suspended</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>suspended</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rlim</name><operator>-&gt;</operator><name>refill_bucket_event</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cfg</name><operator>-&gt;</operator><name>tick_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>done</name>:</label>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>bufferevent_rate_limit_group</name></name> <modifier>*</modifier></type>
<name>bufferevent_rate_limit_group_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ev_token_bucket_cfg</name></name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_rate_limit_group</name></name> <modifier>*</modifier></type><name>g</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_uint32_t</name></type> <name>tick</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>event_base_gettimeofday_cached</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tick</name> <operator>=</operator> <call><name>ev_token_bucket_get_tick_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>bufferevent_rate_limit_group</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>rate_limit_cfg</name></name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>rate_limit_cfg</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LIST_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>members</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ev_token_bucket_init_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>rate_limit</name></name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>tick</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>master_refill_event</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>EV_PERSIST</name><operator>|</operator><name>EV_FINALIZE</name></expr></argument>,
<argument><expr><name>bev_group_refill_callback_</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>master_refill_event</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cfg</name><operator>-&gt;</operator><name>tick_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVTHREAD_ALLOC_LOCK</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>EVTHREAD_LOCKTYPE_RECURSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bufferevent_rate_limit_group_set_min_share</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evutil_weakrand_seed_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>weakrand_seed</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>ev_uint32_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>now</name><operator>.</operator><name>tv_sec</name></name> <operator>+</operator> <name><name>now</name><operator>.</operator><name>tv_usec</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>ev_intptr_t</name><operator>)</operator><name>g</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>g</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_rate_limit_group_set_cfg</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>bufferevent_rate_limit_group</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ev_token_bucket_cfg</name></name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>same_tick</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g</name> <operator>||</operator> <operator>!</operator><name>cfg</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>LOCK_GROUP</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>same_tick</name> <operator>=</operator> <call><name>evutil_timercmp</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>rate_limit_cfg</name><operator>.</operator><name>tick_timeout</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cfg</name><operator>-&gt;</operator><name>tick_timeout</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>rate_limit_cfg</name></name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>rate_limit_cfg</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>rate_limit</name><operator>.</operator><name>read_limit</name></name> <operator>&gt;</operator> <operator>(</operator><name>ev_ssize_t</name><operator>)</operator><name><name>cfg</name><operator>-&gt;</operator><name>read_maximum</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>rate_limit</name><operator>.</operator><name>read_limit</name></name> <operator>=</operator> <name><name>cfg</name><operator>-&gt;</operator><name>read_maximum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>rate_limit</name><operator>.</operator><name>write_limit</name></name> <operator>&gt;</operator> <operator>(</operator><name>ev_ssize_t</name><operator>)</operator><name><name>cfg</name><operator>-&gt;</operator><name>write_maximum</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>rate_limit</name><operator>.</operator><name>write_limit</name></name> <operator>=</operator> <name><name>cfg</name><operator>-&gt;</operator><name>write_maximum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>same_tick</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>event_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>master_refill_event</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cfg</name><operator>-&gt;</operator><name>tick_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>bufferevent_rate_limit_group_set_min_share</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>configured_min_share</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNLOCK_GROUP</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_rate_limit_group_set_min_share</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>bufferevent_rate_limit_group</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>share</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>share</name> <operator>&gt;</operator> <name>EV_SSIZE_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>configured_min_share</name></name> <operator>=</operator> <name>share</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>share</name> <operator>&gt;</operator> <name><name>g</name><operator>-&gt;</operator><name>rate_limit_cfg</name><operator>.</operator><name>read_rate</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>share</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>rate_limit_cfg</name><operator>.</operator><name>read_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>share</name> <operator>&gt;</operator> <name><name>g</name><operator>-&gt;</operator><name>rate_limit_cfg</name><operator>.</operator><name>write_rate</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>share</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>rate_limit_cfg</name><operator>.</operator><name>write_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>min_share</name></name> <operator>=</operator> <name>share</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>bufferevent_rate_limit_group_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_rate_limit_group</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LOCK_GROUP</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <name><name>g</name><operator>-&gt;</operator><name>n_members</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>master_refill_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNLOCK_GROUP</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVTHREAD_FREE_LOCK</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>EVTHREAD_LOCKTYPE_RECURSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_add_to_rate_limit_group</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>bufferevent_rate_limit_group</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>wsuspend</name></decl>, <decl><type ref="prev"/><name>rsuspend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bevp</name> <init>=
<expr><call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr>struct <name>bufferevent_private</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bevp</name><operator>-&gt;</operator><name>rate_limiting</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_rate_limit</name></name> <modifier>*</modifier></type><name>rlim</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rlim</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>bufferevent_rate_limit</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rlim</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>event_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rlim</name><operator>-&gt;</operator><name>refill_bucket_event</name></name></expr></argument>, <argument><expr><name><name>bev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></argument>,
<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>EV_FINALIZE</name></expr></argument>, <argument><expr><name>bev_refill_callback_</name></expr></argument>, <argument><expr><name>bevp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bevp</name><operator>-&gt;</operator><name>rate_limiting</name></name> <operator>=</operator> <name>rlim</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bevp</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>group</name></name> <operator>==</operator> <name>g</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bevp</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>group</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_remove_from_rate_limit_group</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>LOCK_GROUP</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bevp</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>group</name></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>g</name><operator>-&gt;</operator><name>n_members</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LIST_INSERT_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>members</name></name></expr></argument>, <argument><expr><name>bevp</name></expr></argument>, <argument><expr><name><name>rate_limiting</name><operator>-&gt;</operator><name>next_in_group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rsuspend</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>read_suspended</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>wsuspend</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>write_suspended</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNLOCK_GROUP</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rsuspend</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_suspend_read_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>BEV_SUSPEND_BW_GROUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>wsuspend</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_suspend_write_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>BEV_SUSPEND_BW_GROUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_remove_from_rate_limit_group</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>bufferevent_remove_from_rate_limit_group_internal_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_remove_from_rate_limit_group_internal_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>unsuspend</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bevp</name> <init>=
<expr><call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr>struct <name>bufferevent_private</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bevp</name><operator>-&gt;</operator><name>rate_limiting</name></name> <operator>&amp;&amp;</operator> <name><name>bevp</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>group</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_rate_limit_group</name></name> <modifier>*</modifier></type><name>g</name> <init>=
<expr><name><name>bevp</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>group</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LOCK_GROUP</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bevp</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>group</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>g</name><operator>-&gt;</operator><name>n_members</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LIST_REMOVE</name><argument_list>(<argument><expr><name>bevp</name></expr></argument>, <argument><expr><name><name>rate_limiting</name><operator>-&gt;</operator><name>next_in_group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNLOCK_GROUP</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>unsuspend</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_unsuspend_read_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>BEV_SUSPEND_BW_GROUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_unsuspend_write_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>BEV_SUSPEND_BW_GROUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>










<function><type><name>ev_ssize_t</name></type>
<name>bufferevent_get_read_limit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bevp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bevp</name> <operator>=</operator> <call><name>BEV_UPCAST</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bevp</name><operator>-&gt;</operator><name>rate_limiting</name></name> <operator>&amp;&amp;</operator> <name><name>bevp</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>cfg</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_update_buckets</name><argument_list>(<argument><expr><name>bevp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>bevp</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>limit</name><operator>.</operator><name>read_limit</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>EV_SSIZE_MAX</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>ev_ssize_t</name></type>
<name>bufferevent_get_write_limit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bevp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bevp</name> <operator>=</operator> <call><name>BEV_UPCAST</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bevp</name><operator>-&gt;</operator><name>rate_limiting</name></name> <operator>&amp;&amp;</operator> <name><name>bevp</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>cfg</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_update_buckets</name><argument_list>(<argument><expr><name>bevp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>bevp</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>limit</name><operator>.</operator><name>write_limit</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>EV_SSIZE_MAX</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_set_max_single_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bevp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bevp</name> <operator>=</operator> <call><name>BEV_UPCAST</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>size</name> <operator>&gt;</operator> <name>EV_SSIZE_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bevp</name><operator>-&gt;</operator><name>max_single_read</name></name> <operator>=</operator> <name>MAX_SINGLE_READ_DEFAULT</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bevp</name><operator>-&gt;</operator><name>max_single_read</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_set_max_single_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bevp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bevp</name> <operator>=</operator> <call><name>BEV_UPCAST</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>size</name> <operator>&gt;</operator> <name>EV_SSIZE_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bevp</name><operator>-&gt;</operator><name>max_single_write</name></name> <operator>=</operator> <name>MAX_SINGLE_WRITE_DEFAULT</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bevp</name><operator>-&gt;</operator><name>max_single_write</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>ev_ssize_t</name></type>
<name>bufferevent_get_max_single_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>BEV_UPCAST</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>max_single_read</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ev_ssize_t</name></type>
<name>bufferevent_get_max_single_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>BEV_UPCAST</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>max_single_write</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ev_ssize_t</name></type>
<name>bufferevent_get_max_to_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>bufferevent_get_read_max_</name><argument_list>(<argument><expr><call><name>BEV_UPCAST</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ev_ssize_t</name></type>
<name>bufferevent_get_max_to_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>bufferevent_get_write_max_</name><argument_list>(<argument><expr><call><name>BEV_UPCAST</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name><name>struct</name> <name>ev_token_bucket_cfg</name></name> <modifier>*</modifier></type>
<name>bufferevent_get_token_bucket_cfg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bufev_private</name> <init>= <expr><call><name>BEV_UPCAST</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ev_token_bucket_cfg</name></name> <modifier>*</modifier></type><name>cfg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bufev_private</name><operator>-&gt;</operator><name>rate_limiting</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cfg</name> <operator>=</operator> <name><name>bufev_private</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>cfg</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cfg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>cfg</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>ev_ssize_t</name></type>
<name>bufferevent_rate_limit_group_get_read_limit</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>bufferevent_rate_limit_group</name></name> <modifier>*</modifier></type><name>grp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LOCK_GROUP</name><argument_list>(<argument><expr><name>grp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>grp</name><operator>-&gt;</operator><name>rate_limit</name><operator>.</operator><name>read_limit</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNLOCK_GROUP</name><argument_list>(<argument><expr><name>grp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>ev_ssize_t</name></type>
<name>bufferevent_rate_limit_group_get_write_limit</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>bufferevent_rate_limit_group</name></name> <modifier>*</modifier></type><name>grp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LOCK_GROUP</name><argument_list>(<argument><expr><name>grp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>grp</name><operator>-&gt;</operator><name>rate_limit</name><operator>.</operator><name>write_limit</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNLOCK_GROUP</name><argument_list>(<argument><expr><name>grp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_decrement_read_limit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>ev_ssize_t</name></type> <name>decr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>old_limit</name></decl>, <decl><type ref="prev"/><name>new_limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bevp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bevp</name> <operator>=</operator> <call><name>BEV_UPCAST</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>bevp</name><operator>-&gt;</operator><name>rate_limiting</name></name> <operator>&amp;&amp;</operator> <name><name>bevp</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>cfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>old_limit</name> <operator>=</operator> <name><name>bevp</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>limit</name><operator>.</operator><name>read_limit</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_limit</name> <operator>=</operator> <operator>(</operator><name><name>bevp</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>limit</name><operator>.</operator><name>read_limit</name></name> <operator>-=</operator> <name>decr</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>old_limit</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>new_limit</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_suspend_read_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>BEV_SUSPEND_BW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>event_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bevp</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>refill_bucket_event</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>bevp</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>tick_timeout</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>old_limit</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>new_limit</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>bevp</name><operator>-&gt;</operator><name>write_suspended</name></name> <operator>&amp;</operator> <name>BEV_SUSPEND_BW</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bevp</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>refill_bucket_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bufferevent_unsuspend_read_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>BEV_SUSPEND_BW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_decrement_write_limit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>ev_ssize_t</name></type> <name>decr</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>old_limit</name></decl>, <decl><type ref="prev"/><name>new_limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bevp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BEV_LOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bevp</name> <operator>=</operator> <call><name>BEV_UPCAST</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>bevp</name><operator>-&gt;</operator><name>rate_limiting</name></name> <operator>&amp;&amp;</operator> <name><name>bevp</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>cfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>old_limit</name> <operator>=</operator> <name><name>bevp</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>limit</name><operator>.</operator><name>write_limit</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_limit</name> <operator>=</operator> <operator>(</operator><name><name>bevp</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>limit</name><operator>.</operator><name>write_limit</name></name> <operator>-=</operator> <name>decr</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>old_limit</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>new_limit</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_suspend_write_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>BEV_SUSPEND_BW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>event_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bevp</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>refill_bucket_event</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>bevp</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>tick_timeout</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>old_limit</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>new_limit</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>bevp</name><operator>-&gt;</operator><name>read_suspended</name></name> <operator>&amp;</operator> <name>BEV_SUSPEND_BW</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bevp</name><operator>-&gt;</operator><name>rate_limiting</name><operator>-&gt;</operator><name>refill_bucket_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bufferevent_unsuspend_write_</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>BEV_SUSPEND_BW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>BEV_UNLOCK</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_rate_limit_group_decrement_read</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>bufferevent_rate_limit_group</name></name> <modifier>*</modifier></type><name>grp</name></decl></parameter>, <parameter><decl><type><name>ev_ssize_t</name></type> <name>decr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>old_limit</name></decl>, <decl><type ref="prev"/><name>new_limit</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LOCK_GROUP</name><argument_list>(<argument><expr><name>grp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>old_limit</name> <operator>=</operator> <name><name>grp</name><operator>-&gt;</operator><name>rate_limit</name><operator>.</operator><name>read_limit</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_limit</name> <operator>=</operator> <operator>(</operator><name><name>grp</name><operator>-&gt;</operator><name>rate_limit</name><operator>.</operator><name>read_limit</name></name> <operator>-=</operator> <name>decr</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>old_limit</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>new_limit</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bev_group_suspend_reading_</name><argument_list>(<argument><expr><name>grp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>old_limit</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>new_limit</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bev_group_unsuspend_reading_</name><argument_list>(<argument><expr><name>grp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>UNLOCK_GROUP</name><argument_list>(<argument><expr><name>grp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_rate_limit_group_decrement_write</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>bufferevent_rate_limit_group</name></name> <modifier>*</modifier></type><name>grp</name></decl></parameter>, <parameter><decl><type><name>ev_ssize_t</name></type> <name>decr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ev_ssize_t</name></type> <name>old_limit</name></decl>, <decl><type ref="prev"/><name>new_limit</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LOCK_GROUP</name><argument_list>(<argument><expr><name>grp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>old_limit</name> <operator>=</operator> <name><name>grp</name><operator>-&gt;</operator><name>rate_limit</name><operator>.</operator><name>write_limit</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_limit</name> <operator>=</operator> <operator>(</operator><name><name>grp</name><operator>-&gt;</operator><name>rate_limit</name><operator>.</operator><name>write_limit</name></name> <operator>-=</operator> <name>decr</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>old_limit</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>new_limit</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bev_group_suspend_writing_</name><argument_list>(<argument><expr><name>grp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>old_limit</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>new_limit</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bev_group_unsuspend_writing_</name><argument_list>(<argument><expr><name>grp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>UNLOCK_GROUP</name><argument_list>(<argument><expr><name>grp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>bufferevent_rate_limit_group_get_totals</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_rate_limit_group</name></name> <modifier>*</modifier></type><name>grp</name></decl></parameter>,
<parameter><decl><type><name>ev_uint64_t</name> <modifier>*</modifier></type><name>total_read_out</name></decl></parameter>, <parameter><decl><type><name>ev_uint64_t</name> <modifier>*</modifier></type><name>total_written_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name>grp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>total_read_out</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>total_read_out</name> <operator>=</operator> <name><name>grp</name><operator>-&gt;</operator><name>total_read</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>total_written_out</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>total_written_out</name> <operator>=</operator> <name><name>grp</name><operator>-&gt;</operator><name>total_written</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>bufferevent_rate_limit_group_reset_totals</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_rate_limit_group</name></name> <modifier>*</modifier></type><name>grp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>grp</name><operator>-&gt;</operator><name>total_read</name></name> <operator>=</operator> <name><name>grp</name><operator>-&gt;</operator><name>total_written</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_ratelim_init_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_private</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>bev</name><operator>-&gt;</operator><name>rate_limiting</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bev</name><operator>-&gt;</operator><name>max_single_read</name></name> <operator>=</operator> <name>MAX_SINGLE_READ_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bev</name><operator>-&gt;</operator><name>max_single_write</name></name> <operator>=</operator> <name>MAX_SINGLE_WRITE_DEFAULT</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
