<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/bufferevent_pair.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event-config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"evconfig-private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/buffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/bufferevent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/bufferevent_struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"defer-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bufferevent-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mm-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util-internal.h"</cpp:file></cpp:include>

<struct>struct <name>bufferevent_pair</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_private</name></name></type> <name>bev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_pair</name></name> <modifier>*</modifier></type><name>partner</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_pair</name></name> <modifier>*</modifier></type><name>unlinked_partner</name></decl>;</decl_stmt>
}</block>;</struct>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>bufferevent_pair</name></name> <modifier>*</modifier></type>
<name>upcast</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_pair</name></name> <modifier>*</modifier></type><name>bev_p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bev</name><operator>-&gt;</operator><name>be_ops</name></name> <operator>!=</operator> <operator>&amp;</operator><name>bufferevent_ops_pair</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bev_p</name> <operator>=</operator> <call><name>EVUTIL_UPCAST</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr>struct <name>bufferevent_pair</name></expr></argument>, <argument><expr><name><name>bev</name><operator>.</operator><name>bev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVUTIL_ASSERT</name><argument_list>(<argument><expr><name><name>bev_p</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name><operator>.</operator><name>be_ops</name></name> <operator>==</operator> <operator>&amp;</operator><name>bufferevent_ops_pair</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>bev_p</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>downcast</name><parameter_list>(<parameter><type><name>bev_pair</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(&amp;(bev_pair)-&gt;bev.bev)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>incref_and_lock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_pair</name></name> <modifier>*</modifier></type><name>bevp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bufferevent_incref_and_lock_</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bevp</name> <operator>=</operator> <call><name>upcast</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bevp</name><operator>-&gt;</operator><name>partner</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_incref_and_lock_</name><argument_list>(<argument><expr><call><name>downcast</name><argument_list>(<argument><expr><name><name>bevp</name><operator>-&gt;</operator><name>partner</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>decref_and_unlock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_pair</name></name> <modifier>*</modifier></type><name>bevp</name> <init>= <expr><call><name>upcast</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bevp</name><operator>-&gt;</operator><name>partner</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bufferevent_decref_and_unlock_</name><argument_list>(<argument><expr><call><name>downcast</name><argument_list>(<argument><expr><name><name>bevp</name><operator>-&gt;</operator><name>partner</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bufferevent_decref_and_unlock_</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>be_pair_outbuf_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evbuffer_cb_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>bufferevent_pair</name></name> <modifier>*</modifier></type>
<name>bufferevent_pair_elt_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_pair</name></name> <modifier>*</modifier></type><name>bufev</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name>bufev</name> <operator>=</operator> <call><name>mm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>bufferevent_pair</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bufferevent_init_common_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bufev</name><operator>-&gt;</operator><name>bev</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufferevent_ops_pair</name></expr></argument>,
<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mm_free</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>evbuffer_add_cb</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name><operator>.</operator><name>output</name></name></expr></argument>, <argument><expr><name>be_pair_outbuf_cb</name></expr></argument>, <argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_free</name><argument_list>(<argument><expr><call><name>downcast</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bufferevent_init_generic_timeout_cbs_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bufev</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>bev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>bufev</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bufferevent_pair_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name><name>pair</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_pair</name></name> <modifier>*</modifier></type><name>bufev1</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bufev2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmp_options</name></decl>;</decl_stmt>

<expr_stmt><expr><name>options</name> <operator>|=</operator> <name>BEV_OPT_DEFER_CALLBACKS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_options</name> <operator>=</operator> <name>options</name> <operator>&amp;</operator> <operator>~</operator><name>BEV_OPT_THREADSAFE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bufev1</name> <operator>=</operator> <call><name>bufferevent_pair_elt_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bufev1</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bufev2</name> <operator>=</operator> <call><name>bufferevent_pair_elt_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>tmp_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bufev2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bufferevent_free</name><argument_list>(<argument><expr><call><name>downcast</name><argument_list>(<argument><expr><name>bufev1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;</operator> <name>BEV_OPT_THREADSAFE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bufferevent_enable_locking_</name><argument_list>(<argument><expr><call><name>downcast</name><argument_list>(<argument><expr><name>bufev2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bufev1</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bufev1</name><operator>-&gt;</operator><name>partner</name></name> <operator>=</operator> <name>bufev2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bufev2</name><operator>-&gt;</operator><name>partner</name></name> <operator>=</operator> <name>bufev1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>evbuffer_freeze</name><argument_list>(<argument><expr><call><name>downcast</name><argument_list>(<argument><expr><name>bufev1</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>input</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_freeze</name><argument_list>(<argument><expr><call><name>downcast</name><argument_list>(<argument><expr><name>bufev1</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>output</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_freeze</name><argument_list>(<argument><expr><call><name>downcast</name><argument_list>(<argument><expr><name>bufev2</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>input</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_freeze</name><argument_list>(<argument><expr><call><name>downcast</name><argument_list>(<argument><expr><name>bufev2</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>output</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>downcast</name><argument_list>(<argument><expr><name>bufev1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>downcast</name><argument_list>(<argument><expr><name>bufev2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>be_pair_transfer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ignore_wm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>dst_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>evbuffer_unfreeze</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_unfreeze</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>wm_read</name><operator>.</operator><name>high</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dst_size</name> <operator>=</operator> <call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dst_size</name> <operator>&lt;</operator> <name><name>dst</name><operator>-&gt;</operator><name>wm_read</name><operator>.</operator><name>high</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>wm_read</name><operator>.</operator><name>high</name></name> <operator>-</operator> <name>dst_size</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_remove_buffer</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ignore_wm</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_buffer</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_add_buffer</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BEV_RESET_GENERIC_READ_TIMEOUT</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BEV_RESET_GENERIC_WRITE_TIMEOUT</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BEV_DEL_GENERIC_WRITE_TIMEOUT</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bufferevent_trigger_nolock_</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bufferevent_trigger_nolock_</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>done</name>:</label>
<expr_stmt><expr><call><name>evbuffer_freeze</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evbuffer_freeze</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>be_pair_wants_to_talk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent_pair</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>bufferevent_pair</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>downcast</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>enabled</name> <operator>&amp;</operator> <name>EV_WRITE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>downcast</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>enabled</name> <operator>&amp;</operator> <name>EV_READ</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>dst</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>read_suspended</name></name> <operator>&amp;&amp;</operator>
<call><name>evbuffer_get_length</name><argument_list>(<argument><expr><call><name>downcast</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>be_pair_outbuf_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>outbuf</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>evbuffer_cb_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_pair</name></name> <modifier>*</modifier></type><name>bev_pair</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_pair</name></name> <modifier>*</modifier></type><name>partner</name> <init>= <expr><name><name>bev_pair</name><operator>-&gt;</operator><name>partner</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>incref_and_lock</name><argument_list>(<argument><expr><call><name>downcast</name><argument_list>(<argument><expr><name>bev_pair</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>n_added</name></name> <operator>&gt;</operator> <name><name>info</name><operator>-&gt;</operator><name>n_deleted</name></name> <operator>&amp;&amp;</operator> <name>partner</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>be_pair_wants_to_talk</name><argument_list>(<argument><expr><name>bev_pair</name></expr></argument>, <argument><expr><name>partner</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>be_pair_transfer</name><argument_list>(<argument><expr><call><name>downcast</name><argument_list>(<argument><expr><name>bev_pair</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>downcast</name><argument_list>(<argument><expr><name>partner</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>decref_and_unlock</name><argument_list>(<argument><expr><call><name>downcast</name><argument_list>(<argument><expr><name>bev_pair</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>be_pair_enable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bufev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_pair</name></name> <modifier>*</modifier></type><name>bev_p</name> <init>= <expr><call><name>upcast</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_pair</name></name> <modifier>*</modifier></type><name>partner</name> <init>= <expr><name><name>bev_p</name><operator>-&gt;</operator><name>partner</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>incref_and_lock</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_READ</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BEV_RESET_GENERIC_READ_TIMEOUT</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>events</name> <operator>&amp;</operator> <name>EV_WRITE</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name><name>bufev</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BEV_RESET_GENERIC_WRITE_TIMEOUT</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>events</name> <operator>&amp;</operator> <name>EV_READ</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>partner</name> <operator>&amp;&amp;</operator>
<call><name>be_pair_wants_to_talk</name><argument_list>(<argument><expr><name>partner</name></expr></argument>, <argument><expr><name>bev_p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>be_pair_transfer</name><argument_list>(<argument><expr><call><name>downcast</name><argument_list>(<argument><expr><name>partner</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bufev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>events</name> <operator>&amp;</operator> <name>EV_WRITE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>partner</name> <operator>&amp;&amp;</operator>
<call><name>be_pair_wants_to_talk</name><argument_list>(<argument><expr><name>bev_p</name></expr></argument>, <argument><expr><name>partner</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>be_pair_transfer</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>, <argument><expr><call><name>downcast</name><argument_list>(<argument><expr><name>partner</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>decref_and_unlock</name><argument_list>(<argument><expr><name>bufev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>be_pair_disable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_READ</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BEV_DEL_GENERIC_READ_TIMEOUT</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_WRITE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BEV_DEL_GENERIC_WRITE_TIMEOUT</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>be_pair_unlink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_pair</name></name> <modifier>*</modifier></type><name>bev_p</name> <init>= <expr><call><name>upcast</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bev_p</name><operator>-&gt;</operator><name>partner</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bev_p</name><operator>-&gt;</operator><name>unlinked_partner</name></name> <operator>=</operator> <name><name>bev_p</name><operator>-&gt;</operator><name>partner</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bev_p</name><operator>-&gt;</operator><name>partner</name><operator>-&gt;</operator><name>partner</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bev_p</name><operator>-&gt;</operator><name>partner</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>be_pair_destruct</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_pair</name></name> <modifier>*</modifier></type><name>bev_p</name> <init>= <expr><call><name>upcast</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
















<if_stmt><if>if <condition>(<expr><name><name>bev_p</name><operator>-&gt;</operator><name>unlinked_partner</name></name> <operator>&amp;&amp;</operator> <name><name>bev_p</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>own_lock</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bev_p</name><operator>-&gt;</operator><name>unlinked_partner</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>own_lock</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bev_p</name><operator>-&gt;</operator><name>bev</name><operator>.</operator><name>own_lock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bev_p</name><operator>-&gt;</operator><name>unlinked_partner</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>be_pair_flush</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>iotype</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>bufferevent_flush_mode</name></name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_pair</name></name> <modifier>*</modifier></type><name>bev_p</name> <init>= <expr><call><name>upcast</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>partner</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bev_p</name><operator>-&gt;</operator><name>partner</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>BEV_NORMAL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>incref_and_lock</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>partner</name> <operator>=</operator> <call><name>downcast</name><argument_list>(<argument><expr><name><name>bev_p</name><operator>-&gt;</operator><name>partner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>iotype</name> <operator>&amp;</operator> <name>EV_READ</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>be_pair_transfer</name><argument_list>(<argument><expr><name>partner</name></expr></argument>, <argument><expr><name>bev</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>iotype</name> <operator>&amp;</operator> <name>EV_WRITE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>be_pair_transfer</name><argument_list>(<argument><expr><name>bev</name></expr></argument>, <argument><expr><name>partner</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>BEV_FINISHED</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>short</name></type> <name>what</name> <init>= <expr><name>BEV_EVENT_EOF</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>iotype</name> <operator>&amp;</operator> <name>EV_READ</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>what</name> <operator>|=</operator> <name>BEV_EVENT_WRITING</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>iotype</name> <operator>&amp;</operator> <name>EV_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>what</name> <operator>|=</operator> <name>BEV_EVENT_READING</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bufferevent_run_eventcb_</name><argument_list>(<argument><expr><name>partner</name></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>decref_and_unlock</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type>
<name>bufferevent_pair_get_partner</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>bev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent_pair</name></name> <modifier>*</modifier></type><name>bev_p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufferevent</name></name> <modifier>*</modifier></type><name>partner</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bev_p</name> <operator>=</operator> <call><name>upcast</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>bev_p</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>incref_and_lock</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bev_p</name><operator>-&gt;</operator><name>partner</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>partner</name> <operator>=</operator> <call><name>downcast</name><argument_list>(<argument><expr><name><name>bev_p</name><operator>-&gt;</operator><name>partner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>decref_and_unlock</name><argument_list>(<argument><expr><name>bev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>partner</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bufferevent_ops</name></name></type> <name>bufferevent_ops_pair</name> <init>= <expr><block>{
<expr><literal type="string">"pair_elt"</literal></expr>,
<expr><call><name>evutil_offsetof</name><argument_list>(<argument><expr>struct <name>bufferevent_pair</name></expr></argument>, <argument><expr><name><name>bev</name><operator>.</operator><name>bev</name></name></expr></argument>)</argument_list></call></expr>,
<expr><name>be_pair_enable</name></expr>,
<expr><name>be_pair_disable</name></expr>,
<expr><name>be_pair_unlink</name></expr>,
<expr><name>be_pair_destruct</name></expr>,
<expr><name>bufferevent_generic_adj_timeouts_</name></expr>,
<expr><name>be_pair_flush</name></expr>,
<expr><name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
