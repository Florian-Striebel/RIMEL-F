<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libevent/evrpc-internal.h">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVRPC_INTERNAL_H_INCLUDED_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVRPC_INTERNAL_H_INCLUDED_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event2/http.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http-internal.h"</cpp:file></cpp:include>

<struct_decl>struct <name>evrpc</name>;</struct_decl>
<struct_decl>struct <name>evrpc_request_wrapper</name>;</struct_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVRPC_URI_PREFIX</name></cpp:macro> <cpp:value>"/.rpc."</cpp:value></cpp:define>

<struct>struct <name>evrpc_hook</name> <block>{
<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>evrpc_hook</argument>)</argument_list></macro> <expr_stmt><expr><name>next</name></expr>;</expr_stmt>




<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>process</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>process_arg</name></decl>;</decl_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>TAILQ_HEAD</name><argument_list>(<argument><expr><name>evrpc_hook_list</name></expr></argument>, <argument><expr><name>evrpc_hook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<struct_decl>struct <name>evrpc_hook_ctx</name>;</struct_decl>
<expr_stmt><expr><call><name>TAILQ_HEAD</name><argument_list>(<argument><expr><name>evrpc_pause_list</name></expr></argument>, <argument><expr><name>evrpc_hook_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<struct>struct <name>evrpc_hooks_</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_hook_list</name></name></type> <name>in_hooks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_hook_list</name></name></type> <name>out_hooks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_pause_list</name></name></type> <name>pause_requests</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>input_hooks</name></cpp:macro> <cpp:value>common.in_hooks</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>output_hooks</name></cpp:macro> <cpp:value>common.out_hooks</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>paused_requests</name></cpp:macro> <cpp:value>common.pause_requests</cpp:value></cpp:define>

<struct>struct <name>evrpc_base</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_hooks_</name></name></type> <name>common</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>evhttp</name></name><modifier>*</modifier></type> <name>http_server</name></decl>;</decl_stmt>


<macro><name>TAILQ_HEAD</name><argument_list>(<argument>evrpc_list</argument>, <argument>evrpc</argument>)</argument_list></macro> <expr_stmt><expr><name>registered_rpcs</name></expr>;</expr_stmt>
}</block>;</struct>

<struct_decl>struct <name>evrpc_req_generic</name>;</struct_decl>
<function_decl><type><name>void</name></type> <name>evrpc_reqstate_free_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_req_generic</name></name><modifier>*</modifier></type> <name>rpc_state</name></decl></parameter>)</parameter_list>;</function_decl>


<struct>struct <name>evrpc_pool</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_hooks_</name></name></type> <name>common</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>evconq</name></name></type> <name>connections</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>timeout</name></decl>;</decl_stmt>

<expr_stmt><expr><call><call><name>TAILQ_HEAD</name><argument_list>(<argument><expr><name>evrpc_requestq</name></expr></argument>, <argument><expr><name>evrpc_request_wrapper</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>requests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>;</struct>

<struct>struct <name>evrpc_hook_ctx</name> <block>{
<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>evrpc_hook_ctx</argument>)</argument_list></macro> <expr_stmt><expr><name>next</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>EVRPC_HOOK_RESULT</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<struct>struct <name>evrpc_meta</name> <block>{
<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>evrpc_meta</argument>)</argument_list></macro> <expr_stmt><expr><name>next</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>data_size</name></decl>;</decl_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>TAILQ_HEAD</name><argument_list>(<argument><expr><name>evrpc_meta_list</name></expr></argument>, <argument><expr><name>evrpc_meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<struct>struct <name>evrpc_hook_meta</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_meta_list</name></name></type> <name>meta_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl>;</decl_stmt>
}</block>;</struct>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>evrpc_hook_associate_meta_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_hook_meta</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pctx</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>evrpc_hook_meta</name></name> <modifier>*</modifier></type><name>evrpc_hook_meta_new_</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>evrpc_hook_context_free_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_hook_meta</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>




<struct>struct <name>evrpc_req_generic</name> <block>{




<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_hook_meta</name></name> <modifier>*</modifier></type><name>hook_meta</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>request</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name><name>struct</name> <name>evrpc</name></name> <modifier>*</modifier></type><name>rpc</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name><modifier>*</modifier></type> <name>http_req</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name><modifier>*</modifier></type> <name>rpc_data</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>evrpc_request_wrapper</name> <block>{




<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_hook_meta</name></name> <modifier>*</modifier></type><name>hook_meta</name></decl>;</decl_stmt>

<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>evrpc_request_wrapper</argument>)</argument_list></macro> <expr_stmt><expr><name>next</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>evrpc_pool</name></name> <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_connection</name></name> <modifier>*</modifier></type><name>evcon</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name></type> <name>ev_timeout</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evrpc_status</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>request</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>request</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>request_marshal</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>reply_clear</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>reply_unmarshal</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>evbuffer</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
